{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ea4e303a-df0a-49b0-bd91-326363b0235a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6c951f54-43c1-4029-bf06-4d3f81ad79f2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6364fe56-3167-4853-be8b-8f1e175fdb0e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "77e35e60-0673-49f6-bf90-4279c57a64f7"
                }
              }
            ]
          },
          {
            "id": "caa0715f-ed8d-42d2-91c5-db859b6f82b9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "25c84da1-ce99-4d6c-b30f-df30e8c8928d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e3093ed6-2f1f-4620-a658-0b548cad9e73"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6dad73ae-220b-4f25-a0ca-f7bc0f86e8da",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8df8cb8a-ff0d-4880-af87-b78c437ef058",
            "name": "Positive Testing",
            "item": [
              {
                "id": "253ea9e0-caae-4690-95dd-be69871938dd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d64e1778-494d-4ea2-8507-2c2fff25ddf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5a2ebe7-6858-4e7e-a8fb-1715a649ad4f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2a13dc3-1bbd-4058-90e8-d90752a51cfd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0983703c-3be8-435b-8657-02b4c5b25418"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1367416e-1eda-43b9-b5b3-a9ce50a60c2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3554025b-78f4-48d2-a0db-f09c7f905187"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3060659-d510-416e-9cfe-51321004bf60",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6c92e71c-579f-4373-9ba8-33b682ab3d38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89c6ccbc-b5eb-423c-852f-03e283ff546f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aef48eaf-3f6d-48f6-b89d-c8bdf1fb274f"
            }
          }
        ]
      },
      {
        "id": "31b8af5a-df6f-47ca-8707-afc597cf4e2b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "19185254-577b-452a-911c-87e66f2683b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ec50b53-7295-4c9a-ab1e-ab1f6e0b95df",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d2d3d42-3635-4bfd-9464-c5a1e748234b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862d9de2-a62d-4256-a08e-d67e0a2d9048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e555417f-0589-4829-8493-64126526c944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38d4d29-8b99-4c1a-a0fc-779ab5ebf8d2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fd151a-6a0f-461b-a8d6-64040128e2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92ba035e-d90f-40ce-b9e3-7968b0e85b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b0384a-a6e0-482f-bf77-0d17f56a5026",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e38e9c9-37f4-45d8-8dcd-76d17833bb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "536381d7-5dee-4f07-97ff-04cd4aa5273c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d36f0384-117a-4f58-9c85-0a77fdc9e37c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a44deb5-f208-4c50-a019-936b9e3b8c10",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ca2c8b-c665-466c-828f-0e946690bd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bfa1c6e-e366-4b01-84b9-028d875a0dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2269c3ca-8c5b-4748-883d-c7ec027ae4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c977aa00-3da8-4aac-91c4-176d99e9d767"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "623f115d-b706-4ba5-acaf-bd677960b8af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5615f95-27f4-4368-843e-794014403982",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3145d29-50c9-4865-95a1-3e2f6d99cfdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2de6644c-9d8c-4d4b-a561-64d607665525"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbc8595a-39e8-47ca-898d-4f94cf3bc655",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9bcf0575-fad6-45a8-9125-c20a6242835c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "000342c9-d83a-4779-aad8-44a7fa43e174",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9dba9fe-0558-4de3-88ee-535b9ffde8bb"
            }
          }
        ]
      },
      {
        "id": "b4750b54-1ce1-4c1e-85dc-9bd0985f358a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "35af5ff0-8621-4025-bf04-e6f39d042041",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5e3a8e5-ed37-4716-8405-aa31e138fef8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "19998a0c-134d-47ab-88df-05e8c0b8d929",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a206d788-b78f-4433-ba07-ca342c6228c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc09f38-7c5c-4b5b-bb79-07f7c1d3f137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb01957-80e8-4c34-9044-86d7f61a6139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "486d7be2-b640-40b4-823b-7e6ba0a71fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d3f3d5-0e82-42c1-bac6-4d86608bf0b3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634882c6-895a-4e97-b6ef-3665f6514ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c28ccbc-4d05-4dc2-b7a1-5497ee3da802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba348f8-9b82-49f7-a538-1c622248f9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5cd1685-c7ce-42fd-94ec-6bb0c0468033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb43a197-6949-4452-923f-d9310f134916",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc768ccc-f311-44fc-938a-14128a6e358b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644a0de3-0adb-47d4-9e51-44451679285e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d48ad48-a577-49ab-ac4f-6ca36b92ef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e3175a7-92b8-498f-aff7-1085c3ae6d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3b9fde-0bcf-462a-bb00-abf43cdcb5da",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382aa58b-370c-4137-99d0-859b8491a6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9bd9eba-8d54-4790-8f44-8bcb135054bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0036cc-5f2b-4d70-acde-0bad77b0aeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af496514-e819-4acd-bea4-77f0c62f5b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9c6b5b-8a63-4c09-8de8-27d989dbd049",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2f7ab6-6cbc-49a5-a059-4de2e64ad51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e44bf60-ddee-4777-a762-abddec674b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cae7e1-f798-43f3-a85f-572a85e64fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15fad663-9356-41f7-be69-b09cbd9d7b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f82d5b-8654-4725-840c-f513f7096413",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e75b628-9494-46a1-8c66-d6c935ef92cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17b8b15-4ce7-4143-9e13-56a6fed84705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0445e860-24c0-457c-b435-5d735dedbc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "043aca4d-8903-4c15-9dd9-ebfda5cd65fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b63fa9-defd-4a0c-902b-f18615ca836b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddea1ca-7510-4778-bf98-2bd0e251c133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa52bf6a-d30d-45b2-b651-da7201324ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbd1148-486a-4176-af2b-e89535976cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "548659be-f497-4f6f-b3da-e4b5a76add2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac86093f-c7b7-4543-ba0e-1753f8a7d884",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0444e81d-3da1-400b-b047-5ecd64b9873b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c020ff3-1547-4820-9d5c-fd677d286e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdf2744-46bb-4fca-a676-72a15c00e4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b31f9caf-ab25-46f5-8c85-60a0c1833182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965ff8b5-196c-41d3-a683-1d75638def3f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10417e1e-b09d-4618-aa65-78147c295e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14c89db-4afd-4127-9989-e651403d711d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63251215-bc98-4671-a2af-91c02846ecdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df5e2b35-87f4-4e32-82b5-8d48f749673a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d7c61f-c6f8-44ca-8ea4-e0a63e1049e1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789e921e-6bec-47e9-8a1e-31b31a494244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6c3f51-39fc-453d-9f4f-439f1c8ca822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6147eef-3c5d-4d08-a109-04ceb412b8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b9ac7d8-ffac-4521-8778-28819bdb0bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40872262-62cb-4d78-93e0-81a31a8e0227",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f0d6e6-fa84-4936-839a-b0cd6d0866eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c707094-17af-48bf-ab52-4b281d34f4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55f05e7-f01c-45b3-8d6b-2004f6d4e6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7e8d8f6-70d7-4a0e-8ff3-611f22f37d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ff224c-32a9-452f-b9ae-c82618ef6b49",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6b8d73-3460-43d5-9879-a6198f3e4278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa83c4cb-96b4-4d53-aad6-1be16667ce4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5af43a4-107b-4f0b-a845-3d9191baa582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d8fd43a-49d3-46e3-9348-20da5ea9adec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c03352-44aa-4f1f-a02c-bc3ae4207439",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f41ad4-aa8d-4f47-aecf-bd3458f31d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2f8891-9504-4bef-afe9-fb3b8877a178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3c46c4-d5ea-426f-b8fc-8a0c8a01c2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84f4b904-4081-4e12-81e2-49b2ad151fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398c5023-b48c-4e7f-94f8-3ea0012ad48f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82ef40e-d3ce-498e-801e-66f42b1fdfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3581c3ca-1eda-4c34-a664-b7663892da1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8a5735-50ca-4ee4-9754-d66cae4bfaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edbc78ec-9f38-4c87-bf81-2e20c77421b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507e807a-30f1-4e1b-b16a-7991b8c2cfac",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac381ad0-809f-4a89-a7f7-e96a578089f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2277065-510c-4806-b543-2af2799b9cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e827bb34-70dd-4629-aa97-4d0abdb15607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa985b1b-303f-454d-83bb-d06692123cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5bdf95-5874-4571-bd76-6ac198e9554e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ccb812-90c0-497f-8443-6cd38ca3aa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae387689-beb0-48ea-b26e-ec2b1a8091e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9500225a-a603-403d-9d59-70b35f7ee775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5868036-f49b-4813-bf92-a857fc84b20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48959f08-5645-437d-af34-143bb6c1db87",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6514095-ab1e-40d1-be1a-3fc6df59ccf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde02f6e-0eb9-434d-97f4-12dfab74ac30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b591d25d-7677-4db9-92df-ba739809dcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c436b0ad-2641-4dac-8c75-747559dd57ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8970d1b-27e7-40f6-b036-6da48ca72df9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea727fb9-4420-43f1-919b-f7ab80f48b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c13110-4e57-4be9-aed8-6166fc58590f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb68613-c0ac-40df-adcd-d388af8a1dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "97837436-21d9-4f58-993f-72fb9849db3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c304827f-4552-41e9-85a1-54fec13793b0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d547d69-deec-48b7-87d6-b4e609ba2081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6af2646-b01e-4299-8369-21e39d1186d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a109a171-0e51-4fcd-a889-e7fba380cf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f48ff3c-30c4-4984-986c-e3fcc9c2eb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7c0e70-029f-4932-b48f-82428557aa5f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76b35c9-5df9-41af-9970-55aba3ea0a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0982046a-d1ec-4d29-89fa-afc2022aada8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcebcbc-5061-49f4-9cd5-fd50d0e52d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48ae8dcf-9d1b-4aa6-bb3b-bbe429e647af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014e72d0-4786-4362-9112-b06132a88b50",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35420969-4fe9-44a9-a1db-e65c9f2d10d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252286d7-7ba1-4d94-bca1-4c951511b48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37da120f-e9d9-4f6c-860c-33e16d557d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89195f7b-9ce5-48e8-ae5e-410b3c90527a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe79acf7-9d56-441f-9095-0b8ae754f333",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03c3f3b-97a8-4e9c-9bb7-892a584d3fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fbb21d-2d53-4e5b-a00d-9614380d6d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739938f6-29da-490a-9b36-1ff788265b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22e16980-eded-4107-b84e-d7988a262429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc400e9f-2950-4b4a-95d1-95e61e1d2c4e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bfa531-87bd-4988-a435-0089699f844e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688be8db-1876-4460-91ce-87f6887c7ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934e33f6-0d64-4e0f-bfe1-7f2afa85d469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d07dab0-bd97-4cfb-8396-1c211cd393ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2806fac2-da01-4e46-a244-d42e989d2d64",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1d2ca9-6456-492c-afdc-cf591ba3af20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2203255-63e0-45c3-971a-dc9c2d9b7f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed17f9f-d388-4894-ae22-137074cb15e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0461250e-fbc5-41fc-b3d1-686ad759fe65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf0bda8-b5a6-43af-af53-70772d1a39f6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4aad69-fa78-485e-aa9f-c482bd5ffb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a367c0bc-2c0a-4bc6-909f-8da39472555e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3de2e33-7593-4e47-a619-63406543f74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d1b6a8-3e5b-4545-844b-38c416b6a7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd03e7e-8886-4ad1-8312-0727de85319d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7dfb91-da93-446e-a042-8098014a6cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ba9865-39fa-4875-92be-bab18a8621ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4663e989-2ade-4dc2-8d79-e43b7e9b40a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff4eaa4-e3d7-4d2c-a0a9-686fc5ba4d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea53863-7761-4726-978f-aa18d4f7f460",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0120a152-81bb-48ab-8789-cc5045a5f8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ed0053-d786-4ba7-a0fe-c36f044bee50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ac7c19-ee93-4aaa-8025-84a572ccf369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f98fca7-9c0c-467a-931c-e5fae51bad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67b2b90-8aa5-44db-b92e-dfe4eefcf45e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e651af-7229-4881-9a58-cabb399ef11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6626383e-c10b-4c50-9c06-cf9739ff6e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1852e4-9a3f-4905-9d26-1d551500a77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7aaa00f-f984-453a-bf11-a02d517c59df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d1e4cb-a154-4daa-8fa1-a0a07fd4dae6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591f0bd6-af46-4ea0-9d6d-06ea0f7ae4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3303cb03-7970-4f9b-9aea-4005b37bd3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bf107b-66fd-4b64-aeaa-0f9291bdc1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5afa08e8-0369-465e-b366-09184101f285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb17bb5-e54b-4f9a-b524-21bf6449f78a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8898b5-75ca-43f2-98d3-6afca8152e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7c8370-bb6f-4c7d-a442-0e0e1fe0d517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a484e-47f0-47be-9ae8-125579c9dfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b29a12dc-0165-4f2d-a8c6-3c957679002c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef83cb9-56dc-440c-bb25-6fda306eb187",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cbabb6-4ab8-41b5-8a27-48cfbcbad900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf271a0-6afd-4305-9d93-0a145def5d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9377f6-dfbd-46ea-af49-e247cd8c453a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12abbb54-5f86-4b9e-b6bf-28e27117820b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6926acd-2519-4b4d-ac72-a5d575092951",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a4423c-b352-40f2-89da-03ce35523abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5079a4bd-a77c-47b0-a2be-a8de088708e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4511259b-850f-46a3-8493-3b684e7fdbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2f5cb4-52be-4178-a1e6-0f310c6f5ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13b873d-4360-4c7f-869a-7f31d7594097",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4fc06a-f419-4664-9241-0eb0ce793dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0109b9b4-d138-40e8-8387-8282893c9408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509bebc4-ae33-430d-aca5-03e93c9c13a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc50069-075d-41a4-b6b4-a4952c8b50f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c19b8aa-019d-425c-a87b-8d6f856b76a1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908f8f41-72bd-4fe6-b1bf-ccea5403a381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1899b411-f367-47ca-a1b5-97539a410f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f15b70d-b6e7-4890-8387-baccf9474256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1357a4b-4dce-44ae-a80c-ade2a94e66f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebebe01-d223-4130-85c0-c909bd0e1f48",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd96aea1-a517-4517-ab33-0aff415c3feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347a94ce-25cb-4b71-98bb-99446bd52e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca76996-93f9-4050-8928-7bf5b865f11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "99c024cc-cd6c-4b46-8e8e-721ad2f6820c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3627cecf-80d4-4e1d-91a4-d8c3cd408e07",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ba305c-c148-42b5-9b83-aedfa5d23963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c0b2e03-aa14-464d-a8fa-1bb9a1baeafe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ea343b-085e-4da6-8441-c4fa72eb71ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16e5239c-ee4f-4f95-92be-bdb659584945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15688bf6-71e8-49a1-91e8-fa5308755139",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b1096d-713a-4aa3-a1f7-8ed91afc2ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828ea439-548c-4ad9-89f8-99fbf64b31e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a425fe0-b086-414f-8186-48125460c9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa0dfee-c1ca-46c0-b4c3-8a803c32cb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f2e0d8-9be1-44db-b627-f383e0591066",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346d48a8-80b4-43da-bec6-2ca58a15c350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9541a1a7-a445-4d02-bf1d-65eaef1bc15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da6c0ff-8535-4011-b8ee-ed1b009c6cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e64acf7a-8f37-46e6-ae3e-45d486795c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79eab1c7-8fa7-46ff-9682-a52e32e73d63",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d61d85-1ae0-42bf-99c1-b34a1e7cca1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bac15b7-677d-41f2-bdfc-1bbde9090647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e4534d-1d79-4798-8dbc-233a0ae2ed63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "25d09fd8-8931-4114-9c57-02ddec325e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d14272-b4f8-4df3-9b87-8292fd319f09",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09aa680-7d9f-47c2-9f39-4f804a7c3dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4bb04e-9bec-404a-92e5-5a09397bed1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328841c6-8b1d-4369-ac81-8408564dac4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e638fd53-de67-49e5-b265-93a3c375ad1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6854c0f6-8f8d-43f9-b3b1-5acd7f1e9f54",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0c5d8b-3730-40e8-a97f-7de3563139e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3518f0-0994-4166-acb7-b72d8f6c5e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794e146c-3a0b-42d2-b8a5-31c6965337d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b42ff1cf-b0da-44ae-b579-e358a6cc40b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32c03e1-8d28-453c-ba4a-7c26f8fea4e1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d291a3-5b28-4a5f-bcec-1da649682d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd4f2c5-0118-4076-be47-2ccc0c2d678e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f573cd-6b53-4dc3-b55c-74e0bb2f584b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2c89dc88-7d8b-43b2-ab53-f956ae64f511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3364085-b7d1-4958-aba7-a2f8b2dc9aad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae1f0bb-f4f5-420f-a79c-87c9c0ee236a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc6cf9f-b9ce-4a20-80c2-f518d1a3310e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8469d3-b590-42b2-9211-afb223af059b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "09bdf57f-6f26-4209-8e8f-3d24c59f4489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd45937-ff11-4946-9bb7-4e2b684e714e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6757865e-1bd6-45a3-863c-f14541042ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522d1e70-db87-4da3-94ac-cf09dfb03aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8fc376-3fcd-4da2-9b55-206e4651f636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "976f9c8d-2a32-475b-b772-c9df66fd8538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6b3bc0-9cdf-48d5-8b38-01c25e0e3508",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7aadfe-77ec-4e5f-8285-4b6e5d105a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a5bfde-d69a-4952-b3e0-c89b769c9d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8105f152-fab3-4d5f-b5b0-96774b6a3c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "44cdf97d-607a-4407-bd8c-39224ddde441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4c4b59-c766-42e5-9342-270f4d82bbe5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c300a2f5-fe47-4978-b6e3-c50515d4abaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e621935d-9f84-4979-877d-15c91cd09897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8c4c1a-e7fd-4ae5-9234-d87f8387410f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c8b735-7481-42a1-a41f-49cdc5950637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d594bc-8963-4785-931b-8f76b7e2168a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8884d000-9d48-4b49-8328-8b26b72ff014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce28a093-79da-4395-ba26-0ba3d9c52a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733fca5d-b58e-427b-bd63-16b48d9f8b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c38f85-4ac2-4b89-a427-520d3ebc2224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60c607c-bfad-4105-beb9-74782de48eb5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9968b8bb-5a14-4bac-89af-7861f00dd678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9522693e-b4fd-4c4e-8b4b-30c5e9d86676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1240bcc9-61a6-48ea-a859-af32cdb0a439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e57c0e-8c16-423f-b9c2-657f647b71aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55377a30-6623-4dc0-99bd-aeff7d0a5331",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9da7ad-e79a-4d89-8ac8-ba1fe74f0224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e344e4b-49eb-418a-b0f8-108646a5960d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9e827f-cfa1-4921-a5da-17e57e704d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa747c64-9256-4730-9196-2ae1f5f8a264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84a0449-b68f-4cf5-b203-6fe64d3a6724",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07034847-a910-4961-a1b2-a39889b26b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d557731-3052-48b6-8a67-db99e4f839c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffe3fa3-6a67-4bd0-8c89-b9cbea17acde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ae959b-bb8a-4bd4-851c-4d0bc1fcbfb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a324a676-74f2-4c39-a358-4480293172b3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddf3137-9410-468d-884d-35ee41fc76da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce6550d-9cd9-49a8-a7e4-dd2d3a0fa3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c851fae1-4d45-4e76-94dc-ee828309ea5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "30351b2a-6719-4c92-8474-ca9217228c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2c3c1d-4ff1-4c90-909f-2af15c6aa545",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1805d09b-65e5-4036-9813-3fab5a34106d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3997e03-613d-4ff2-80ac-3a4bbdb82c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768a1f86-2f2d-4921-98b8-3d9821d866b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "150b9ba3-7efc-4bb6-b27d-6530a7a77f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c353ba2-2047-49da-89d1-e69439c3970f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76db9f2e-1ebf-4485-82ea-6cdda93fb821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6aec26-b28e-407e-9457-e65c782ea93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620da1a4-5df7-42fd-9f3e-b1e5c9a673ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43c5c1b8-b0ff-4928-a26f-d5c3cf2faca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9445cde5-b43b-4c31-84c3-1a47dd5e08a1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cea596-07d1-4fd5-ac87-5d432c3cef54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cd02706-db95-4612-88ed-73f073bc6295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3b4489-9608-475a-a27a-2c62c77566a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d95ccea3-9ee5-41ae-a94d-8b94e211819b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f52578f-5b8b-4572-8c30-0fea06214c13",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88818567-cd2f-45cf-b24c-9c6e7ed3b779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3faba11e-041a-4824-8b9d-7f0bce178f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54921c0b-6c47-419d-8133-53d277461c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "302bcbf1-bbe7-476a-b4e4-8df666b4786f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7531df14-5120-419e-84e2-a5bbe3632989",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dd33ec-5896-4c58-87c8-c2de52bf8b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44e70e7-df42-40cb-8130-c5ccdb437e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ad9efe-141a-4c32-9ebc-751293112b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "632bc140-389a-4989-9ccc-fdc841f98401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdea852-87b5-40a2-83b5-13ef9e0acaa0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23123c66-e233-4e26-ae3c-9f08ef78d2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a032b1-b07d-4de0-91ec-22219561c261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8dc312-024a-4739-86e9-e171904f5788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90cb2bde-aef2-4225-b9c3-5a8c954f7e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79891409-acc2-4dc2-8d90-b8921db65f30",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4aac9a2-7639-4c11-bb72-41cbc177382a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7f199e-3ca7-45df-8926-1cab5aac49e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e50cda8-aa2e-43b5-985c-dfe5ff16c402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4486e64a-e3d9-434d-8a9f-83bd4426f5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8891de-9a36-4506-b293-e9ccf2efe3dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c27aab-0a16-4e0d-b696-7a4315ae0001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672b6b8e-e8ba-4768-be02-2aceb7ae1b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f400643-9cf2-4f95-881d-b02e243c73e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "50f0522d-6dee-4f86-a3bf-e45ead243dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcdde32-6ced-4dc0-a651-f3a01cbf9e44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d98ffb-5f78-4b96-940a-83c30f8c5cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bde1ed-589c-4b21-8aaa-1f0445c68cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521b97b2-b91a-4bc4-b61a-f924abf16be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "da3cb038-d993-4fd7-a720-5962421fc668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e88afc-1f9e-41f4-933b-53b9f1e1154d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f514ba6-66df-42f4-9e1f-93df8dc990c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a435d61d-9fe5-4961-8d20-8c528e3f7bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42340066-c47f-4a09-bc4f-3c23c0f295f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "10bd18a8-9ac5-4606-8cc8-1617b17270d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4a12b7-1cd5-4834-b74c-eeca393e36fc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a51713-8715-4c82-ac09-092e24f5e268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbb5f7a-5967-4907-9b79-d1352bcf47f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd5a4d3-c87a-4e3e-b968-5414d19f2db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b85a415-afb4-4cb7-8d2b-77add28b657a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd903c28-f708-42e4-8e61-1985c016ebe3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d59777-d2f7-4a90-b80b-f474e515f5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a730ab-ff27-493e-9a77-66962e38200d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ea6412-7422-4c53-900c-3ea601230e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83d21411-0f93-44ef-ac57-6e1f59f8f62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4631105-075b-42ae-ae06-f365901ef174",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93e308c-2413-4b81-9f45-9590e88598b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a55b933-1086-45f1-b56b-7381686c5107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f2bdc6-5c67-4c8e-a525-bd0548b91693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf19c190-0feb-46c0-9cfc-6c4d98fc9858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6101ed-e306-4fc5-9646-5a0ac01cce6d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49075cb5-d863-4aae-8167-83a68e1f9ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954ee86e-1d86-49e0-bcb9-de3236dbaf8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0186fe-470c-48de-8455-59014da74991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca69c58-df6f-4529-b8f0-ae0649a9bdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9043ab-ed11-4058-b083-c5cbb2bbef42",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea94054-9133-4d77-933f-911734ce5fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8519dcdd-bd5d-42ec-8ac8-325ace4c4c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55092ad-67f3-488a-9e6f-0614f1001019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "464d8c2c-15c7-4dea-b797-55b07eef07d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02bbd8c-f5e8-4882-b62d-f822f1b1e806",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdab6f4-1734-4e98-aacb-cce1e65b94bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4d74d1-a29c-4653-9b63-e1d9d383ff1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9515fe-97a0-401b-b872-13f5a5c86725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd622ec-28ff-465d-8ef2-42711c904ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40a7d16-958e-473b-b11b-ac5aa0364654",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017c1ee6-2b65-4f22-a5a6-55782ff22ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673ca2cf-7e05-4339-aa13-cd28471f4edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdd10ce-7d76-47ad-a2ed-bdb9897c791f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd507bad-5b97-4b18-bb04-72167389c516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a32666-6c8d-4243-b51b-3ba4a3d24c90",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cced8268-8ec6-4215-add2-db2675cbe0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6553b637-a07b-47d4-a8f2-e7ad26b9fa6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8405ef04-ea67-42a9-962d-bc2e2f16c3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "731fc178-6af3-412d-9d8b-238a25e9a8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64029731-ccf2-423b-a6b0-8821cb81c9c6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1dbc59-7803-49ee-99b7-b03602a2dd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30362118-c3c9-460c-a35b-edbf9b4e3824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a39af5-685b-489e-9c22-91d5f6deff5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ffe66c-344d-4947-b7a2-aa5cbf0f660a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4ed596-d979-4f1e-ac93-e2775e85ec70",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f5c3f4-1a7f-4201-897a-4b130c2b5753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f585b4-e24e-45ac-8a74-f0c6a6e7af2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b04fd80-aee1-469a-968c-008cde5280b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53484eda-d113-4678-8efd-681791dd831d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd475dc-c327-4b63-bc47-82b307b4986d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c9fac2-f72f-45de-b89b-eca0e2c1a8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f29c6a54-beac-49ed-bad1-7e926d39a411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbaa9813-2a99-4f4c-a30e-5262a220d92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be34fc12-0d1c-4a8c-8590-9f161dbb6b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef04ba08-8a8e-462f-9dad-b02c92374cee",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8878cc4-2b7a-46d7-bc6a-eb9e78b8f840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ba6217-19b3-4da8-b8cf-6c7e25fa2411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a56f6ae-e456-4051-9d27-7b4711e4a579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b2e87a0-c38f-4a7e-84ab-3debb5c0ff89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b54b3ff-1dea-4d99-b45d-0ab16b361702",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6963b61-c3c7-4b70-b4b5-f5805e9d7477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961c9bf1-1d0e-4a53-9854-a809389293e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e476281b-1f30-44e5-818f-6ebbdf82b145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "afb6a051-e2ee-44ca-854f-0c446fc03fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebae2fa-b286-4041-a266-eac202cb1d7d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021bb666-8524-41d8-9ae0-c581bd12eeb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac131706-af7b-4038-919d-a238daf2562b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19434283-cce3-4e7b-acea-e438d20770e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61e9c0f3-5875-4b0a-a3b8-dbc12a8b4e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046edfcc-a4ce-4a43-82aa-928255a6cc50",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc3b8cf-8005-4804-93eb-5a91e549cb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea283d68-a84b-4bcb-868b-1df56f0b337d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e588eff6-b394-4ee2-aa1e-7b918a0e19fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e281ee-ac47-4582-9ec9-12d49658190e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6cc8e6-7b60-4759-8f20-e6cb88c214f8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3636dc2e-4698-44aa-9dfa-dceb7415393b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b40d8fb-db12-4c78-9f02-b2a5c6f47be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cceb842b-a69c-4ccd-a6b8-835fb6cd2ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64b398c2-3515-4c6f-beb3-e190135cf7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f265ada-1f41-42e8-9492-2841f5442923",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006b1144-fe12-474d-b677-097bc089253f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e26368b-f61d-4223-b5f5-3da9458f8f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c226de-6d9e-484c-b333-c4823db6b69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5b6a84-3fe6-414e-b114-3047e82622a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334d1ecf-0b7d-41e0-8f03-5ec031ae8166",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407d132f-ea5b-45df-84e4-765fae60d472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbade1c-3260-4a2c-b3fc-7898c0f57750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddfaedf-283f-4238-b92c-d1ed1088ac86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81284cb1-d07b-40f5-b396-248de4971434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c39fcb6-db56-491e-8f18-ece23278f97d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d13a8f-c84b-4c94-8cb0-e28b0acabab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904cb9d6-4dca-443f-a591-87ee50c78383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525576b8-3760-4e4c-9408-e90260f378c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aebaa798-04a7-44b4-86e6-23ca14aba946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5336e4a-fe62-4f5b-853c-702df4d14589",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f54f32-e760-48fd-8e90-43a4e574766e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14795e00-e67f-4f03-acfc-8ca01ffc4fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7f2984-3525-43ce-9b25-d12f29ed0c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "635618b0-03f4-4d05-86e0-0d5a249a3bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780d3c00-d395-4bf2-932f-61d6fd00452d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ad00ab-45f2-44e4-837d-2d5de0b6c7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d9ec13-93ae-4ca3-a4f8-61a1c1f634af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e341ec-7b65-4112-ae8d-ae4b28f06537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "093544c9-a162-4591-aa4a-df4a247829d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b732cb09-3511-4a3c-a6a2-69a484763e93",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6f0f26-d6f9-4aed-9f15-d3b932fdb76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc3cd22-f0e0-4289-8f17-a11eae6ec6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b19725-705c-4b33-9524-092868489b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72231d7-1f29-434d-9aa4-d8b81bec4645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d85986-88f2-457f-b7c1-4d910d5975b3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d35be7-4aa3-4948-aa84-0fa5355efdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783e0f13-e58d-4072-8a56-d323ca202a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca5aab7-c215-44c2-975a-2f98f762d22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09d146ff-6e98-4e50-a037-dc34b266d7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07950b3-1796-4395-9f30-ccabe7604f16",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20b4db1-3403-47c1-a926-37c5b2a863e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b8ed50-57b3-478c-bdec-814a36f9bf06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b737f6-6cba-4ffe-be2c-dcd0266bb424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22ce9a32-bb23-4149-b9bc-c569ba61aaa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a79a37-df9b-4be3-84b7-6ce2d36cea12",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db2701a-d50c-49dd-bb11-e191fe14ca71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b704df2-850d-43f0-9426-41f676dc460f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3163ca74-b3a0-4021-af5e-a9409758e0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8828e2c5-def4-4397-a00d-ca7f860e352c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa1b74f-82f9-40ea-864b-393b63270522",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0fd9b0-bf69-40b8-b216-d38c682f56d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3987ef1-ba7c-4e8e-88c3-926a4ec58d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dbee2d-b84d-4b9e-ab85-d7a5c4db9ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "247e07f5-06a5-40af-b6ba-5726a0f21923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f940e0ae-552d-4214-80cc-9b568887a327",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30418e17-fc0c-4171-bc4f-57abf0eb13fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb10f753-0146-4bac-a82f-757b4b18f1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6373bb3f-7d57-49fc-bd3f-8eb62503a4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c36c332-f8c0-4fb2-856b-91b56ee7287b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff68c8b-156e-482d-a551-3841c46f2a9b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5129cf-0d6c-43be-9dc5-e34c6b4db022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5536b8cc-3c80-4c22-b927-1c0409ce6e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9dd11f-bf41-4512-9a32-c183c29019a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0c6876-0885-40be-9678-d0cb6a2e9588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5e74a4-80f4-4273-9178-ba80eae7be52",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98929861-9abb-4ca4-842b-4b109623e862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7386425c-84c8-425f-9534-8da6c48e34b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a2498f-f3ce-4fe9-ada0-aee3236e3baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "891e9d1d-6f7a-488d-8d12-89dd69f7b9e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf89ff6-2844-4ad2-92d1-b2b5bb1e4cfb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28b2a6a-9528-4d13-bd99-128311a666f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313e5436-8b83-4474-b68b-de32572bfec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bef6169-bf9a-4690-a49d-8a4fa4dc1ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a60d8bb-7805-4b06-a997-7f1c13c2d058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50ed805-56d5-4c77-9d45-a073fd5b683c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befe21ee-f125-450b-ae33-6f2e4860b221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "081bd5c5-831b-4bd8-a35e-55b5021f9c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873c5133-f748-4874-9b64-c315b6095db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a00f6a-663c-4ec2-a4ad-1d04c5fe7fbe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5fa6918-b100-40b5-a5b9-69daecafcf9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9793035-5922-41e5-b2eb-79a131f1870a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ee95b7-61e3-48ce-b0a2-bea7b9079ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc7089e3-a3a3-4312-a5cd-84ce69ce429f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c93eb4-b6cc-47eb-a60f-f51319af7581",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e46fa885-5ceb-476b-8d8b-382b862a0b69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ed6ca7a-0895-49b6-a3f5-a4f3e8f93a3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc85ad5f-42aa-4b3e-9d7d-a9e95a55a23b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fbe369a-e229-407a-a569-30647b94fc32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb57b5f1-1b49-4c12-8bed-124f7128d2aa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "027fc34e-5b5f-4811-be05-558edf0fbdf7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e587817c-c101-4b71-9087-64ea3abc1227"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d91238cd-8e28-4376-93b4-41cf33d7332e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f850648c-28c4-413f-a8e8-648b03148eb8"
                }
              }
            ]
          },
          {
            "id": "7fb50c6f-3321-47c7-b52b-37167268497e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4f1b190-6ecc-408f-af15-1653a2d08c4b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84de151e-8a3d-41c3-87c6-eec3963b205b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93ccbba6-85a2-46f2-bccf-a5dada81fac8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8e36085-0108-408e-bd77-f0373aec25cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bab68181-be66-4711-acaa-f44357500dad"
                    }
                  }
                ]
              },
              {
                "id": "3473b19a-5acc-441a-9204-faa8c9afa871",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18893ed3-c991-48dc-9f8f-6abb9d0538aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c637cf7d-19b3-4557-b973-63be5ce27e9b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "284c8889-942a-48d2-8b41-ebd7bb1b009f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "675f5759-de86-419c-9bc1-f2b54bab6d4a"
                    }
                  }
                ]
              },
              {
                "id": "bc53d2ab-f245-43c5-b1e4-60ec8648b2db",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad7b6f33-9f8d-480c-b3c5-1df76ca68237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4351e12-efb7-4de1-ab5b-1d31c14dc6c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afc4804b-beee-49f5-87b2-d18fde95045a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64a22f34-d2fb-4d4e-ae68-b30d3a1478ec"
                    }
                  }
                ]
              },
              {
                "id": "4ecb5891-e903-4673-889b-4efcbd333384",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b571f6ce-11b6-4752-9c55-42ec5b884628",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb3a8aaa-fd69-430e-a986-e64faa98c266"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a145c730-d8fc-4b3f-8c80-be3cdd9c57eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f82ad611-719e-405d-884a-d7849280851d"
                    }
                  }
                ]
              },
              {
                "id": "237fcfe5-8911-4312-89c0-ce362c32d9d1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "599d16d6-623e-4b50-9624-4208ac2bde6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63da7ecf-f44c-4b5e-90ba-56b78f13232a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e69b277-ea81-4187-b33d-fbc133c357ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e7d3d9d2-08ee-4c43-bbc5-1bdec4418bbf"
                    }
                  }
                ]
              },
              {
                "id": "3e527ec7-6cc0-4477-9b8f-9e07ccfb5a70",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdcb57b8-ba16-455b-9d97-4c96fc13d7bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcaddd28-ad4f-4b6a-9e31-626405292540"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fddec756-a900-4c9c-bf08-f5380b350cea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "713e2fb9-4519-426b-b8e7-b9e8f73cfb48"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69966fd6-e187-4616-927a-10a6016f72d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ff1ae98-0e95-4d9a-b525-f048fa98807f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40eb801a-d713-4222-b3d5-873e65de39c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "481b92b5-4652-4d5b-b6f0-8b793b0ff994"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73d244fc-3a8e-4e89-8ae8-3956e11b52aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "08c96093-65a7-48d2-8452-0a6190410039"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bd3106f-680a-4542-8153-8511515984b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1c0ba38-bf81-4e27-93b5-4ac1276f4e22"
            }
          }
        ]
      },
      {
        "id": "cfdb2d5a-e17a-4fae-aa97-b46c7407c157",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "11e5959c-c8df-4f07-8c77-7209b7bbfd38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df23bed3-16ba-489d-9590-94a0b32dc50d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b86ba17e-a20d-48b2-8f44-f5c9ff2f1b53",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2ee605-1430-4a94-b36c-5fb1fdb228b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446ee94e-7b15-4b93-b9b8-37865bdbf1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2df8ee-f4a6-40fc-8722-daa2c2f9d7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0666e32-4258-45ab-8ef3-f48a052397cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e02c62-c776-4b8f-8586-7034634be830",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e152d155-f03c-4013-83ee-5475582c7986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01cc5a03-a427-4a02-924b-a397c96a438b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33eea3c-a3f8-4b65-bb98-2cccca20026e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04a27921-fdfc-46a0-a8bb-d41fa603dc3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c8e9e9-5ef8-491b-98b1-1acea2f03e94",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3915f996-051a-451a-b365-49fc29e97d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fca65a-3ba5-458b-bd6e-6662aadc7175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea0378a-145a-4464-b5a7-1208a8d6a75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b235cabd-8e42-4deb-b06c-90c420c109a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd5a5ab-a494-4657-90e0-a40d52f7689a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28136d1-ea17-43e3-8b24-2115882a52c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b495a8-bc64-4f27-9cf6-8088d1235b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cac26a-c2a8-4947-a9a4-efdd073b2c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b90baa2-2ea1-4fd6-ab75-9fc1a62e9772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bb2e72-ef5d-4698-ab4f-fc25f17418ff",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0d96b1-0ab7-42a6-819b-0b10b401fa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043607e3-c24b-41ac-9ea9-3833a4ceae36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e963dc-c25c-44c6-bbf5-54c603c66250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed8c952f-1414-4fcd-953c-30f1f47e6c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35f09e5-901e-4d27-86d2-4200448e17f6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561ffb85-a26b-4a4e-b616-2086e2dc61f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c457216-656e-408b-b2f6-f3203f93d734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0c4cbc-950c-498e-94c3-2fe36ecc8a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d21e5b33-9052-4e89-856c-38efbb2170f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1db13f-5fc8-4aa8-9023-fdaed37bd26a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b356e2fa-46de-46a1-aec0-6192e09156f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f9d319-a3e1-486b-a0a5-ff8d271e29ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062d5e73-9a96-45c1-8257-d5c5fcea1921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "09882f01-e958-41ff-b2a1-0a72deb8f0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71928f0e-f019-4738-9dc0-4cbbb45ed3ec",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a74df0a-354a-495a-93f1-1222687e0b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e050cb-567b-4aee-aa00-9af4776d80f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b69e77-dcce-458e-9aa5-51d2be5ecb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b1d295-7693-4998-939f-6d0a5c860edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec601394-33ce-446f-9c3f-fd4f39388b6b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbca8c4b-ec31-43be-bf4e-3e21b7d58871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96485db6-5e9f-41d9-afe5-c081c707b25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffe2883-f732-4485-8fbf-f6a020b37ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "158ced07-13cb-4a4e-b2c2-b81e6fd95f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394b13f5-8ae0-4d52-acd5-8f613ed97a42",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e39ebc-0ccf-480b-bdd6-2430febd6018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137ddec2-3f79-4704-bb8f-576c90e65bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e283529-a941-47e9-963d-51b848c57d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "990095de-0d32-4b18-afa9-e4a88e21dbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73b9f04-04c4-4b8e-a3f4-1b2253052b6d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba9eda2-0f3e-41dc-8120-ee5680f9d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110dadb5-60b0-4c7e-81d9-838661d96e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0bc578-b0a6-4af9-ba80-79f6d393c5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4188ec99-0b37-43e9-921f-06150043e25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9681215-1d73-4b71-9421-15096190ae4c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7209a92-b803-4fd6-a9ad-10f7760a55fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d42bf9c-8843-4d9f-b2a5-373d60749322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96745f4f-5b9c-4514-9259-ce08adb6e74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f32f9c5f-f49c-4935-8c4a-8c891f4d21cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5cb375-6623-4fd7-afc0-38b9c58cc18d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b83cebf-ab4e-4fdc-aeba-50f66b09bb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78386760-ea1b-4018-a30d-a5ca45a044f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0d7267-4f48-4291-8c1e-48f10f1c70cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05602637-74b8-4f70-8db8-72a6efba217d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3062b324-4f2b-48ef-ae11-97b0f03f911f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d8a361-e586-4922-ab99-bf01cac1fe41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e1f2b3-ff5b-4c0d-bc5b-50040c7f2143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eddf574-c505-4168-ae39-c8a85aece9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa799707-b6ba-41ba-b3d7-9b98e1c61dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72344023-58d8-4b98-bbb6-ac610b2bc14d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7eeb1f-0cba-4be7-8b8a-edc09f7849ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8711c3e5-ad99-44ee-a1b7-8c8d194b79a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e746e4b-bbbc-44dd-87e9-01ad4d6c208a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1de3d04e-0b62-4297-a433-fd2fa06e0a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab369cd7-8028-455e-a7b7-0a5d1e85f2d7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef118fea-7c69-4aa8-a249-13766cbee03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24822573-ac5d-4703-8767-8cd60eddc801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be22183b-68c1-4115-8058-92cb002c5044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6097da1-20bc-49bd-83f2-65d52fb917ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303ff9f0-13ad-4998-9a94-16f71d8c115c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e438aa5-6aba-4800-a65d-5f028b7bd8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07572b53-12f2-4e06-84ab-ec171f1d144b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394b6188-09a5-4872-af55-dd7045184159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "045c0b08-aeb5-41c2-98d6-a101ec531e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a15f9a0-62be-4c94-be9d-73234edb2d24",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52367c99-d2d1-441f-b3b6-7ff678e22f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60156463-294a-4a89-8251-cfe46f1dbf1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1188ba21-be18-4db8-9b0f-60f320db00f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "193a12da-9cad-4352-aaa2-adfbe9246631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eafbb94-f80f-4fa7-8e04-163cc9f35634",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81426995-991a-49f9-a725-c19b921f424b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f41fad7-ee28-45df-b9f8-d1f7fc753e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ca2ee4-70b9-447d-97ea-bf1384031bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "865ef8b3-3fab-4d5e-a9c8-5a071224f72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db294fc-32f5-47a0-a331-a224e65dd608",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213917bc-96d0-4f15-9874-19ca3d1f6501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af98b909-6fe8-44ce-8266-8166f8ca2a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9453821c-5c58-4b8e-9b96-b82a44331e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22352ac9-0340-4758-9659-117e069eb017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14094f1-c267-4a48-89e8-28d829c177cb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f6cc1c-11c4-4df4-8424-3d0debacbcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d3997b-eb4d-4566-b248-4768444ff53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7b007c-1e68-40c1-9c61-d8e72a187f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9fc7dd-a53e-4a4f-94c0-c71522299fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1261d96-1885-4eaf-8df6-c1010cb75edb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235e4855-801e-445d-98c6-a17d75ba5397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68efb7d-c9f4-42d4-9715-af92a11e51b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef0ffc9-0376-43d3-bf26-20dfae2036b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c331ab6-e01b-49d9-83c6-2e453f6f8654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d7b339-4360-4d12-8771-4f91e87421a2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21631b8e-c62b-416f-aebb-5e69705dca01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3dc5ea9-2063-4d9e-917b-edf9f5acdc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae2e28b-1bd5-4a5a-88bc-b3622ae3b801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad2d91c-5778-47bb-ae58-f4464a4e5340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea0abe1-c6a9-41c5-80ed-e491bda439b2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2080aa7-4ff3-4890-8c8e-acc627785aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25142547-79de-43e3-a2db-87693f30112e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d9b118-d131-4466-8dd6-bfbd72063b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbcf027-0c91-440d-bd7e-1be5a3c0355e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb9e9c1-7a06-4624-918e-7a716191638f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6370690-204d-477c-bb67-93f6c6cfe848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4813b306-ae50-437f-b323-bb5c5280b859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a66cd51-c512-4663-8856-126372d3b251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae80e8c7-fd25-4f1f-adf6-c93df6abda4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d57573f-84b1-49ef-9999-5b6fe7c6e067",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230482ae-7740-44c5-addf-c9eca5f4c516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b25b244-3f2a-40af-a7d5-d368e6409e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f914204-fe1d-467e-a120-210b02146d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff33289-e9f4-4df6-9fdc-c0c2ae9f8f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b574e61-f070-4eb2-8b33-7653690b5c2c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9289f7a4-93e2-4dfd-aaba-49323b5c65de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294d26b3-7232-4475-b1ee-8c7bc332c343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47583598-88fb-4aaf-9225-1e15cb130109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "902e9590-75eb-4f91-988d-ec1115e8a6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b63e75-1a37-4a28-8b60-ef81f3e4712b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78b9474-547f-430f-b94c-30be430b9103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bc3c25-8d64-48b9-adf7-6336691a401c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4be812-805b-40c0-9ae8-33125e80a22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a07d8138-f96b-428a-8366-fd1c16b8462d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd98d98-f1ac-4f26-9bc7-6a8e64c5a4ea",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13db35b-9fa8-4546-bb67-2437363d562f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58ac1ed-4a13-4d5e-8dbe-caa6bc11a389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f13f6c1-de2b-4022-95fd-bf334b725baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "936e725d-e096-4a31-b62f-3958fbd82505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4541d69-29a2-4a9c-b49b-13e9f6357e51",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b3c495-1451-48b9-9ea4-6f62099f1527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8742848b-bb8c-4c42-8762-3a7f215e9783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3302602f-dacf-4947-a564-a80d426f0866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df99fdc6-c595-4886-a8ea-f69bdfb36ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f79ab2-2655-40db-a9c9-0207a7f5ab08",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f561c0-3ae2-4d71-b275-bd00c3d87347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067da3f4-4ca4-4332-952b-42733d9eb26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e3d541-6821-4dc7-8f40-803e4790e4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d33de99-53c3-41bf-adb5-9f9c64e7a25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e22f56-b03f-489a-9b8d-c40f53e19966",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b505aaff-9a32-4040-9883-2126c4af30d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82095c3a-9827-4523-b3fe-71a935fdef4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbede5f1-72d4-49dd-a8b1-77dd2b87d1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cf686e-4273-454a-aec2-8a6d735bea98"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b8ac0c77-329f-48c5-8422-f5f16e4904b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32ff30e8-3af0-4f8b-81c0-90c0f633d016",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdc25db-a51f-47a0-8d77-a7790f4165ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d0db0cf8-0a09-4367-a464-eb8527bb4686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fb0128-fdee-4184-b722-6860c59b0186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adfe2be3-b11d-473e-a99e-4735e3daac51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "969a2e19-deeb-4e64-8543-eeaf4dc60576",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1944d88b-26f2-49d6-b31f-a0da45d034f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ee8d9a3-4a06-4a26-8f0e-a26b945ac6ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9eb0c7f5-23ce-4e11-af28-fc68242480db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b8f2357-f017-4408-bf65-38118aef46cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d587aaa-39da-41d7-b458-9d2071a59944"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c707f01f-9489-4282-a764-8f4a1e70b593",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c99436e1-d6d2-498d-810f-d0aac80c5b84"
            }
          }
        ]
      },
      {
        "id": "7fc049d9-3a12-4241-8845-40da148975c3",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b18f8595-6cd4-4625-9467-a40d8693ac84",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70e4c95c-4985-4f72-90c6-284c9162aa5c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "176ce93b-6a59-4f60-a567-dd5552202be6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f46509-a443-45f4-9f3e-84c5318cdcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9174fb81-591b-4591-afc7-2affa455cbae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3f50c2-e4bc-40b0-b338-a602b1687371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "64fc57d6-c137-46d8-8dc0-1edfc75bf635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11db778f-4c46-401c-a066-4a8875c328c5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aeb97af-5b04-467c-a37b-f89703e90231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c993c53b-eea8-409b-afac-c082a535c6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b3995e-aa70-4a7f-a0ce-831337dd2e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d95c1e3-d4e6-4a4f-9ff8-e33f5db86027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92342fdd-66c6-4806-9664-aabed126da35",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018d682e-5ef3-48a4-a5de-23493f7a3e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe31292-b1d0-4d28-aa60-ec52ea8a67f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4363c3fa-bcd4-4121-8449-96d84905f16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e49d54b4-1ce2-49f8-828d-cc017ab4e5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a05d9c-39f6-4482-9ff6-251b299a651c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f074c3d-29e7-4afc-bae0-64fd6af44036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b92789-7c93-4b95-ad33-c1622547f846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f1b849-25cf-4476-9a1a-6e07c4bf2d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "def28336-a7fa-4660-9bf7-dbcdc1e4ae81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f365dd0-c290-4d17-9b02-dbd52c0c0cef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057d45fc-24bb-4eb4-9ae9-dc69167fa8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182b256e-9355-4747-9737-f16ebf6b8fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c52210-7829-4565-9fba-70e0ed3ee94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3a9744-5e1d-4c70-be65-673914ba4078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aceff248-b167-4e99-9c53-6c81a0b465b7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f12efbd-b925-4760-9f3c-4b61bfc24a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bbe2a1-fa81-4a3b-92f8-b8bf54c72c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49dff38a-4954-4221-9412-a4a7acacf102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94ece49c-bf6e-4473-abfa-053686c03bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59efe20c-04ed-4bf3-a644-9434cc2caed9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c865b32-369a-4b95-a130-b61cf3364d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c686c7-aa07-4052-83fd-5f992c78131c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07af31c1-d3e0-4544-8cef-bae89f68195e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f73d71b-03fd-4d3c-a539-fe4d0d2fb911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ff246d-1d3b-41b5-b3ff-d3da1db0f136",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0005f1d3-aef9-4a0c-92d0-0ff01eb0d1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0cff8b-8e30-4b39-a96a-2ab0be0768fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b65d379-a3b1-4b0f-8c24-4b78d71aa5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24fe9133-4c9e-4226-a502-8c99f3bd7af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64553b3b-6b90-4c59-9fb7-7b331a6ec88b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36704c0-3212-4e78-823c-3a7118bd399b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72f31bf-8849-4b35-a140-62c684d5af5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f822011b-e932-4f93-b020-119b447ab06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d826a59-c448-47db-b2c9-ed03b38b5c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5e1828-3379-4e47-9b11-f17580ad4440",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4785ff-67b8-4405-96c2-8fbff2749218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbc374b-f2cb-4004-8aba-a9ec5360318b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb7f13b-dbf6-4671-9ab6-995a7ce1540c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf8a9fb-665a-402b-a5a8-9557ebe2fd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecacb718-acfb-4a17-8256-536e45eda17b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2914e579-ddc1-480c-899d-2748b19dc9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cad1c8-279f-43ae-97d8-3e9d970cea2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49c962f-dd88-4643-946b-3a44d941735e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3dcc41-d9b9-4817-acba-4177ff433194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c7bee9-229b-433f-88ec-bc0050d83a68",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4b0fd1-a7b5-45dc-b6b7-92858fb2135b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7cc078-cda2-44ac-a4f4-d6f51320238f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0426981-a3d2-46f4-987e-eb2b3abd1f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "021c5fdc-1517-4dcc-b5d0-5022b8c1dd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa2f381-4059-4202-a224-ea8293c0a945",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d2626b-cc46-4336-a9ad-d0b68b5c6e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0310ab8-1e62-4b0e-9041-d06c15e74ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b998ff7b-cb5f-416f-8ce3-c51df2dd2765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbeb8aed-ea00-427a-8ca4-96fdf10b1f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a728b7d5-7aed-41f0-aa76-c82954050019",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388be4e4-5980-43e7-9f30-63cfa5e012bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934b3f8c-ebb0-48c9-bdc8-12a2ced64608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebb6927-047f-482c-9a22-7a1957fe1cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "24efcec1-6a16-44f8-98d7-68ea5899ca68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb50f36-ae71-498a-94da-3865e7e2638b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d311008e-450f-4d84-9d7b-0589e415b0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de3075e-7b15-4df3-af3f-ea6120067c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5236914a-333a-4851-aa6b-474dd441535e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "37b4abb1-f902-4035-be29-8954126f9622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbe1423-a742-41f2-b7ed-8aadd3125503",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ec04b0-8c83-4190-8c53-7937ff5b0da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ac0245-f5b1-43a0-a41d-b959cb91191c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e005e0-70c9-4a6c-908e-f0bd8e16f01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cbb663-4f43-48f0-86e2-a875971ac36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4eb4af-5712-49dd-aec9-485bbc4b88f6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d86ccc-d6c7-4015-ab2f-eaf471fce845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9610a6-a837-4155-8e8a-b2c198045f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a74be4-8c37-4e0b-b845-160d9906738b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "234d400e-7436-4a95-86d3-845ec8f2df61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4152f5-f623-4475-9bb0-e07db69ed3c6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca655925-8934-428c-ac78-e2497d33081a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c694aa-7da1-46ef-bbba-415e7d0549a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3218d8-e85b-48c9-99e9-d95c15c2d1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b688f1-f4a4-4aa0-b4c9-a1f5c7e25af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f14420-30c9-4890-b320-7c9e79dc1918",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c82528-6c55-45c0-bf2a-10d7f722ff7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af66e94-3aa1-4efe-9436-fbae0484a785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75278299-38c9-44be-a5a9-75cda4824b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "addf077e-f3fc-4c68-adca-bb0ec9054155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f130e5-6318-4132-8571-7e3dde966a01",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882b6738-14ca-433d-b463-fd9ae78e5f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557590d4-572e-4691-b93c-aaf1205fd7a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d4a259-c694-45f8-8d2c-86721c0cb995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4b4b54-0b0c-46d0-a6ad-baee4abf033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cb77e2-cd27-4473-bdde-991ed322e17b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470ab34f-4115-4269-82ea-db0ec7181594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdac3a4-1b2c-4372-8e3e-6e25b2f92e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dd104d-c1ed-4689-921c-d84aeb51b698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f57469e-daa2-4b3a-b8a1-8222b62d753e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f5c2d6-fca4-4348-9dd9-da5e76ee4cbd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a658b3e4-337e-455f-9f51-09c8bc7da435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934fc8f9-1062-4ca1-a880-3019c6917244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e340b25-42b8-4fa5-ab72-4087026cfd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e85dda-92d4-42f2-9bb7-2598befe5bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d65884-51f9-4de2-ae77-aa648622789b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc75dc7-602a-4cc9-b92b-8720fad9b3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad76c5e-94e5-4738-bbca-814fc66a24c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a00be66-bbeb-4d12-bc77-c778a7c9e7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3edeb2-d820-490a-94d6-39b73d92da5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a319511-2b67-4de4-a2b9-b22d41da35d9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4c08cf-7c76-4339-a61d-90c218b16b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d5c9b7-329c-4193-9d2e-82908466bc92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4cb0a9-e395-4e0a-9c7f-a55b89685d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b98f457-319c-4fa2-b2ba-ca6a00c3791c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af20c7a8-ea5b-471f-a3b7-23e28f79abab",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34091050-bfbb-4a1f-9153-53123c767bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaea85df-7c6e-40da-abd4-fefb573dacdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525dfafc-acc3-4bb0-bfa3-df99000d0a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d74f95b3-7b50-41a3-a2e3-1c83c4fe5cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41a4e8e-448b-4f6f-b62e-6c3dcc864888",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa94b075-8fe6-46b4-a60a-e5c2f0a76c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5fcb29-3e2c-4bfc-b30a-53a227b3786b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbe2550-7647-4d85-b13c-f0c43961439f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4340ba1e-5aaf-4f2c-800a-3f46a098377e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda9034e-5edb-4a74-9382-809b3a800a04",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcef9df3-abb1-4e98-9505-3c4564534a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6686d01a-31ca-48e0-8ae9-f2521da43d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c245ed-2a03-4c11-8133-907761b102d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67d5b993-a026-4492-bac1-12726b8288b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56cf1b8-e530-416c-b3e7-5776e7d6d06c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1e3878-440a-4e8b-a193-48f8989d1fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327c46b2-90f1-46e1-ab5c-b03e682fec0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2515143a-2f16-451d-b2f5-a619701618f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7a6d4c-5efc-432e-9761-8cf4259d806b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e9ee47-f753-4c12-83b2-0f030d36959c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f0db65-d0fe-4d31-bdea-2ca6da894415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c227a2-5e3d-4f47-b603-4d0d45287d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af700a3-6b7a-48cb-8715-67927b88c6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c813d09a-0eac-4156-a30f-05fbd9a8dbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cfee2d-722e-42e6-bd27-1d6bd6165869",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18da442e-0ac8-417c-8ce9-23f4da6ef531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddc6b2b-747f-4f66-8cad-c7c4c6f5873e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb9b0a8-ae8d-440f-bbc1-360999d9297d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1a1277-b5aa-4b19-ba67-0452f7af4cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b64b55e-5787-423c-b234-46d0232820b6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098df3af-435f-481e-aaff-41a1812a4b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c65d119-c4de-49ed-943a-defb508dea0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9b92aa-3c09-4afc-a367-0b1ea6144d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa8911c-ba5d-4700-aa1e-672d4e2dc7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507e5f2c-c610-4677-bc6f-ba4c5626ad04",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c999563-a958-4612-bcfc-8862670eec4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8947bcea-25d2-44fe-8174-73690fc869dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f0303f-c779-4f64-9182-251c7f08c433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c544dac-0600-484e-8def-3bd7fd70d278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64054372-0614-4cb8-9b0e-8606f91902d4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6edc52-972b-48c6-936d-d14cb98b1189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00633e6a-e5db-49b2-be0a-f520f1e019cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e272b871-0131-4e16-be54-63253de32eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "015832a7-6366-45eb-bc58-bc7d36b03d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfebc26c-60cf-48df-a564-fdd570ebb139",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e9ca71-38b7-4bbf-af43-cceb3a53fda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92218f5-15e8-461a-ae21-8adcb720f0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf43903b-2648-44ef-aa97-d0b2142e7689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d32d4b1-7421-4da6-b609-849155737512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84d57ca-8108-4eea-8732-e914011da202",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba4a1b6-0971-461a-9f0d-1d263377437b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792e5ce7-345e-460f-828a-a05de238190f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d677cd-f983-4d85-bfb5-949baf00c24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc536e4-8f71-4124-af08-9625fbee90a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddcd40f-ec22-4cf1-89ab-e7e0f8f57256",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc232d4e-9fee-4216-8267-b33341e725fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "379f78be-4773-49da-abe8-a6d172f14252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a1d055-0549-4e55-a782-661f47d6313a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f60efc9-f7d6-4f5c-aff5-2a902070018c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f74416-be41-43fa-9fe0-37cd2f0e7794",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb44d87a-e6e1-4392-8fd4-ce0a6dedccaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a4fcb3-c54b-48a0-9a1a-05f9ab0ebd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e5bc60-b63d-463c-90e0-7c6cd20b17b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dee1379-03d0-4528-9d62-d47a34dcf347"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8aa81184-a424-409b-954c-d3a9c1b01a7a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c7fe040-5aee-4255-a0f5-2259fded5fb7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace0d7d5-dd70-468b-9a5d-ce728347cabc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66f41b58-6e6c-4a37-aa13-6367c6398bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a4b8d9-1589-4b55-b505-787d2c4b8455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a847e31-6493-488a-8ae5-6e88e02ba164"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7cdfd40-1de4-4365-b50f-f9bce30810e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b6ad574-8a35-469a-b49e-2ae0e5b960d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb93b81a-b826-4557-b7f8-28386dca774f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5abbd54-6558-4bfc-89a2-6838685a8d83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a02f8b06-baa8-465b-b8ca-3fc713493c83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "871c4785-ad54-4141-831f-2c1207c48ad1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38d1f377-d32f-4b02-baba-d8fcc9d76664",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82e791e9-15d9-481e-83a0-d2c94f4ebbc1"
            }
          }
        ]
      },
      {
        "id": "30c8ae58-b8c9-48a7-bad0-2c277093e0e3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8f46b2a4-a50e-4d77-bf5e-a6a74e38ed15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "264e2a72-37dc-4cb3-ab6d-5da983417fd2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "81129dd5-c9bf-41ee-8dc3-9246aae025ce",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc24092-3999-43bf-af8b-a38a8c0ea392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806f7453-2b71-43bc-8fce-4744a1741bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc9f2f7-15cf-491f-b40a-dd6c583b166c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aad4f4c-84e1-443c-8352-8f25026493c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb0fd32-6ee1-4bc8-8c4b-6918c1bd4d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e30f2a6-c646-4aa6-b3ab-e89cd941f2b3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24039f3-cf51-4766-a6b2-9c87f2648ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e6352a-c6f0-4045-8cd9-20cdfd6b0df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5132e51-216d-4fa1-880b-e4c5b4a42aae",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e7cc8d-18e5-44fa-bd61-35a086b4deae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0b81a1-95c3-4605-a9c9-7c1b736c7af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a0b573-c866-4698-85d5-87b511d7d35a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557647ad-9cc7-4e85-93af-644125f4a714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "246bf5a5-542d-419a-bb6c-ef5fd2a83593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034a829a-3a3a-4250-867a-0c1296669eb7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72c896b-11fd-43e5-8a7e-1ec7098b5a87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a14b91-d166-4bf9-88e7-16927e6e4d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6baf5d-5471-4239-aad9-027a119c0d18",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6a318e-06f1-4622-bba7-c5f31e2a1b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b16a82b-1307-4d01-8cfe-4c94c5e6f7e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "775da5a7-7b12-4655-aeb7-7eaf839d790f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aff96a4-adcc-445e-bedd-c5c943e09619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08219cdc-6fd2-42ff-8025-4f22a4817155",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f3f971-b876-4985-aa1d-c74eb9544347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f636881a-733c-403b-906a-f243a1407e17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7284390-fa38-4a87-bdd3-d78db778f22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b969af2e-b4ca-4394-a629-a00bb0649572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1944f6e8-4938-4dc3-98ee-33edb0457562",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605515a0-ec28-472e-a44e-2a48848e3942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef6b2d7-ed39-4a87-88a7-0f591fc587e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c79abf-236c-4ef2-b520-2a00fb994a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb008dcd-b0bd-41ab-8fc5-366ce339e4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45645699-c38e-4214-ac1d-b745f9b8951d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b42fd7f-d7a6-400a-8dc5-0dcf14360ee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e4f6b34-e8e1-4e7c-8309-769e76976592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3522619-4941-4ced-bbc7-91808307101d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47d9b70-61d6-4529-bb4a-14c0a8c807be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09841661-f28f-47c5-90e0-541405b94d5c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d97ac90-149a-462e-b356-c7b041692d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80355efb-7181-49d9-8eb7-cad3ab6689f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4ede62-5cd9-42c6-9e74-127292f7e3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09510c84-a77c-4a00-8010-e61731083983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e046dc2-351a-48e9-86f5-3507275b2247",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d50819-21fd-4193-9933-a4604a2c3fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f86276-1492-495f-a7d8-3bbc8b7abc52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2dbe017-e13f-46c7-845e-4a62566ec90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4460ac77-2fe3-4a68-a821-ef322d03bb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb68742-2907-4daa-bb9b-81804ccae690",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73bfb27-87c8-47f4-9a06-c1c2bb652cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9bb4ec4-4348-4924-ae4e-8f4a2e741d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a17c72c-0d0a-453c-a55f-f1c20560a21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e838286a-5b0c-44b5-84a6-a5ff50c9ad4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71bd6e0-804b-4b92-9590-04592d4469ee",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4d0220-a39e-4bd7-beb0-12341952b534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd7cab38-1cf6-48cf-8292-e80d3a957c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86efa06d-fb6f-49a5-bd1a-28c0de3085c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b023bfc-e86d-407b-b5f9-de9e4c3edc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2d7d5c-9e1b-45b9-8c9a-3f287e82d7e8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2664cab-5bd6-43c6-ae6a-43fe94d8e3e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41d2876-046e-4e6c-b623-541226f48da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0d57ef-34b4-48c4-8537-86fbbf6044ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3097cede-0a12-4b2f-9db1-1c2660857b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de773248-9b94-4133-aa1e-26f65a79392f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f44e3e-18b5-4e52-8336-f4f2df9f65db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fed2aee0-64ad-4e47-8a40-61fc0512d6f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ad3d5a-f61e-4aed-8337-31764eecc53f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc0cce1-2393-4adc-b882-ca746bc19be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ad4c60-789f-4d9f-939c-2a43afba0bc3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2caf63b-7c73-404a-a105-3f7035a5f37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca51c645-c6b2-40e2-8755-7efef217f7fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0736d0a9-fc8b-448a-9d25-e8c1c0ff8b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb79211-79e5-49ed-80f3-fd5c4275afbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ed9b43-e27b-4b3d-bb62-11a7d43b1159",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816a0beb-ff1a-4235-852b-25044137c2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38795431-26e6-4d8b-8461-c1b897e18b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6deb6a34-d643-4cd9-8f72-ce6f12f67ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccdbf876-ac00-47f8-8635-1cf038dfe3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2e1f17-a18e-46ed-bcb4-c8c23c049809",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafa0a69-a5d5-40c0-b8aa-93c29646c8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f05aad-959e-4449-ac22-fe61c45cf1ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb399199-d696-4651-93c4-e9fd1022942f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab80f944-a2f0-4515-9c5a-67198935a632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4caa8615-cd27-4af9-bc5e-c4632dbf7cda",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dad9400-a0e0-4aa3-b772-23494cc2c10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaabc4ca-3c13-4284-9c76-4dcfa28a39cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f82193-f1f0-4d4f-aa74-11893d90ac30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76994596-4000-4bfa-8e87-671ebfd3403b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f699575-f29b-41ac-bbd9-ac73997e4bbc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8330acd4-9d46-43ca-af93-d0edb60a6f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e03a08-912d-4da8-ab9d-ced4131a84f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b104ce5c-0858-46c4-bf50-d2f040624930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1910608-753d-4a0e-8e29-974b421a3b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f9969b-540e-4897-a86c-d77df119f498",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a15a70f-cd1a-4435-b8e1-1e44879341a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7f8bf7-bb61-4cd1-812f-0e9feaf63b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3ce4ce-81fc-4990-9099-455db8f655df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e053b9c7-4652-4ea4-aa32-57e7d1145354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4966385a-a0dd-4888-8285-3df544730510",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e6d803-fdc7-47c6-a2da-9ef6842faa56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172959b2-346e-4f54-b735-694e39a299a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a2ee82-02c6-43fe-8b16-15f4de894c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728aeba1-a760-4ee7-878e-6ecdd41ccd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983081f1-3f34-43f0-8684-ce75166db88d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd43081-b02a-4b49-ad5e-17bc6b9d19b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e450a6ab-a607-46fe-b41a-8bd9a0b2c6a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f698c05-1700-49cc-9fa2-8d5422109af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e08a73b-13ee-42e1-9f7d-ea4b2dee55f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7317d760-df43-4746-b72c-838759e4edef",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6e5ef5-ca25-44d1-8b1e-cef162ee26e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a6cb4b4-62f9-4ff8-a5c6-40fb8e18d572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842fb458-cccd-4392-ad0a-1546d4c94147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5bd8757-0dc4-49b2-b87b-4de47a8caaec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fadc19-6059-481c-92e6-ba39055c5f39",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475cdf85-c49f-4b47-af2b-1cb09fe995a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2656b366-169a-4dd8-ac78-6b0cf921eefc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd70858-09e8-4bc8-ba49-67d40292e802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fdef2b-bfd9-42e1-972e-6258003006aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50512c43-a0d8-4c39-b191-27f449b43a6b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6cda76-3d2d-4780-bd2d-d7d41acb9edd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55df6d45-bf6c-4e48-b0f1-8510b314d968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5063bb-4bb2-4675-9a3e-1756cf3a9104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c85ee0f-a655-49b4-ba7d-b1a18e289050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91767b42-1f49-4442-9666-93099c2b03ba",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06de077c-7270-42b6-b719-18f81a46ac94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6754a04e-f942-4b16-9d44-d31482ea9b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c061ade-c762-415b-b45e-1bb71eac9d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439fe0ec-01fa-416f-995f-0bc5c5423cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c258d25-0016-470c-bf57-51fcecd2ccba",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aed95e8-4790-4e77-ae15-c74c8c789806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda28a4d-4664-4644-b52f-3a5dbadd2c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fbf679-a375-4bcb-84be-9b04e500b2fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc015c15-cfbe-4ac4-8588-68b4712a8431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdaa4e0-b76a-4db0-a900-f55b9ef9ed48",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e71bd14-bd3c-4888-8a92-cf9b5680ba2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28de9cc9-e49f-4d0f-b678-3a1a704f692d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f14002-8ed7-48b4-8026-ebafb5e11fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb66344-08c7-495f-9262-d22cebde946d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3086ac6-69c8-4cde-acd1-ecdf6ff9dc70",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5644a2-13f9-4146-ae5b-8abf43c6135a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c72d39f6-04cc-44eb-b50e-27a373a1a36e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d617f96d-a938-412e-a00c-30264c27e53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8e9724-04e4-4711-96d1-bb5cc87cf01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27bbd40-fdd3-4024-93cd-74df8dc43694",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76770257-6e22-47fb-b899-fa09d39f41fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31689105-5eb8-45eb-9c92-4ad69da09d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8a7ae6-96f4-4d8d-9f68-9620f67629c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f75f6be-c877-4b50-a732-c6f6fd0cdc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775b3999-d74d-472f-a71e-5105953ca85e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf24be50-8ba9-4a38-9f8f-e1ff6b4d3ac9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4640a8a3-5284-436d-952d-0b49f7c7e2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "920d0bbd-7304-40a5-b44c-9b61fa85ebec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf38455-9acb-44c6-b649-4c19e3e9cc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a74f6b4-f059-406d-85f2-fa40deb86d85",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115a458b-02cb-47ac-acdd-a2a7d076ad07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9844148c-dd7e-4ab5-a94f-a3db2c55c948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee1c839-4908-43b7-b8a8-e26638b19b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7b27f7-8fa9-4ac4-a42d-ce61042ad7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b8adc0-9461-430c-8f28-f47099a5c3f4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91bc832-9833-452e-8a78-9b7311202394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98491f6b-cc40-4465-9c82-a5d25bf8cd34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab41b70-5487-4dea-85f3-893deea3f100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f6302d-cfbe-430f-bde9-5077b886e8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be08bfff-d4fb-4b03-9acf-d6454779c6fa",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76fb74d-b6db-4b75-9a8e-6e56797efef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2e8f7d-aeef-4c5a-b9b6-87da8faa38e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1215b09-9d51-4195-a3c1-f66aa162178b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a337107d-40df-46f9-999d-7074d7228b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30e2743-74be-4dc7-bc6c-90225d4c61da",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f995d8-f315-4b44-b9a3-e9d1762baebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234a2b97-ac80-4015-badd-b589e5f940e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ae236e-70c1-41e5-8669-d6ad6d61cbb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2ff8da-2221-4f34-898c-fd32f406fff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784213dd-b689-479f-92f2-71a954831e2e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abf64fb-0138-446e-8e43-5a1e19871767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78aab3d5-35a7-4956-af69-d72b5f8561d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b267f27b-64aa-4ff3-976b-671f2cbe6368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f23640e-7243-4d4d-92fe-9b2ebed1b941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0666249-8089-479c-af64-059f6d5ec81e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7fe136-ea79-459f-b79d-2fbab2c6be76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e274a19-bb28-4d0c-8480-07d05dc866e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30711084-55f3-40e8-b268-2b4401a3c941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13938d77-f8fe-48c1-a1f3-2f055e75ee89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4561b54-61e8-418b-8af9-bbc55b35696a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a2f1cc-4238-4c88-bd2e-f4b277408b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1dd95a-cd6f-4df9-9014-3d8241b08a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5289ab8b-a00d-4dc0-a2f0-4f711d64ea95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea9af0e-eaaf-430d-bf70-c4b244b6fc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f5117a-6fb8-4d54-9dc3-6fc1e8226760",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98ac52d-fb6b-4795-a4fe-7166c878c417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9166b06-a364-4db9-932f-7f0178cc5b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e35f987-c49c-4d92-8493-0fc3c9802d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a73ad6-1b6b-4330-a83d-099083e3de38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae559d83-8dc7-4755-95d3-6d35baaa5358",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed980372-7430-4443-8026-30cee65e1020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6a135c-70e9-45b1-9b87-3905c3d82b65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d23e5e-3827-438d-9fc8-a3a66e21cfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07901732-fe21-433d-9115-c3832f95c92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ef7934-4cd7-4904-9eba-10f2be7adc9d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6558301b-41e7-4cd6-b286-3b729edaa350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a38951c-023b-4efa-9b97-93ca4e8d6231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb15306-6a59-4471-970b-833f26c0c497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8442042-10ce-41bc-82cf-e562abfe149b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203aece6-15e1-4f5c-b033-fe83e819ceb0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e036ee-e15c-43d3-be95-8a530dac0cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa68dfe-e367-43ff-84a7-5e3c65a00bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81eb8d3-d1e0-4e05-889c-7e2d524690c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ef2d2e-926c-47d4-9832-efdaeff0bbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ee8660-9368-4fea-864b-daba67c7aa86",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fc99c9-f8b1-4520-8a7d-4aadcdb24e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3d8194-449d-418e-a88d-0ccbb49773ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c3e86a-81e5-4085-971d-347b7fb76ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae7770e-365b-4f79-ae15-fdd9d5f26bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b667c1-9dd9-4467-a6a2-7231caf23a61",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94862a0e-cabf-4b2a-8e15-ee1a231e3dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7461ade1-a8a6-4e1f-8ea6-cc6b564d30d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c377264b-605d-48dd-811a-6fb7900f216d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c8c2be-dbf3-41cb-a8ae-e61c7e905590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92a0a68-d230-4bef-8c9d-27028dec8f2a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370ffc06-1870-4ee4-987c-9a5210883e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cc1bf5-3556-4a05-8b85-85638d0b6bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23347e61-c697-4464-846f-12fd938712b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff18f0a-1843-4084-9052-aa35ec9a63e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017a70ad-b226-4e0e-be75-d88f245e5f4d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66391913-6974-48a7-8734-832745838f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa85b96-f492-4188-9204-735962ffe0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f521b616-5ea3-4f0c-8a4e-371199dd3b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a27725-9186-4b4d-8c54-4c56d8e8660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9399af1-5a48-459b-873d-9fcca5ede650",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd278458-a564-4043-b181-943adc9a9044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5e4399-103e-4eb1-b67f-3d794f5212d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bde06f-986b-44a8-a048-388dae0d1f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8dbc36c-ff94-4dbd-a3de-6811a6d29e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dc223c-4c64-420f-9052-dbba620a3fb9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d894ab2f-63b6-4d95-87e2-48d2bf7cc9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ba7cd6-032f-41d8-a889-d32d2acdb916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1209d0-0fd7-4a82-8a4e-047fb99bb07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec88766-202b-4186-880d-4c9683d76c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb02884-3c98-44f9-b15f-a0ec45e3d419",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57459666-8eb2-46a2-82db-92a2d0054519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673a432c-9947-4530-b54b-eba80ff2e7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289d897e-7f06-494a-9e6b-4276f4319bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788fc614-401b-4fc5-849f-67e39cae33cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0b4ec6-2d46-4022-8212-a38a45aa09a9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e0e60d-bec7-4c57-9160-5ca4c5639b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1ac384-17db-4cbe-aba5-d79f0bfcb73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bf1c32-69ce-4aaa-be52-e4d3bbdb73b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed43011-20a9-4394-8153-5a33e30074ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0385d8-721c-403d-b5cb-552800dc5b53",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab4aaa7-dca4-404e-9bac-ea3a12670d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b914708b-1823-4230-bebd-174ef7d16c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d126b80b-edf7-4edd-8c68-05c0de710b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e42999-4425-42d4-8a7c-12a67268f7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd499dd-299c-428c-8c38-7fda7e84e739",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7e0bae-2c0d-46a4-a42d-d18b8dc697d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f757f820-f2a6-4415-9a12-16ee4948f291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a7dd22-fbab-43f9-8f66-4bf89ff29eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c042d670-882b-43ab-81df-2f149f626f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9297bead-13b6-409f-aa23-82e9ffa049b8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5d8bd4-339c-46de-a83c-8cf71e5ced94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b94134-5eaf-46e3-9313-9c1244f3c756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde995be-f97c-466f-8b71-a6a74bf2dc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41aaa9e5-eafa-4ae0-b1b2-2cd1507836ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ec21ec-6789-4c62-baac-352ba5fd010b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ff30c6-23a5-41f6-8d7b-8cef3b4f8fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa72b9f-8512-46c2-ad34-bf8fcfaad4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89896c8e-2471-4dca-96a4-45446edc296f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558be698-25b6-4c45-aa49-2f598dd816d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a0cb64-b75a-4861-8163-03999d482411",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484fcea2-cb11-4881-9dde-cc61a475e18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f90f876-5cda-4bfb-b023-64e996faf749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0fc96e-3233-48b1-b079-ebe8c72222db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867c8336-f826-44dd-8fb1-fd5456a340c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c351b4-2765-4ba1-8c02-d09826aafcc5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebbe7e6-edaa-40e8-a1b0-1712b3e4b6b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd72bbe0-2f70-4780-b464-0db401ddc3ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fa4de2-5e73-4a9a-a062-6ec78abad48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6f9d9e-d950-40d3-90a0-f20a9106c12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7e205d-780a-4ae3-98e8-e04c50ecac56",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82a36af-183d-4173-9902-8d2c7e433abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa15ceed-052b-4b75-80ee-4891a251861d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a4f1ac-b169-4cb0-b0e4-fcde2b8a650d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e69dbb9-fa27-46ad-be0d-1decb784952a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98075b60-0de3-4584-a375-a85efa51c4c1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2318a0-4bdb-4d80-9c67-2d6531325372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42519f20-50a6-401e-a48d-44a2b4ce2010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea0e05c-4d7e-429d-b9ae-2e41b7dd0934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb365a5-5a7f-4394-806c-d8df3f784b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a9486d-14c2-4a0b-9c61-f55a5ddd3555",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd60a11-7dcb-498f-baa1-32af42530d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23deb08d-9a47-4b4b-a3fe-89403e6e2575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7133c6ed-933f-4d63-bcf6-89dae60ee713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd35b6d-a19e-4547-920f-36bf4bee99c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36eb0be7-a0d7-4112-ac2f-ddfa7b3ac2a0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b047f9-37e0-42bc-acec-f3a9d6b7c480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cd0282-a1a2-4637-ae68-e66dc13ba3c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1439f23f-15e0-4c8b-96a0-3f8b20b625d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c6d4a7-a316-4613-9252-372cb937afbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06776c90-1c31-4695-b11d-91d64f795bef",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2054f77-d2b0-4500-8681-ea5f5d7f4b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f018545a-a90c-40ee-bea5-93d84b696d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d5c3e0-3bcd-42fb-be06-9c0b50c09cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc67046-5b36-4999-b24d-aeb74c6222af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fbece4-fd07-4c32-b51a-52e05413ea1d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7688c91b-0e75-409f-ae48-240f90f81c8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebdc7430-99da-4fef-8f44-c99314059288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b9318d-f337-4dc2-9f8c-68af91a81460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0724a0e-17e2-4018-bb61-f52b7519d619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6eed1b-f81a-443c-8fd1-d69acd0aa47a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3acb7a-2f09-43fc-a813-b4ae1c4d8be0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8575021a-f393-4026-b7a8-e9323a9c3728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a834ae-7988-4c06-b8cc-582f7f6bf0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db75d021-9ca6-4228-b418-e08ab79dda11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011b1557-4505-4029-9bfb-55b151115f17",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533564d8-1693-4848-9f05-264765dd05e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dc591f4-94aa-4083-ae0a-d931c466b85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532e3944-4392-4d2e-bc4e-01b65c1209ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aaef128-ec82-4cb0-a9f5-65257ee6e576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f0f83b-f8c7-4aae-bd14-20969b9a2a8f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67407ad4-45f2-492d-862c-2613239ccde9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e6f7346-e62b-4398-846b-fd8c66716a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffd1e78-9fab-4966-b5ee-39757699f463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706d4318-5344-4068-b755-8d01430d2dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c953d23-bdb7-4b25-b084-93edd68f342c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d14361-f5c1-4d9c-b8bd-74378f58510d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "398236b9-6724-44bc-a30f-3e8287ad2312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca98f5f-4f12-4565-b62e-50349cbae1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6c0b04-b2b9-42ef-b034-e159c6a0a040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270e0933-cd65-4656-9e65-6dce0ca449e8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8476f048-e7a8-4852-aa0e-f494f367f6aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ff7b58-41a6-4284-8555-35ed17e8acd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a763a68-11e9-41f7-8521-74d3169cd36b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9873589-dd7f-4a59-aae5-73229e352f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b748de2d-c1fc-48b0-883c-af240699c9bd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2a5e52-15d8-4dbf-be77-2c59ac19f67a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56012a24-3018-4ae7-92bc-b49ff146f1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "857510ba-fe85-45b6-8aed-2b52bdd0ff89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d66dccb-f2dd-4680-a4eb-0e9c87c356c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ec5b04-9266-48a5-9ea7-34a3177904f7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7d26da-7cfc-4f0f-8b5b-9ca5dd8bced2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe3e7205-038b-47d3-b1e5-25ede0fc4917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f945f935-64a2-461f-a300-12296ba3c4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db39e95c-b67c-45f6-b0c9-c5fc1a43bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c636bdbb-2873-41e7-a03b-b15445541bb3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c0d9d6-60ff-4b7c-a7ee-f8cf53a68352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a99263-3c91-4c27-aaf0-4efda208c25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfe81dd-ba8d-4afb-98f1-bad34694c18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3955b818-6013-4c20-ab86-0f38be8c2c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d94626f-f20c-400f-9da6-e60e8c8ad2a3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae33389-fc82-4651-b00c-0812c5e11087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de3504e-d395-43db-b305-acf4f7e4af53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93c3449-917e-4bf6-8d90-905e60ae61a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d749dfc0-5fdb-4996-a625-6f7732644e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9a7c4f-ed6e-464a-994a-148b5700871f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0257600e-6472-4a2e-8bbc-3dad5717ef59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30e6007-bc18-4183-a08a-f1864387774e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c4e32f-31d0-4688-ba79-a5b47274231a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f85974-e1c2-4dec-a8db-99a66ac366de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7345651-5c6e-4096-87ba-3402ee8e581c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbe2cf2-9dde-4dac-98ed-dd09680ea5c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d713db8-731e-45cc-b7b7-d004e850e0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea104d9-46b7-44bf-b44f-aaff3a9a4e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0decc504-2e16-498e-83c9-db16f53024a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609110c2-46db-4266-ab55-5d38f65f4b5a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00163e67-b9c9-45d9-ad96-b5d0d4a4c641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f2b897-b095-4e2c-9640-5e0fbcb66971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412951b4-a482-4637-8ffa-5dfc7e1403fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fc5b4d-f43d-4953-ab93-92ea66fb9bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b78b28d-b93e-496b-a865-bf7ca584dadd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e46dc9-c2be-4640-9cb3-12f6ae505b40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f433b79-6fe4-45b0-ad39-443cd15fc8ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f621f214-807c-4128-85d3-505470e55c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab754c8-88da-409b-8335-4f0e3bcd9a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eee9934-4287-4a0d-8663-24fbf664cb0c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb533a8-ab5a-49fa-8fe9-2e5bd8c298d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fa7e362-df16-463c-ae8b-489e73065ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b31328-9cc1-4357-970b-abf1a139450a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16956349-27d4-410d-8739-0ec872659560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cc8cac-948d-4af6-98c0-9bf0ba0ff174",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5464f435-35f9-4e63-8e8d-8c69a1e0c59d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d89a6e2-a19c-4cae-bb41-04e57ccc853a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76682053-f3ae-4a7d-a471-717b6ebeb2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14167498-49ec-4b04-b055-6adcfc78848c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136a84ba-69e2-44c6-acab-c421c1e00ce1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6450a892-6ba7-42d8-b468-4bfe4db3a55a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef4e4a6-f549-4e16-a98a-a79ab3c972b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b616e241-e258-4cbe-86f0-bc8d7930d4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf6c53e-939c-4ec7-a7ee-2a89d8093e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ed567b-fe8c-4b5d-ba0b-7853b3590921",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e2777f-52f0-42eb-9936-e669937e4dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29450de2-837a-4c1b-b920-d0155ae1682e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad948ad0-0d96-496c-a878-65ec5f5c3d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0793479c-7f56-4eb3-987a-9b3dbf14e794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f801c1-4001-4246-b968-aa362f2dc099",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c53f7c-08fe-4851-b6e7-f09d903ceeb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99bd1962-3a87-4343-b66c-0b3b6f9477a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ea37f2-aa49-4c57-84b6-a91da8fab5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a2607a-f932-4fc3-805f-63fe8fd3216e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0397de4-d6e2-4a67-91a7-63401417feb4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1573da0b-2e6c-48fc-9786-3a0bdfc28c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f7dc32b-39f3-4d94-9a0f-d5b989ff13c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988c6405-43b7-4291-9822-dbd2be6f38c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2a5a32-5537-41a8-8d99-65f64aa60c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f285bd-96d2-4623-a218-8aec2dfda316",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b4fde5-9586-40c7-b414-496d0d315ea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "931cfe55-27cc-4ddc-adda-3b94967ff6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7aa01e-7649-4f83-9412-8542495d252d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e6c729-509f-4944-948b-21dec53fdb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5364e6-fce2-42ff-8578-cc5fc934e2ae",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43deef8-63de-4ba4-b402-b655f84cbccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52604c8e-3b81-46be-9d74-3703ee5475ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b872d1-c0f7-4db8-be5d-1d17ebbd8386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a068532-6dae-42d5-9281-60ea050f1414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786aa47b-293b-42ca-8ba5-e5a0f3eba728",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394998f4-3c28-4aeb-9746-2bf8361d7226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c33508-f233-46d9-a562-e483fb95fc11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8715661c-f6f8-438b-b408-96b5e9039ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ea214c-40d8-483e-86e5-24a74e6b4428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b56d43-89fa-42f0-9a5f-52a7f467e172",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1061cfc-166f-4cfa-a8dd-e6e4534e2985",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "530cd94c-2638-40e6-8caf-f8cffc8525d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d963e77-a38e-4c53-ad81-27c20e56b430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d67c6c-a5d2-48e2-b4d1-51af4c997e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd82324b-6825-4e91-bfdb-db354d828ec3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53414c94-182f-4745-ae8a-69e39799250b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1190ae1-034c-4333-9242-dd5fde874863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbc0920-f148-4644-9723-d831db941985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252bbbef-c96d-4491-9ae3-97b6311aa04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557da57c-5247-465d-a696-180ff359c51e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a5aa67-7b88-47e5-ba2c-fbf98aa3b24d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "542b6ff3-986d-4b32-9a15-d364da279d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dc878d-75ec-4768-8a2a-00e6e84cb11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f52811-58a5-4e5e-b3b5-61c96adc5e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a64507-320a-40d9-8a55-37c598b4b634",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db9f0a5-4a40-4467-9c92-f99141924377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c9daf92-9a0d-421a-a8a1-990bb8cbfee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d216e50-b405-48d1-aec6-c4ee510a8012",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ae218f-49e1-4832-b7e7-3fdbfb20b214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1079b69b-6fd9-43cc-9dbd-e872e5829ace",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f145d0cc-612c-42c3-bafa-82d81e9b1ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4debe08f-260e-4236-84ac-915aa06c7c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab7b809-8323-45db-8bd6-dd270c84832e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad29af8d-2c06-45b4-8c0a-9ea1c76776d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5517c730-5067-4d06-9202-3c6f1ac999c1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512501bd-98ea-405a-8275-916b4b67f147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec8b575-3fbb-43c5-b9c4-c0c5550dc5af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7580397-b0f5-438b-8837-75305a14a5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2faee8e2-1380-445b-b4c2-9579a8827a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421793c0-7880-4a17-9704-d94f56a7897b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0898575-f605-4c1a-bbd2-d68ff647e2f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e58367f7-2ee6-4251-b077-1f6f008df2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271cb839-5171-4457-aed4-d0f37b2f3814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4da100-24eb-4a8e-85e3-d504913934a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583acac6-88d9-4d83-b8ca-4001bf8914be",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8a1cb7-3f57-42b0-8981-d6c1c5fc8ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56eda18e-f289-495e-a50c-3e12aa98d397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8507e7ba-6f40-4de0-9f83-558ac4ccd5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b326b460-c9b7-48ae-9bf3-b1ca27a0d80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1b5932-e896-4141-9246-728c95eb2e49",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7780a11a-39ba-4602-8e1d-5b43d783311d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad8cc24-bbd0-4d27-a302-dcb3a8a5d78f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5501fd1-74cb-43da-a5ef-77a016d919f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf8033f-fb6b-4778-b41f-1c61c91701be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d191d6c7-6c8c-4beb-855d-a9dad411ca90",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056ef38a-3d1e-480c-830e-ca43b5edf96c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9877c1-c9a7-4873-a901-1de3920b11a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724ab237-6676-483d-92b0-e8d766b56463",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bef0129-fca8-43f4-993e-10fa6a9e4394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca036d4-863d-4c29-b6d6-b69c6b0bd9c1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e939666-e489-4d54-8160-5374ad48174e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b18092-40e8-4dac-9f90-f64a18cd5935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ec4e5c-cd0d-46d1-9312-a2b8e980f669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716d2164-5305-4fe8-916b-dda78ef55b6e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1de5c292-bf08-4bbe-8401-19f68fe4cb0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "beb3de38-fc5b-4ba9-a370-4d53313031ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2834235-8d09-4d65-8151-9e6322d5131a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d92a7ac7-2919-4090-93db-ae7020ad0119"
                    }
                  }
                ]
              },
              {
                "id": "f4381c6d-65ef-4a1f-8781-5fffaa1612db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cb4f0fc-c60f-4a4a-9e01-613922be29a8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c32905-4705-474c-b4c1-90462948649a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f06d1635-78da-4a5f-a5ce-63e563dfbeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bc2d89-c3c0-4acd-bc0c-0f859b1d0e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "962baf16-6bda-428c-b15f-9e2d1813da13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "531cef03-8d60-4cb4-972d-e3e887c6da12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d46d9aba-a06b-4f2f-bb76-35993e875f0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "824d0b60-1a70-4021-86c7-89629b7f3fe5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e99e13e4-bc50-4419-9b6a-0b68f162b8c2"
                    }
                  }
                ]
              },
              {
                "id": "8db675e2-5827-4e05-8ae6-c2119e2333f5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5a4e49c6-46d0-4e3f-a629-fd8921f6b71e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceba1caf-44e6-4b33-853d-ad3823a17130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "393644eb-8c51-40b5-afb4-dd9865d3ae24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff36ee4-00a6-4aad-ab9e-12f8343477c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46efdfad-eb31-4dac-a70a-5284c434952c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "43a239f3-9329-472d-9ff7-b079f39b0bcd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41381858-8629-4db0-aa4e-b0a8263cc996",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "882b50b4-3f35-4551-8ae2-22d02b765740",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1f043742-b904-4245-9450-32414698b296"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc9996bb-4910-4426-b90e-000a2a992537",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b98020a-d423-4189-9910-7d427dab199b"
                    }
                  }
                ]
              },
              {
                "id": "da2ad0a0-8f04-4b62-996b-f4765fb6ef46",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c90afd46-b957-481c-9d01-95b0d277fd92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f3e767f5-035f-4555-a8f0-3e5dfc578dcf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06a26430-d34d-4606-a579-7c6a5e446992",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67c18297-9a05-4a29-8aef-ff9b241ac0b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0620e18f-8c00-42d8-907b-0ddd8f0f26ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d4944361-3f78-49ac-940b-68ff749acade"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fc62009-9d8c-45f5-9082-c7e395d339ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "154cef07-8723-4cd0-a978-18ee0b3d8aa8"
            }
          }
        ]
      },
      {
        "id": "eced9af5-e6df-4bbd-af73-401ebe409d53",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "63af629c-c02c-4051-8f3e-c9cb6382dac0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "761e4dc5-2674-4dce-9b83-10d493318f4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cd5f3ac-6226-43c0-93cd-215df63490b9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b3a954-ac68-49df-9792-e6a95e5b2188",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e41bfccc-e8a7-461e-b16f-acc529f5ea2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8a204b-c28a-4006-ac40-c342bbce43f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9efd50a-f710-4d54-b030-d73b0ddcc734"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11a31c5e-871a-460f-9414-a37fe34ff4ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c6fd662-272f-433e-8713-c111644297e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c2124c6-5a00-4c37-ba46-6ad6997f68bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e75533c-1d8e-40e8-8fc7-b2b085e261d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ba6d896-f452-4a0c-bd89-cd6a2f4d2010",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "960f0d42-714c-4ada-b47e-40e5d5cf9bc8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06b85023-6df9-4d72-8d43-21b4d1234892",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "064095c2-b81f-42d2-8645-dce86a30a3d7"
            }
          }
        ]
      },
      {
        "id": "95c858a0-b975-4e82-9f75-0b5110a9d7e8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9ff2abad-0429-406d-a68e-bbad1d566d18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0198be9-80c2-49e6-a648-c801e6d06ef6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e60ccd1-b055-47b3-a665-997a3431e962",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b691b93f-51c9-4db0-8190-21ec5d2675d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db06e17b-a162-4dd5-b434-b307ea9f95f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe89c58b-6743-4861-b097-baace1be1570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16c88c74-4263-4b29-8763-5dd94c7f3489"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfa8c448-f870-4ea5-a292-6086dd10dfa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1accd39b-4930-403b-9551-4045eb6e6f72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a9e9922-7ffb-4cb0-812e-a9ac4c2c70ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbba135c-0396-4684-884d-3d507f50d5d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8c3709e-122f-4866-ba96-31954e2d07a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dd3152e2-9710-49e1-bf21-025a69d32f5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b665c54-d7f3-4ca4-9571-027e05c4c87b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5f84f6b-ff25-4cb3-96b7-12bced2073ca"
            }
          }
        ]
      },
      {
        "id": "c98e0c9e-afb0-4907-ac8e-a3a92e368755",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "83877ea2-62d5-4a3c-8a97-c5a93c002715",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b14099e5-7862-47a3-b05d-f127d0568b2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63ade340-0770-4f6c-9088-1cd7ebf65e03",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d3ad65-488e-4a9a-9ccc-c061d5241bf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6915839-7b76-4825-a897-f6754ce5fc0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404e892c-3c3f-4ec7-90ce-1b0f92aefed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7732e80-32db-402e-bc50-6b7bec1e1fd2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36bf533e-a29f-4618-86ac-bf5c659e91a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e35566f-e632-441e-8a36-d9e90fbecfda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3100f9e-1867-4e29-a6d3-c886043aa6fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ceb165a1-2562-486c-9e5d-70fbfb3408f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f8ce171-8296-4bff-a797-bf957259f610",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b3d7f9ca-632c-4cba-a8a0-264c62d82c12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9857518-e1e1-4f24-bf45-b49b0f4347f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9361ffd7-a6ae-4b49-b9b6-1840fe83f56b"
            }
          }
        ]
      },
      {
        "id": "3aa7384c-db91-46c4-a9f6-5bab8ad354b3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76df8b3d-a460-4262-87b7-8ba01dc01c08",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a08464ca-91fb-413d-8885-aca0c001e206",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b5ae1cb9-aa26-45ae-ac0b-f87473f2d9af",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6be8c58-2ce3-4462-8e62-eea136425a7c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1670c2a3-5268-41b6-b28f-77ef67d9e7fa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 109.21478873239433,
      "responseMin": 15,
      "responseMax": 1620,
      "responseSd": 196.40187581473592,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697502853460,
      "completed": 1697502900307
    },
    "executions": [
      {
        "id": "6c951f54-43c1-4029-bf06-4d3f81ad79f2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3a6300b2-5f9f-4a6d-97ea-eea01e7820af",
          "httpRequestId": "e9dab04a-42f1-4d48-9608-74a13d911c90"
        },
        "item": {
          "id": "6c951f54-43c1-4029-bf06-4d3f81ad79f2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "242bd734-d085-4ece-ab13-003a5db29ccf",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 0
        }
      },
      {
        "id": "caa0715f-ed8d-42d2-91c5-db859b6f82b9",
        "cursor": {
          "ref": "48e8897a-145a-47b7-b8b4-3924b29c13eb",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8a6fbd9b-7fd8-4620-ae61-6f2a79fa485e"
        },
        "item": {
          "id": "caa0715f-ed8d-42d2-91c5-db859b6f82b9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7cecc84d-58b0-4938-8911-4a468e98e098",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "253ea9e0-caae-4690-95dd-be69871938dd",
        "cursor": {
          "ref": "6d195f75-f1ea-420d-a59f-704bf97c41c7",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8bb07c3e-76e6-4ac8-8f86-7f884d1b8f08"
        },
        "item": {
          "id": "253ea9e0-caae-4690-95dd-be69871938dd",
          "name": "did_json"
        },
        "response": {
          "id": "5bfa2855-3f79-42e9-9ac4-08ffd31da26f",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2d3d42-3635-4bfd-9464-c5a1e748234b",
        "cursor": {
          "ref": "a571a13c-9686-49c2-b672-e5f03bea1846",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "145adab5-df66-489b-a56c-a4a175c97b71"
        },
        "item": {
          "id": "6d2d3d42-3635-4bfd-9464-c5a1e748234b",
          "name": "did:invalid"
        },
        "response": {
          "id": "4fc712f1-1a3d-4003-953e-1fb9d8e73910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2d3d42-3635-4bfd-9464-c5a1e748234b",
        "cursor": {
          "ref": "a571a13c-9686-49c2-b672-e5f03bea1846",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "145adab5-df66-489b-a56c-a4a175c97b71"
        },
        "item": {
          "id": "6d2d3d42-3635-4bfd-9464-c5a1e748234b",
          "name": "did:invalid"
        },
        "response": {
          "id": "4fc712f1-1a3d-4003-953e-1fb9d8e73910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38d4d29-8b99-4c1a-a0fc-779ab5ebf8d2",
        "cursor": {
          "ref": "c1bf07b8-ee72-4bf7-b423-8e0d7502fecf",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a0b2fe1d-ebe2-4e78-b237-2c1f4a2950b8"
        },
        "item": {
          "id": "e38d4d29-8b99-4c1a-a0fc-779ab5ebf8d2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "33fa1dbe-5f80-44dd-bf4d-6b83dea8ba23",
          "status": "Not Found",
          "code": 404,
          "responseTime": 114,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b0384a-a6e0-482f-bf77-0d17f56a5026",
        "cursor": {
          "ref": "b4f0300d-894c-4d6e-bd86-b326e5367b80",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "61b8352f-c15d-4a10-a89c-38b83c18aa8e"
        },
        "item": {
          "id": "a6b0384a-a6e0-482f-bf77-0d17f56a5026",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b7763bd1-9da4-466d-895e-0b5d4fb95a30",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a44deb5-f208-4c50-a019-936b9e3b8c10",
        "cursor": {
          "ref": "08aa54f0-1edf-49ff-a34a-e2557e912827",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3bf93ee2-f6f0-4e96-b4d5-a7336d657698"
        },
        "item": {
          "id": "3a44deb5-f208-4c50-a019-936b9e3b8c10",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "19347c51-7835-47ab-b64e-874104c3139d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5615f95-27f4-4368-843e-794014403982",
        "cursor": {
          "ref": "1643d762-e358-4a0e-a201-c1b3ee51803a",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f7cda9b1-fc01-4d52-82ba-bf2488c37620"
        },
        "item": {
          "id": "c5615f95-27f4-4368-843e-794014403982",
          "name": "identifiers"
        },
        "response": {
          "id": "87276102-6c42-4709-9d7c-0de30b041794",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19998a0c-134d-47ab-88df-05e8c0b8d929",
        "cursor": {
          "ref": "ebe027b3-bc79-4c24-9755-08a23f72d212",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "71307c83-0ae6-4101-9adb-0afefbd68641"
        },
        "item": {
          "id": "19998a0c-134d-47ab-88df-05e8c0b8d929",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f1d69f3e-d136-4177-90dd-d3e5efadbbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d3f3d5-0e82-42c1-bac6-4d86608bf0b3",
        "cursor": {
          "ref": "30f44db0-0279-40eb-93c9-3899b3fbcff2",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ab69ec80-6a4c-43a4-9b14-06ee6854513a"
        },
        "item": {
          "id": "06d3f3d5-0e82-42c1-bac6-4d86608bf0b3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "610c0e36-104a-47a4-bbfc-f5755616fd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb43a197-6949-4452-923f-d9310f134916",
        "cursor": {
          "ref": "8ab523d2-fac3-4f26-b2fe-6c2015be481f",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a2da0ab1-7f9d-4076-883a-90f23818988f"
        },
        "item": {
          "id": "eb43a197-6949-4452-923f-d9310f134916",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "acf75f4f-9aa9-470b-a4fa-4bc9513e5e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3b9fde-0bcf-462a-bb00-abf43cdcb5da",
        "cursor": {
          "ref": "8bd86b68-6807-47e1-a31c-921b35dc31e0",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "24c4230f-bdbf-4a16-bf2b-e4873a2ba010"
        },
        "item": {
          "id": "ff3b9fde-0bcf-462a-bb00-abf43cdcb5da",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "57a9440f-7252-48a3-a888-b178bb0a0c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9c6b5b-8a63-4c09-8de8-27d989dbd049",
        "cursor": {
          "ref": "2b1f79f0-fbd3-40d9-a7b0-799398c70c28",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dbde4775-b8e6-43df-b168-2369bfa7fdc0"
        },
        "item": {
          "id": "3c9c6b5b-8a63-4c09-8de8-27d989dbd049",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a6ee789c-d50f-4eda-bd69-7708b0dff89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f82d5b-8654-4725-840c-f513f7096413",
        "cursor": {
          "ref": "7274a0d0-9f6e-4073-8fbd-99317bce82e3",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "902ad6da-bc8d-4f29-8601-06cd07c408fd"
        },
        "item": {
          "id": "e5f82d5b-8654-4725-840c-f513f7096413",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8ce5daa6-2bb2-4d45-bd42-00dbe461b2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b63fa9-defd-4a0c-902b-f18615ca836b",
        "cursor": {
          "ref": "984e3bf0-b095-4bdc-a04f-f3f478666926",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "da282007-f1a2-4d5f-9b60-947a03a4b6d6"
        },
        "item": {
          "id": "38b63fa9-defd-4a0c-902b-f18615ca836b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c2c1e8e1-d4c2-42e0-99ea-372a05023566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac86093f-c7b7-4543-ba0e-1753f8a7d884",
        "cursor": {
          "ref": "645ef6dc-a760-460f-bb65-e57911009f10",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "98e19fc3-e40b-4496-985a-d772e4db5d18"
        },
        "item": {
          "id": "ac86093f-c7b7-4543-ba0e-1753f8a7d884",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b0706c77-17be-4200-b804-b70f213484a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965ff8b5-196c-41d3-a683-1d75638def3f",
        "cursor": {
          "ref": "2de03466-d400-4d05-bfed-e47c693808bd",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9f861ce7-fff4-4c03-a5c4-35f9a4fb1524"
        },
        "item": {
          "id": "965ff8b5-196c-41d3-a683-1d75638def3f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "df2db91f-b554-4123-a938-b2571f40610e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d7c61f-c6f8-44ca-8ea4-e0a63e1049e1",
        "cursor": {
          "ref": "6d137cae-fe53-439a-bcc3-815e922198a0",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ecfc5050-3ae5-4e52-a554-7e4482296956"
        },
        "item": {
          "id": "26d7c61f-c6f8-44ca-8ea4-e0a63e1049e1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4f654feb-490c-4388-9b05-3ae164af596f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40872262-62cb-4d78-93e0-81a31a8e0227",
        "cursor": {
          "ref": "11ad4529-ebdb-4f9e-b7d7-44c02719f215",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "72e88cc2-847f-447c-ab38-b0cf661e4231"
        },
        "item": {
          "id": "40872262-62cb-4d78-93e0-81a31a8e0227",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fb058d34-b353-4bd0-91d0-d01852310867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ff224c-32a9-452f-b9ae-c82618ef6b49",
        "cursor": {
          "ref": "509283d0-e812-42fa-b343-8cc4cd7401ee",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1aefb5b4-73e7-41a8-b3be-c09ccb71efb6"
        },
        "item": {
          "id": "f1ff224c-32a9-452f-b9ae-c82618ef6b49",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7dbc2b4c-e323-4780-bc41-9bf0595d10e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c03352-44aa-4f1f-a02c-bc3ae4207439",
        "cursor": {
          "ref": "4844d824-2de5-45d1-b9ca-2fc20cfe3f6e",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ee0722d8-7228-4fac-9693-8d03b69ac706"
        },
        "item": {
          "id": "75c03352-44aa-4f1f-a02c-bc3ae4207439",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c38391dd-bedb-4a6a-b32f-4b8480bbb9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398c5023-b48c-4e7f-94f8-3ea0012ad48f",
        "cursor": {
          "ref": "f247d182-29a9-4484-bc02-32a4527b2c72",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b488ea4f-5b5a-46a3-a58c-7d4439fbbcac"
        },
        "item": {
          "id": "398c5023-b48c-4e7f-94f8-3ea0012ad48f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "774c90a3-ed56-4a2f-b61d-4629378aa631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507e807a-30f1-4e1b-b16a-7991b8c2cfac",
        "cursor": {
          "ref": "92de4523-ea67-4e1c-953f-201ae915b234",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "95690a14-e3b0-4c38-a4a3-63bca597211e"
        },
        "item": {
          "id": "507e807a-30f1-4e1b-b16a-7991b8c2cfac",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5464b0bb-51eb-4021-9a9d-2126ebdb3277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5bdf95-5874-4571-bd76-6ac198e9554e",
        "cursor": {
          "ref": "88698170-f0bb-4760-bdc0-3f4a214c2869",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "49642dc0-15a0-4ccb-b6a0-80fbccc18c9b"
        },
        "item": {
          "id": "9a5bdf95-5874-4571-bd76-6ac198e9554e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cf282cd7-41db-4479-8f53-bef0c9a5b2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48959f08-5645-437d-af34-143bb6c1db87",
        "cursor": {
          "ref": "13091f40-68ac-4454-a226-3e4cc7ec1a67",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "42791a23-1ca7-49fd-8730-2d8a580f4636"
        },
        "item": {
          "id": "48959f08-5645-437d-af34-143bb6c1db87",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "06a9d614-1b55-447b-a2b2-b434d5ab45c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8970d1b-27e7-40f6-b036-6da48ca72df9",
        "cursor": {
          "ref": "b75b3737-268a-4fd2-b702-8d9d2d4222f4",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9162f4fa-90d7-48e9-86b0-fc4a05ae5b24"
        },
        "item": {
          "id": "a8970d1b-27e7-40f6-b036-6da48ca72df9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "97450e21-9283-4c53-b98a-a4837529afb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c304827f-4552-41e9-85a1-54fec13793b0",
        "cursor": {
          "ref": "6694b1e2-8495-4167-a310-1eb91c7c4fed",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fc588679-d03b-4238-8d40-9579f34f20d1"
        },
        "item": {
          "id": "c304827f-4552-41e9-85a1-54fec13793b0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b0a8d788-b736-4496-afe3-e370b858cc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7c0e70-029f-4932-b48f-82428557aa5f",
        "cursor": {
          "ref": "d079f2c5-2d66-4526-a802-ce1e8553f2e4",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "091e6385-15e9-4147-aa7d-7953daad25e1"
        },
        "item": {
          "id": "ae7c0e70-029f-4932-b48f-82428557aa5f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f2b6a70c-914d-4296-86f8-f23525c733e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014e72d0-4786-4362-9112-b06132a88b50",
        "cursor": {
          "ref": "982d2ed2-689e-4540-8c9e-7f983ac04492",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "39d963d5-baf9-47ec-baaf-c15071db3ed9"
        },
        "item": {
          "id": "014e72d0-4786-4362-9112-b06132a88b50",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "80e5ffc4-8222-4fd9-85e8-bcb32edb7131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe79acf7-9d56-441f-9095-0b8ae754f333",
        "cursor": {
          "ref": "76e5049b-e79d-44ba-8321-5f755b9443db",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff376d2f-bd7d-4641-afa1-96e995559893"
        },
        "item": {
          "id": "fe79acf7-9d56-441f-9095-0b8ae754f333",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "01479459-1be4-472f-b243-0fc9f8ffa0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc400e9f-2950-4b4a-95d1-95e61e1d2c4e",
        "cursor": {
          "ref": "1a2a7850-2848-4d80-8377-09dcfd0ce7ef",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "205e73cb-8f18-46a1-bc50-fec4d411ac08"
        },
        "item": {
          "id": "dc400e9f-2950-4b4a-95d1-95e61e1d2c4e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ca3306ca-4cb8-4ae2-a109-9bbc81f2f51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2806fac2-da01-4e46-a244-d42e989d2d64",
        "cursor": {
          "ref": "efbc0d7a-0730-438a-8d6a-8d30abd520de",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4fb5a698-b746-410e-ad00-d37a0e9474c0"
        },
        "item": {
          "id": "2806fac2-da01-4e46-a244-d42e989d2d64",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "52823111-556e-47b9-af13-3aae3fd1f570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf0bda8-b5a6-43af-af53-70772d1a39f6",
        "cursor": {
          "ref": "0b173464-a171-42c1-bbad-beb17eb51725",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "18587f80-013b-4dab-9c69-74d82fea726c"
        },
        "item": {
          "id": "6bf0bda8-b5a6-43af-af53-70772d1a39f6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f28d2040-0d8a-4129-801f-98ac0ab61c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd03e7e-8886-4ad1-8312-0727de85319d",
        "cursor": {
          "ref": "dd003b98-b21b-4b54-9d3f-e6cfa959e2a2",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "95758086-fe25-4f51-8d9b-4b392d4f3722"
        },
        "item": {
          "id": "7dd03e7e-8886-4ad1-8312-0727de85319d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1daf7516-b9bf-4cc6-b3bd-bc7b61414dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea53863-7761-4726-978f-aa18d4f7f460",
        "cursor": {
          "ref": "28987935-3bfc-4b41-b265-642fc065c1e1",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4e4e93e2-eb36-4aca-b48b-e8f2bb26b5c5"
        },
        "item": {
          "id": "8ea53863-7761-4726-978f-aa18d4f7f460",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "216131b9-ab1c-4d88-9e7c-bbfe40f122c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67b2b90-8aa5-44db-b92e-dfe4eefcf45e",
        "cursor": {
          "ref": "197bab21-7d11-4af6-bfa1-0059393bde8c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2eedad7b-7ca2-4ef1-87f9-ab146c6bc530"
        },
        "item": {
          "id": "f67b2b90-8aa5-44db-b92e-dfe4eefcf45e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e1616bc7-47ca-4fbb-bc72-758269442dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d1e4cb-a154-4daa-8fa1-a0a07fd4dae6",
        "cursor": {
          "ref": "448726f1-ca43-4db4-b801-e4973ea23933",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7817c42a-c435-4437-9a06-2076a9c52f5b"
        },
        "item": {
          "id": "67d1e4cb-a154-4daa-8fa1-a0a07fd4dae6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0596e153-e94b-4b0a-ac6e-92b5ced182ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb17bb5-e54b-4f9a-b524-21bf6449f78a",
        "cursor": {
          "ref": "1034af23-1311-44d5-9ec5-70a66b38914c",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3cd0fddc-4414-4ebf-8159-54db802c019b"
        },
        "item": {
          "id": "fbb17bb5-e54b-4f9a-b524-21bf6449f78a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cb3caba2-ec2f-4231-a8e7-645698e81f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef83cb9-56dc-440c-bb25-6fda306eb187",
        "cursor": {
          "ref": "cd3f1f3b-1ba0-4d17-9390-14dbc9fba1fe",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0474fbe0-cdf2-4ec3-b4b9-179708640028"
        },
        "item": {
          "id": "0ef83cb9-56dc-440c-bb25-6fda306eb187",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "81062294-d0bd-4054-80bc-87ca4a1c41ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f6926acd-2519-4b4d-ac72-a5d575092951",
        "cursor": {
          "ref": "92537f90-c7d3-4827-8886-3e84a45ca280",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4e6875f7-9fbf-4ef1-828e-3240791b2d73"
        },
        "item": {
          "id": "f6926acd-2519-4b4d-ac72-a5d575092951",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b223ce06-d008-49a7-a16b-d1194976ca1f",
          "status": "Created",
          "code": 201,
          "responseTime": 1620,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c13b873d-4360-4c7f-869a-7f31d7594097",
        "cursor": {
          "ref": "6cbe2b8b-54df-4dc8-a5b8-cbb4020ae500",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9818c9e6-84f1-44b6-95e4-bfd5ebdb5dfc"
        },
        "item": {
          "id": "c13b873d-4360-4c7f-869a-7f31d7594097",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1f2e2142-26e3-4443-bc78-8d8fe944edaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5c19b8aa-019d-425c-a87b-8d6f856b76a1",
        "cursor": {
          "ref": "82af62d6-0a50-4fdb-8c3f-d624607bb8b4",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "43f2397e-1e8f-4a15-85dd-c08defa39f9e"
        },
        "item": {
          "id": "5c19b8aa-019d-425c-a87b-8d6f856b76a1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "494dabfb-7f33-45f6-8a9d-b372776c971e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebebe01-d223-4130-85c0-c909bd0e1f48",
        "cursor": {
          "ref": "eacd0918-d23e-42fc-9739-89c254cc2d41",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "48230bfd-1839-43c8-b569-53957b07b8ef"
        },
        "item": {
          "id": "5ebebe01-d223-4130-85c0-c909bd0e1f48",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "87807271-f257-48bf-854a-ac4b5e93ac3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3627cecf-80d4-4e1d-91a4-d8c3cd408e07",
        "cursor": {
          "ref": "c2f060fd-0ad2-406a-9870-4bcb894b5ac8",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2d003f05-fc34-461f-b339-8fc8542e7f87"
        },
        "item": {
          "id": "3627cecf-80d4-4e1d-91a4-d8c3cd408e07",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fb61def6-8e75-4349-94a3-7e0786f6a8b2",
          "status": "Created",
          "code": 201,
          "responseTime": 1263,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "15688bf6-71e8-49a1-91e8-fa5308755139",
        "cursor": {
          "ref": "b43ac539-366f-4042-828a-aaf675301100",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5608b4e9-8e98-4ae4-bdb9-70ef269f514f"
        },
        "item": {
          "id": "15688bf6-71e8-49a1-91e8-fa5308755139",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "41e7fb2f-0925-439f-a50f-29e9b59eb0e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "66f2e0d8-9be1-44db-b627-f383e0591066",
        "cursor": {
          "ref": "8222791f-a4ec-4301-894a-0dec79397dc8",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b8d657cb-5543-4927-8bc9-8667d73287da"
        },
        "item": {
          "id": "66f2e0d8-9be1-44db-b627-f383e0591066",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2eef3141-5af4-4097-accf-dbeed1feaa85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 554,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "79eab1c7-8fa7-46ff-9682-a52e32e73d63",
        "cursor": {
          "ref": "85a9029c-50b2-40af-942e-c6bcaa0e9352",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "74e1dcc9-ab04-4d85-b5db-ab7368dfa413"
        },
        "item": {
          "id": "79eab1c7-8fa7-46ff-9682-a52e32e73d63",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e641a3b8-d1f5-466d-802d-48a3bab8fcfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "63d14272-b4f8-4df3-9b87-8292fd319f09",
        "cursor": {
          "ref": "5d21c382-bf89-4212-a8e2-74d94c9081f9",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "14d87637-ba14-4db4-baf9-ee4a7fcf1be0"
        },
        "item": {
          "id": "63d14272-b4f8-4df3-9b87-8292fd319f09",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "80fd9a02-838c-4ca6-8d20-1b56546cdbd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6854c0f6-8f8d-43f9-b3b1-5acd7f1e9f54",
        "cursor": {
          "ref": "bf201355-d054-4e7e-a74d-95e840ec0238",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "39322162-2670-4d72-9dc4-f57514efd2d3"
        },
        "item": {
          "id": "6854c0f6-8f8d-43f9-b3b1-5acd7f1e9f54",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "438ac73e-06f6-44cd-8c28-a2e68df20832",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b32c03e1-8d28-453c-ba4a-7c26f8fea4e1",
        "cursor": {
          "ref": "877b7761-a0ff-43a0-976e-f3b01bd97ee7",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6d0d01df-bf64-4a7d-8394-4b908c90989e"
        },
        "item": {
          "id": "b32c03e1-8d28-453c-ba4a-7c26f8fea4e1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3890bceb-f38e-4337-b81a-6635ab9add85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b3364085-b7d1-4958-aba7-a2f8b2dc9aad",
        "cursor": {
          "ref": "e4d45327-3dd1-4bd3-9775-d75365c3bf52",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d840f271-cbaf-4405-a60a-24ed1f1c7687"
        },
        "item": {
          "id": "b3364085-b7d1-4958-aba7-a2f8b2dc9aad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "014bb214-44b1-4d2e-a74e-fc070d224823",
          "status": "Created",
          "code": 201,
          "responseTime": 800,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8fd45937-ff11-4946-9bb7-4e2b684e714e",
        "cursor": {
          "ref": "a32ea224-f8b8-41bb-ab82-67b2577cbd17",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3432c6d7-4cce-41f2-88f0-d73514be2a4f"
        },
        "item": {
          "id": "8fd45937-ff11-4946-9bb7-4e2b684e714e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6fbbaea4-440e-4f9f-a6e1-1dc8cde4407b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6b3bc0-9cdf-48d5-8b38-01c25e0e3508",
        "cursor": {
          "ref": "fc47c0b0-a0d1-4e32-a1ea-b447edfd1ae0",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e27446e2-87ba-4e6e-8caf-e91bd01cc0f9"
        },
        "item": {
          "id": "2a6b3bc0-9cdf-48d5-8b38-01c25e0e3508",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1c4988be-a0f0-464e-b566-80d7c625d95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4c4b59-c766-42e5-9342-270f4d82bbe5",
        "cursor": {
          "ref": "f13ac8d0-cdc9-4b7d-bb7e-794999b0ed7b",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9820ee1a-1b05-4526-8b36-229d435ee53c"
        },
        "item": {
          "id": "5c4c4b59-c766-42e5-9342-270f4d82bbe5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "784d44cc-57d8-40af-8cb1-44ad46350f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d594bc-8963-4785-931b-8f76b7e2168a",
        "cursor": {
          "ref": "c317bf12-dabe-40bd-af8c-4392b327ae06",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c405b5cb-e5d5-4884-83d4-e61a3d0d28b2"
        },
        "item": {
          "id": "10d594bc-8963-4785-931b-8f76b7e2168a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b9215027-14ca-4b7a-ac39-ccbe9b1245dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60c607c-bfad-4105-beb9-74782de48eb5",
        "cursor": {
          "ref": "3cf90634-6c4e-41ab-b528-149f680818e1",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ab04ff93-8cbe-4004-bd15-4b9dbe7b2592"
        },
        "item": {
          "id": "b60c607c-bfad-4105-beb9-74782de48eb5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bc4bd16f-1b0b-4508-9cd6-1a9013948701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55377a30-6623-4dc0-99bd-aeff7d0a5331",
        "cursor": {
          "ref": "7948b1b4-1192-4f36-a436-f2230bac7853",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7345d277-62fb-4d3a-b99c-6d50f56b8b2a"
        },
        "item": {
          "id": "55377a30-6623-4dc0-99bd-aeff7d0a5331",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1140e86f-3fde-4c8b-87df-5365a0e5edd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84a0449-b68f-4cf5-b203-6fe64d3a6724",
        "cursor": {
          "ref": "07d5d50c-6dc1-48da-823b-9d4a9cf40bde",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0a795a7a-5a15-4128-8b45-609b5cd4a561"
        },
        "item": {
          "id": "a84a0449-b68f-4cf5-b203-6fe64d3a6724",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3d82f871-ff59-4cd3-8b50-f03576461ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a324a676-74f2-4c39-a358-4480293172b3",
        "cursor": {
          "ref": "df5fe1bb-a802-48ed-a8cc-1ed20a33f747",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ab4c7ab3-047f-4597-9c30-62de83083a0f"
        },
        "item": {
          "id": "a324a676-74f2-4c39-a358-4480293172b3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5ac1baae-5890-425b-87bc-90645277b75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2c3c1d-4ff1-4c90-909f-2af15c6aa545",
        "cursor": {
          "ref": "6c2cfa16-2424-4999-9b17-065c20b28dd8",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f9996820-a4bd-47d6-b66a-559ba14a6de7"
        },
        "item": {
          "id": "6a2c3c1d-4ff1-4c90-909f-2af15c6aa545",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e777034e-32c0-4c9a-9bc2-65f32161e6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c353ba2-2047-49da-89d1-e69439c3970f",
        "cursor": {
          "ref": "ec47edf2-c254-45a0-b56b-d6fa73f8952a",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "af09da59-5b38-44d2-ad34-845b86d07916"
        },
        "item": {
          "id": "1c353ba2-2047-49da-89d1-e69439c3970f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3affe0bb-1d2a-4c12-b3bf-14e63660bc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9445cde5-b43b-4c31-84c3-1a47dd5e08a1",
        "cursor": {
          "ref": "03277261-f0c2-4f15-9a75-570e99ad6507",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bc49c9b1-decd-4b8f-90ff-ca705191b063"
        },
        "item": {
          "id": "9445cde5-b43b-4c31-84c3-1a47dd5e08a1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3cd1f5b0-910e-4d8f-a765-450823cd14c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f52578f-5b8b-4572-8c30-0fea06214c13",
        "cursor": {
          "ref": "cf006f95-b4b8-4aaf-b6e5-e3f9ceaf8af6",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5c91dd18-4b7c-43a8-84ac-08c172ed5956"
        },
        "item": {
          "id": "9f52578f-5b8b-4572-8c30-0fea06214c13",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7d8a2550-7940-4911-8c01-73bfa0771d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7531df14-5120-419e-84e2-a5bbe3632989",
        "cursor": {
          "ref": "e278edc4-6170-4d8f-a24f-31a596b42758",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2d0a84b6-755d-4bc6-95e1-f64746e803fc"
        },
        "item": {
          "id": "7531df14-5120-419e-84e2-a5bbe3632989",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b1c646a2-5491-4e7a-ab78-039e78487da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdea852-87b5-40a2-83b5-13ef9e0acaa0",
        "cursor": {
          "ref": "dfe733f1-e282-4f94-bd75-e839bf0c15e4",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "083b7732-6a86-4638-ac23-99aefa705c70"
        },
        "item": {
          "id": "3bdea852-87b5-40a2-83b5-13ef9e0acaa0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9445ca75-6c6c-4af8-9c74-e7b02c76e63d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 532,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "79891409-acc2-4dc2-8d90-b8921db65f30",
        "cursor": {
          "ref": "2364a089-60fa-4ffa-86e8-642e575da19e",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d8a1e8d7-9eb6-4ad7-88c3-9bcd936c6807"
        },
        "item": {
          "id": "79891409-acc2-4dc2-8d90-b8921db65f30",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5cb8f7a6-4348-4199-8028-02eb53c3c924",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 545,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9b8891de-9a36-4506-b293-e9ccf2efe3dd",
        "cursor": {
          "ref": "057b6050-0033-4942-9bda-105d20e7d926",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "10d43501-a9e7-4d6d-9cef-b81c58e323dc"
        },
        "item": {
          "id": "9b8891de-9a36-4506-b293-e9ccf2efe3dd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "82d151f0-8fa5-4fcb-95b3-8472698136d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "efcdde32-6ced-4dc0-a651-f3a01cbf9e44",
        "cursor": {
          "ref": "fd70c0ab-fc7c-4bb7-8f43-a3078f6e1207",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "94599440-c2a7-4e87-874e-5c688b8918e3"
        },
        "item": {
          "id": "efcdde32-6ced-4dc0-a651-f3a01cbf9e44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6d57628b-f0bb-48ab-a37d-afe00e17e1e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 548,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "64e88afc-1f9e-41f4-933b-53b9f1e1154d",
        "cursor": {
          "ref": "6028b7c0-1af8-4916-8291-2de7481f70e8",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d4b7de06-68fe-4cbd-a575-8926a2db14ae"
        },
        "item": {
          "id": "64e88afc-1f9e-41f4-933b-53b9f1e1154d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "aaac5e82-bf18-4632-a7ae-46da877ca736",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ca4a12b7-1cd5-4834-b74c-eeca393e36fc",
        "cursor": {
          "ref": "21e3e86c-8405-4605-8887-26ad9396d0cf",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "766e161d-7b79-4c60-8ec0-942ace15da9f"
        },
        "item": {
          "id": "ca4a12b7-1cd5-4834-b74c-eeca393e36fc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2b19b9dd-4e24-4b43-9393-c1e57037ebe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd903c28-f708-42e4-8e61-1985c016ebe3",
        "cursor": {
          "ref": "ab1e9fd9-ae70-40f7-adde-622c31fbb73d",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c3d50e85-7895-423b-b39d-532eb2836aa8"
        },
        "item": {
          "id": "cd903c28-f708-42e4-8e61-1985c016ebe3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "edbb6fb7-790e-49c0-8a79-abdbd1654d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4631105-075b-42ae-ae06-f365901ef174",
        "cursor": {
          "ref": "bb0c6e01-ef99-467a-be24-52f910db046e",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a0015fef-aa23-4bf0-ace1-cf8476ab9b6d"
        },
        "item": {
          "id": "a4631105-075b-42ae-ae06-f365901ef174",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1b78e03e-71bf-43c8-bd07-663b0c0e122c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6101ed-e306-4fc5-9646-5a0ac01cce6d",
        "cursor": {
          "ref": "a23ac2ef-4407-4fdb-a74f-a95481d66d57",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1fc2fdc8-0832-40a8-beeb-df56b42516eb"
        },
        "item": {
          "id": "6b6101ed-e306-4fc5-9646-5a0ac01cce6d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "70e1bd38-2246-40c2-9174-8e9670492433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9043ab-ed11-4058-b083-c5cbb2bbef42",
        "cursor": {
          "ref": "309388ba-677b-460d-8ac9-f75ed7bfdc36",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "af0b6a6d-f3a9-4786-b87b-714d383d1a50"
        },
        "item": {
          "id": "4f9043ab-ed11-4058-b083-c5cbb2bbef42",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f9f5fccd-01e9-4cca-8929-31daffc7f6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02bbd8c-f5e8-4882-b62d-f822f1b1e806",
        "cursor": {
          "ref": "fa41fd27-c3e8-44a0-82a3-3b322d004819",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "377ee65b-65f3-4b6f-9ec2-8e362d155bb7"
        },
        "item": {
          "id": "e02bbd8c-f5e8-4882-b62d-f822f1b1e806",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "50d91bbd-dddc-4b70-ae02-65f5a79f3d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40a7d16-958e-473b-b11b-ac5aa0364654",
        "cursor": {
          "ref": "d7dcca50-dd73-4d4a-9ac4-338bf74d7f31",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eaec936e-285f-484c-b739-e91eceae7f88"
        },
        "item": {
          "id": "f40a7d16-958e-473b-b11b-ac5aa0364654",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d244d623-95f4-4aea-9dff-b5e633d7b350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a32666-6c8d-4243-b51b-3ba4a3d24c90",
        "cursor": {
          "ref": "407b4a1f-9766-45ea-83cb-006d9ee61b6d",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2738ad35-a7a2-4261-ad2c-f6af298a27cf"
        },
        "item": {
          "id": "36a32666-6c8d-4243-b51b-3ba4a3d24c90",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7839de69-d429-4b8c-8c27-0a01d59a8a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64029731-ccf2-423b-a6b0-8821cb81c9c6",
        "cursor": {
          "ref": "01b53340-d478-427e-9cb4-8a0c864e2ba1",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bd17bd44-7f48-4937-9d82-b5ac5be5af98"
        },
        "item": {
          "id": "64029731-ccf2-423b-a6b0-8821cb81c9c6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e1b5713d-7a4b-4b90-b788-da3ddb213b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4ed596-d979-4f1e-ac93-e2775e85ec70",
        "cursor": {
          "ref": "107810dc-d095-4035-85bf-a16ddc8eb3de",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "547a8a86-079f-440d-a4d5-7967c6771850"
        },
        "item": {
          "id": "5b4ed596-d979-4f1e-ac93-e2775e85ec70",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "32383f0d-6d83-4eea-a62f-b7196cd82e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd475dc-c327-4b63-bc47-82b307b4986d",
        "cursor": {
          "ref": "0fe010eb-7ad4-4844-b8e6-7c28fa8f1a58",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f688b442-a4f8-49ef-b43e-ffc58f4b4899"
        },
        "item": {
          "id": "6fd475dc-c327-4b63-bc47-82b307b4986d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ead3367c-19b1-4928-8434-f7b946e8553f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef04ba08-8a8e-462f-9dad-b02c92374cee",
        "cursor": {
          "ref": "007469e9-9caf-4e71-96bc-67195a2dfb7a",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ce7cf483-8d4f-4552-9cdd-ac1709538cd9"
        },
        "item": {
          "id": "ef04ba08-8a8e-462f-9dad-b02c92374cee",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "19102c90-af77-4aa5-a5b9-89413d3fa161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b54b3ff-1dea-4d99-b45d-0ab16b361702",
        "cursor": {
          "ref": "2d88c026-1470-40c8-84af-c6e1160f7c36",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "21c2098f-8108-4d07-8966-10d1bd6ffaa3"
        },
        "item": {
          "id": "7b54b3ff-1dea-4d99-b45d-0ab16b361702",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8a03c1f2-66c7-4b0a-a526-4287e1fa2156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebae2fa-b286-4041-a266-eac202cb1d7d",
        "cursor": {
          "ref": "15618d7c-9770-4e96-8ef2-7f16c2a10c43",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b3509397-7e76-4f23-b928-3dcad0aa5312"
        },
        "item": {
          "id": "3ebae2fa-b286-4041-a266-eac202cb1d7d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1c754b2f-0c54-4e8d-8b7b-549a8cfbd68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046edfcc-a4ce-4a43-82aa-928255a6cc50",
        "cursor": {
          "ref": "6bd9b144-58e4-4c82-b7a8-fa73b87142bc",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "66b97e97-7d2e-4f9b-acc5-68b545683c93"
        },
        "item": {
          "id": "046edfcc-a4ce-4a43-82aa-928255a6cc50",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6a823d35-a35d-4189-a968-f1e3480e36b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6cc8e6-7b60-4759-8f20-e6cb88c214f8",
        "cursor": {
          "ref": "93446b67-bf53-454c-9220-e87010b0b4ed",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d3757d90-8011-48b0-8b6b-6a21263e8970"
        },
        "item": {
          "id": "1d6cc8e6-7b60-4759-8f20-e6cb88c214f8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5aa78a07-a198-47cb-8af8-a18318e6c128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f265ada-1f41-42e8-9492-2841f5442923",
        "cursor": {
          "ref": "a11c773b-70f7-4b9a-8037-823f56d33485",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "28da6eac-3cfd-4caf-81c2-6fb04cce859e"
        },
        "item": {
          "id": "5f265ada-1f41-42e8-9492-2841f5442923",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "02979229-a391-4cb4-83cb-bd22d21cbb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334d1ecf-0b7d-41e0-8f03-5ec031ae8166",
        "cursor": {
          "ref": "a1938fa0-4245-4d2f-b700-52cbea166080",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8e098dae-cac3-4dce-b7fa-e010fc303c59"
        },
        "item": {
          "id": "334d1ecf-0b7d-41e0-8f03-5ec031ae8166",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e095842e-8787-4c85-8155-21bc50d9302a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c39fcb6-db56-491e-8f18-ece23278f97d",
        "cursor": {
          "ref": "fadbe619-bb9a-42d8-9d5b-a51b79309bef",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a28d07c2-4de2-43c8-90e2-5ef11e124623"
        },
        "item": {
          "id": "4c39fcb6-db56-491e-8f18-ece23278f97d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5af37305-8ce9-4f25-97c7-f10904d7774d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5336e4a-fe62-4f5b-853c-702df4d14589",
        "cursor": {
          "ref": "a7b6d48d-95c4-4afc-a596-aaca2ced8296",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5c799179-5a4b-4a93-8d49-abcea75c0a1a"
        },
        "item": {
          "id": "a5336e4a-fe62-4f5b-853c-702df4d14589",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "08af0d0b-7d58-4cbb-a0b0-955813bbea4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d3c00-d395-4bf2-932f-61d6fd00452d",
        "cursor": {
          "ref": "c231f8da-2ae1-413c-983f-c38e2b71873b",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "382117d3-246c-4ffd-a854-6c46872807d9"
        },
        "item": {
          "id": "780d3c00-d395-4bf2-932f-61d6fd00452d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "02cb8cfe-4a67-495a-882f-993ef8f01a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b732cb09-3511-4a3c-a6a2-69a484763e93",
        "cursor": {
          "ref": "20ea2768-99cc-4489-9c8b-5bac0dcc45a1",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4a8aca62-9f8c-4efa-a2e2-3db28eda5c35"
        },
        "item": {
          "id": "b732cb09-3511-4a3c-a6a2-69a484763e93",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "69b00866-f960-4c9a-bf75-763988c91990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d85986-88f2-457f-b7c1-4d910d5975b3",
        "cursor": {
          "ref": "05067d62-a1da-4696-9743-854989fd502a",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a91071ad-5106-4dbb-acaa-0a017c6745f2"
        },
        "item": {
          "id": "16d85986-88f2-457f-b7c1-4d910d5975b3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ff4de380-03e5-4b00-a655-3a3f8d1b5ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07950b3-1796-4395-9f30-ccabe7604f16",
        "cursor": {
          "ref": "130d6244-fc6d-4136-b7f9-18df08440e37",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8f643300-2da1-4a55-9516-5b7f66b46337"
        },
        "item": {
          "id": "e07950b3-1796-4395-9f30-ccabe7604f16",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "64b786f8-7514-4393-89f9-168457b6394f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a79a37-df9b-4be3-84b7-6ce2d36cea12",
        "cursor": {
          "ref": "4cf40962-bb2b-45a4-b6a9-538f3277669b",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "424f0465-2f18-44ee-a2a0-3d8523225fe0"
        },
        "item": {
          "id": "35a79a37-df9b-4be3-84b7-6ce2d36cea12",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3031606f-5a85-4e1b-bd96-450646abbc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa1b74f-82f9-40ea-864b-393b63270522",
        "cursor": {
          "ref": "d57155e7-e75b-4343-9704-1653d730a27d",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "39024a7d-4034-4d0f-90e1-5ac5ae869bce"
        },
        "item": {
          "id": "5aa1b74f-82f9-40ea-864b-393b63270522",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1bd3d3b3-1e6b-4bbd-8e6b-ad62c5b7947b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f940e0ae-552d-4214-80cc-9b568887a327",
        "cursor": {
          "ref": "9506de17-62c2-452c-bd78-fe51619ddad8",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6692f5a4-d28d-45ab-8d6e-1c558329ff5d"
        },
        "item": {
          "id": "f940e0ae-552d-4214-80cc-9b568887a327",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d586c4c6-7233-466b-991d-0741304a087f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff68c8b-156e-482d-a551-3841c46f2a9b",
        "cursor": {
          "ref": "ef13849e-ea1e-4310-87e7-6291f5de284f",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6e4e9291-cca8-45d4-ab0e-719cda86d903"
        },
        "item": {
          "id": "4ff68c8b-156e-482d-a551-3841c46f2a9b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1eeefab2-d18e-4327-91b2-2cc0c9d856ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5e74a4-80f4-4273-9178-ba80eae7be52",
        "cursor": {
          "ref": "46bc0d1b-68ae-4298-8555-2dfa111551a9",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8d24701b-3382-40ec-b2fe-a5f32eb88b30"
        },
        "item": {
          "id": "1f5e74a4-80f4-4273-9178-ba80eae7be52",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4382c793-9629-4f37-bb49-b582557b12d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf89ff6-2844-4ad2-92d1-b2b5bb1e4cfb",
        "cursor": {
          "ref": "50fcbd9d-31fc-44d6-b45e-5321bbd005f4",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "56c1b4de-a987-4f55-8e00-c7d4e0938bf3"
        },
        "item": {
          "id": "4bf89ff6-2844-4ad2-92d1-b2b5bb1e4cfb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1a21740f-708d-4998-a878-5315ab3dd3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50ed805-56d5-4c77-9d45-a073fd5b683c",
        "cursor": {
          "ref": "e33fbafb-e9d9-474a-8103-7a590b2659c8",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9113e9ba-6319-4cbc-8150-3024445f09fb"
        },
        "item": {
          "id": "b50ed805-56d5-4c77-9d45-a073fd5b683c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6d4d1b73-892d-4a8a-9388-3fbfa26f4d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9793035-5922-41e5-b2eb-79a131f1870a",
        "cursor": {
          "ref": "005cb7de-8ef8-4d7f-bcab-9eae68c1a1f3",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "15832462-4903-450f-8a6b-aec5b2b4af24"
        },
        "item": {
          "id": "d9793035-5922-41e5-b2eb-79a131f1870a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "01fb9d3f-9e19-4809-8e32-aa383a01b483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f1b190-6ecc-408f-af15-1653a2d08c4b",
        "cursor": {
          "ref": "2fe6757b-bf06-4d50-ba3c-85a75194df05",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9f09d7dc-52c8-4400-b841-8441edcd868b"
        },
        "item": {
          "id": "e4f1b190-6ecc-408f-af15-1653a2d08c4b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4c955564-b461-4be5-8131-b8692a8697bd",
          "status": "Created",
          "code": 201,
          "responseTime": 1215,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3473b19a-5acc-441a-9204-faa8c9afa871",
        "cursor": {
          "ref": "168274b2-85d0-4509-965e-d9a2c41ca339",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "26a1299e-7aeb-4d70-a350-418bfed79176"
        },
        "item": {
          "id": "3473b19a-5acc-441a-9204-faa8c9afa871",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e3e8b3ae-49ea-4399-8b0e-c92c03ddb5fb",
          "status": "Created",
          "code": 201,
          "responseTime": 802,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc53d2ab-f245-43c5-b1e4-60ec8648b2db",
        "cursor": {
          "ref": "f5853d06-35b3-4874-b227-5fbcb82e558a",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "197a31be-a668-43b7-a2a8-860d6b512625"
        },
        "item": {
          "id": "bc53d2ab-f245-43c5-b1e4-60ec8648b2db",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d6eff874-0126-474d-9d3f-973c2f4c66a0",
          "status": "Created",
          "code": 201,
          "responseTime": 803,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecb5891-e903-4673-889b-4efcbd333384",
        "cursor": {
          "ref": "373a0295-c479-49a8-8caf-fea48192e7db",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "78343cd0-24e2-4d54-8de5-8f9119a24911"
        },
        "item": {
          "id": "4ecb5891-e903-4673-889b-4efcbd333384",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b135fe2b-0f79-40b1-a74e-3ba2805346bd",
          "status": "Created",
          "code": 201,
          "responseTime": 803,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "237fcfe5-8911-4312-89c0-ce362c32d9d1",
        "cursor": {
          "ref": "0d8c863b-90b1-4a66-9c66-e609ea2f0b03",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b857a869-d638-4a0c-8a6f-b0d3d76827f1"
        },
        "item": {
          "id": "237fcfe5-8911-4312-89c0-ce362c32d9d1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "859ab1cc-333d-4ab9-8976-eefa9a1fafed",
          "status": "Created",
          "code": 201,
          "responseTime": 828,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e527ec7-6cc0-4477-9b8f-9e07ccfb5a70",
        "cursor": {
          "ref": "19b6bec9-d59d-4c86-b655-3657ae3c65a0",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9872d5d5-db95-4625-bb5e-a8119843e33f"
        },
        "item": {
          "id": "3e527ec7-6cc0-4477-9b8f-9e07ccfb5a70",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "aa71185a-e0e5-48c6-b17b-03ce22a09e0b",
          "status": "Created",
          "code": 201,
          "responseTime": 814,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86ba17e-a20d-48b2-8f44-f5c9ff2f1b53",
        "cursor": {
          "ref": "e515722e-3cab-424b-9318-ee31a836cd83",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "32a40568-ba26-45bc-9d57-8fef82f90ef2"
        },
        "item": {
          "id": "b86ba17e-a20d-48b2-8f44-f5c9ff2f1b53",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "477d2444-9b22-46e5-b534-bb7b8f1d9417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e02c62-c776-4b8f-8586-7034634be830",
        "cursor": {
          "ref": "6e225ec8-c746-474f-b975-4cb46c27ece5",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8b9dc4de-7271-4c4e-9e6f-5bfb3e08bb4c"
        },
        "item": {
          "id": "34e02c62-c776-4b8f-8586-7034634be830",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0dff19b8-c46c-4df8-a67f-a9a00fb824cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c8e9e9-5ef8-491b-98b1-1acea2f03e94",
        "cursor": {
          "ref": "74487636-c640-481c-8a59-9bbac7c62ff5",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c6ee24b1-27d8-4b67-a22a-2d5d31e09bd2"
        },
        "item": {
          "id": "b0c8e9e9-5ef8-491b-98b1-1acea2f03e94",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0f58f69d-d684-4048-b485-b6c9d0758c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd5a5ab-a494-4657-90e0-a40d52f7689a",
        "cursor": {
          "ref": "24694a8e-9025-4ee8-a71e-65967a68609a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f30d2fa9-e113-42a5-b829-e7335cb5f677"
        },
        "item": {
          "id": "5bd5a5ab-a494-4657-90e0-a40d52f7689a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2e2e0d8b-d34c-487c-8334-cf755337f8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bb2e72-ef5d-4698-ab4f-fc25f17418ff",
        "cursor": {
          "ref": "078aa882-cd74-4c76-a429-330df2be6d7a",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "583ebc6f-32db-45b0-b1e4-cd89c7e03af7"
        },
        "item": {
          "id": "48bb2e72-ef5d-4698-ab4f-fc25f17418ff",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "756ddd62-0260-4275-a7c0-e61e445e4b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35f09e5-901e-4d27-86d2-4200448e17f6",
        "cursor": {
          "ref": "4c8dd8d5-0716-4ed7-9bf4-cdbe387d9a71",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a1ffc3cf-ae15-4cdd-b513-8dbb62b1c55b"
        },
        "item": {
          "id": "a35f09e5-901e-4d27-86d2-4200448e17f6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ed0aecb3-2ce7-4bbf-8acf-6b5786b23763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1db13f-5fc8-4aa8-9023-fdaed37bd26a",
        "cursor": {
          "ref": "9fdd68ca-2911-4721-9918-ee32407de3d4",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0c4e3c56-25e5-4617-be05-5fc5c0289b89"
        },
        "item": {
          "id": "0b1db13f-5fc8-4aa8-9023-fdaed37bd26a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d4ad6181-a492-46f6-a377-960ba9409ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71928f0e-f019-4738-9dc0-4cbbb45ed3ec",
        "cursor": {
          "ref": "11cd6d32-072b-4d4e-9e01-da32319fb7aa",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "909ac41c-9257-40ee-ace1-7dbbbecf873e"
        },
        "item": {
          "id": "71928f0e-f019-4738-9dc0-4cbbb45ed3ec",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fdb3b5bf-923b-414e-a205-e674428f33ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec601394-33ce-446f-9c3f-fd4f39388b6b",
        "cursor": {
          "ref": "c8680ff0-a878-4a98-ad83-2d4b74420b2d",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3a45cc3f-dcdf-4147-95c6-1c3ecf344431"
        },
        "item": {
          "id": "ec601394-33ce-446f-9c3f-fd4f39388b6b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ee64bf9-e252-4d78-82ea-6d1a06a7ba5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394b13f5-8ae0-4d52-acd5-8f613ed97a42",
        "cursor": {
          "ref": "88b46609-0a43-48ea-84b0-cb06fc196250",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f52cd716-94aa-4ac6-a6bf-4dc2340f79fc"
        },
        "item": {
          "id": "394b13f5-8ae0-4d52-acd5-8f613ed97a42",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7f1c10b5-a1b6-417c-8803-0857f78b48bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73b9f04-04c4-4b8e-a3f4-1b2253052b6d",
        "cursor": {
          "ref": "48b7ed1a-7840-44d7-a5a9-eff27f492a54",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3a0e56be-ac5d-4db7-bdef-713d1508ec68"
        },
        "item": {
          "id": "a73b9f04-04c4-4b8e-a3f4-1b2253052b6d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0dc6c0c6-ac66-43de-8113-60f3dccc910c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9681215-1d73-4b71-9421-15096190ae4c",
        "cursor": {
          "ref": "f8259f43-948b-4af8-9b53-dff7d87d9670",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "69ab191f-99da-41a8-a6c8-0d084964c98f"
        },
        "item": {
          "id": "f9681215-1d73-4b71-9421-15096190ae4c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "89c33666-f2f1-4423-8c71-4d987f8ffaa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5cb375-6623-4fd7-afc0-38b9c58cc18d",
        "cursor": {
          "ref": "f6e5f6f6-3898-4054-a012-b41653a50032",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d97156cb-9127-4ab6-aee6-460a6af44548"
        },
        "item": {
          "id": "8b5cb375-6623-4fd7-afc0-38b9c58cc18d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "200795ce-5949-4333-86fd-6ac8951716ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3062b324-4f2b-48ef-ae11-97b0f03f911f",
        "cursor": {
          "ref": "efc011b0-8835-4216-a8eb-56c2ba42b55c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "64b45ce6-b74e-416e-ac95-289511e3a757"
        },
        "item": {
          "id": "3062b324-4f2b-48ef-ae11-97b0f03f911f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5fcfd67e-e11a-4ece-ad0f-e8eb255c6994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72344023-58d8-4b98-bbb6-ac610b2bc14d",
        "cursor": {
          "ref": "173ff6ac-224f-4870-a44b-7e6e31063068",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "646cf0d9-ade6-4379-9b4f-4c85a7e9c3f3"
        },
        "item": {
          "id": "72344023-58d8-4b98-bbb6-ac610b2bc14d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5e5608d3-5d03-497e-b42f-cf3e836482d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab369cd7-8028-455e-a7b7-0a5d1e85f2d7",
        "cursor": {
          "ref": "0c8faeda-bc2d-41d4-b3f6-4490ec1f7c16",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4e96eccc-4e9b-4f3d-bd71-8078eb7dc66f"
        },
        "item": {
          "id": "ab369cd7-8028-455e-a7b7-0a5d1e85f2d7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9b9197d4-045f-45ee-92cd-a0355a1a726c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303ff9f0-13ad-4998-9a94-16f71d8c115c",
        "cursor": {
          "ref": "72752ec0-4e4d-4e43-9247-9795a73b3083",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c50996f3-78df-42be-b08a-a25038d8f946"
        },
        "item": {
          "id": "303ff9f0-13ad-4998-9a94-16f71d8c115c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "41c98c2e-d0e0-4978-b763-d024cbb318a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a15f9a0-62be-4c94-be9d-73234edb2d24",
        "cursor": {
          "ref": "b3bc3b08-9e94-45ee-a984-91ac72978a17",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6c75b9ad-fe17-40d9-af8e-65855651af1a"
        },
        "item": {
          "id": "3a15f9a0-62be-4c94-be9d-73234edb2d24",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "76266ffe-f80d-4f67-bce2-0bbeb76477ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eafbb94-f80f-4fa7-8e04-163cc9f35634",
        "cursor": {
          "ref": "032d89b5-5d36-4eab-bcee-3f88cde75f18",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8f749465-9196-4d56-87c1-ffbd122b5ce3"
        },
        "item": {
          "id": "2eafbb94-f80f-4fa7-8e04-163cc9f35634",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5f0a220a-c7f3-4355-b3da-a8bb8463b13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db294fc-32f5-47a0-a331-a224e65dd608",
        "cursor": {
          "ref": "46ce8590-6e19-4c55-a2ff-d7ad2978e60e",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "81dc1caa-576b-4103-ae77-79a74f0bc5c5"
        },
        "item": {
          "id": "6db294fc-32f5-47a0-a331-a224e65dd608",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "984fcc7c-93e1-4211-be96-292af7fdc72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14094f1-c267-4a48-89e8-28d829c177cb",
        "cursor": {
          "ref": "db46bec4-3fb6-4c9b-b8e2-e58c4ce956fe",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "26199920-40cb-4c0c-b9a7-fbfff68859dc"
        },
        "item": {
          "id": "d14094f1-c267-4a48-89e8-28d829c177cb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3c84ce2a-6139-410d-9301-5fcb5710d3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1261d96-1885-4eaf-8df6-c1010cb75edb",
        "cursor": {
          "ref": "16ecae38-4138-4e92-8f68-32b9f5580265",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a74f3715-826f-4d12-8b3c-5841735dd846"
        },
        "item": {
          "id": "d1261d96-1885-4eaf-8df6-c1010cb75edb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b27b3bcd-fdf3-4461-937c-b13b7aef4b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d7b339-4360-4d12-8771-4f91e87421a2",
        "cursor": {
          "ref": "bf4fc10f-88df-47ae-8bb9-7b3adb25fcfb",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c3f76dbd-bbb9-4dcb-861d-f1effa6f0af2"
        },
        "item": {
          "id": "47d7b339-4360-4d12-8771-4f91e87421a2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e8089080-5226-4ed6-bba9-f02c1f084a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea0abe1-c6a9-41c5-80ed-e491bda439b2",
        "cursor": {
          "ref": "b4168773-0545-4081-bca3-f2de80d7d76d",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2a4a48f8-b924-44fb-b0cc-8b58d06d601a"
        },
        "item": {
          "id": "dea0abe1-c6a9-41c5-80ed-e491bda439b2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "95d3beff-179e-4c82-9e34-8bf5491f6897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb9e9c1-7a06-4624-918e-7a716191638f",
        "cursor": {
          "ref": "e2a311cc-6efb-41a5-91ac-b8921ecc6866",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9b113136-31d1-4837-b665-d8b002655780"
        },
        "item": {
          "id": "7eb9e9c1-7a06-4624-918e-7a716191638f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "261bc3c6-6535-45bd-82f8-e252be9a94de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d57573f-84b1-49ef-9999-5b6fe7c6e067",
        "cursor": {
          "ref": "b438b267-61a0-496c-90ad-3f24f73eefe8",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "06796d7b-c898-46ec-b17f-6b74307d0d27"
        },
        "item": {
          "id": "1d57573f-84b1-49ef-9999-5b6fe7c6e067",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7d7c2f57-3034-473a-9417-1a2d1a5a0c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b574e61-f070-4eb2-8b33-7653690b5c2c",
        "cursor": {
          "ref": "889e2bb8-0b08-4557-9d4a-6be4c7b71a34",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c056d0b6-3b6e-4906-a1a8-a8ef00ebf2f0"
        },
        "item": {
          "id": "1b574e61-f070-4eb2-8b33-7653690b5c2c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "872a91b8-1883-4864-aaca-ce83b7728e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b63e75-1a37-4a28-8b60-ef81f3e4712b",
        "cursor": {
          "ref": "6695c9b5-4d61-43e5-b1e5-45bc0cdbeaab",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ab546403-9b30-4193-8f36-aa342e06db32"
        },
        "item": {
          "id": "e7b63e75-1a37-4a28-8b60-ef81f3e4712b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ac781761-10c9-4151-8328-a6e925c7f237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd98d98-f1ac-4f26-9bc7-6a8e64c5a4ea",
        "cursor": {
          "ref": "8e59f524-b613-4367-a9e2-ff5de4b94fdc",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fd75776f-400d-44e3-8ce7-01678ffff8d1"
        },
        "item": {
          "id": "1fd98d98-f1ac-4f26-9bc7-6a8e64c5a4ea",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7857f883-8c87-4720-9f76-6ea3940bb3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4541d69-29a2-4a9c-b49b-13e9f6357e51",
        "cursor": {
          "ref": "2216a5ad-d13c-47b9-887f-79a3073c44d7",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d6497b41-361d-4668-90dd-b76438f9f604"
        },
        "item": {
          "id": "a4541d69-29a2-4a9c-b49b-13e9f6357e51",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d11e8a80-3fa0-4c6b-a695-437736dfa689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f79ab2-2655-40db-a9c9-0207a7f5ab08",
        "cursor": {
          "ref": "2aee1440-37e5-4b41-86ae-d9804f6e717a",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d4256e2d-d249-4950-a0c4-96001a9011b1"
        },
        "item": {
          "id": "f4f79ab2-2655-40db-a9c9-0207a7f5ab08",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a2d0928a-696d-41c0-b107-9fd8632f340c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e22f56-b03f-489a-9b8d-c40f53e19966",
        "cursor": {
          "ref": "dcf2c633-f89f-4ec5-b510-435a7b62bc80",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b00d9a53-9e1c-4ad8-bf01-5f500c2ae417"
        },
        "item": {
          "id": "a8e22f56-b03f-489a-9b8d-c40f53e19966",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d467f45d-6629-45c5-8f80-f3f93bf93761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ff30e8-3af0-4f8b-81c0-90c0f633d016",
        "cursor": {
          "ref": "b6d3886c-26de-4a17-ade5-b1b21f121658",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "95676274-a25e-4b54-a7a2-a4e575a6f76e"
        },
        "item": {
          "id": "32ff30e8-3af0-4f8b-81c0-90c0f633d016",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c6b78a6e-dd91-4e17-ad03-dc771660061d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176ce93b-6a59-4f60-a567-dd5552202be6",
        "cursor": {
          "ref": "2b8f3e67-f4dd-440b-a02c-e96f761b1b54",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1299931e-d292-4eb7-baa1-c8a3866c12e6"
        },
        "item": {
          "id": "176ce93b-6a59-4f60-a567-dd5552202be6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b85bcd82-0916-4eb0-8599-90dfd707c859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11db778f-4c46-401c-a066-4a8875c328c5",
        "cursor": {
          "ref": "21734fe1-44c2-4eec-bbb7-c33f3e74eab6",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e3e48013-15f9-41d9-a15b-399ac842007f"
        },
        "item": {
          "id": "11db778f-4c46-401c-a066-4a8875c328c5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1f849d0a-ee24-4fb0-9ccc-3322ec3d6d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92342fdd-66c6-4806-9664-aabed126da35",
        "cursor": {
          "ref": "96d5f087-1d4b-4e3e-9422-0127420dac92",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b04a1256-3605-4733-818d-f518ff799bdc"
        },
        "item": {
          "id": "92342fdd-66c6-4806-9664-aabed126da35",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7c7fc687-cb4b-4a88-95d1-91dc5f08b3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a05d9c-39f6-4482-9ff6-251b299a651c",
        "cursor": {
          "ref": "74b686c0-f1f0-4779-833f-ab61d395ac3b",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "702884e4-8e0f-41d5-8e62-0f36a7bd9989"
        },
        "item": {
          "id": "f0a05d9c-39f6-4482-9ff6-251b299a651c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f36330e1-e38b-427a-bcfc-34f24eeb5b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f365dd0-c290-4d17-9b02-dbd52c0c0cef",
        "cursor": {
          "ref": "8b15a052-bb4a-415e-9a67-4deec7e2619d",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e9bd6d26-2434-4d5e-b0cd-79aa786e7caf"
        },
        "item": {
          "id": "6f365dd0-c290-4d17-9b02-dbd52c0c0cef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5f37e757-4eaa-49e3-93c4-69c8582fef04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aceff248-b167-4e99-9c53-6c81a0b465b7",
        "cursor": {
          "ref": "e5cc21a4-a9d4-4106-b7fa-04282d9d02d3",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "30b5f9cd-1159-4f5e-a55e-bc0c3e991cdd"
        },
        "item": {
          "id": "aceff248-b167-4e99-9c53-6c81a0b465b7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0445f7a1-0f9f-4fd0-b8fe-8f2dbe819b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59efe20c-04ed-4bf3-a644-9434cc2caed9",
        "cursor": {
          "ref": "1bade7ff-f2f7-41e0-9d79-ff55afca645f",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ace7196a-c6d2-403b-a34a-22179b28fa02"
        },
        "item": {
          "id": "59efe20c-04ed-4bf3-a644-9434cc2caed9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d8a7bcd4-048e-473a-96bc-1f8cee77d9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff246d-1d3b-41b5-b3ff-d3da1db0f136",
        "cursor": {
          "ref": "3c672f4c-490e-4a69-8b35-e2a01cabfe8e",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f5e54df7-11bc-4d1c-9a6d-802a3b51f78a"
        },
        "item": {
          "id": "23ff246d-1d3b-41b5-b3ff-d3da1db0f136",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9840ab08-66bc-4aa3-a2fd-25dc52c37e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64553b3b-6b90-4c59-9fb7-7b331a6ec88b",
        "cursor": {
          "ref": "cda39910-a797-4b03-847e-b7ea690b4263",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8ff92450-6cf3-4172-b3be-a50cf98f7f2b"
        },
        "item": {
          "id": "64553b3b-6b90-4c59-9fb7-7b331a6ec88b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9fe89c04-8d85-4f0a-96cd-947c167c51fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5e1828-3379-4e47-9b11-f17580ad4440",
        "cursor": {
          "ref": "8135d90e-9029-4ad3-ad4a-c09d42690e13",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4c76826c-27e1-49e7-9d76-de4eac6f68ab"
        },
        "item": {
          "id": "3f5e1828-3379-4e47-9b11-f17580ad4440",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2787a837-70c2-43e1-8a84-817351cb9d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecacb718-acfb-4a17-8256-536e45eda17b",
        "cursor": {
          "ref": "248e2b28-34dc-4731-a325-d045dc7e6653",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7153ccc5-0568-4435-9b13-d2fce65e4c96"
        },
        "item": {
          "id": "ecacb718-acfb-4a17-8256-536e45eda17b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2fe13ba3-47ba-4e21-9ac1-a92c63195156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c7bee9-229b-433f-88ec-bc0050d83a68",
        "cursor": {
          "ref": "ebbcb15f-bc82-4683-8e43-61b8b0f71cc2",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "66446a44-eb6e-40c6-9000-2dd4eae9bac1"
        },
        "item": {
          "id": "d3c7bee9-229b-433f-88ec-bc0050d83a68",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3d9879cb-cd20-4477-8ef2-e9d01d184502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa2f381-4059-4202-a224-ea8293c0a945",
        "cursor": {
          "ref": "5b953345-445a-4685-9bd4-b17aab5df7aa",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a386f216-d7f6-4d50-bf67-83bf8a7ffd51"
        },
        "item": {
          "id": "ffa2f381-4059-4202-a224-ea8293c0a945",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bd4cdfe4-2660-472f-a28a-f8a3256a199f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a728b7d5-7aed-41f0-aa76-c82954050019",
        "cursor": {
          "ref": "b05dd344-751a-4162-a5f1-8ba50ff4ec0f",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6ec0371b-4131-4e56-a94e-d52b78532726"
        },
        "item": {
          "id": "a728b7d5-7aed-41f0-aa76-c82954050019",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b1e339d-c681-4280-8e43-e847454352b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb50f36-ae71-498a-94da-3865e7e2638b",
        "cursor": {
          "ref": "e9dc88e1-b995-4fb7-ab12-5f1bbf5fa71b",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d4bd3670-f3a8-4284-8c3b-07c39a643c8c"
        },
        "item": {
          "id": "7cb50f36-ae71-498a-94da-3865e7e2638b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a9eb1da0-f57d-43a3-b768-6ad6cc77abf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbe1423-a742-41f2-b7ed-8aadd3125503",
        "cursor": {
          "ref": "f220691b-1ada-45ed-a93b-c58b42e690bd",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3fc3094e-7271-46b5-a384-a78549f5a5de"
        },
        "item": {
          "id": "fcbe1423-a742-41f2-b7ed-8aadd3125503",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24171d4a-4a7d-4407-afd5-884cf014000e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4eb4af-5712-49dd-aec9-485bbc4b88f6",
        "cursor": {
          "ref": "7153d342-3317-4e80-b032-3509d9c8b0c3",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "26913a60-0f4a-4e4a-8614-216fd3f9e5f3"
        },
        "item": {
          "id": "ca4eb4af-5712-49dd-aec9-485bbc4b88f6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b0eb862c-343f-47b8-8b50-dae977a0d42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4152f5-f623-4475-9bb0-e07db69ed3c6",
        "cursor": {
          "ref": "840322d5-17ba-47e3-add7-f554b856702b",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c22ffd7a-9ccc-49ea-b364-1117bd085727"
        },
        "item": {
          "id": "7b4152f5-f623-4475-9bb0-e07db69ed3c6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5c5570e5-cb94-4fe9-922c-476713a59650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f14420-30c9-4890-b320-7c9e79dc1918",
        "cursor": {
          "ref": "dd62a243-8cd1-40c5-bc3c-fbc6ce3f7810",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "64a10d72-3cd3-4c48-9150-4f5b05479735"
        },
        "item": {
          "id": "59f14420-30c9-4890-b320-7c9e79dc1918",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "28cc4144-9b8c-451e-a2bf-5a9810888ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f130e5-6318-4132-8571-7e3dde966a01",
        "cursor": {
          "ref": "07589bca-ddbf-4cfe-94fc-36f8f679f1b4",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "18444df7-a30a-462d-ac9b-85df4b9207e2"
        },
        "item": {
          "id": "46f130e5-6318-4132-8571-7e3dde966a01",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dded5987-96e4-4796-9c05-38b5652dfe2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cb77e2-cd27-4473-bdde-991ed322e17b",
        "cursor": {
          "ref": "2c55c945-f4a3-45b9-9da5-30a5e139b6b7",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6b464799-da72-4812-a6de-f4d3b6a60ed5"
        },
        "item": {
          "id": "e3cb77e2-cd27-4473-bdde-991ed322e17b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6303ca48-bec6-443a-81b4-8fa7ba01cbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f5c2d6-fca4-4348-9dd9-da5e76ee4cbd",
        "cursor": {
          "ref": "fc7e7762-2f26-45b1-877f-687fe2975391",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "bff92c44-3a10-4110-ba16-b5559ff7cab3"
        },
        "item": {
          "id": "52f5c2d6-fca4-4348-9dd9-da5e76ee4cbd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "75c8d660-9f7a-4df2-853e-ff1ec306336f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d65884-51f9-4de2-ae77-aa648622789b",
        "cursor": {
          "ref": "482cde1f-536e-4353-9a8d-6ef5950a72ed",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1a3db512-a14c-459a-acc5-ed94149aa93c"
        },
        "item": {
          "id": "78d65884-51f9-4de2-ae77-aa648622789b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8997c997-42b0-4d99-a0f3-523fb1820563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a319511-2b67-4de4-a2b9-b22d41da35d9",
        "cursor": {
          "ref": "36cdf5c6-ecdf-4c83-8837-293f45135e42",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c6494aad-626c-452e-90f7-899139605903"
        },
        "item": {
          "id": "2a319511-2b67-4de4-a2b9-b22d41da35d9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "38d4117a-5caa-49b0-b7bc-7d3d5ceb2144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af20c7a8-ea5b-471f-a3b7-23e28f79abab",
        "cursor": {
          "ref": "9002d045-e387-4ad2-8b9e-76eab7b901db",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2595b525-3c6c-4b28-b8c9-065f5c9a4855"
        },
        "item": {
          "id": "af20c7a8-ea5b-471f-a3b7-23e28f79abab",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c1dc3cb4-b37c-4d29-b1d3-5ac14c23b8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41a4e8e-448b-4f6f-b62e-6c3dcc864888",
        "cursor": {
          "ref": "c4e9b972-104a-48e9-ad3a-46210933abf9",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "33c0611f-9782-4aa5-b6da-64f1742c1992"
        },
        "item": {
          "id": "f41a4e8e-448b-4f6f-b62e-6c3dcc864888",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f6ba6b0e-cb90-41c6-a90e-ee6e2f79ea4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda9034e-5edb-4a74-9382-809b3a800a04",
        "cursor": {
          "ref": "0cfa5dec-beb8-4ca6-b20f-19a1fa66f17e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5cb1db35-b8d2-4788-8a51-55bb9959600e"
        },
        "item": {
          "id": "dda9034e-5edb-4a74-9382-809b3a800a04",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "95cbb7eb-483f-44fb-9773-c621939e807e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56cf1b8-e530-416c-b3e7-5776e7d6d06c",
        "cursor": {
          "ref": "d6715c4e-de14-44fe-8664-ac33290b6517",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e75ed366-c69d-4788-ac79-b01a39d73abf"
        },
        "item": {
          "id": "d56cf1b8-e530-416c-b3e7-5776e7d6d06c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "00efb65f-bbf2-41b2-a708-a2268eb8d5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e9ee47-f753-4c12-83b2-0f030d36959c",
        "cursor": {
          "ref": "86ec7a4d-3aae-46b1-aa0f-1e6c23cab883",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "661860b0-ac7c-47bf-9a60-2fcca71a5a72"
        },
        "item": {
          "id": "36e9ee47-f753-4c12-83b2-0f030d36959c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1312a93d-6e6e-4631-aaf6-29de96277466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cfee2d-722e-42e6-bd27-1d6bd6165869",
        "cursor": {
          "ref": "c1cf3e54-8443-4ff4-ad2b-6c1a67ec8755",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dd80fd19-5279-438c-9dcc-23895c6e99ce"
        },
        "item": {
          "id": "70cfee2d-722e-42e6-bd27-1d6bd6165869",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8abfba31-d082-49fb-b962-23214803ef0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b64b55e-5787-423c-b234-46d0232820b6",
        "cursor": {
          "ref": "6b160d0a-81f4-46ce-8676-c9fbbeae1307",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cb2abd24-67db-4b49-90b2-f1e54e99d573"
        },
        "item": {
          "id": "6b64b55e-5787-423c-b234-46d0232820b6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ccdbea96-7014-4433-a355-21e74ac92739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507e5f2c-c610-4677-bc6f-ba4c5626ad04",
        "cursor": {
          "ref": "674ad988-2cc6-47ca-9c08-53922e16b9d0",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6b957230-9a2e-4697-8205-193b1151d824"
        },
        "item": {
          "id": "507e5f2c-c610-4677-bc6f-ba4c5626ad04",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d62d257b-1b4e-4ae4-b95f-766e02202b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64054372-0614-4cb8-9b0e-8606f91902d4",
        "cursor": {
          "ref": "25f4ec2e-6224-4a5a-b2ad-e4b9467ec6fa",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f11e306c-36d7-4006-be4f-3d88f8c35e35"
        },
        "item": {
          "id": "64054372-0614-4cb8-9b0e-8606f91902d4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a0490b85-bb67-4d20-94ff-ec411beeb866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfebc26c-60cf-48df-a564-fdd570ebb139",
        "cursor": {
          "ref": "4abc2f3e-0b5c-417c-974d-da32dfa1943a",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1dd9a9e8-242c-4233-ace0-eca30dc18152"
        },
        "item": {
          "id": "dfebc26c-60cf-48df-a564-fdd570ebb139",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "062d9e6e-983d-47b1-a015-36a06ce2ce23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84d57ca-8108-4eea-8732-e914011da202",
        "cursor": {
          "ref": "860c2c28-9cd5-4785-b565-7a5119e39860",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "05935962-d26b-43c3-b615-58e2c45b365b"
        },
        "item": {
          "id": "c84d57ca-8108-4eea-8732-e914011da202",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0ea2b491-f638-4e17-afa0-db34e7823fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddcd40f-ec22-4cf1-89ab-e7e0f8f57256",
        "cursor": {
          "ref": "c5ddc451-1ac6-454e-9c4b-75b8b9ca51d2",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "efafda56-e8b7-450c-800d-2978e668a85e"
        },
        "item": {
          "id": "eddcd40f-ec22-4cf1-89ab-e7e0f8f57256",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "33e98e83-8225-4fe5-acfe-5a61ad0954c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f74416-be41-43fa-9fe0-37cd2f0e7794",
        "cursor": {
          "ref": "f0bb5d27-0a47-40ab-a157-73b66a11fe48",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9c0ba636-d460-41cb-9006-daca059ecdac"
        },
        "item": {
          "id": "53f74416-be41-43fa-9fe0-37cd2f0e7794",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e948d2c2-826f-48b4-b9ce-dd0198f258ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7fe040-5aee-4255-a0f5-2259fded5fb7",
        "cursor": {
          "ref": "311e6a4a-c788-435e-8282-494d72736d86",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f104b95e-76ec-46bd-bbd9-3619d7e6529e"
        },
        "item": {
          "id": "3c7fe040-5aee-4255-a0f5-2259fded5fb7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a550d35a-a2a9-40ee-ac8a-35c5a1422684",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81129dd5-c9bf-41ee-8dc3-9246aae025ce",
        "cursor": {
          "ref": "8ef37edf-febc-445a-8294-aacc0d725b37",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5bc40bb2-5ef2-40fa-a49d-950a398b020b"
        },
        "item": {
          "id": "81129dd5-c9bf-41ee-8dc3-9246aae025ce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c4037dd5-8e32-4003-b9a2-a5edcb3ddca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc9f2f7-15cf-491f-b40a-dd6c583b166c",
        "cursor": {
          "ref": "75d68771-74be-40f9-a119-15550171b04f",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "076183d1-cb63-42ae-a983-bb8e82b3a5cd"
        },
        "item": {
          "id": "bcc9f2f7-15cf-491f-b40a-dd6c583b166c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "be4ef884-44ca-43be-b29a-d8e65eaaa565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e30f2a6-c646-4aa6-b3ab-e89cd941f2b3",
        "cursor": {
          "ref": "15f103e3-dec6-4188-b08d-b878c1771478",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fc49190c-da36-4aa8-b98c-cf942d3c53de"
        },
        "item": {
          "id": "2e30f2a6-c646-4aa6-b3ab-e89cd941f2b3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ed395006-4804-45af-b94d-668f4956caaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5132e51-216d-4fa1-880b-e4c5b4a42aae",
        "cursor": {
          "ref": "5341be90-ae52-4ca8-ac05-8942f754d73c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c3e8d1d5-1daf-4c0b-859a-dae421b8ee6b"
        },
        "item": {
          "id": "c5132e51-216d-4fa1-880b-e4c5b4a42aae",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f0e61358-d598-4bea-b2ff-b86b36cb259b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a0b573-c866-4698-85d5-87b511d7d35a",
        "cursor": {
          "ref": "b74d34f7-2611-44ff-9125-02c23fcb3f79",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "be3fd20a-a50d-4b36-84e9-d96519f63b70"
        },
        "item": {
          "id": "77a0b573-c866-4698-85d5-87b511d7d35a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c73f6634-f0e6-4e53-b21e-64bf85333a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034a829a-3a3a-4250-867a-0c1296669eb7",
        "cursor": {
          "ref": "98d55beb-7857-4395-a1cd-97615b29060f",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a29b9f7d-17fc-45e6-9b6f-35f18d54f116"
        },
        "item": {
          "id": "034a829a-3a3a-4250-867a-0c1296669eb7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e63a9fd1-677a-4100-992e-3248496454b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0c6baf5d-5471-4239-aad9-027a119c0d18",
        "cursor": {
          "ref": "9028fcff-d1ba-46a9-9b9f-3a50c76ae33e",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "03f4d533-9d17-4004-a1b3-f4acaaecc785"
        },
        "item": {
          "id": "0c6baf5d-5471-4239-aad9-027a119c0d18",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "48402134-9a2d-4d82-bb7f-55e20d498fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08219cdc-6fd2-42ff-8025-4f22a4817155",
        "cursor": {
          "ref": "54f86ad6-6cb2-4627-a403-96f8423cbac9",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "acb82331-8855-4af4-a13d-5c698956e975"
        },
        "item": {
          "id": "08219cdc-6fd2-42ff-8025-4f22a4817155",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "951647ab-577a-4abb-9274-dce6af04a486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1944f6e8-4938-4dc3-98ee-33edb0457562",
        "cursor": {
          "ref": "9da3ad76-885b-4d9a-b72a-e50b95085cfe",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6947016b-9b55-41fc-b503-5fa9099542d0"
        },
        "item": {
          "id": "1944f6e8-4938-4dc3-98ee-33edb0457562",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "60bf0b6b-0086-4744-86cb-e40fd46b6bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45645699-c38e-4214-ac1d-b745f9b8951d",
        "cursor": {
          "ref": "ff2ee4e5-cf27-4173-a12c-1f68b55c6b5f",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "efa16ff7-1d05-4ad6-b911-879341f18ee1"
        },
        "item": {
          "id": "45645699-c38e-4214-ac1d-b745f9b8951d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d9a034bd-e698-4181-a367-6e3368257f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09841661-f28f-47c5-90e0-541405b94d5c",
        "cursor": {
          "ref": "f8b3692b-cf45-4b5a-b739-f48b2584ac91",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5ffd5bc1-7d32-4e44-aae2-0e3de82f7021"
        },
        "item": {
          "id": "09841661-f28f-47c5-90e0-541405b94d5c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "811a0d0f-9bc9-4d04-90b1-7c491e27ed51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e046dc2-351a-48e9-86f5-3507275b2247",
        "cursor": {
          "ref": "941e931f-bb9b-4fd1-96a8-455bc96a9621",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0f4b1f3a-cf88-49a8-9830-cdfa6e65bb54"
        },
        "item": {
          "id": "0e046dc2-351a-48e9-86f5-3507275b2247",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bf3f4b53-1f5e-47ce-8cf7-1efcf0a884b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb68742-2907-4daa-bb9b-81804ccae690",
        "cursor": {
          "ref": "d406673d-7658-4bed-9475-ee0bc721c7c6",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "64c339d3-d854-4046-824b-4a78f420bc92"
        },
        "item": {
          "id": "dfb68742-2907-4daa-bb9b-81804ccae690",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e79c184b-8c22-4103-935b-73f28fd4baa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71bd6e0-804b-4b92-9590-04592d4469ee",
        "cursor": {
          "ref": "04d8da3d-0209-4bd3-a35d-62956a92a299",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e6174b98-d7a6-48b5-9560-d1f3fc59502b"
        },
        "item": {
          "id": "c71bd6e0-804b-4b92-9590-04592d4469ee",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d22a78b6-0b67-431c-b660-c07b5dca378c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2d7d5c-9e1b-45b9-8c9a-3f287e82d7e8",
        "cursor": {
          "ref": "be6820b0-0923-4041-a8d6-75650f83610c",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9f0a1a79-cb53-4e6f-a25e-736b7a214030"
        },
        "item": {
          "id": "1a2d7d5c-9e1b-45b9-8c9a-3f287e82d7e8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "977c94f6-26bb-49be-95aa-7a29eca3d77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de773248-9b94-4133-aa1e-26f65a79392f",
        "cursor": {
          "ref": "27f11e17-18d4-4169-8daf-634ecef03739",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fab5971b-214c-4728-8188-355714078d22"
        },
        "item": {
          "id": "de773248-9b94-4133-aa1e-26f65a79392f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1745f6b9-48f2-4bb1-8ea8-d32ff5a635ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ad4c60-789f-4d9f-939c-2a43afba0bc3",
        "cursor": {
          "ref": "32bb076b-1013-4133-bee1-941804932c37",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7630fbca-9cdc-4093-9b87-ba7263fc09b1"
        },
        "item": {
          "id": "d8ad4c60-789f-4d9f-939c-2a43afba0bc3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "43323672-f5c9-4d10-8242-8fc5b68b87b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ed9b43-e27b-4b3d-bb62-11a7d43b1159",
        "cursor": {
          "ref": "d4d2acdc-227a-49be-8794-322ab9e65ba6",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3c3b8e9e-d533-4dca-919b-58aeead8781e"
        },
        "item": {
          "id": "c0ed9b43-e27b-4b3d-bb62-11a7d43b1159",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c6710721-2eb2-439d-81ff-76caa10605a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2e1f17-a18e-46ed-bcb4-c8c23c049809",
        "cursor": {
          "ref": "1f188e4b-2eac-4ae7-8eef-7292f2f2cd75",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9e8e4b72-e280-4365-bed6-aceaed85e539"
        },
        "item": {
          "id": "cf2e1f17-a18e-46ed-bcb4-c8c23c049809",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "153856ba-870f-48e1-9d4b-ab4d517f1f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4caa8615-cd27-4af9-bc5e-c4632dbf7cda",
        "cursor": {
          "ref": "b4407f09-e810-44b8-882a-a18e61b13666",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4c9b9bca-67ef-4cf0-8ef4-6b955175d579"
        },
        "item": {
          "id": "4caa8615-cd27-4af9-bc5e-c4632dbf7cda",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "05cd4c82-3299-4b7b-9bad-64270af8c5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f699575-f29b-41ac-bbd9-ac73997e4bbc",
        "cursor": {
          "ref": "24cdbbed-f4fa-4583-8e9b-d1ea3fbfc85f",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "65829683-1ea1-4476-9d24-c1069e414dce"
        },
        "item": {
          "id": "3f699575-f29b-41ac-bbd9-ac73997e4bbc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "de1c8655-1616-4745-a76d-d3a57cbee635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f9969b-540e-4897-a86c-d77df119f498",
        "cursor": {
          "ref": "b3f2a8b7-fe94-4bef-9ac6-3d1a2604ebf1",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6d61142c-05ce-45f3-a6cd-4fccae48dc52"
        },
        "item": {
          "id": "d7f9969b-540e-4897-a86c-d77df119f498",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "72e7efdf-b59e-4d80-80b7-d5d2848dda16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4966385a-a0dd-4888-8285-3df544730510",
        "cursor": {
          "ref": "d65c1f21-87e3-4aec-ad60-dfa3eeeca536",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fda99672-b463-468b-b437-57a6121c113f"
        },
        "item": {
          "id": "4966385a-a0dd-4888-8285-3df544730510",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "386e2b8d-9845-402d-8af5-0afe1e2a0ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983081f1-3f34-43f0-8684-ce75166db88d",
        "cursor": {
          "ref": "3d3370e3-6e61-4a20-b952-82d853272b40",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "02c731ed-1f9d-4020-8867-f624a47aae68"
        },
        "item": {
          "id": "983081f1-3f34-43f0-8684-ce75166db88d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4dbe1409-a1e0-4c25-a0aa-bf9125366b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7317d760-df43-4746-b72c-838759e4edef",
        "cursor": {
          "ref": "c3453b08-5f6f-4f20-b44b-0ac1aa89582a",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "29e86db0-d445-48cd-b027-90a9b012884c"
        },
        "item": {
          "id": "7317d760-df43-4746-b72c-838759e4edef",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "518b6e43-f126-4478-89bf-9d31dba9c595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fadc19-6059-481c-92e6-ba39055c5f39",
        "cursor": {
          "ref": "061a541f-7f5b-407f-9b8a-e81f4ed1a297",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ef1209b2-0875-489c-8b96-b167c8117354"
        },
        "item": {
          "id": "06fadc19-6059-481c-92e6-ba39055c5f39",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9dafd909-aa3c-4c4d-911c-4dfd767f5aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50512c43-a0d8-4c39-b191-27f449b43a6b",
        "cursor": {
          "ref": "61605529-f224-444d-a9bd-036d5a3cc234",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e1ebf3e4-518a-4f6b-baf9-871d6c7d290a"
        },
        "item": {
          "id": "50512c43-a0d8-4c39-b191-27f449b43a6b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "661f1953-f9e2-4bf9-84e8-302d6e7accb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91767b42-1f49-4442-9666-93099c2b03ba",
        "cursor": {
          "ref": "804d1cad-f4e8-465d-9f2c-5a75cc4682f2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cc078f26-e12a-4bb8-bc8b-7eda06ba2ca3"
        },
        "item": {
          "id": "91767b42-1f49-4442-9666-93099c2b03ba",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bfe0ebfb-4fae-4c96-beee-05a2d09e247e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c258d25-0016-470c-bf57-51fcecd2ccba",
        "cursor": {
          "ref": "4eed8011-284a-4942-b1a5-39a5916dda94",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "87e68ce6-2e50-4582-92ba-03ce4808a4b6"
        },
        "item": {
          "id": "1c258d25-0016-470c-bf57-51fcecd2ccba",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "25eeef83-a6e6-446a-86c3-35a45b188435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdaa4e0-b76a-4db0-a900-f55b9ef9ed48",
        "cursor": {
          "ref": "0c08c393-3fc4-43cb-bcca-63a819af433a",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8545c5f8-37fe-486b-9ac1-9dff34e5393b"
        },
        "item": {
          "id": "8cdaa4e0-b76a-4db0-a900-f55b9ef9ed48",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "499db7ad-3a48-40ec-88e8-d3cd0f674ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3086ac6-69c8-4cde-acd1-ecdf6ff9dc70",
        "cursor": {
          "ref": "024e1488-b602-4d71-baaf-ce07f15eec0a",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ee85b269-73d8-42be-b978-b82b1c479cc4"
        },
        "item": {
          "id": "c3086ac6-69c8-4cde-acd1-ecdf6ff9dc70",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ff6dd097-6bc3-43ef-b295-59029ec76ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27bbd40-fdd3-4024-93cd-74df8dc43694",
        "cursor": {
          "ref": "f90e754c-7c12-4fcd-a576-faebff37f230",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e781884d-87a6-414a-b3fe-67c4eb6f8922"
        },
        "item": {
          "id": "c27bbd40-fdd3-4024-93cd-74df8dc43694",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "87b78e5b-191b-4a3c-979e-aa7fad25545a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775b3999-d74d-472f-a71e-5105953ca85e",
        "cursor": {
          "ref": "4dc8289c-3fa4-45c2-a33f-23f2eef52356",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9896741a-3c10-471c-87eb-18850a20f98e"
        },
        "item": {
          "id": "775b3999-d74d-472f-a71e-5105953ca85e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b24776c3-3f73-4751-a308-6fea9bc0a439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a74f6b4-f059-406d-85f2-fa40deb86d85",
        "cursor": {
          "ref": "4e50c345-c0cb-429c-bba6-90a46ea7a971",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3f730849-8230-42c6-b138-de2c056ae60b"
        },
        "item": {
          "id": "2a74f6b4-f059-406d-85f2-fa40deb86d85",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bbc4bb21-bd73-4fd0-b791-367a5213ffac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b8adc0-9461-430c-8f28-f47099a5c3f4",
        "cursor": {
          "ref": "db3455bf-93da-4957-92b6-777999c94371",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4d6cbf1a-804c-4cfe-9e32-5a3a17403e91"
        },
        "item": {
          "id": "44b8adc0-9461-430c-8f28-f47099a5c3f4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b7116f10-1116-40e7-ac29-52d3ce04bbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be08bfff-d4fb-4b03-9acf-d6454779c6fa",
        "cursor": {
          "ref": "7f86ef5c-9985-425b-b618-c8ded9afacf9",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5875e3f4-62f5-46dd-a199-fb729756c32c"
        },
        "item": {
          "id": "be08bfff-d4fb-4b03-9acf-d6454779c6fa",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "933adb86-4d3b-452c-bda4-e9160df6b5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d30e2743-74be-4dc7-bc6c-90225d4c61da",
        "cursor": {
          "ref": "9e966211-49ea-4aba-a671-f2e235c3eb7a",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "225ca150-f2af-4bee-8dc7-05c1eb1bad44"
        },
        "item": {
          "id": "d30e2743-74be-4dc7-bc6c-90225d4c61da",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3830ecd5-fb8b-4ffd-8eee-8b374bdde59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "784213dd-b689-479f-92f2-71a954831e2e",
        "cursor": {
          "ref": "910a1e1e-308a-4dea-9f09-41229be06808",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "55c0b551-19ff-4680-853e-a8267ac9d486"
        },
        "item": {
          "id": "784213dd-b689-479f-92f2-71a954831e2e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a3a97750-2cd9-4617-879a-625a4f216016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c0666249-8089-479c-af64-059f6d5ec81e",
        "cursor": {
          "ref": "a5387061-8b71-429e-b7a1-ae5e4367c947",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "90ce16f3-3682-4b81-8993-daf8f94bd595"
        },
        "item": {
          "id": "c0666249-8089-479c-af64-059f6d5ec81e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fe82956f-8e73-4112-a35e-1901129b4de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4561b54-61e8-418b-8af9-bbc55b35696a",
        "cursor": {
          "ref": "76af1d93-e64b-4709-885d-d461f1aee0f4",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "78135bb5-9b9e-4d74-bda4-319e0f36c3ea"
        },
        "item": {
          "id": "e4561b54-61e8-418b-8af9-bbc55b35696a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f7a384e0-ced1-40ec-90f8-95091a8ba9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "97f5117a-6fb8-4d54-9dc3-6fc1e8226760",
        "cursor": {
          "ref": "15c34b86-c29e-4d4a-b1e7-af5d136e5198",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "07cff7fd-ef58-43ca-a79b-fa016a92d922"
        },
        "item": {
          "id": "97f5117a-6fb8-4d54-9dc3-6fc1e8226760",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bcaa2424-567d-4e3c-a71f-6726162c36be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 991,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ae559d83-8dc7-4755-95d3-6d35baaa5358",
        "cursor": {
          "ref": "28c02380-6853-4e59-9b08-a4b29dc5d03f",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1abfa872-93db-4271-a83d-e8dd094f578c"
        },
        "item": {
          "id": "ae559d83-8dc7-4755-95d3-6d35baaa5358",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ecc84bdf-0a4c-4d65-9438-6a52f94feaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d6ef7934-4cd7-4904-9eba-10f2be7adc9d",
        "cursor": {
          "ref": "edeed874-809a-4775-994a-f4fbb47e9429",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "919bfc52-f084-41f1-a9fb-cb3858da5a68"
        },
        "item": {
          "id": "d6ef7934-4cd7-4904-9eba-10f2be7adc9d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f860b3a3-fd37-4f9d-93dd-5e872f54b459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "203aece6-15e1-4f5c-b033-fe83e819ceb0",
        "cursor": {
          "ref": "a402d0a7-0aa9-42cb-9a89-5cef4bbf43d3",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "579b7505-e01e-463d-8a03-1d362942594b"
        },
        "item": {
          "id": "203aece6-15e1-4f5c-b033-fe83e819ceb0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c25bc9b3-7fc4-48b0-83cc-d1b711e98ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "85ee8660-9368-4fea-864b-daba67c7aa86",
        "cursor": {
          "ref": "4977ddbb-a7e8-4af5-b7f4-77b868576b68",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a9af4a12-8bfb-4343-a905-81db5819c845"
        },
        "item": {
          "id": "85ee8660-9368-4fea-864b-daba67c7aa86",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a4aa729f-4a7f-41d0-872a-6a5d1b1e2413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "43b667c1-9dd9-4467-a6a2-7231caf23a61",
        "cursor": {
          "ref": "28019858-0c47-4d8e-b1c7-7447e39cffa9",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8780f3f9-ea1b-4464-bdb3-5d36cf832981"
        },
        "item": {
          "id": "43b667c1-9dd9-4467-a6a2-7231caf23a61",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3bb3216b-5a55-4461-adfa-d4898b305357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92a0a68-d230-4bef-8c9d-27028dec8f2a",
        "cursor": {
          "ref": "95e6005d-8db3-4cb3-9822-abe6e79aac10",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2b5a4010-9fc5-4988-b8a3-45d7596c3e4d"
        },
        "item": {
          "id": "b92a0a68-d230-4bef-8c9d-27028dec8f2a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e59346a4-f0d6-490a-9d44-530417123827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017a70ad-b226-4e0e-be75-d88f245e5f4d",
        "cursor": {
          "ref": "c660be76-c5b6-4cfb-992d-13a5d324c252",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "79f23a91-a787-443e-9c44-dd7ef65c7ad9"
        },
        "item": {
          "id": "017a70ad-b226-4e0e-be75-d88f245e5f4d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4b15c1a2-f568-428e-ab71-b0fce8967fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9399af1-5a48-459b-873d-9fcca5ede650",
        "cursor": {
          "ref": "975b2888-c243-42a8-921e-ad2ee2626d09",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9405f413-823a-4b0a-a9d1-21e8abe30f13"
        },
        "item": {
          "id": "e9399af1-5a48-459b-873d-9fcca5ede650",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7c28fb10-28a1-46b4-a0fc-dfffc6c74133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dc223c-4c64-420f-9052-dbba620a3fb9",
        "cursor": {
          "ref": "7cd6160a-d9da-4053-8501-6b16ffe170ba",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "67b9abdb-9a68-470c-bf6b-4263221f2943"
        },
        "item": {
          "id": "95dc223c-4c64-420f-9052-dbba620a3fb9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e61325d7-7809-42d1-946f-91230a91f873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb02884-3c98-44f9-b15f-a0ec45e3d419",
        "cursor": {
          "ref": "d8095732-7ef9-45dd-a43d-0760d37b58c6",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4476928e-f814-4d3f-b0e5-ce10d0e4726c"
        },
        "item": {
          "id": "fcb02884-3c98-44f9-b15f-a0ec45e3d419",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "79f406f6-8da2-4573-bc84-e9ca9a9f0658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0b4ec6-2d46-4022-8212-a38a45aa09a9",
        "cursor": {
          "ref": "2fc66804-7fb8-4d5d-a4c9-1fd5105fa241",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cebb8b1d-2938-466f-ba90-a2b6600fc6b1"
        },
        "item": {
          "id": "1b0b4ec6-2d46-4022-8212-a38a45aa09a9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b7649abd-dbd8-4fcb-bc02-089009164e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0385d8-721c-403d-b5cb-552800dc5b53",
        "cursor": {
          "ref": "ac50da2f-8e16-45bb-a2c5-56a942d6f8ad",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4d01de6a-c260-4e0c-96a2-cb086c31c548"
        },
        "item": {
          "id": "cf0385d8-721c-403d-b5cb-552800dc5b53",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a733f777-14cb-4219-85d9-0b0d0a90a6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd499dd-299c-428c-8c38-7fda7e84e739",
        "cursor": {
          "ref": "e4e66277-61cc-4c62-83d5-4e876f0295b7",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6ac9f819-11f6-4d04-8c71-ef63e7ff8661"
        },
        "item": {
          "id": "fbd499dd-299c-428c-8c38-7fda7e84e739",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4ea79cbb-6e7d-4ec9-9868-196115a3cd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9297bead-13b6-409f-aa23-82e9ffa049b8",
        "cursor": {
          "ref": "675b3e0b-0ad6-4edf-88f6-b2acb693e70d",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a3936064-97f4-4b57-b98a-713c5a0f36c6"
        },
        "item": {
          "id": "9297bead-13b6-409f-aa23-82e9ffa049b8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f5b93355-765b-4bf8-b4fe-af990454fca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ec21ec-6789-4c62-baac-352ba5fd010b",
        "cursor": {
          "ref": "2798be7a-b424-4166-9a9f-4d2dea6d4497",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a2f5acd8-38c7-4fba-8485-ff6245cf5e5b"
        },
        "item": {
          "id": "32ec21ec-6789-4c62-baac-352ba5fd010b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b0c26c5f-9751-4678-a71b-bc00e9d12faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a0cb64-b75a-4861-8163-03999d482411",
        "cursor": {
          "ref": "a6ef88f4-ca3c-472d-82be-6462c52fcbed",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a2d7d1ef-4284-4e67-ad11-7d94a9a3af3f"
        },
        "item": {
          "id": "b0a0cb64-b75a-4861-8163-03999d482411",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "acb4a3a3-f0c5-454e-8037-aab98be0d797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c351b4-2765-4ba1-8c02-d09826aafcc5",
        "cursor": {
          "ref": "2ad38aaa-72df-401a-a010-6b0ae644f7b6",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c538066f-cd05-423d-87d3-cfb390abd3db"
        },
        "item": {
          "id": "a0c351b4-2765-4ba1-8c02-d09826aafcc5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c184a99c-4372-4bd0-8fc6-5ee97e2888d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7e205d-780a-4ae3-98e8-e04c50ecac56",
        "cursor": {
          "ref": "f773d483-a7cd-4de9-bf6b-58b1a4b9c265",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "69adac18-28ca-413e-a36a-eb4c70fa9d8d"
        },
        "item": {
          "id": "6b7e205d-780a-4ae3-98e8-e04c50ecac56",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4da3b1e1-f18e-4b03-b7b2-11fe7c138777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 529,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "98075b60-0de3-4584-a375-a85efa51c4c1",
        "cursor": {
          "ref": "901f93b9-6a68-4bb3-a11a-ae07514a8eae",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bb4fb745-be6c-45f5-8f0f-1fea61761a3e"
        },
        "item": {
          "id": "98075b60-0de3-4584-a375-a85efa51c4c1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1f686cd4-17e5-47c5-b079-2027df4ecd67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e7a9486d-14c2-4a0b-9c61-f55a5ddd3555",
        "cursor": {
          "ref": "53f2579a-5c67-4d6b-a2bf-1798eb457710",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7a494147-94f5-4fac-8332-2f54539073f9"
        },
        "item": {
          "id": "e7a9486d-14c2-4a0b-9c61-f55a5ddd3555",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4effdec3-2462-4776-b620-acfa252ea487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "36eb0be7-a0d7-4112-ac2f-ddfa7b3ac2a0",
        "cursor": {
          "ref": "97082156-fc20-4618-9051-8f4af82551bd",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "750d522d-2e57-4b80-9445-95eb3de1acc4"
        },
        "item": {
          "id": "36eb0be7-a0d7-4112-ac2f-ddfa7b3ac2a0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3ccc7462-c8bb-48c1-9c12-c321a40fe903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 541,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "06776c90-1c31-4695-b11d-91d64f795bef",
        "cursor": {
          "ref": "7d34a21c-a9ed-4aa3-9a59-dbb02bbc1228",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0bb5211f-bb9d-4cce-85a3-3c65b094e506"
        },
        "item": {
          "id": "06776c90-1c31-4695-b11d-91d64f795bef",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b980a1f1-5dc5-41f2-82ee-a424ad265f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "35fbece4-fd07-4c32-b51a-52e05413ea1d",
        "cursor": {
          "ref": "370b6021-0fd1-4491-86d1-c0b4fc50b033",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "306c9473-0308-49a7-b136-ad339a3acd8c"
        },
        "item": {
          "id": "35fbece4-fd07-4c32-b51a-52e05413ea1d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ff4981fc-facc-4467-9b35-858af1e6fdb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6eed1b-f81a-443c-8fd1-d69acd0aa47a",
        "cursor": {
          "ref": "6793ced8-3907-4323-979d-825808aeca98",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1ee0298f-5ae3-4606-9a7a-15622cef4c64"
        },
        "item": {
          "id": "1f6eed1b-f81a-443c-8fd1-d69acd0aa47a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "30c53872-a403-4c4a-a138-ad3cf3751d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011b1557-4505-4029-9bfb-55b151115f17",
        "cursor": {
          "ref": "dbe88a67-8323-488e-8a13-01684a863bde",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "833e0dda-433c-4a42-a675-b84c2f238b3e"
        },
        "item": {
          "id": "011b1557-4505-4029-9bfb-55b151115f17",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2bc76f8c-2b51-4c53-9202-a9bb8ddb4bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f0f83b-f8c7-4aae-bd14-20969b9a2a8f",
        "cursor": {
          "ref": "6410bd1c-ab1e-4ea3-889e-5be50dd4894a",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "570ca5a9-147e-4f9f-abc9-ed219560afb2"
        },
        "item": {
          "id": "36f0f83b-f8c7-4aae-bd14-20969b9a2a8f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a3453fdb-fbdd-4f4d-a9cb-da0986929a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c953d23-bdb7-4b25-b084-93edd68f342c",
        "cursor": {
          "ref": "cb279bc2-e722-4209-96e9-9cf775eb3b3b",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8f398896-3b78-4d84-8c73-ab8cec1de59b"
        },
        "item": {
          "id": "2c953d23-bdb7-4b25-b084-93edd68f342c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1cfbd6c6-d801-4e67-8078-d245ed3743a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270e0933-cd65-4656-9e65-6dce0ca449e8",
        "cursor": {
          "ref": "e19800dd-f550-41a7-bab1-06f8a15e72f7",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "764061a4-6489-48ca-8189-fe223f1202ef"
        },
        "item": {
          "id": "270e0933-cd65-4656-9e65-6dce0ca449e8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7a49726b-27d0-4390-8943-b245915b86c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b748de2d-c1fc-48b0-883c-af240699c9bd",
        "cursor": {
          "ref": "ae3e7b23-fc3c-4f85-aa34-735658193f95",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0fedb25f-ef66-47a6-b02c-b0857de45d11"
        },
        "item": {
          "id": "b748de2d-c1fc-48b0-883c-af240699c9bd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "45179a33-a49f-4821-a5ed-0f6bc4ff1589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ec5b04-9266-48a5-9ea7-34a3177904f7",
        "cursor": {
          "ref": "b4812d7f-4215-485b-92f3-bbfb96af29b3",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b8c890eb-7ede-4613-ab92-1f09f0331e07"
        },
        "item": {
          "id": "34ec5b04-9266-48a5-9ea7-34a3177904f7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3a93ddeb-78e7-4a46-a949-2af124668ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c636bdbb-2873-41e7-a03b-b15445541bb3",
        "cursor": {
          "ref": "5a8bbd93-a635-48cf-8bb7-67b01393ead0",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "348382b7-ce1c-4c26-b96b-38fee3cdd0ec"
        },
        "item": {
          "id": "c636bdbb-2873-41e7-a03b-b15445541bb3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cc79368c-5479-42d2-b1d3-64ed98e1ea30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d94626f-f20c-400f-9da6-e60e8c8ad2a3",
        "cursor": {
          "ref": "ad3a85a3-b5a6-4295-852d-053fb7e6d096",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0457fe42-faa2-4136-9df9-0c7f9e18dee0"
        },
        "item": {
          "id": "6d94626f-f20c-400f-9da6-e60e8c8ad2a3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "20fbe302-fd60-4eed-886a-33aa2f2a09fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9a7c4f-ed6e-464a-994a-148b5700871f",
        "cursor": {
          "ref": "89d6453b-21d5-4989-832d-7790952d7a70",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2c93bb5a-e7ae-4aae-93a5-f1d2f25639e4"
        },
        "item": {
          "id": "ee9a7c4f-ed6e-464a-994a-148b5700871f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dcc27156-c5ce-48df-ab0e-74f17655cc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7345651-5c6e-4096-87ba-3402ee8e581c",
        "cursor": {
          "ref": "063e6dbc-79ed-4208-baa1-064189ac35f1",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9e30774b-68e1-479e-8bbe-9cb0217d8b2a"
        },
        "item": {
          "id": "c7345651-5c6e-4096-87ba-3402ee8e581c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9c4c32e5-426e-4409-a037-f7d6bc83ac5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609110c2-46db-4266-ab55-5d38f65f4b5a",
        "cursor": {
          "ref": "eb72c0b1-ce53-4d5d-be4f-af0409196001",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "712cd97c-9ef4-4f5a-8401-9988556bbfd9"
        },
        "item": {
          "id": "609110c2-46db-4266-ab55-5d38f65f4b5a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f44d63d4-d39a-4a3a-b6e5-6ca7306e4eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b78b28d-b93e-496b-a865-bf7ca584dadd",
        "cursor": {
          "ref": "967d0f3d-2b05-4934-ae6e-1b4f807db342",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4dafb75d-6d95-4b00-903b-d4ed4f6611a0"
        },
        "item": {
          "id": "1b78b28d-b93e-496b-a865-bf7ca584dadd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c9b5cb7f-2693-496a-97b7-8d26fc440ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eee9934-4287-4a0d-8663-24fbf664cb0c",
        "cursor": {
          "ref": "088cd8d0-df0f-476b-8336-ca657b5a528b",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "1245065b-07c3-4183-80b0-ec3d924f73f5"
        },
        "item": {
          "id": "2eee9934-4287-4a0d-8663-24fbf664cb0c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "88e53d12-4937-406b-b4c1-68b4bb43728f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cc8cac-948d-4af6-98c0-9bf0ba0ff174",
        "cursor": {
          "ref": "129a755e-f4bd-4e2d-af14-9de1f4d63cf7",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "dfe168ae-7ec2-41f2-b2b0-a356d4f72ca5"
        },
        "item": {
          "id": "70cc8cac-948d-4af6-98c0-9bf0ba0ff174",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f2eb79cb-529c-4fc7-80ac-2290c03b2ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136a84ba-69e2-44c6-acab-c421c1e00ce1",
        "cursor": {
          "ref": "a81931e0-e418-4f6a-a16a-cc0c326ec237",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f91d70c6-9a51-4d01-a225-ec84b8d27a93"
        },
        "item": {
          "id": "136a84ba-69e2-44c6-acab-c421c1e00ce1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c6f08803-899c-4891-9d92-9bb05a5cbb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ed567b-fe8c-4b5d-ba0b-7853b3590921",
        "cursor": {
          "ref": "971db339-6390-411f-b7dd-8341b2cd988e",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "a65a2cd9-1ee5-44b9-b3ca-795e241e7557"
        },
        "item": {
          "id": "e7ed567b-fe8c-4b5d-ba0b-7853b3590921",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a7979667-f2ff-4b91-a434-675c43d1ac37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f801c1-4001-4246-b968-aa362f2dc099",
        "cursor": {
          "ref": "e76a2118-c9f6-4ec9-a245-f247e1813381",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "eace5f38-f7f1-4cd1-8245-49c5c91efc0c"
        },
        "item": {
          "id": "f3f801c1-4001-4246-b968-aa362f2dc099",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1c9bf541-1361-429d-a0b6-448523a5acfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0397de4-d6e2-4a67-91a7-63401417feb4",
        "cursor": {
          "ref": "7b59c027-38f3-4e6e-ba17-69dcbd3fcce6",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "39463ac0-0f6d-4467-b5fb-14a5b73abd1e"
        },
        "item": {
          "id": "a0397de4-d6e2-4a67-91a7-63401417feb4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4a9a6822-f30e-42b4-8b44-e25a6e6de4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f285bd-96d2-4623-a218-8aec2dfda316",
        "cursor": {
          "ref": "1b33dea5-8333-4c94-acde-831f08120a0f",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "746674dd-f383-4d4a-be8e-81a27c4426f6"
        },
        "item": {
          "id": "b3f285bd-96d2-4623-a218-8aec2dfda316",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bbb55361-3480-478a-8cea-f3df7a082696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5364e6-fce2-42ff-8578-cc5fc934e2ae",
        "cursor": {
          "ref": "57631324-4918-4a66-a5eb-38a4056370e7",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "807cb6bb-41de-460b-bf12-1eaac6c37727"
        },
        "item": {
          "id": "db5364e6-fce2-42ff-8578-cc5fc934e2ae",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "26e8d526-1953-493a-af87-2e65fe48dcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786aa47b-293b-42ca-8ba5-e5a0f3eba728",
        "cursor": {
          "ref": "2926cd3f-8345-40c0-9591-7d507d67d2a3",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5cc69278-6e8a-4ecf-afff-6d4c6ab5c221"
        },
        "item": {
          "id": "786aa47b-293b-42ca-8ba5-e5a0f3eba728",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d6b2dec0-a1c5-42fc-bacd-306135207def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b56d43-89fa-42f0-9a5f-52a7f467e172",
        "cursor": {
          "ref": "4f971ec9-cea7-4dea-840f-b2a73f430a8f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ba3f0f24-cdf0-4d60-8640-c0ed42e7eb0b"
        },
        "item": {
          "id": "51b56d43-89fa-42f0-9a5f-52a7f467e172",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cdf01595-e55f-47f7-b225-d3a42505d215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd82324b-6825-4e91-bfdb-db354d828ec3",
        "cursor": {
          "ref": "6e6b9731-df0a-4346-9a64-372d71139961",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "23387870-4ed9-4a07-8f2d-1587c1880c50"
        },
        "item": {
          "id": "fd82324b-6825-4e91-bfdb-db354d828ec3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0fed5e56-87c3-4582-ad51-0d8afaac1dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557da57c-5247-465d-a696-180ff359c51e",
        "cursor": {
          "ref": "1239d9d8-ed9c-4a75-b47c-88058c516853",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "728c9347-3d72-4656-bda9-efb642acfd45"
        },
        "item": {
          "id": "557da57c-5247-465d-a696-180ff359c51e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6f2a83fd-52ba-4cfb-9199-bbe216706a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a64507-320a-40d9-8a55-37c598b4b634",
        "cursor": {
          "ref": "87c1c846-3233-4453-9c96-51514cdb66d4",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "053fa43b-81d2-4ef9-85fe-1c65d5983177"
        },
        "item": {
          "id": "b3a64507-320a-40d9-8a55-37c598b4b634",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "362f17cd-1016-4109-b7b1-de37d13a4c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1079b69b-6fd9-43cc-9dbd-e872e5829ace",
        "cursor": {
          "ref": "73d3a060-335c-4339-912e-c929bb731507",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ac0cea00-f417-4df7-a8c4-0506eb0e46f3"
        },
        "item": {
          "id": "1079b69b-6fd9-43cc-9dbd-e872e5829ace",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "934ad0d3-8582-463a-977a-6ca82253991d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5517c730-5067-4d06-9202-3c6f1ac999c1",
        "cursor": {
          "ref": "1ddb889b-fb1c-405b-8803-3623ecac0ad4",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "39c892f3-a4f2-4b6d-a6da-0040732e8abf"
        },
        "item": {
          "id": "5517c730-5067-4d06-9202-3c6f1ac999c1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fbbe3a1e-546c-492d-b297-870f1c2bd691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421793c0-7880-4a17-9704-d94f56a7897b",
        "cursor": {
          "ref": "f6092ca6-d98f-476b-926a-fbd5b3654615",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a6aeca77-d975-4e95-a28c-3b92887b4698"
        },
        "item": {
          "id": "421793c0-7880-4a17-9704-d94f56a7897b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "810dfc5c-47df-45a7-b308-258af81e48de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583acac6-88d9-4d83-b8ca-4001bf8914be",
        "cursor": {
          "ref": "6da68aef-4feb-485a-99bb-a89b29e89f0d",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "81692da2-9169-40ed-a3fe-6935f31b28c8"
        },
        "item": {
          "id": "583acac6-88d9-4d83-b8ca-4001bf8914be",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2ecbea69-d2e2-4ca2-a6ca-09f488100e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1b5932-e896-4141-9246-728c95eb2e49",
        "cursor": {
          "ref": "8609390e-87bf-423e-842b-078f4c440f36",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bf88f019-d777-437f-846b-5728b7911b54"
        },
        "item": {
          "id": "9b1b5932-e896-4141-9246-728c95eb2e49",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6fe89ce1-6b32-4669-ab37-dc4c81d93ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d191d6c7-6c8c-4beb-855d-a9dad411ca90",
        "cursor": {
          "ref": "97ad26e5-7dd0-422d-b20f-4c50625f84b8",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "03b726d4-57ad-4d16-a5af-f5ec389332c2"
        },
        "item": {
          "id": "d191d6c7-6c8c-4beb-855d-a9dad411ca90",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "85a0a4b7-e6d7-4e3c-aa97-ab59300f683d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca036d4-863d-4c29-b6d6-b69c6b0bd9c1",
        "cursor": {
          "ref": "fdf5f4c2-5789-4431-ae8e-9cd2e76f7477",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "036ca047-2797-41d9-aa56-f0634e12461a"
        },
        "item": {
          "id": "cca036d4-863d-4c29-b6d6-b69c6b0bd9c1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "33d51b7c-409c-4e32-a297-a8b6c8eedbfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb4f0fc-c60f-4a4a-9e01-613922be29a8",
        "cursor": {
          "ref": "6ccd1332-8b9d-4caa-96ca-2c5ae57115fe",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c17438cb-1bb7-4b60-b191-96614eafe888"
        },
        "item": {
          "id": "4cb4f0fc-c60f-4a4a-9e01-613922be29a8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e1cb5fb2-6863-4a95-b8f0-ddd5a26d7531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4e49c6-46d0-4e3f-a629-fd8921f6b71e",
        "cursor": {
          "ref": "f129106f-00e9-442c-80f3-bc9b60af5304",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "fa3649f4-75f0-4590-9cab-039f8886ca76"
        },
        "item": {
          "id": "5a4e49c6-46d0-4e3f-a629-fd8921f6b71e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9abfc55c-beac-486d-b41c-f01a1867134f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "41381858-8629-4db0-aa4e-b0a8263cc996",
        "cursor": {
          "ref": "e5b1ad02-1300-4587-8a3f-46b2702f07bc",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2e873283-f909-4280-a9fc-1750666a7c58"
        },
        "item": {
          "id": "41381858-8629-4db0-aa4e-b0a8263cc996",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dcab58e0-d644-4c42-a075-f930a6be8423",
          "status": "OK",
          "code": 200,
          "responseTime": 563,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2ad0a0-8f04-4b62-996b-f4765fb6ef46",
        "cursor": {
          "ref": "6807c92e-8ae5-45ce-b1a6-a3c10733c588",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "76d710ee-1177-495d-9b37-2626f7c46bc1"
        },
        "item": {
          "id": "da2ad0a0-8f04-4b62-996b-f4765fb6ef46",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "17b58135-c247-4eed-ad7f-ac08c2e62958",
          "status": "OK",
          "code": 200,
          "responseTime": 574,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd5f3ac-6226-43c0-93cd-215df63490b9",
        "cursor": {
          "ref": "efe9dd70-ea7f-4bee-b9e0-c03734df7999",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d5c2296b-16f4-40d9-a54f-1e17111db6c2"
        },
        "item": {
          "id": "4cd5f3ac-6226-43c0-93cd-215df63490b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "838d6cc8-26bf-4333-9c53-069c8755c03e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd5f3ac-6226-43c0-93cd-215df63490b9",
        "cursor": {
          "ref": "efe9dd70-ea7f-4bee-b9e0-c03734df7999",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d5c2296b-16f4-40d9-a54f-1e17111db6c2"
        },
        "item": {
          "id": "4cd5f3ac-6226-43c0-93cd-215df63490b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "838d6cc8-26bf-4333-9c53-069c8755c03e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e60ccd1-b055-47b3-a665-997a3431e962",
        "cursor": {
          "ref": "e9d50e20-6786-46c3-ba44-705d9d346847",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "50b3a781-36f2-4509-9f61-127cd0902ab7"
        },
        "item": {
          "id": "5e60ccd1-b055-47b3-a665-997a3431e962",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2562117c-571c-4b11-8609-447d719d2b18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ade340-0770-4f6c-9088-1cd7ebf65e03",
        "cursor": {
          "ref": "97a2cc3b-3b6e-4407-9625-70a8b2bfa34a",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "365c581e-edc9-4722-8d89-641333e19381"
        },
        "item": {
          "id": "63ade340-0770-4f6c-9088-1cd7ebf65e03",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "56b04b5f-e6bd-4b26-bdba-8cedcf13242a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}