{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c407672d-ec25-4b20-bcdd-6e32a5f5b1f5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "afba476d-53ce-4d4d-8a52-7f04731dbf70",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6955602-cc1c-4e42-b5ea-3dd2360b637e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "56b674e1-b2cf-49c3-a0de-a2eb7aeaf955"
                }
              }
            ]
          },
          {
            "id": "5ce27b9d-1c06-4f3d-aa93-8a71a6c18775",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8bf8b977-89f4-4850-8bcc-835888bdf642",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3086943d-93ea-4c1c-a95e-6c3375d25eae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0b8b03e0-4482-424b-9b19-623d8a825447",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "82a4efb3-5e80-4c5f-b443-685fa98e96cc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3db382f8-50dc-4f43-8ca1-a1de8dad9833",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25dea104-c2f4-4cff-9ed2-020f121c0bd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e16ca8a0-c5b5-447d-8105-03abccfa0dda"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8220c1c9-3c5e-4ab4-8d66-fa84c1074ce2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14609a41-03d2-4487-b396-79179904799a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3111de2d-5aae-4d15-bd9b-88b32fa4060a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a17c8759-a492-44e7-84bc-40c358cc2828"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d347c2aa-2c16-489d-9ead-974cd5e8caf7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "38df3316-46a0-4702-be0b-390225cacfaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e10dcbc0-7037-4524-a569-e866b7da7004",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd0ecffc-e7a6-4113-9e7e-2a790882776d"
            }
          }
        ]
      },
      {
        "id": "544679f2-c252-4916-ad8b-0d35db905149",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f70b6de4-cba3-4d0f-b61b-c636fe270bff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "352d3651-9479-4a42-950d-8f086a3c4084",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a7754f5-fbfe-4706-b214-c81dc26329f5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a044e965-bd89-4598-929d-2711395a6efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60114213-9ef1-4b80-b004-4ef594208959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1b61ca-8668-4e14-a1f7-183dab518b9c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f271300d-64c8-49da-821b-5d64e9cc17c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2240ebd0-ffc0-4306-9315-32e7d747b4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7058a061-e4ee-4dda-837b-2cd1d51c4b66",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0188716f-d4d4-4ab3-97f5-3e477a2339b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff999914-1cd5-49e0-9d70-ccc07eea28f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "315114e0-6122-4a6f-8794-7a3a8526fe28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "453a18b2-78ab-45c9-8ba7-9a5d92dd8388",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de351d7c-5687-40c4-b87c-9da7dd0c5188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2b4868b-97f2-4e52-9805-1d973dff2a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9499a997-9ca4-49c1-87cf-4945dd06af56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2393917c-072f-4978-90c2-85c4625fb110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea714ce-dfb0-42e6-be65-94212059a78e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48d39a3-b3c0-4a07-9189-4ff6e653374a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "499b6f14-998a-434f-9ade-6b598738f7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d76dcb-7fbb-481c-bed9-2a90db3b78fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "bdd96339-a808-4f57-9977-895b0cbe11e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6448f100-9021-48b2-99cc-27cfc00c2239",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0765e5ab-0af3-4604-baa6-cc44303931b4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36d56a4a-483c-4b8c-8b2f-130a2aa76d98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7fb093f9-bfd8-4abf-8b9d-5e4731df1554"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f9a42c4-a427-443d-babe-8fadc1f8754f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1e93a336-3d12-4339-b7a0-6611d4d43f81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ba35177-a46e-405e-bae4-295d66613209",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "543f2e61-fce8-4a71-bdb3-6380b7733af5"
            }
          }
        ]
      },
      {
        "id": "13dbdf75-237c-4694-96b0-e2f84f8eadb3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "362b14a3-edaa-46ab-a22f-71161b87f978",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2978e89f-37d6-45ca-a0ad-4947597e9457",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "79b28e9b-af94-45e6-b083-27f9a5d4f964",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0f6b20-6952-40de-b214-171e55cbef52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121da7ef-0f4a-4aed-b113-eea5e9781a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e1b7ad-7ed2-4b50-bd13-18755cef4b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72444a04-7158-4c25-af2a-2ca6824d7618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd9906c-080c-4acd-be71-438517663d1b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c100238-f4c6-4650-9ff4-1dfb76925a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56408c5c-0cd1-4489-a289-11007b1c5d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c88ec82-87d5-4f65-84be-c499fe901111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edf79a1c-87c6-486d-88ab-e3d94439dbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b54f61-225e-4e75-a118-998e54fd6185",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0787b5d5-c69f-4287-a551-8beeef6c1436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278901b0-f6b6-45a3-a378-3192e598be0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9ea942-9253-4e8d-b5bb-53946e2ce9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ab32e41-d3a2-4738-a0fa-ceced591639b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cfa277-bce1-4bdc-97df-d97d78e119dd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82027a9-3f59-44d4-926d-87607406b001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6ea38d-0f29-4c83-96a9-f7a638de3ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14378c17-427c-4830-9add-f3c568cc14a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3745f7d6-410c-49b8-a9a7-55338b5aeb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fca944-70b1-45bd-9571-7ffd86e70691",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0573d0-6080-409f-8b41-cb01d3840be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07831e7-2e00-4340-ad43-cbcc2257a59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b4315b-27ce-4a1c-83fb-4ecf80c880e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f80319ef-b989-4da3-a94c-d6efe483ce33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a79f3c6-5783-4c3e-80fd-9a74f99cb4a5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1456cdbb-98e7-4980-8f66-ca411fb473f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6487c78-a6ac-46ee-8e48-0d96a17bb005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2ceddf-1ffe-474a-91d2-e0c757d73390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c917618-e278-407f-9e73-74ad9935a857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e04182-2d32-491f-b723-00ed60ae7e64",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04119bb6-0d60-44fc-b907-c98bd8c46f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5324035-3447-422d-bd97-9fb07b2ba83f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b3170d-1d5b-4c36-90d4-70ecf9d95ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d36b7b3-f9a2-4143-b1ab-1448c0659a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d689847-fb46-47bb-b62a-a0c69c57daf9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f210d61b-cc20-462d-b2d1-55ea6626b72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4827b149-2cac-4f90-8cce-1750b65f7c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97495baa-4bdf-47ee-9aa5-9f7b2ee8a831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f1eb491-57d9-4009-a0e3-d37983ff4c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8244f6b1-6f48-4f8a-9f00-52a62a1902e1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de4cab7-7e0b-4634-a76c-2a681e65a9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9f716f-60c7-4c1d-8846-5965ea85c998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c554fed8-807a-4c51-9093-7c6aad629875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a42fa8d1-dd54-4935-9327-6c0eb882cdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec5d782-cb29-45cd-96ee-112bdefacb94",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b53314-f748-49c2-9c8d-d4b98d1d311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80e08bb-ba7d-4430-9382-4fc24d4a86df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ff6640-37a2-4aff-9415-2b2b9c7026e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc02e1b2-0c8e-4319-bb6c-9d7360c0356a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b251a8-f53f-4831-a1e8-a1af32e4c947",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4c9118-bf39-4f94-a40b-8a544ac1f112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d54f91f-c007-4205-be3e-ec87b011f095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cf86e1-76ff-4d84-a399-d15eca4340ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7045839-afa1-45c1-a385-71f7b5e7cda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0865ee-1757-4050-beaf-886bba6373ee",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b8034e-687b-406a-be44-1558e26f79ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd14115-5240-4659-89b0-2fd7f52caf57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64019271-d806-4b80-bf5c-9e364c13e324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7f9d183-ef07-4d50-88ad-be3560bb8017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ff23d0-4853-4c78-b2b8-82c222da3cd0",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c4b77d-3631-4980-a259-da9e278ce892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd56a73-9c8e-40ef-93fd-ec4af875ca8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5558ec-47ac-4810-a4cb-6c0ae24a8042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "899df521-03d6-4f3e-b709-544899894463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e46b0c-fd13-4742-9450-c33019a9ee37",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56625d61-b5da-4b57-a369-27d0e3b4dfb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93f514c-246b-4d57-997d-b5b107752d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17708280-c8ec-46e4-bb6e-1aef2570223d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "119d74c3-160c-472c-b2c8-378e88680aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5402b04-869c-4c94-a6a5-2dfbd0487015",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc6a6cd-f268-4ef9-bbd8-57c4e8bd2df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b715d82a-e9e0-4420-8bc7-88253d63e176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99426af-48ce-474a-bca3-c9f844bfef91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afa02a87-f287-4599-ac73-4012c0ed3428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943c8314-3615-4cd7-91aa-f97d1ebe57e4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c9c07b-96b7-404c-9a67-1a24dfcb1ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa89877-977d-4355-a608-c8484f6c5ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50a38f0-c962-425b-b1f8-f45f0cc4cdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0c52d19-d74e-4854-9960-36cf3bd0fa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7154c0b-b99f-40e2-8de1-27a3cdcbe2e6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac013d4a-f34e-4423-ba64-2474862f340b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5502f25-73f0-487f-bc6f-fabbb160b477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16baae6e-0183-4ee2-a768-cb0c144ad044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f20baac-da1d-4679-9e64-170709e32ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8a4651-d3d9-4155-ab45-7689ddff6880",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201f9625-57e0-47a4-8c47-6fd9f7877683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcdee48-845d-4072-a2c1-1ed98bc552c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b0e361-75a0-4a92-ab77-d18cd877467a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dec95bf-a5e4-4779-bd57-ff9b8d0f4b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2203f0f-613a-4269-b2cf-c14764f2a17d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43324ea-89b3-4160-b3fd-1f517d969d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d9062b-2ef6-4726-ae86-d00b6909c740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a2d7a9-3838-43d1-9808-b5114f4e767d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e3f7361-3dff-44e2-a994-e964cf29e3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de9074a-c21f-4dbd-9398-4302340a0b71",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a76631a-8477-4b92-b56b-5f6e458be932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d56d1a-ac96-4886-96e6-f78c5773899d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8f1acd-f01f-40c9-bb89-976837866ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4377eb01-9fa1-4609-9d39-a850fbdfeee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cf32ef-7a54-4ec2-88e6-5df625cc8708",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4389a2d2-eac0-4e74-bea4-530f2d8bcd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1868c80-cef7-481d-b818-57892b6ac235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b01bc0-515e-4006-bb46-65515643ed76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92045ca3-db00-4a29-be15-d66126e2c1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fe24e2-5be9-4e21-8793-bb2682de966a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159b17a5-0fe2-47a7-a917-79fb785da798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c8d97e-6564-4b53-bd56-3e3e609f3789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47da128-dd8b-4358-b3ee-299b9ba58bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5c5af2-cabe-4aa8-b58f-7192fbb53138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995585d3-f1e5-49ba-9e8d-41b7a686032b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d441f7-fb3b-4467-863b-858890363ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca59b1d-bd9c-48f0-ae33-e26b9da9601a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f076c2-9fae-491e-a17d-ff29ca94d3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbba9932-dcfe-4087-af7f-2aa35db64935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e61d9a9-88f0-4af7-8666-9b2bda134c24",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa8755d-c613-4fd3-98f0-0a2535b00487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4714b5e-1189-4905-a0e4-aaeb92b9ad80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bbc9ab-843c-47ba-8e03-868c21533dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "379b4732-e9bd-4cff-89cf-6f9728f230e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34be516-15f4-47ce-9220-34309b128d3c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023cf07e-ae4d-42fc-94cc-a5caa535646c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da551fee-bada-401e-baf6-bb1e388706aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50808635-3e57-4430-82c0-d83a8249f3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "40514e17-3682-4f27-b6a2-fccb7ac0fa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8355d7-71c6-4438-a290-437e16438c21",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e021df-833f-40ce-8def-30038fb8a2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899900dd-db54-4297-b8a3-515bb69693cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a8c1ab-07d0-4c9a-bbf0-d581fbe3dc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2988665c-517b-4bc8-a9ea-71ccc4c30bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e22c97-5d5b-4e9d-9905-0c6748c837ba",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee61921d-e562-45d9-afed-f9785918a0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233f4df8-c348-413c-a438-b9474f0da094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fca53fe-0aba-4d5a-b700-3122440a230d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "498d4ad8-2186-4084-95c4-05d110168033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1130c3-a3fe-4263-9671-9e4ceee01d32",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0178282-493a-4ebb-93d9-6c7893295fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b38baa-499b-4b41-96b2-9740dfb17d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee67e11a-a62d-42dc-8f03-f72339a73671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2cba72-0bea-472c-a3d9-9a9c40100c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7f6242-e95c-468c-b668-11b9088c436c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe76941-8650-4a47-91e1-cf2d75493594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81459cff-ebb9-42d2-ba86-b1d0627e63ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2246ae0-c45c-4417-b5f1-96abc67a1429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ea56105-ba9e-4948-b88b-b856beeacc41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511758cc-68d0-407b-a811-8d40054a479d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0c55be-0d34-4141-8946-38c953943deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216dc477-6816-43e8-8cc9-4f670a52660c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e2fe8d-a0f7-4688-8444-27356d894006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c0431f2-0c77-44d1-986d-91f2bb08907c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec7874d-2650-4a7a-804b-4da601cba74d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63561b56-4ff4-4ae5-b3a5-b575a354dcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544ddca2-358a-4f8e-91ad-a2efe51e6c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195fd5d9-91ad-4ab1-9656-01be0ecc5884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0eecc6-36c1-4bea-919a-4fa891956e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fea210-98ee-400f-a6a9-77e07c6ed019",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbfbbd2-e0fb-4d32-af02-7237cb1b04df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4347896-ba7a-4c5f-9de5-bf72e09e4003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510e5d99-841e-48e9-b3f9-8ea37dda862a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7af008-4243-47a4-9cb2-fe166fd43460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e306445d-2625-4da1-a85c-169c8cf2a3b3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640c304b-2f29-4c12-a2a2-80c1ba0ca5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a29519-8046-4f83-aefe-dc31e0606366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2782b2e1-bdbf-44b1-ae55-073ec668ffa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "907db216-bc8b-4c4c-ae08-1a77a935f9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d13178-4314-49e4-b563-9affa838b77b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcfbe93-a123-45e7-862f-f7cab4267c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938703fb-9f9a-478e-b342-42a5a5a075c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b0976b-98f0-4c66-917f-8fc5d3a8e338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "acd40ab6-3806-4694-9b35-38d0f3b583f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd2786c-7721-4e0a-8729-e645b27808d4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41094756-604a-4b4e-8b4c-c058e51e9341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e48c971-aa04-4665-925c-2e3787b9b8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6033ec52-081b-4eb9-9e39-1226a2229912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9e5348-010e-47d9-8aa3-2036d1f3283e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8ced4d-90ef-49ce-bdcb-42c6602792ec",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1dc067-3a70-48aa-a1c4-e8297b164b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62aa087-8de3-46d0-b8a5-f36b64486b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2169b0-3d31-4e97-812f-01604ff71d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "94e2a194-a0c5-49f1-857b-2d6342a697e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88119dfa-e9e2-4e10-a07c-d849d4dd748c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faeab4d9-879c-42cf-898a-2adead502990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "039f1217-b303-42dd-ae8b-001277560103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d947364f-5f6c-44e1-b208-c29b025de337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ada2a8f1-3699-4830-8187-e828d39db310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43325fb-aab7-461c-8f5b-711597af21a9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b029562-9d1c-45ac-967d-6cf14e23d132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f7b872-2766-4f66-9967-a8f5d1924b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3563d59-6266-4730-be76-c437b3e88192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "689e8157-6391-44fe-8639-cb71900fd963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c4bd92-e50b-4f9b-b7c9-2477ce8cd9e3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ae668c-3ba5-42bf-88df-7cb46a40b970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55541be2-732f-43f0-b177-d305756cf6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d6c310-fe9e-4cd9-a9ba-91400ce646d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae762c0-d5b0-4bf8-9338-9482a626af1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9333e8dd-8387-4769-ac7f-cb0f9ff9de9e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b61baa-c03e-4966-864e-5909bb76242e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1114aa-106f-43f9-945b-71d9680da47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706c9f1e-ff26-401a-a435-4b1000bda909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "165cbf3c-c40e-4866-9435-ff11c62f5ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5215dc6-ca0e-4ba2-bd49-4212f3ac8079",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6801f1-2b1d-4e47-9015-227ef9f03acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18c529d-08e8-45c2-bdec-c5e73a1fee4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286f8d13-faef-4a38-9e72-318f2cb63f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbefb3c-6b58-47ac-9767-993c77195057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd54d10-dd9e-4af2-9a17-e1a5e6afa90c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be323b1-98e4-419e-a388-942f70798f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbf436b-1725-4e2f-b054-87f8a632a68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1700076-11ce-4db2-9b7c-54070fb5e0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "684adbdd-63d7-4518-a546-98db9cc92a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb116f3-b2ee-488b-a602-1d066ab7ac0e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22852d5-fa13-49ea-a383-0213c48a180d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd467337-51a3-4dd0-b9f5-f07fa02c9bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c84bb5-cc6f-4914-bb1f-a86451945cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "21147ff1-9c17-4b8d-a7fd-4b6cd6cda531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2cfe2b-8f58-4efd-a256-d738374af8f3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df57e34-7f30-4fda-b81c-279b30120d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5324e9ac-2319-45b7-a1d1-dc75b8f45c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bb077c-7bda-41b9-ad35-2e403c7ab6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "16eb197d-c841-47dc-8b02-446aca1da8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062ea057-1397-4189-bea1-91b664f40760",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df544a65-da34-4548-bc68-ee3749087a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8309941-e5e5-41ca-b3cd-9208c366a6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee88418-993f-4e2e-af58-4918bd0f054c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ba739a-698d-4e9d-8dad-e358dc88cde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80a3e18-fc42-4400-a17e-0fd7a9131141",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764d72c0-b4fa-4395-a2dc-2e094b58db84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68f916a-bed2-4140-adf5-39df5e3f95aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3f3e0d-75e8-4aa7-a957-3d151ca6a748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3466328-88be-4a14-b2b9-5f11f9651629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7786b3d7-2333-48e8-9845-f505c5df1099",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efae4596-846a-4350-8693-1db924c58178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ebcfe6-9a02-48a6-9905-f366b07cf2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c14a40c-e407-4ef3-9f0c-1a2dcbcc8692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e424022-29e9-44eb-a3e6-4097faf75c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4149d4-ed1f-4ec1-8a34-05fcfa9048af",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096128fe-8489-48fe-8d3c-0df78db40968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0443ed62-35ac-44af-8799-3e408407b24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3d640c-84ef-4f11-870e-70173222ed1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c52dbcc-66cc-4f65-bf08-8553d48dc3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36423f19-e969-4115-93c9-cc54de534234",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654bc9e3-4659-494c-83d3-5f3200912ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ea80bd-700e-4b00-9a7a-18a067262ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41efc060-c45b-4719-82a1-86652e5095d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79b8e02c-9cfd-4da3-8330-0ef245156fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4be6578-1253-469e-83a1-a3e8d16b98dc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38881f0f-d34a-419c-9826-bdc662498fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4137fa0-0c5d-46b9-a112-11885a266cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05dbb071-7283-4f31-b320-5c42964f03c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3909ab01-8e0f-4505-aad9-30c1aef1ffde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae59ad6-771f-4e36-993f-0bddf40c364c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ea438b-fb8d-4c18-8764-ff58a64a7f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add59a75-5742-46c3-9a0d-d9c456ee0b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffc267a-570a-4b59-8302-3fd0850a72ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8328fe6-ecdf-4066-9019-66d559863c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30310ffe-68ea-4e7d-9275-5dc8e1210b0f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89838c32-4f86-4075-b7bd-6cd843e05fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94340651-6250-4001-8a74-ed81e5ac1593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d99f9a-574f-410a-967e-c50578175676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "256af05a-72b1-4289-ac07-b3a5e90f2450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fb5e79-4d27-43d3-b39a-ee9d5f529c12",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada3b045-dca2-416a-8ce5-216e88eb9e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d82cfa-866e-490f-a98a-d5e90c67fd12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5493472f-320e-4a47-9d88-d80a079989ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ceb9487-18f5-4351-97da-b5cdabafe19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bf84c2-7eaf-4ffb-9bc8-3b0bbf020e81",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5fefc4-8efc-4717-9ea6-17189bb193ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6df90f1-5093-435a-9ca3-22058deef691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e655837e-37fd-4c67-8bec-d9ec3380f2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94d95546-c8a0-4805-9867-cb621e13e95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fc2142-59d9-4952-a29d-2b9ff0891bce",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37403637-fe37-429c-aafb-6dac0b225b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb4d060-9432-42a6-88fd-848ae94ad889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5988df17-4698-4f33-8a4b-91a8720ad8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65be6ebd-8a7b-4232-a9a2-6a8239af436b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b4369e-fe00-4400-b203-a355a1c1bbd9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f927b5ef-6625-435d-8ace-06a4545d07fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1f5d20-67c7-4695-9ff7-59e5aac6e2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1c06c0-5793-417d-bb00-dcc8bc484f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09514473-bfab-4b51-acb0-ea4815d14a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a544e79b-00f8-4900-969f-e2fab66df367",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86113ca0-6317-41e7-8dbf-280331648b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe75597-07f0-4ab9-b458-18da91fc42a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eda7ebe-da77-449d-b9e0-d4097bf49ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b7de28-d9d9-4328-ab8f-09ccc7083d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058b1d30-7b2a-4b1b-b375-526b23840a0d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc1b69f-85be-45c7-aa00-a538d05d2e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb17c25-3d6f-4e6c-8880-3b0f7e3c3ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471a3795-99cc-4d2e-9556-ef38077d535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dfeb4d7-bef8-442e-a06b-671ae3c6e011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cd9c30-8201-4ee0-a3a7-1d7a3a649a8c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6711c9e-6030-4414-92a5-67a5ad08a6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0a823b-0182-439b-a5d5-bf6852d944f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71c163c-12af-45bf-bb8d-ac91ec551b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d80429b0-231d-41ec-873a-46d6b20695ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a56b1f-1527-4cda-a90a-f332f9dbb522",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acb0024-25d3-4c8a-8f33-3b3e0620db81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c685b77-14d0-403c-bcc7-668d5ffeb894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4eabab3-f69e-401a-a99e-f6948aed2318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c37869e-7fea-49ad-8231-613c9e09cb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98c3765-bd62-4e31-b805-0d64a3fc9ea6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89caab6f-f71b-4228-bf28-94130f3c0e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69df686d-56eb-440f-aa09-e1028ff5ebac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb284ed2-d268-461b-8349-64d4f7fc727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "29f344ee-d25f-48e8-959f-58378fb5a42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c45eee7-4393-4c79-8a54-e504c474bab9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33677ec-5700-455c-9271-03ac104ec04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eba10b4-08bf-4ae8-9272-0908e0a3362b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284c6523-26e3-4a2a-858c-4d4b99e8d331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ca1f11-acc0-40d9-a199-68d13646f68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a47874-88cb-47dd-99fb-ae71992d1ef5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3259d8da-911b-4d35-b194-5314bc922fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ae9276-50f1-4cb7-8190-b55866f7b6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e12789-e9c3-4e3e-8b05-a19ec053280d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1679309e-7908-4d26-a086-b7d9712eacdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151cebc3-5fdf-4806-9b27-c89c7059254e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693bfcab-5c55-4711-abfd-1c0dfd72f94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc0e4b6-b711-4bdc-a045-d67b14fa3b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8ce682-ec40-44b2-a53a-fd37b6248bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd2bb12-012b-4764-a168-e6d129082685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cbb554-43b8-411e-8d85-9dad82af4e3c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8735c647-3145-425b-a3f7-238cb0daf114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d50094b-95ba-4f90-bab7-79c537e2c29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa804db7-fd6e-4832-983b-d8220987147e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01fa74a5-ad05-4fd9-beef-bbc482a69a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396b0020-5359-4138-89c7-98651c75f644",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461d0a20-d67f-4c9f-8039-218458cb2a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a1375a-d65b-4ee9-9830-b292e73a9117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b550a1-a36a-4bf2-9b4d-728beef888e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2835dca-e1fd-41f9-ab6d-76f483ee6080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c02c3bf-2092-4cf5-8705-fff26a54325b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b94870c-5e32-44ec-a91f-bba4ff012cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1877916-cf39-4c47-810a-ce8b1417ebed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0a4b4b-d48c-4d9d-a6e2-505027b5475a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "113616f0-93a9-433b-9d9e-44872c536b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3830c73-3a51-4858-9c31-03a0f4a87214",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aac87fe-5c00-46c7-a181-65d9388805ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6478337-ed6d-4842-86c9-c09b90c2dcb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a432868-47c7-445b-8581-cfc3c5f430f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2227e1f-de87-4af1-9bd2-1bf3a28b0b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e59db0-36e9-4503-bb42-71f980d7303a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e8a260-7242-484c-b308-c5f7541af66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677c9269-a3c4-4cf9-8286-6464b4096de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a214f0-0d9d-4655-8176-9c2f581fc2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "376eb99c-00be-4d55-b6b5-287176646ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9275c401-0080-46ce-8a95-f9cc99c0ebab",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329a5ef5-ba45-44fd-a751-aa818f9c889a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5042ad06-b823-4bd2-b7a5-eaa2ea435707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7779014e-abd5-4c8e-a2da-b08e0ab01803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c79ae1-31c1-4e29-987e-d056002ff082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137ae547-9c21-4f60-b264-9de229323eba",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64567634-1774-4e45-ac6d-eb4321661d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948c41e0-94a5-4623-b9f4-624464fb51ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41d0d2c-c4b0-40b4-80ab-4693100300b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d39b6da5-6575-41a1-9222-95d002a04ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba8aee0-6ef4-412f-80d1-866d9c3c3675",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcf2001-54c2-469c-8ebb-23cb35d0ca8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0c76fb-6e4a-4f27-a374-22f025a52f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b57290f-f064-466a-8d8b-8f28556f7aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e47f0ec8-a0f9-495d-8e42-66745a815383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb347c9-92b7-4f55-a078-9c7387e9d853",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45ef4da-cc3a-4dee-afcc-91a4614b75d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504d1c3a-61ce-469d-9b36-bddf58f11c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca3df90-c911-45ad-a9a5-081f021ad95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6386add-ed25-47a3-b575-25013a7b0a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db70885-8fd1-423c-bdae-a8678f8ab62c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e0033f-03e6-432c-93c1-375a6218eb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd77c59-6bbe-4bc9-bb0d-618bbefc371c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f883b958-9360-4fa2-9220-add1bd864d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47f7cea6-1802-4d93-a414-6068d6ca6f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab4accf-b99a-4a03-be02-ab32c160943a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95af7b59-8c09-4edd-bf57-fcf505d00985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e2063a-cb9e-4c72-a216-7291a8c7f395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3ad895-1b61-4cd6-9817-36f6bdcd840c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1af3207e-f722-41e0-af6d-add305405d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a464c768-c3ba-4084-99c9-615545083d37",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02fc2cd-fba1-4b1a-9e48-20a76cf99830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d5f084-9019-4cd7-bf37-7bf580208e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fa6742-9564-45ed-aa9f-8405d0cb18bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d85a926b-890b-4a6a-b631-8deedd0cb78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fbb6e8-2e29-47b0-ba77-ef51a5db048c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86751f7-9227-4769-abd1-4b17deede6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd7695b-67b5-4237-8c65-3e9ad334f0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37222c9d-43e2-48e8-ba21-ef5bf324750d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea241a8-15eb-4be6-91e2-eac5a561c1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b42c171-21c5-46cd-b0fe-71cfd929d927",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea0631b-c0d7-4230-9c49-d200d02ce1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b542eabb-431c-45c3-bc80-3bba4f70f549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f080c93e-f34b-4207-81d3-a2cfdb282020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee887e41-a4d3-4bd1-8f4e-c972952f6b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6193b851-5891-4b9f-a566-87207f62418b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa609823-45ce-43f1-adca-4300d3947aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d77deae9-30fd-45df-9c2b-acf8f857ce42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13897ed-01d3-44b6-8a84-29f9aa516130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8b6959-309f-46c1-bb28-a46fa2669322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b87ad78-254d-48e7-b051-0b07465084b5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f25ede-2da1-4158-abd0-0532e653ef35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f0173f-fdae-4665-8a2f-4ec00817c816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8182f3-6c7d-484a-b57e-567ad399380d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a793798-0bf9-43ae-b036-fa88df814ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea056f0e-eee9-499a-85c0-1e8390d9ec29",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459d3a64-e0bb-40dd-a304-8ebcf6aa088a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f2908f-f21e-4b5a-a82a-bb88f7cfc0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3334adf5-5220-4c68-b1fa-81626eec946e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74612870-845b-4732-993a-7fb07613f1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf956a4-5280-47e1-b771-01ce3d6ee566",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5341c7-ebea-4815-8dfe-fb3c4b9289b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205ffe58-927f-4011-9161-83a88850776c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1d402d-6093-4d64-8120-45631da46a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b042394e-9c59-42f0-a8ba-a0d054baf5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fac363a-e11b-4cd1-b686-94841d046587",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7161b77-6e4b-41a9-844b-b48b07693a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9381158f-cc61-44e1-8047-5ea61360e460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a7137e-3bbf-4698-9765-ac07a681aea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45ff5bec-2e63-4826-9b4f-b58560452364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aa66fe-3a06-4745-a3c1-dd503f6719ce",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39867e0d-4053-4248-b6f3-042b3c132030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7365630-3786-417b-8e82-083f1656bbed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5aa6344-4404-45a7-9f4b-62c6407cad5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c731d29a-995e-49c3-9591-601eefd8fb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7caf4f85-7e1d-4581-99a3-13e616e31980",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7773a3-b031-4ee6-b2bb-df6e3b78180a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e806539-a389-45b0-8976-ab3784326f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c27eda-e2b4-476c-9042-ddbbfd0b9289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27ebdb29-44f2-488a-805f-0fb3e5ef6e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43742223-4bcf-4022-b7c8-87a2f561337a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e0c74b-eb82-4a63-a081-82a493896fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a15135-80c7-43dd-a033-949a7b7ecd04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a4e94e-b09a-4bf6-a025-daf7056b59d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5a50c9-055d-4b12-8415-673a1a870137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075c964f-cbd6-4e56-9899-ed46f5f81445",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3edd4c-0702-40e3-ae25-a6617c393805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9843cf9-46b0-48ad-bfba-1bcc877360a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5c3c74-3920-47d2-9a42-9ff36ae28241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "908d1f4f-d447-4089-a939-8355859f41b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62749559-420c-4074-8a2f-5b67ca7e03ba",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874887b1-74fe-4713-99b3-9938cdb5f6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a71bc14-496a-43de-92da-1c88168376a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920c1885-1421-418c-8076-f53fc500e64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "70b96ff1-8474-41c3-9f77-93f52d0e11e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62b8904-c49d-4b3a-b0ee-42ac566db058",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1dfbb8-3186-4907-835a-cbda1814fe73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e787c8f3-59f5-4e9e-bb33-76b3afc6b13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798bd989-c701-4266-bc26-d94b4f3975a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18876fee-f1e8-4643-ba4f-2ceb24b241ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57b8331-b6da-40dc-bc37-64c87f3a88e2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74334134-7508-4c74-89b7-fa9528b222c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88a5363-c34d-4643-854e-8c7a5aaf652e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d383168a-6dad-4ad9-ba82-b24758f0a0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "38be0317-5a18-4e3e-8033-5cd3c03c910c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89eb5787-36ab-47df-a0ab-feb306687a25",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a53a34-070a-4322-b3e6-c11f244f6f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e794b5bb-3141-4ff7-a85a-53b5b727d990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2af03bf-90a2-40b6-a270-615f2d08f746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b535ebb5-25ca-4a1f-a79d-154e93431e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952db675-f83f-4cca-93ed-a8c0da4180cd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5ca531-3203-479c-87f0-8c1decad25cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195119ed-b1a1-474e-88fb-02a19393835c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb072db3-ec9b-4776-8940-7b72907b4807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2baf75-8c39-447a-9765-679e7fb0b45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b665ed-7d63-492b-b891-0ac899d17177",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd72d213-7373-4cff-aa0f-0d62a9bc583e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "37ab6047-a9b8-4c29-bf41-dec81616f1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436e6b22-2bfb-4846-bd10-63387b493387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "13632ce1-a22b-4140-963e-031641ddce73"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5c70b0a5-d87b-4111-935a-a91bd6885cb9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c2fc306-5e3d-4e8e-a5c8-b8b4b35c9c2a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96eecfb-294b-4247-846d-5e80835d99f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1dc40155-0392-4107-afbc-31e99528c60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a475ed10-c909-42ac-ad9e-84d454bca2ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7b49af7e-99ed-448d-a09a-7b101b8d389a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f714706b-e930-460a-b4d1-03a945c91517",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833b423a-cad8-421e-8187-2ade69296405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2981677b-6794-4f82-91d5-b4df1cc5beaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056ff033-ab19-480f-b1b6-4e1fead9551d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d5011da4-851b-441a-8a5b-89bda196e850"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cb90102-23ff-4dbc-84ad-f923744c588e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b49abaf7-b7bf-456f-8312-801300f98f42"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cbd6649-8779-413a-a562-10574f764407",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6b27b72-79f9-47e5-8c29-7006eaddeedb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6ccd602-957c-4a2f-8458-18d7868669e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f46c9d82-9f46-420b-b813-690e9f37e93a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ec634a0f-c01e-4309-9e6e-0cb80e468d0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44747da3-cba8-4337-aaf8-9a854a3fed1d"
                }
              }
            ]
          },
          {
            "id": "3e88105a-7497-4f0c-a91f-056ae1f56ed9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b94625d0-36cd-4cbf-a006-593214f2c4d9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3eca0fa2-e5c1-48c3-8166-3036401c4f06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00a30221-5729-4e57-9ccf-e31f6dff6b53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9aaaed54-27f4-482f-afc7-d3e4e5ee2a14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7cebe9d8-c9f5-47de-86e0-b23cfc3d1240"
                    }
                  }
                ]
              },
              {
                "id": "57b60bfa-2b8d-4a32-88bc-6493729a55c4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42fb901b-c4c4-4aaa-acaa-3220f578569c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "974f2f70-a4b6-4d42-adc8-84d05841a4fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "874b120f-f090-4007-a84d-ca4609158c62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "45d469f5-6b6b-4821-97e7-198fcf9c987d"
                    }
                  }
                ]
              },
              {
                "id": "772449d6-cc82-4bd1-b3db-65d1f741e2eb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdf56ff8-970a-4040-abd2-4629a99b17b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a46bbfa3-ff00-4b2e-837c-8d748cfccd2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6451a86e-084e-40b2-b7e9-ebcf751a0cce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "885a363b-c4d0-483e-8d48-5d4285b229b1"
                    }
                  }
                ]
              },
              {
                "id": "7a99b6a0-e2da-4ec0-a0f2-aada2972ceff",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1861e7a3-b2ea-478e-9255-28c5e5b34e9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b09f4111-f4cc-44ed-ae48-17bdd0251f0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63a30cbd-ef45-498f-8330-b1ec09a9c713",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "63c0a1c0-ba41-48d8-9b89-5d2f160074cc"
                    }
                  }
                ]
              },
              {
                "id": "f2ea5968-59bb-4c46-9ccc-c18dbc6dee62",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f843d4e-22d2-4996-b242-ed351fed41ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a33d2cd3-4cb0-4fcb-a545-1f93333c04b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4b697d9-3fb1-4e0e-9d09-82cbce11f06d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6436b873-d2c2-49dd-81d8-043f77a33d73"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f986e6a-2902-41b0-b2ce-8f7ee5705813",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c1a35be-d4f0-453b-aa8c-882be89350d5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e8f371d0-d1cf-4bbb-8166-7cb71e297746",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7e75be2-0c90-4d6c-a298-4a96232a31fc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e752809-e310-411a-9bef-3edd42281f56",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "35b238c1-36bd-4e23-a280-cdafa4d312ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fb4f379-22bb-437b-82a8-d908e54e0fc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fa0e047-53b7-4325-9027-77924cc4b1ca"
            }
          }
        ]
      },
      {
        "id": "c3f56053-0c27-426e-8f44-2f3435ca1bf7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4211362d-6059-4ad7-a13f-86ad71dae264",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f130d2cf-b7a5-4c5c-a24b-d8a829629c25",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe8dbfde-ed61-4a88-9fcf-8aa6ea5ba955",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03567d7a-748c-4f42-84a2-2886d28223b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ae32b0-6fce-4355-a24e-58b2cce4c81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918c5208-dcf5-4a89-a859-e8807500480d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a892095-fcc7-49e6-b425-e105279ffa2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711bc750-3dc5-4777-bfa2-1658aebd4e23",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399bc703-d807-4acf-926f-50070a0af7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aaea313-f8f1-4a34-b2df-51cf690757f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b290b63-cb1b-4a48-b5a9-05f5cf369bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "616f0335-dbda-4a28-9011-f4d5d42d9f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847afc84-dcbe-4d48-82aa-103b32e97551",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f278e0-a803-4b4f-9546-25b0566177cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c5d551-8fb8-4a3b-aeb0-1dbb84e42ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8ac098-b286-4f04-b96b-5de5d731f91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "094a7dca-0b00-433e-a9d7-afe84d8242df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6174e80c-52ec-4b8c-8d0a-d3025c135cef",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab427ab9-ccc4-4f5a-bc4e-a7d326a76d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fbb699d-a6d2-483a-bcb8-1346517ead9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba2967a-1e44-40c8-b839-2dc0637489db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c132c6f6-4ab3-417e-8cd3-22057b2cb298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92479355-5fac-4e2d-8b25-312c2368e68a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa42784-b228-489f-84a6-ead545a85f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e55eba5-546a-4d8d-ac01-27c7e9ca9f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2981118-53c5-4db4-89e8-21d7f957ff4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1acff054-a72d-4c9e-88cf-a1097b3b9e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb6e2e1-b7eb-4577-a7f9-0ca15452cabd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05897a9e-894e-4ac4-baae-fdec04456677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbeb7c6-d2ee-4499-8b0b-87d73d31f51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2955488d-d1e3-47fe-8248-37be26dc47c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c28a3c7-16c9-49c4-8d0f-b952c339fc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091d7515-35cf-455c-8e47-72482ac6ad2a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b767c0f-1143-4a44-b932-a5ccca0eed5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3aaf16a-b063-4997-94aa-b4fc2b4fdc2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47133fdd-587c-4655-bfbd-ba2558e97e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "250827a4-3e6e-4b39-a3d4-7ec8c47c2f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9660e1b4-0c42-4899-b317-da5957a280f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ec5360-5074-4d00-9152-b844bfed0283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0beb15f9-92db-48e3-b30c-8d3b8d40c68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4094f6-c371-4a92-a72e-1d5efb67d521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3162769a-8fc5-45a9-a9c0-e462d0c9ba51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19307c2-132d-4db8-8a78-196b4b374b62",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaf1aef-93ba-413b-ae25-d61ab4381afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e83e0d-7059-49e1-bb82-2d62e22c14ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52494b03-ab62-4449-a10f-7608bf626d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c050f0-4740-4a5e-8744-172aa86eb8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3452f0c-4503-4463-8115-dbd8618dcd66",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c151a1-984f-4d53-b4d0-0192165e1760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bcc1e8b-c991-42d7-a19e-91cff5b740cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81c7eff-099e-408f-a5c1-1d04ad403dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4fe7d9b-8220-4234-8156-a62b1f463309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e80f15f-f256-41a5-8fe8-fc21f055cad4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a74019-3cdd-4d61-9e43-779beea96980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641e2d87-8274-4e00-9e22-a6d1c77fa8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8fc4aa-8668-4b33-ab68-ef259ec89df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "435615c1-8b1b-4c5f-828b-3f4b57be6043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3903b1-29e1-4a4f-93b3-040378377802",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693b4091-851e-4976-af56-3034a62be87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609c30b8-a3e7-46fa-b1a8-8763ff08f776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621f16d3-fca2-4ae3-9539-108c706e5ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81a52d3b-da52-44fa-8105-5e50db5266f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36dd5d3-04ee-45d3-89fe-2651c28ff301",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a15e16-48e1-452e-85ff-76074fb94d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea4ef9a-b789-4751-9436-ba38df66827f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e22b8c-8f23-42dd-a277-08891789f3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90a118f3-511d-4155-902e-cb1d7055ea91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dd2c04-d43c-44ac-a218-fb2cad2fa15d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101c30ea-1ba6-4597-be04-abe0548b2884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384b3e7a-8ded-4c2c-b38f-cf066ae9bd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d5a4c0-c9fe-4c94-9b73-3a5fb9051c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2c6ec7-e6f2-4644-be77-492e66bab4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffc4946-b63c-418d-a322-ff04a135dc16",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55837aa-9b81-4802-8ed1-5ed8075f2f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab672557-4f2b-45f2-b5c2-78bb48ce22f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe0c0e4-2270-4086-b457-9c4ed5c0a62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bdcd706-72fb-4a60-983d-a5c1734abf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cef53d-47d8-49a5-8f7a-03ad2dfc978a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc2d246-5444-488e-b918-66f17332895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e88c82-8d89-4b5d-ace2-7b4fbdc633b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f640c20-ec91-4a9e-a53e-f9339fedf230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b68d47e-f967-41b5-8e9a-4d85cf4de512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069945be-732c-457d-be35-580050cc8434",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a1a2a4-219a-4d03-9429-c5b55d7693cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3579b1bb-1cbb-458a-b518-80cbb44c5183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50af588f-78e8-4348-bf4f-29ba6472111a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c38203df-c3b5-4620-96b7-3e0cc1467150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc7fd0e-f64b-42e7-a518-d16136e32d6f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6621575e-80a5-4d0b-b755-afe16532a146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b442af3-7bf5-4f25-a8ab-01e55a6cf4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6ca18e-3e49-424f-8b48-37a3458f02d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "117bde8b-017d-42a3-9253-aadec3c1524d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069f329b-8c81-4af9-b59e-1466d9934cf8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf7fbda-5987-4268-8b95-c3b81345efd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429ae4d1-9ec5-4639-9769-eaa97de6218a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc0d9e4-e412-40b0-966b-1b04a3c5b2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3213d3f-102b-4419-bbc1-252faa190fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a022e5-0d3d-4edc-a815-1832a46b1e3d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac04c680-de5d-4ffa-96d8-70decc2eee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e397e2-ceb1-4497-a53d-5f72e8dc6170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3300b13-67cd-4930-82d1-8a22f210e477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b735d1-16a1-4eb0-8e81-5c9f1bff784d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc888ff-96b4-488e-901f-94a5c9982d97",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc18f9d-ba6c-40e3-946f-dd57a0aa7fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685c759d-b7db-4f3a-a4d6-c2c325471318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf378153-2ae0-4738-839b-91702820560b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "655efcb7-72d3-42a3-933e-c11a7e84711a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4252c28-da4f-45bf-8e9b-95edcb12d8ce",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ea880b-0d29-43ca-bf19-e123594c941b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd58b485-9674-46af-9be4-16311f2afcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5b6b79-ff81-43fc-ae44-2c798313e1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "006e8fb6-2184-49c4-9d71-3527c373137a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa56bd14-e2a8-41bc-a1a3-cb71e3d76db0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1754a4-c0c9-402f-a845-8c0a209921eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7609e636-d300-4fcb-bfd9-292acfbc99f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6fe3e5-3fa9-45bc-a401-45468b1952d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a928a568-1b71-42e2-89ca-9f6cd9d3049c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97564397-4ca1-4775-964d-3d202cd83738",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639926cb-9974-4b1d-85fb-649a5f3bd99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4a87e0-1981-4b37-a63e-0906f69e3991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06582629-2ad1-49c0-889f-774f8d04c8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4b86c8-0a23-46ad-bd5b-7ccf9e505f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3082f233-9761-459a-adac-b6ae1aca5f91",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4f3b56-4c43-4a63-add2-ae5bf866591a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5582ad-deed-4fa1-83b4-fa4cf84fc18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef9de30-3ee9-4468-8e4b-400d4eb7194a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8754b35e-742e-4dd4-a176-bbd4bdd773f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d04f01-d2b0-439a-b492-3699c96ea8a7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0558a913-2f6a-42cb-8731-6dc63faec718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dc6def-96f1-4eac-9c2c-79db6d32d881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54859e7b-7993-4ac1-85e6-b3ef0b81945d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74b8fb55-53b2-414b-89b4-f902a4cba74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642750ca-0ff5-4951-b62e-77b49d1e72bb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3b8d91-0e01-4e66-a973-651b51e5dc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f382cdc-2135-4b88-a574-27cdff1e60d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc987a7c-053e-4e95-b505-44c0b8a3e182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "091f4eeb-5820-40ad-9071-9d32f599db63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7edf31f-cf5b-426b-bc7e-d457cdb24a33",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ddf758-0c87-4f89-a2a8-bcf8d445f98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb8f030-a27b-4c9e-887c-ad6002d5f413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589eba8b-e081-427c-96f6-b333bb77e4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fefdbfca-eb9d-4ca2-97e3-67870984bb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8333cc6-6141-47f3-b509-b0bd56784687",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a20d12-af8b-44fb-9693-5bbe79cc9ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a114ea18-8b1a-42c6-93a8-49a5df198dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bce303f-ec28-4522-97f5-001aa6ba1c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8643131-c7cf-472d-aafc-86b84d0ba1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cca0723-9f30-49ae-8acc-1a8b42273843",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0e8bf2-a7d7-4357-bd68-840161b544e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccf265d-97b9-4ed4-bfda-04dcc4ea10b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf68525-d392-4db9-941d-b25627c343bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6949a49b-daba-462a-8805-854ab34fe48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec95fc8-361c-4db7-bd62-34b39142709c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b511b80d-9181-48df-a97e-ce0b65c79a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5eb093-5673-4c09-b7dc-74ecf7c0518d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae017ce1-db35-4726-a528-19bfd1b54b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "536bbc62-36ee-451d-9e2c-27ad2dd4400f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac20908-c0a6-4167-8fcf-5e0c8d67f8eb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb244058-9a23-45d6-b67a-33203a3200e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37fae29-6b16-4cdc-a426-07503365574c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f156bc22-71b4-432f-b57c-db5aaacc01b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4f9207-04f6-4114-908c-59a10731f255"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17ddc487-7f01-4841-892e-d8b55f9b1cd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "835284a3-df30-473a-9961-702d94fb353c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7eacd9e-7996-43cb-9615-3b55f04b7a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e3e375-3831-4af1-bc16-7623fcbb0a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a36bcc3-86c8-403e-856c-d1b6a2a11ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2886dca6-6cc3-4b3d-a9ca-d9ca060b0c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d640009-6666-4049-88e3-7677dea27408",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1034cdf3-ac71-4785-acb2-7bfcaed3a965",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "38f8a841-fe95-40e4-8502-b5cac2c4ff73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f399d3-d457-4b8a-a84a-53f06df0f3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fd02da8-96df-4674-90a1-bac435518e58"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c566e30-20a6-40d4-afd8-99fc6c70effc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8eb5360b-6c9e-4c17-a5c8-5884dff19bf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11ec6432-cc93-434c-84dc-0fc50146ec40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9eeca753-1f2c-4541-b336-564a04f4e90a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6cce720b-d04e-4adc-a159-7d8db0dd20ab",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e384938e-8f7b-4c5b-8a29-0fabee246c09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9442a254-3bc6-4e87-9f48-7710fdd926e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc25506e-1cb5-433d-a293-aa115a886f59"
            }
          }
        ]
      },
      {
        "id": "f29ec2bb-6472-48c4-b873-6b98a3fea858",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "63f30f3f-f712-4886-97e3-d063a1adcd55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "187e9885-4d01-4ff9-9637-255604e792ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d2c733f0-8288-4428-8a29-d7fb270f2f2d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d88390-0f4a-40e0-8207-6b43c4536b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c4b728-739b-49f4-b627-de6773cf40e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f248fc5e-eb14-4506-a280-837d119cefb9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964a24d5-e30f-47e0-8eca-17c7086bfe37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51eb4266-9604-487c-9f98-838b8cec2931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92725fe-9e79-4ca2-a233-e971a80d7d78",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae27e602-d93b-4ab3-add6-2c0b86bf0b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0629178f-3f23-4b3b-ac49-8230a623084f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee93ec70-a9aa-49d7-8ec8-eeeafaf06e26",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49534188-13eb-4b82-98c6-6f539347354c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bb0e6a-f404-4dc7-8082-4bda68057a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83b66ef-ae8a-4774-92b7-6e387d2a396b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6dd36c-86d1-41eb-a935-ae3b69e66331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577d1044-f994-4967-97c1-d1bcfc70d48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90136ae2-8052-4106-b670-4ae10ada0b29",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b09d7c-8a67-4915-bdcd-97588c93808f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9da12e-7550-4f70-b1e4-d7eec3fcf72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1cd04c-e311-403c-9ffc-5a5d8c0a930d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36641700-8d84-41f3-80b4-f9ff26227fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6ae6dc-7d92-4256-a60c-2d1d93bf4f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a66a28a-06e2-4ea8-b1c7-5b147a5a2f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb68ee8-fb40-462b-9eae-84d513658ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239e13f5-6f86-43cf-8a2d-ff5ef12db40f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7cc7d8-e078-4f89-9209-a34ac4b9cadd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd919ec-5e23-49d5-9d6b-8632cc5fda69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008c56bd-1cbb-4f48-95b0-30f7b7de1685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c67ee1-dbfa-42e6-ada3-fa2fd5249edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5c2edc-6112-4f33-9ee1-48b107b58646",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4501836c-151d-429e-9115-05b8edcbe813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3fd93b-358f-4e86-8748-5bbf17f3cdf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edf951f-f77e-4119-9d8a-f761dfb095cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd61503-ff93-4fed-a619-fb5903bb48c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894bd9e2-329a-47c9-84da-9e5ec1f1cb1a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0461cf09-dff6-443b-82da-3c25dde7dea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afbdd3e6-4d2f-40dc-a828-963c3556771c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc7500f-cb14-4e83-9a0b-4dee829865a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde8be89-ad1f-443d-8364-7ab15248e630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1c16d5-6b94-4bcd-875a-94cc938ec6f8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbb8623-3c13-49a4-88d7-102b144cb603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4c897d-a7ab-4197-a068-26916c233633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04947984-1f25-4088-93c1-75cc836b825c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a7143c-fe34-49d8-9dab-a236eabf7c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210f67cf-2a5c-45ae-bdc3-a4dd7e151405",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70a6a72-caa3-4277-8122-812df87bfffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4fe5b6c-2e45-476e-958b-f66b1018195c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7a0090-bf37-4a8b-a740-02adf2c088ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67da3ebf-fc31-4c81-8bd6-515a409159b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b327257-5117-4baf-8ba4-0a968e173a78",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02060763-c660-4563-a21f-99953ca756dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a15665b-ca09-4d67-a0de-ae6aaa2ce7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd585d4c-751f-4e66-be40-3de461e2ac9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4209e519-2b27-4e0b-8906-a4a7686886ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcccd5c-051f-47f6-ae75-52c240493fdf",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe02b5b-5afc-48d2-a078-d041098a14fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f25f30ab-4e30-49e5-84ef-8d86b1825eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7717ac-b226-4966-ba59-aa09c0d8f709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f315ad7-f412-475e-ac15-9c29c2fcf6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07627e6d-eeea-4cfb-adc0-d568c0bc9ae7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934383ea-d7ce-40dd-bb2e-9e36d010eb3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9042c1b6-5658-4ee8-b517-d177645f72aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "719ebb08-e769-4398-b03a-88b45804a053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd1c164-ad38-44dc-b038-afd49a7aab8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f924f85f-e891-4453-b19f-46fe899494fb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9f53e1-a2a6-4cf6-8e9f-aadacd507085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a023e4ad-d8c6-4c12-b468-8e8b3286c592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa75340-8df6-4208-ba60-7df01ea41c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c9ecd9-33d1-4305-84be-055eea9a5ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123a5895-f266-4ee1-a56c-764060c1796b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c196c5-4c06-4f5b-8799-1709adff52bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9382338-7cab-4587-ab92-05f9a8f3096b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f7605b-7e46-47a5-9077-d8284cf3deb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ac67d1-1cf8-4e21-82ff-ec05dcebd02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3737d3-0737-4e7a-b9d6-d976c4f59ac8",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3204da3-a8f0-479f-9d6d-d1a024712b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9d52ac-7e1e-4655-8b6d-c7ff45393a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82161514-037a-4083-8f31-31df2c55e1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf951368-916c-4ca0-aab4-6badf987081b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6022d20a-f57a-49bc-8355-b7c8db3293fc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6e7f35-771e-4b98-be68-9efe2ad231e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e1abd5-fcd1-4b4f-984b-f901638b1f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4741f3ef-e4de-47f7-969a-a7fbac51053d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0114df8a-d236-4c43-8a77-db80726a5da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e3234c-538a-4974-a9af-aaeafec3820a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723d0b86-d291-440a-867f-17df72b445c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84162d36-af95-46d5-b786-d50a6f2b5b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5bbbff-97ce-44c8-b3d9-994978e2db8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa7d449-c127-43ec-aecd-27d9776c063c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a9bc9b-4a56-4dd2-9652-9858788b3307",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c24e9d5-4600-4f33-9009-8c2634cd4d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f535469a-8707-4bac-95c8-41f77766901f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcca3ed1-04b5-49a3-9d69-ddfce2dada93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2958e97-aef4-4fef-be64-5d78700f36b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a6601e-16ae-4176-8b48-b231d8c4c320",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bee396-b508-44b4-9443-2e9e6791a12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11499afa-f6e4-474b-8891-967e1998188a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627f2f13-5954-4114-bc9f-01e59a81dbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1da6ca-8bd6-42db-a7f7-3ed3961bbf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4e966c-2f1f-48cb-a5f1-1f4a3bb10ed3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663b8cbc-1f48-4532-abfd-ffaab180c915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7374b6-0a13-425b-b13e-efcffeb7cdfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e229996-2d54-4249-a579-d0a8957b2b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bd632c-bf6b-4c77-8036-7a974be5c14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6f60f8-9cc6-48f7-8140-e9aa3fc864e0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803ad1fd-ed91-4e40-b08d-8277a0bc9e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1044272d-9a64-401a-b385-29b08daddbd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e6ef33-1270-4571-8abb-06c82d916e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2a8efc-cbdd-4acf-9d5c-a9fb5e09d4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14a3ddb-06ea-4e03-931a-ee5bb7030fda",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70bc813-e755-4437-882b-74611e2b989a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51686d5f-6bb5-4450-a73a-0a308a5f32a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea1d5d3-bc1b-474b-8331-709d64a4de4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e4cfbe-2e70-4cb1-b2e1-47ba4dd05eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e185ac31-4cca-47e6-9d68-848119f8ac9c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e5a553-49b8-42f5-ad28-7ec06822e66d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc2e826c-61bc-42f8-bf74-17caf0d199f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a40421-5ef1-4550-b260-c910f2403f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58e3221-d69b-452d-a81e-9d3d33f5aac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33677b97-6ef5-4604-ac1d-7f5e292fc827",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e231f82-b9a6-413e-bddc-c5651e30387b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f62a22f3-2d3b-452b-801f-317b0f98b532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f740915-0018-4bfc-87ac-766aa6adb8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f00f33e-4382-47a5-8338-2afe022a7f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20ad29a-53bb-4b1c-8359-26079f8cc04d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f124903-a5c9-4ff5-93f9-f6377295ec25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fda939e-88a2-4387-86c3-35aaf04ad3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47eeaac8-d8d9-4383-8d26-50ba5a87072a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c50d6cd-d381-4c32-8e02-08f853ecc1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a5f13d-ee94-41b2-8ca6-ae2487d9fc51",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c4ff86-7319-44ff-a173-81845ca9a576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bcd536-5695-414f-9316-25bff56d5265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417d2818-de36-451d-9fc8-6130439b63d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9199f7-be1e-4320-ab4e-fdf52f25d522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a656a9a7-aae9-4795-a67f-a1110021f926",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d8763e-57ce-4ece-86e0-5bf1d538b62b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7133ebb-6b63-4e38-9b94-87180c34cff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "319a7031-eaf6-4fb1-804a-fc3ee0ba952b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a54442-a9c3-4f8e-9742-194a40fc092d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de86e8d3-52d7-480a-b71a-ca98928f9fd6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a47f3f-2ce9-4196-8936-d3345b48b504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23ddf686-4415-4781-8883-7e323b72996d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f42a6df-37c5-42cf-a484-0eca3f4aaf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ea0d85-b62b-458b-9614-ab5948ab03d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4777531f-d1d0-449a-a314-5071e62e926a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74d4a63-d760-47e2-88b9-43bbe95c99d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e8797f-7f2c-468b-94dd-31034b301ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5b53d6-2bfe-4c88-ab44-b6ab48b10b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cd6604-bdd9-4265-8879-05f193366a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c99a3fd-9ff6-49c4-a857-64f9518e217e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7a028a-3d38-4b4f-bd2a-8e6d6c8cf8f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bfd06e8-0280-4ece-9e44-66e7253312e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "902be2e9-f890-4b3b-a2c1-cc7f1c501b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f06616-1190-430a-9daa-61b3a885a830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322bcc17-acb5-4f4d-99c9-286d14685d7f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afb4daf-aafa-420c-9386-2bd15f28727f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4948d9a-693c-4ac9-b954-a32f7802faff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce28280f-3cb3-469c-bcd6-85a76f8efe60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969ca8b8-27cb-403a-a31c-fa63f282e18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c4ec64-7737-415b-8966-6ef8b75cc26c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c214c2a-1137-4911-b504-62c3381543d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e84e195-cbc2-4c78-ab25-8b65a62f9f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636ef11e-d222-4d1e-b119-13615b986e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7b2b82-76fd-4c5c-937b-55f0fa93514b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70773a97-08a2-4bed-ac7b-5ca3dec615a9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68aa4d0-9f35-4739-ba5b-e2a69c88a201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80dd78e7-814f-4461-9e7e-fbddc8b40cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c2371a-d871-4d2d-a61c-a7a5b1ec5a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7dc8e0-b4bd-43bb-9f15-f0cb555f8d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7906f07-7207-4a8b-ad45-8067165592a3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54d6b2c-5868-4cda-89c8-fd2be9105705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab9dbd1-748f-4ba6-92f9-fd33452e9156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d615e0-35f2-4aad-bed6-d9d88f0e6c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae00c897-1000-486c-89e5-22341cea4b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8e487d-a8c6-44f7-8406-e4bf4bf04e22",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907c5dc8-488b-41d7-90af-510374ef503c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ba2c37-8128-430e-b467-ca91aa7d6121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f646a80a-40b9-404e-8cc9-7b463e43aaf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2efa1f-24ad-423b-b906-a85e7fc42b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ab53ca-e0fa-4f1d-9dcc-ab87b341c986",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89071edc-ac99-470b-9725-6b73bbe6dc24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45caa55-2dc9-4f60-8268-91b21d595a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28d6e84-7bf7-4e15-9ec4-552cec070aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f32e1f-5601-44b9-b896-d653f2ca4347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5924ef-6f9c-4d20-bff8-75a8a05f1b8d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16ceec9-9228-4d0d-a2f9-63d1797aa469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d7c527-2cd6-49df-b391-00ed577c6f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de16af62-f48d-4cf0-a0b4-e96e45ce5c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5106080-16db-46f0-9943-666f27ca2999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8405c8-61e1-41c4-a2a1-74f4de10caf9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f52b5df-afb2-44c8-b907-a331a33b9a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e37395d7-c461-4e3e-9ac2-076789e0579d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63a51bc-0828-4b26-8ca4-b973349ce642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ea5704-5230-4651-a9c6-161e5e0e7a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ddd0c0-6b94-418e-bb34-a9f6fd51ed73",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d87698-721b-4778-a218-3535c49ba060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e0884a-92fc-4b8d-a285-44da31e80342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a4e800-0ac8-479f-8a4e-050dec5bb286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9c25f9-526e-4211-8d03-3058cdcb8543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3160e1de-0cfd-422d-b1cf-46c06a1d8143",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af4875e-b2bb-4864-8fd8-911d83586d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e0e2bf-eb53-4a9d-95c6-6d3edf73b4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f9f40f-5e60-4fc8-9981-c13f9a1130da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7edf5071-c58a-4ecf-838d-9003b7ac9687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56087ab7-2905-4a72-b258-44aa49c415b0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8a6618-a371-478e-806c-df900ba2d7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5434b7-16ff-44af-986c-e7e4438cbc86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bbec08-9218-4c04-a769-56a2b1159a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935e3eea-fc0c-4dbf-91fa-620c5a8b364b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192078ed-ff51-426a-809c-6e8013251a08",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdc2a1f-bdf8-4669-856a-c7e38fe5853c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464ad3a1-f652-4def-8504-55cf2400273f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32df1036-11a0-41c3-916a-5b470e20d403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee65b689-b7e9-4ed2-a8dc-cd36ab1e2b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d959929-99c5-46fd-88d7-8af9b48300e3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411de8c6-d921-4e61-a297-d1730b279f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80d3e4b-3a1a-4945-9c91-306ba1179566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ec66de-e818-4822-9bdc-ed54011298dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3e87d9-e7c4-41d2-afc4-50f4dc65cce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6759eee-83d9-4d65-9d20-b6b81c1304a0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59894224-bf1a-4489-8633-eaec34d29b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd4cd4e-adc9-41c6-956f-418a337d1784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18eea05-71a0-46db-8717-b2730f7b397a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426373c1-ed22-4274-99f9-df1a0f4cb94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f3b0e8-0ae7-44cf-844b-f3afc07d2a30",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe581aa-399a-47a6-b5d8-f8256ac83c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9790d3-dfc5-4248-bcde-f5899d31d3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14d683c-dcf5-4a3d-9eb8-367cb4a01dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccd3dbc-9134-40bc-854a-d1087cdc77ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b355741-066e-40a5-8194-f1334693fc05",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc72a277-ecf5-4c2c-8db2-28b86d3e9678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ac0f58-e32c-4e1f-9cb8-58e88c2510b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed9b67d-ac1d-4864-abed-799a4e991bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f2b2ea-b62c-4f8b-9199-4f3b444d3519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eef9481-0790-4e06-8a3b-81a2f10b30a6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec9f304-8ed6-4817-93ef-d005e7a1e36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6561fa-8215-49ab-9d50-afef86083975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccc4a91-8e82-46ea-9afa-5f30f09b1070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf0e716-c5d0-442b-acca-48efe7e00b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4367aa1-4abd-4e9a-9502-d494ecb9e14b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b496aa7-915b-4a75-b48b-b92efa99bf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b5e503-813c-4767-a6ed-569c8ddda58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6b26eb-8bf9-4b85-a03e-c4773c495198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f1210a-e781-4749-ad6d-fff39df5e4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977df92f-84ee-4c78-9d02-8a296223d75e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7e1aae-f8d8-4bf4-904c-4ee8fd2e4f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc7c6ee-68b3-4d15-a1bd-fdd1b7c12234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc395df-c56e-4ca1-9ca2-8e82f279e811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d01001-babd-4a3a-9caa-7265a0941194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845a5fb8-f43d-4d36-b8af-773db7a3827f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d687c3a-fdae-43e4-a898-817fce88c3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9726b2ed-2f9f-4105-9edc-4713961a158f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945ad035-f8bf-404b-8095-db1e4411e752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b50669f-f4b6-4c56-896e-a28e666d1940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c09b8cc-9470-4343-8c3f-2cf6aec4de26",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1584c0-f70f-4b77-8367-6423a0d2681e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c2f6d8-0f51-46b8-b169-bb7914e4b121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53aa6e0e-55ee-4424-99bf-3b1b3da3a1b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c18a05f-a7c8-4c99-85ab-7310770ad564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd244887-907d-4738-8fbd-ca74ad3c50aa",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cbe515-54ab-4178-bbaf-d7b0bccf3b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d3ea44-2dbd-4f3c-8c8d-8c9cab496d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29973c74-1e74-4e59-99d8-75b53ab07c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342f1f03-64a9-47be-aac1-ca1fb9ef224c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235f7774-9ea2-4b81-8e3f-37e20357b6ac",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f202c34c-f341-414d-b4b3-ec9ca2929b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12562580-c31c-4548-b2b7-790669bcc769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa23d6bb-9717-40b8-bca6-7ac5fbd5de7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a8029f-cd95-477e-ae20-d0b0c6da7fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc19d46b-17b0-4f29-9907-d0ec76b16f07",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155c9b5c-205e-4604-b5da-23cf471c3bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0da76d5-796d-4e3c-8499-4b201c4480bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc79c80-1a23-44cb-aaed-6398eb472401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96a467f-d7db-479e-b713-7953ce39998b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552e7e18-3351-42e8-990c-b02c15d60ab4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5789f09-81d9-4045-918a-50c239da30b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ad5bce-ed72-4d33-b4b4-c0f4238b7c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed209034-bd1d-44ec-aa6a-4faf1ce291d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7fe230-5948-40aa-9ec6-bfd51a31b3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3f4fcc-4046-4579-a416-9b8ad6f797a0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a35b4d-a8d2-46cf-9b81-4171eeaba32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa992c2a-28b1-4abc-9aab-e76b783e2680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f1e544-ee9b-4435-a1ac-86b56a69bed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029e8635-747a-41f7-aca8-18f08bf260e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb0aab9-9113-4a04-a3a2-ba63d88f2f25",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8170c107-3296-4ad1-ba6a-0a211198b785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b62bcf1-083a-4bca-bff1-3b99ae5ad5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980809d1-85dc-4945-8349-1f9e0eb28d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71f3564-0050-41dd-8b18-1a4bd07a2901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8caec9-a231-4aa7-b4af-0319ea07ee2a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d559c2b-36e0-4baf-ace1-4021b3f600a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477bc3ce-a510-4c8a-969f-b1f3a99d2ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26191b55-1b22-4a5b-8a61-a1d4b2015c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d4fa1b-133c-4d7d-a7ff-3befe5f2bfcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02bac23-c0d1-4032-ac6e-6d1b2d69bc7a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aa0019-7620-434c-8274-21d664af5589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007dd2bf-0e81-47d2-8f04-f29b612cee3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0040791a-98cc-45ba-851f-52ed91a152ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c4915a-a7e1-4857-af39-0137ae938859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902eb9ef-b215-449c-9751-1820fb4cf2a6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed6b5ad-0d26-483b-9326-d51f1dca1185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2df551f-6619-4243-ad51-714eef22adae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbca716-333f-4525-8324-c4dbff91790f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9a7100-d350-4bdd-a906-915e35a3e29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89c0fbf-418e-4214-a988-c295262ea646",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56f4c46-4d1a-484f-8cf9-06fb965e063f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f05aec2-3aad-48f3-85b7-ff50046d42c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a058021c-0063-4165-9eb8-c5fae4576c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8637e40b-9387-415d-b2ea-8077bd82d37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b10e58-d488-43a9-b18d-cdc147e45820",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06312501-aeaf-496d-9157-1ac83fb34f3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50b3cd74-2ac0-4212-a398-662ba4aca11d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd0905f-eec8-42fa-889d-870cdf8f4d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9551f45-fddb-44c9-be5e-2f90c98e09a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad49a787-5831-4d20-98a8-db8bfc765c6b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c227f961-1dd6-4f15-a2ec-bd5a9067dc38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "791e4a25-99f7-4af8-a34e-b2e9116a6626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6178a38f-69fb-4e09-a996-3875aed584bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008996eb-a06c-4a83-9d55-f06d1edc3e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140208fa-1c8b-4ca4-8d77-59849ea6ec16",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c01703-e99b-4113-ad95-54a161d36c31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d79fd84-f7a3-498b-8a67-5d99670fd308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60746f54-b5c7-4ebc-9114-c0b81195dcaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66c0b36-7d66-4c18-b5dc-d1ba3f49a3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519bbebe-88fe-450e-8be1-cc9b08b8a024",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddd77aa-b09e-45ce-9188-a02e8c5ca7a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5080d10-c56d-477b-b336-41930171a5cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1694a05f-2a96-44ed-ba39-762a0e489d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f71b1e-2867-496c-b1a7-e916225ea3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb028f69-b8ee-448a-9ab5-08fb6b28c3e1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2cd070-4d7d-4a94-a2b3-f1854bca57a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42f0e73d-0f8b-45b0-987d-c8355f25d65b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea470bbf-5f04-4824-bde2-bd1ed18f7829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d524f79-7cf3-4437-a0fe-37292f2f1916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d16f25-bc93-4b33-b853-a075c95d8018",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49f7685-fc30-44c1-9e13-757015142dd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d07ee119-502f-4b4e-bcd6-a45541e6493a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c3e433-fd81-4f00-9257-96019d5cb798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb4b01a-b7db-4cbf-8a49-a98760f7a2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec579e4-f244-4b70-9900-811b3d5d8505",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b99cef-86d0-4926-81d7-d35f98949c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c98771a-f6ff-401c-b1b1-9b5b7370e775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5859fab-fc18-40d8-9947-87c0a6885c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e71c4bc-5572-44f9-a22c-b0a065e211e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f37331a-e93f-42f8-a603-c5f599fc045f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16529073-2acd-4476-b3a5-38abd0a5201d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60da7cbe-54bc-4382-9197-87abc41e4f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773099bd-3959-45fc-8daf-3ce2037d3bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a8489e-254b-49e8-8a1b-a8b1e73b6bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71118ecd-28fd-4c0e-95e2-af384303260f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75162c4-3756-496a-84f0-d0b771d7c7eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ae5dd0-34e9-45d0-af28-c17424ef561f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a0b6d8-34b5-45bc-ae53-c939bbf8ea84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf606c59-8650-4fd1-8398-1bfde9e4fb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ea133a-e1ef-4512-a247-81d22ce8b336",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c82465-3088-45c2-a2fd-e67223c0549f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2611de39-5c6b-426f-bb24-aa1dd7e2e9bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51e07c1-68f6-4645-bf88-5daa14004911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8241b71-f373-49c6-a381-939049dfd4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbbaac3-11ee-4536-bc56-86a06a333e16",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93b5a35-31ee-4819-9c5b-917756eca363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cd90d8c-11d3-4e14-818f-14fc67304b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee398f0-bdf7-4180-ad1f-499c959e5b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66aeebe1-fbd9-4a19-957e-8959a429016e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae257fb-f17e-47e5-8321-bf2b3f38aae9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e27de4-530d-41f9-9002-8459517d8b09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fafb2528-bdef-4ee5-b299-a5b2b76b16bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371b2063-2800-478c-aac5-a54def4eaedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c09e665-a92d-4a99-a157-2b4052144544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9e35c1-b06d-45bb-aad3-f787b0921fd4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd30c4a9-8b35-48de-8851-77b1e44daf40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f227a76-a5eb-41ef-b898-48225cb2a832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3197177e-35c8-4f55-a13c-e883738c2eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13e7d31-7dec-4682-84ba-f5fc142ee4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9ebf6f-c5c7-4d38-9c65-b1859c68ee93",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b4eb2c-5a42-4845-aa9d-aaaafc8fbed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d96e809-c51c-4bfb-952a-387a9116e75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5de06e-8ddd-4f83-af4e-857a3aeb9fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fe447a-388e-4418-b216-c60837864433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521b1aeb-1a08-4e28-9a86-9ccf3edcd225",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4dbc00-b7a0-4cee-b419-21fa1967d3ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d24551-83f7-471d-aaac-68bfc05ebfa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "578dbb11-5b4e-45a2-b2da-13d7f9978a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc7899e-5f7c-4b71-8b21-97b5e722eabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00524e34-5088-4ed7-8fe9-7e2423399083",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36aac27-ba6a-4aef-9a9c-a7e89e079e96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69f55ead-a447-44c7-8242-a83bcf6451e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c45729-7734-4a9e-8e97-7fb8d10665e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "210a1b5f-ac42-4310-b7cd-d291b1e624e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6671bb-2736-4560-a777-1a46b4a12ecc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a680f3-17b6-4447-88db-63f77414ccdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5559e523-6208-448c-a2d7-62b4ac3baa88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23075083-fb32-41fd-b7da-b237521c0227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4119596d-3ff6-47c4-a18f-25f7713d5267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db58800-ad76-44b3-96f3-29ab610e3252",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788f9da4-bae8-47a2-87ee-a4fae856f55d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2031b901-2bfc-4e50-8db8-e6d034b7aeaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8b75b7-68ed-460c-b271-6699f9e73034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093b8ac6-8145-4871-95cf-69cbb0299e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe9995e-3091-43bc-a290-1edea69a1414",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c89c7ed-e833-4535-a691-3cc58bdd6652",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe32c2b-b5fa-40cf-adcb-d9edb78574f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725e4f10-310a-4682-8a91-63f2935260c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b420c8-c290-4280-afa4-1f0a46049a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7818f08-300b-41ba-9e94-13a9c9ca3d0a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b303e801-cc86-4193-914d-7fab989377fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e0f440-e42f-4813-9894-8623bcb72a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71526861-631f-42df-9d60-b2173ba398d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47844a6f-0899-4c36-b45c-1b8ada7e2087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea278e6-8e64-41f8-89e7-8da41842acd6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fb7b6f-08d3-4200-bc66-0f82dbec8a6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7a55d50-fbf4-4916-82d4-3d576f20fc57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e131db3-ef77-4e6f-b7e0-6929a1cdafcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cfce9b7-6440-48f9-8ece-6c3aa6f283d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7aa107-920c-4551-b6c0-af1b94166bd4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ddb72e-5546-4b2e-98ff-9415e0645d57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "468ea34c-3d84-4948-b9c3-f01c8430bae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f8fa4a-c882-418a-bc94-9a0b3c455106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e2a04c-668f-4611-951c-bbbf79a45034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93beee4a-ef1a-42f9-ad9e-911c199ea813",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d390e62-338d-408e-8966-2a7b14a6834d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d296cc8-269b-464d-874d-1136da49ca2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd26b74e-0a89-4ad4-9c17-c63144c9e5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f08e00-6a08-4f34-a3be-9d7f0b9a5417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb1fafc-e9e9-458e-a778-b7a18a35ad68",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5b9301-df8a-4d5a-a84f-0c3e8f472b98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc786b3-770e-4f8f-83d2-cf69d87e2c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6632a6d4-7248-464e-906d-cee5301b2356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febe1014-d4ce-425d-83b5-d8618826d481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e0c42f-5149-411f-8b8c-fb36d4724392",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d74669-f813-48c8-9f0d-00c27cf85203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27d05096-252f-4deb-88a8-13d412e83d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b594fe-ccdb-42ad-9196-8cd208a975be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85cddd89-3127-43d2-b3c2-c2deb9d25ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6246072c-4e26-4086-af78-0e28625b3b59",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e57f8b-2407-4eb1-bcc0-a4223a4e259d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7226ce0-cedf-4848-8682-d55b19a66a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2346ecaa-1073-4922-b9bf-b321040c6a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de66de10-d399-473a-a5ce-c5e075dc0853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de98228c-e167-4a0a-b706-a0039a0bbd59",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185ef264-7ff9-4c11-bc90-1e3288756470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "367122b9-528e-403d-9198-545ada11758e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cebf952-986b-4f64-933b-36e8d2a98a05",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684e503e-5f5b-416c-a0be-532e155ac3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363c429c-5ff7-40e7-992a-0cf662a2633c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa882cb-ae9d-4c42-b8c9-bcd18731f054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e73ab3-ebb5-4ff0-a6b3-b62518036dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5df896c-c171-4d24-82c6-d52c9aa25bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36db05d3-6678-433f-9906-9219ce7bc097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1019b9-f99f-49d4-a731-78b046572a90",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91846731-1e8a-4817-971d-b232a55bf82f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e424542-6b17-4326-9a08-388692083f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99539210-38e5-43e0-9e5c-4015fc01e784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f327c7e7-36ad-43e1-9a4a-36ab96933d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba8f3c7-302f-452c-85c1-cb54f101649e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f100dac-5e2a-4eb1-88d8-32d7f071d36f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e08424-b436-4bf7-a3c2-9c8592cad7f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4989a9-c0ce-459d-ac0d-b3471252ac9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c6396d-5869-4627-a9e8-be2d6a426267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900da16f-e78b-43d8-9e63-b34c17352335",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b59d64-f65c-47b5-9acf-22d877218d2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937d44f0-aed4-4557-a262-c531a99a80d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d405a7cd-7abf-43ba-8d19-044fc1975802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f0603f-56f9-42a7-be76-87de19b19afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777d1ac2-5151-4fd8-a655-2cdb4dff3d2a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdac1a1f-7773-4c49-aadc-996d50583cfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41e3cf0d-6d12-4408-a1ad-2e734140ff18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008248e0-57e8-43a1-aa70-87c248e1f220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f933e7e6-8670-4b0c-95d9-e0c64198afc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2651d197-8562-49af-a39b-40599a80891f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd36c7a-185f-4843-a5f3-67b46d7f8387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e8e8b8-2571-4405-a9cc-b833977c2bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c65d48-f185-4977-a485-45c0d9cf99b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1767fcea-25ec-4391-850e-d58c56837da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2a1d10-6093-442d-a5f0-d73c48c20421",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15637fde-6f3b-4fc1-be44-a8233a3e5f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de0f53ba-b9dd-4dd8-a733-fdd66f305ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77673a2e-f61b-4dbc-804e-f65bd4d8a214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5524bf-0073-411c-b36a-5bc12794d5ba"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b7ba9cf-cb02-4900-92d8-878c93884529",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb095b13-fe99-4e9b-af2f-9e7ce88acc9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa57e8c4-ae58-4abc-9d55-ca8e5ea2e936",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1dbed11-cbe3-423e-abf1-f08c594579d0"
                    }
                  }
                ]
              },
              {
                "id": "95ee9a05-2d29-445f-9ddf-d511799b255f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32f7e8ca-a070-451c-8258-06d2f92978c5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db9c440-1e9e-4af2-b2ae-decc0470b7bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c6abe198-bf1a-4095-81ba-7802d3602ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326e6f9e-efce-4219-b338-1533420b3613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de89bafa-bcbe-45a0-a483-5315bb43c533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e10b53a-0f4d-4187-b435-ba1cfdd02605",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ba8996-c170-4e71-8693-af302472c20c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e4589957-0d53-4998-8a4f-ed392391b8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c3efba-6897-4ab6-a23f-0fe500d856cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8ba78d1-8133-4ca3-b5d8-33b0d35f0f8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd51b401-e6ae-482c-996a-0aa7ea86dd59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c8b4592-32ca-4e48-bf34-2db5e8257c1c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e57af5d0-6d2e-4034-9b03-9237666d9bba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11d146ac-fcfc-4618-a404-c122da3136b1"
                    }
                  }
                ]
              },
              {
                "id": "b55f7e8b-f262-45a1-b32f-02f18e36f80d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1348d829-706e-43fc-9463-15427383abe4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae717313-77d3-4e33-abaf-7bb03b8984d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "54180b11-0296-46f0-b31e-bbebbf9ec64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0e918d-178d-45e9-84d5-50b937cfd6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3485fe9-0186-4dda-a5da-0b14cfbe664a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "55d6bb08-f4bb-4ec3-87ac-c70ab36e50d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c3aae923-3da5-4343-abd0-2a0415acd02f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbaf07b3-ab4f-4302-8431-b4be3b9d2f03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a15f79ee-1321-4da5-b63a-1277be35ba29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8907913-2ba1-466b-968d-7613c935c3d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52b305c1-83bc-4780-a0f8-21f8988fb0fc"
                    }
                  }
                ]
              },
              {
                "id": "027939b7-1688-4578-b70f-d41c938d28a9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "befe8cc0-0359-4db9-bd5d-72e372a4dead",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cbee8872-d354-4568-9f87-f806642e1d02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8b60d5a-485a-4f4a-a51c-1359a95ce486",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b038be8a-e64e-4d1c-8249-6e1b2502b530"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e95abc9d-beab-44a1-8928-0d1f77277422",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0ffea646-7204-4f9f-9496-ba3843ff08bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27609b9a-adff-466f-a04f-1c87c8136b8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ffdcfec-e31c-4a79-8027-5062d7c5becf"
            }
          }
        ]
      },
      {
        "id": "18d631e1-4d02-41fc-b4eb-e8394571c49b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "053f9fb3-3988-4d78-983e-3d8dd54a6834",
            "name": "Negative Testing",
            "item": [
              {
                "id": "396b9746-a3a5-4010-b297-840e4e1ad0bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60692dda-ecb2-4537-9fb4-f52302e6d6b9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c30241-9b6c-402b-829b-ffa0d70582bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "72ac6d42-2989-4cbf-8800-6aa904622bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d71c84e-6285-4843-961e-ce07b8c07f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c181947a-1b8b-4b68-9d92-a2dec453a67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb0d39e-81a0-49b5-9de0-a5b2af1e03ea",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0016bbff-275f-4dd4-b36f-1b9ba5f6a129",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0d7422b1-e665-4759-afcd-91c84c7f2567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db91e7d-50c8-4851-a0b9-639d01f33d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1015f18d-7751-44e3-9518-6a179576ea47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a416c6f-b76c-4de6-bde4-b86121b77aa4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e64e4f6f-951a-4059-b3bb-7b1716c0d556"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "479d4255-1239-4184-8971-2754d9b66a76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b78e82a0-0a1c-4c51-ac6d-32c7228d8839"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dcbf8dba-d3ed-4a23-a6e8-b35260d135c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8f9fa54d-2ad9-4e63-8cba-a8e77fb6b9a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31b979ce-294e-4938-91d7-f5516635aad2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab5ae6b8-5cf4-4bf1-81c8-438d35f1daec"
            }
          }
        ]
      },
      {
        "id": "6717ca56-80bc-4c1b-9667-623982523176",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "85a4acf3-ac4c-43a7-a367-dc68c0cd6b05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd665236-536a-4be0-8c48-7dd56b31db32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b241c96b-ebf9-4e04-8145-da1795f67fff",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56ed76a-9273-44ce-8a6d-7327ff803255",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eaac81c4-8d56-4dc7-a8c6-817ccc361f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea06e05-3fc9-4327-8155-78519e168370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f9f31cf-b607-4da7-b935-818c0ab72af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8aa368-dbfe-445b-a19f-be22296d5bf8",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c02b25f-b8f3-4eca-ab9f-71fc337dc8b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb022e71-08e8-46f3-95c6-8c9a63edb769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "395b43de-6dba-4932-a279-d1f497e9c9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2f31d3d-e54b-4d01-a972-c4aefe7024ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf2d9f73-79ce-4fdb-9ba1-58ef93e86377",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39a7de7e-688d-43ff-aba0-2294d7dfb9e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00b79b93-d328-4dad-806e-ee856bb08821",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2457571f-334c-4066-8ccb-2ad9e40c27a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caec0dd1-ebc2-4c39-9a57-bf25573414e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7cd4bb67-9d6b-45d5-bd5c-289ababee854"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7432f085-a39c-492a-bd41-0e5c1a4ce515",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8073ca45-31b6-4dc9-8008-70ee12601733"
            }
          }
        ]
      },
      {
        "id": "bd338368-b981-4e38-8322-c0808afdd7fc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4c1dc820-6a45-4b59-8e81-c01147bb9516",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b50a942-6c78-4e86-90ec-8b2ee9a98dcd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06d9cc25-8a46-4420-ab99-222fc0ed5aa1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67ecfab-8c37-407c-b62a-fe3202d49bf3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d69a1956-869c-407b-a830-bb5483338103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6073b62c-0999-430e-b6fd-31bc348a362c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9da37aab-1fac-45e4-95a5-b1bd2a0ff4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d083886-0ba1-4ff5-91bf-fa60cabf0677",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9b36db-f137-45c7-ad17-858ce4f61892",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7e8e6703-ea33-4c03-b3cc-40283a3f0c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0090129-7e97-4806-bf43-093b6a5a8a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8664408-fb63-4aac-9f65-4c2559f7cf66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56f659cb-2854-455c-82f1-9ff2095a67ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f1d7c07-0f42-49e1-a015-72914cc4a116"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84abb00f-9578-4127-af3c-0238387afbe9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5481a72-1f18-4960-8fe5-3e168c417227"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc769f1a-bd64-4ba8-86f2-d45fdc0cfac9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d10aa334-73f0-4d72-9009-613c2aa8b949"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4701142c-ecfe-4ade-9dec-c8739499409d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0708ff9b-3ce1-4336-beb4-6894c90683e0"
            }
          }
        ]
      },
      {
        "id": "a46cddcb-ec13-4f4c-935a-f4a608519792",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c80a7906-84e8-48a1-af85-81a0b436a450",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d95b513d-5220-418c-bc64-9a2d27741c01",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6314dae0-6844-4a42-af61-d4fc28462379",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a39094a-87e9-4c03-b4b4-ee6eb9148e5d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62fa77d3-46b1-4624-bc34-3f489498cce7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.44827586206897,
      "responseMin": 22,
      "responseMax": 271,
      "responseSd": 27.805189275874312,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676498275449,
      "completed": 1676498301231
    },
    "executions": [
      {
        "id": "afba476d-53ce-4d4d-8a52-7f04731dbf70",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "48c146f3-4e5b-406f-aeb6-acbd71055e66",
          "httpRequestId": "0dc63388-0327-4f0d-9410-8d0dac43352a"
        },
        "item": {
          "id": "afba476d-53ce-4d4d-8a52-7f04731dbf70",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0221b27f-b2a2-4422-b58a-1d20d1c84cdf",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 0
        }
      },
      {
        "id": "5ce27b9d-1c06-4f3d-aa93-8a71a6c18775",
        "cursor": {
          "ref": "528ff3ec-bba2-4d92-946d-efac0efd0666",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4badbbfe-0ba2-45db-9c1c-28f0718c6ef5"
        },
        "item": {
          "id": "5ce27b9d-1c06-4f3d-aa93-8a71a6c18775",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2b4a21ed-7fec-4236-9c18-84f93da0fd6e",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "3db382f8-50dc-4f43-8ca1-a1de8dad9833",
        "cursor": {
          "ref": "6ff87123-8ad8-4711-ba55-e53db432aa95",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "45486a79-0842-486c-811a-1bc088fcabd4"
        },
        "item": {
          "id": "3db382f8-50dc-4f43-8ca1-a1de8dad9833",
          "name": "did_json"
        },
        "response": {
          "id": "2409d3e9-a244-4e0f-b4ca-312dc15b2c8d",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7754f5-fbfe-4706-b214-c81dc26329f5",
        "cursor": {
          "ref": "757ad890-9ad4-47f9-93d4-01866a11fc62",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eac98086-c996-491c-b569-fbf5b8276c68"
        },
        "item": {
          "id": "3a7754f5-fbfe-4706-b214-c81dc26329f5",
          "name": "did:invalid"
        },
        "response": {
          "id": "4ad1118e-1bb3-4179-9919-0a3e73249ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3a7754f5-fbfe-4706-b214-c81dc26329f5",
        "cursor": {
          "ref": "757ad890-9ad4-47f9-93d4-01866a11fc62",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eac98086-c996-491c-b569-fbf5b8276c68"
        },
        "item": {
          "id": "3a7754f5-fbfe-4706-b214-c81dc26329f5",
          "name": "did:invalid"
        },
        "response": {
          "id": "4ad1118e-1bb3-4179-9919-0a3e73249ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8e1b61ca-8668-4e14-a1f7-183dab518b9c",
        "cursor": {
          "ref": "697368bb-4b98-42c9-b1cf-65f0095fadda",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8608ec21-6ede-439b-9a99-fb99d8c153aa"
        },
        "item": {
          "id": "8e1b61ca-8668-4e14-a1f7-183dab518b9c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b301f691-e878-4d39-8620-b66464bb0680",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7058a061-e4ee-4dda-837b-2cd1d51c4b66",
        "cursor": {
          "ref": "6a7d26cb-aa1a-4dc4-8a35-6f1e07ec7a20",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "48269996-6a4c-49d5-8581-fc750acae9d5"
        },
        "item": {
          "id": "7058a061-e4ee-4dda-837b-2cd1d51c4b66",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7eb1565b-8c79-4cf6-a44c-c1eecc6e923d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453a18b2-78ab-45c9-8ba7-9a5d92dd8388",
        "cursor": {
          "ref": "71e59e57-cccf-4938-99a5-82533db3086f",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "18706e69-ff30-40b0-90fb-46af2da2fd72"
        },
        "item": {
          "id": "453a18b2-78ab-45c9-8ba7-9a5d92dd8388",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "261f24a2-9918-49ec-b34e-050767d81e21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea714ce-dfb0-42e6-be65-94212059a78e",
        "cursor": {
          "ref": "2b918a4a-850c-45d3-92be-aeecd47e2461",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "499e0479-187b-4078-8a2a-578220dec916"
        },
        "item": {
          "id": "eea714ce-dfb0-42e6-be65-94212059a78e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "af44b322-9581-4685-a273-0537302e3d6c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea714ce-dfb0-42e6-be65-94212059a78e",
        "cursor": {
          "ref": "2b918a4a-850c-45d3-92be-aeecd47e2461",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "499e0479-187b-4078-8a2a-578220dec916"
        },
        "item": {
          "id": "eea714ce-dfb0-42e6-be65-94212059a78e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "af44b322-9581-4685-a273-0537302e3d6c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0765e5ab-0af3-4604-baa6-cc44303931b4",
        "cursor": {
          "ref": "4cc657a5-d316-420f-a552-41d6fdcc6381",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "16586de3-ff9c-4a07-bf69-5c46572dc652"
        },
        "item": {
          "id": "0765e5ab-0af3-4604-baa6-cc44303931b4",
          "name": "identifiers"
        },
        "response": {
          "id": "d273a3e6-bbf0-4e81-b274-88fda2a026e9",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b28e9b-af94-45e6-b083-27f9a5d4f964",
        "cursor": {
          "ref": "94c5694d-1dd2-4132-98eb-c3d09a589857",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9dd8192f-66c2-482e-937e-3af92ab9e7af"
        },
        "item": {
          "id": "79b28e9b-af94-45e6-b083-27f9a5d4f964",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f59aa4d5-a278-4fea-b224-dee9b05216bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b28e9b-af94-45e6-b083-27f9a5d4f964",
        "cursor": {
          "ref": "94c5694d-1dd2-4132-98eb-c3d09a589857",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9dd8192f-66c2-482e-937e-3af92ab9e7af"
        },
        "item": {
          "id": "79b28e9b-af94-45e6-b083-27f9a5d4f964",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f59aa4d5-a278-4fea-b224-dee9b05216bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd9906c-080c-4acd-be71-438517663d1b",
        "cursor": {
          "ref": "c8668325-2f5c-4f37-8203-b53084745c85",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6cee7700-2663-4036-ac6b-c247afb5cd54"
        },
        "item": {
          "id": "4cd9906c-080c-4acd-be71-438517663d1b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9f0b9eb5-80e3-422c-b3ad-d2b45da10c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b54f61-225e-4e75-a118-998e54fd6185",
        "cursor": {
          "ref": "db54ff2c-b214-4d1e-9e32-b33428492efe",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "63a20d68-eec0-4453-8fb2-b304d28ca771"
        },
        "item": {
          "id": "c6b54f61-225e-4e75-a118-998e54fd6185",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "081efcc7-aa12-4b3c-bc94-8ea4602a26ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cfa277-bce1-4bdc-97df-d97d78e119dd",
        "cursor": {
          "ref": "d17ef165-c779-4854-8d5d-58a7f77c8f53",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93310087-1a55-4fc8-a18d-b49b94090326"
        },
        "item": {
          "id": "c7cfa277-bce1-4bdc-97df-d97d78e119dd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9fee9f22-01f5-4f5f-b167-4e5d80646222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fca944-70b1-45bd-9571-7ffd86e70691",
        "cursor": {
          "ref": "c94aca12-9660-40f2-b0dd-b06350dbf072",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e81e630b-5451-40ec-bd8d-6e8a2509bf6c"
        },
        "item": {
          "id": "b8fca944-70b1-45bd-9571-7ffd86e70691",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "84ed4070-8ce7-476e-87db-595bb92f5946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a79f3c6-5783-4c3e-80fd-9a74f99cb4a5",
        "cursor": {
          "ref": "e88c663f-8d41-473f-89f4-4375d3ed6578",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e989fc6f-86fd-4bd9-b53a-673b906b9601"
        },
        "item": {
          "id": "6a79f3c6-5783-4c3e-80fd-9a74f99cb4a5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "db6ebf75-e638-47fe-8b0c-74dfcb5b90eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e04182-2d32-491f-b723-00ed60ae7e64",
        "cursor": {
          "ref": "080ec1c5-205e-4302-b00d-ad9bdabd14ed",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ad4299aa-3121-4b03-9d2d-e3cd0c25a441"
        },
        "item": {
          "id": "10e04182-2d32-491f-b723-00ed60ae7e64",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "cc3f1a9e-1fd3-49a4-b42b-38265d7b3bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d689847-fb46-47bb-b62a-a0c69c57daf9",
        "cursor": {
          "ref": "4950e188-4c98-47a4-bc2e-71b0febcf8db",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cfd3ecbd-2a75-40d3-a81c-b9168beb88a0"
        },
        "item": {
          "id": "3d689847-fb46-47bb-b62a-a0c69c57daf9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9e079ba6-9402-4111-b417-e774593d7dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8244f6b1-6f48-4f8a-9f00-52a62a1902e1",
        "cursor": {
          "ref": "09e5f981-a962-4a80-9a83-d34b56977319",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f821880b-70d8-4db3-8ce0-6b29b1b225d1"
        },
        "item": {
          "id": "8244f6b1-6f48-4f8a-9f00-52a62a1902e1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a76d5cfb-018d-4eb2-8300-8bb289006edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec5d782-cb29-45cd-96ee-112bdefacb94",
        "cursor": {
          "ref": "79704e90-b9e3-47c4-b591-678cad8731b4",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1423b00d-f571-4596-b154-75092d30bc67"
        },
        "item": {
          "id": "7ec5d782-cb29-45cd-96ee-112bdefacb94",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3c192511-3ded-4f9d-9e4a-e55e40fc9a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b251a8-f53f-4831-a1e8-a1af32e4c947",
        "cursor": {
          "ref": "c1d03afc-fca0-4600-8697-8f2cc57f5177",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9a0abe72-9cd6-47f4-946b-4760083d1b88"
        },
        "item": {
          "id": "a2b251a8-f53f-4831-a1e8-a1af32e4c947",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cf0a61d0-337c-4ffa-a647-2246592828ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0865ee-1757-4050-beaf-886bba6373ee",
        "cursor": {
          "ref": "f8c1597e-266a-44f1-8e40-40df7395f4dd",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "72d78afb-8e13-4e37-a141-a0be9a5c9169"
        },
        "item": {
          "id": "8d0865ee-1757-4050-beaf-886bba6373ee",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6b846024-3761-4658-8c1d-8321cbba4fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ff23d0-4853-4c78-b2b8-82c222da3cd0",
        "cursor": {
          "ref": "fe0db530-4e72-4d46-8a6e-1b96d62edd89",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fd3d8f4b-074c-4f3a-b1e4-4cbd0b32d93a"
        },
        "item": {
          "id": "f0ff23d0-4853-4c78-b2b8-82c222da3cd0",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "a059366f-8f07-428d-b394-6cef969371bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e46b0c-fd13-4742-9450-c33019a9ee37",
        "cursor": {
          "ref": "89cb45d0-52df-475a-a092-c918ac8b5818",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6cd35506-1bce-4bf1-ba0f-f1da5385fdb5"
        },
        "item": {
          "id": "51e46b0c-fd13-4742-9450-c33019a9ee37",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6fafbca4-759d-4c11-85b8-72abd8172716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5402b04-869c-4c94-a6a5-2dfbd0487015",
        "cursor": {
          "ref": "09bebc29-d63c-425e-95a8-5541cd589eda",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b0e7f2b2-5690-455e-8892-51d3df32a280"
        },
        "item": {
          "id": "f5402b04-869c-4c94-a6a5-2dfbd0487015",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6f33f787-42eb-4cbc-80a5-769f8ad647b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943c8314-3615-4cd7-91aa-f97d1ebe57e4",
        "cursor": {
          "ref": "c20534d8-9380-496e-9101-d94a1c6758ca",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "248769ff-c5d3-4e9a-8c72-1b01f800fb5c"
        },
        "item": {
          "id": "943c8314-3615-4cd7-91aa-f97d1ebe57e4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0c7a37d4-0dc9-4137-a704-bb305161d095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7154c0b-b99f-40e2-8de1-27a3cdcbe2e6",
        "cursor": {
          "ref": "bd9622fc-f482-4ca2-9511-b91ebfa8c53a",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "547c6687-fad5-4b63-802a-d0ca81c52d58"
        },
        "item": {
          "id": "b7154c0b-b99f-40e2-8de1-27a3cdcbe2e6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "accd00e0-86a5-4d6c-a17d-afea72158922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8a4651-d3d9-4155-ab45-7689ddff6880",
        "cursor": {
          "ref": "26cce978-d776-467e-ad7c-ce159f209cb4",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c5a260e8-6dd3-49dd-ac5c-01ca0e65ed7f"
        },
        "item": {
          "id": "aa8a4651-d3d9-4155-ab45-7689ddff6880",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "87598233-a4ef-4946-8875-6dcb6557bb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2203f0f-613a-4269-b2cf-c14764f2a17d",
        "cursor": {
          "ref": "a82c379c-ea4c-4c49-aa30-8d47ce79ffda",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "84ac0d51-3126-4bec-9961-1cd26d10bd7a"
        },
        "item": {
          "id": "c2203f0f-613a-4269-b2cf-c14764f2a17d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "59d0088d-df15-45ff-96b8-4b42a0ca80ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de9074a-c21f-4dbd-9398-4302340a0b71",
        "cursor": {
          "ref": "4b6c1728-c9a2-406e-9d65-422430dd599b",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0dbd1d14-d309-45e1-9e22-a6546f6fafc7"
        },
        "item": {
          "id": "8de9074a-c21f-4dbd-9398-4302340a0b71",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "882a9cf8-b4ee-416a-8569-e5be70fb9fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cf32ef-7a54-4ec2-88e6-5df625cc8708",
        "cursor": {
          "ref": "df9f4ac0-eb30-408c-b644-3eae1e60bea6",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fe5f4d63-65b2-403a-ac74-496e88d5e527"
        },
        "item": {
          "id": "68cf32ef-7a54-4ec2-88e6-5df625cc8708",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "979a302f-5e54-49bc-85a5-81e424bc7d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fe24e2-5be9-4e21-8793-bb2682de966a",
        "cursor": {
          "ref": "524c8ca1-5501-4280-a1cd-6cc2cb5f9987",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2782ee4d-e143-4aac-95d7-c9d403e5bfdb"
        },
        "item": {
          "id": "24fe24e2-5be9-4e21-8793-bb2682de966a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "db6e0cb3-9cd6-4cfe-89b7-18c60ca60d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995585d3-f1e5-49ba-9e8d-41b7a686032b",
        "cursor": {
          "ref": "7d502e22-4db3-4cd6-9fa6-b5944cacdbe4",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3530122a-adc5-48a6-aaec-f44afb006c4f"
        },
        "item": {
          "id": "995585d3-f1e5-49ba-9e8d-41b7a686032b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ae0734a6-d639-4d82-b6a5-3d538eb8941a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e61d9a9-88f0-4af7-8666-9b2bda134c24",
        "cursor": {
          "ref": "6ad62ee7-2724-4751-8c26-a29838c2361a",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c01016df-8f9e-4760-8c46-4ec64d3bf778"
        },
        "item": {
          "id": "3e61d9a9-88f0-4af7-8666-9b2bda134c24",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "09dc6f92-aeb7-4822-8410-b92d0f2e0f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34be516-15f4-47ce-9220-34309b128d3c",
        "cursor": {
          "ref": "b43b643e-a488-42b5-91c4-f81f86c8690b",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ae231cf7-303a-42e3-ba41-1fc54e87d926"
        },
        "item": {
          "id": "d34be516-15f4-47ce-9220-34309b128d3c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "790ef56b-af87-4377-bce6-f9282242cdef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8355d7-71c6-4438-a290-437e16438c21",
        "cursor": {
          "ref": "f03f6134-f70e-4b59-8912-a200292140b5",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9934c974-b1b3-4fdd-ba2e-c489454325de"
        },
        "item": {
          "id": "3d8355d7-71c6-4438-a290-437e16438c21",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "878e4b17-e458-4013-832f-ab27b030655c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e22c97-5d5b-4e9d-9905-0c6748c837ba",
        "cursor": {
          "ref": "86518499-2315-46d7-9d70-4b0bf8fc4d12",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "73b9effd-e2a6-4c77-8ef3-650b542714f8"
        },
        "item": {
          "id": "03e22c97-5d5b-4e9d-9905-0c6748c837ba",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "238874ab-da6a-4e3e-9398-13161798083d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1130c3-a3fe-4263-9671-9e4ceee01d32",
        "cursor": {
          "ref": "93bab7a4-123f-4433-a426-a1093483dde7",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bb0b48ef-f77a-4b98-b9cb-650c4502ddf5"
        },
        "item": {
          "id": "8c1130c3-a3fe-4263-9671-9e4ceee01d32",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7404b2d1-dff8-4fb7-8179-9a0d13486ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7f6242-e95c-468c-b668-11b9088c436c",
        "cursor": {
          "ref": "e40fe881-6bd8-4458-8d21-fe857395f1a0",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f2b0ee01-ddb0-4071-8c2c-c27971ae0b2c"
        },
        "item": {
          "id": "0f7f6242-e95c-468c-b668-11b9088c436c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dfe8b680-faff-431e-8989-74b35ff28e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511758cc-68d0-407b-a811-8d40054a479d",
        "cursor": {
          "ref": "805760bc-8ea8-4619-9ffc-6f43f43e1fed",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2662c79c-d24c-45ac-b072-b9a438900acf"
        },
        "item": {
          "id": "511758cc-68d0-407b-a811-8d40054a479d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ba94f18d-9066-4766-8d1f-79ac789209dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec7874d-2650-4a7a-804b-4da601cba74d",
        "cursor": {
          "ref": "f1b63514-4392-4ac3-916f-4587b06513ea",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a04cee1b-1a61-475e-a9f3-ddee49219884"
        },
        "item": {
          "id": "9ec7874d-2650-4a7a-804b-4da601cba74d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8951f467-680f-4fdf-87ef-1499f354c800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fea210-98ee-400f-a6a9-77e07c6ed019",
        "cursor": {
          "ref": "39e93d80-8360-4ac9-ac10-51047ee79301",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3d3260a5-5f3d-4834-93f4-6e9932af8520"
        },
        "item": {
          "id": "67fea210-98ee-400f-a6a9-77e07c6ed019",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "20d87645-493d-462d-9114-4eeae1a1adeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e306445d-2625-4da1-a85c-169c8cf2a3b3",
        "cursor": {
          "ref": "ce311ef8-b76c-455e-8a64-5f56e98e0e9e",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fb938889-fda9-4ea9-acbe-a6028f0afee8"
        },
        "item": {
          "id": "e306445d-2625-4da1-a85c-169c8cf2a3b3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9b41f89a-cb59-4ac3-b73c-b66795ba687a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d13178-4314-49e4-b563-9affa838b77b",
        "cursor": {
          "ref": "31e53042-cbdb-4c2e-a393-57bdf5e22b58",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "54116201-22d0-44fe-8d04-35958df33e52"
        },
        "item": {
          "id": "29d13178-4314-49e4-b563-9affa838b77b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7f7da4f0-1e6c-427f-aae8-4cce63396527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd2786c-7721-4e0a-8729-e645b27808d4",
        "cursor": {
          "ref": "4bd5eb17-2746-43dd-9293-9ce252d1e7dc",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2e5fa737-f512-48d9-9166-d084e48c9291"
        },
        "item": {
          "id": "3bd2786c-7721-4e0a-8729-e645b27808d4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f16b649b-d532-43f5-8ed0-96a2e32fffb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8ced4d-90ef-49ce-bdcb-42c6602792ec",
        "cursor": {
          "ref": "5cd183c1-b94a-40c6-8dc1-b34d74507732",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b15c35ef-d5ff-417c-aec0-62fa19b0387d"
        },
        "item": {
          "id": "7c8ced4d-90ef-49ce-bdcb-42c6602792ec",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b143cd4c-828d-4b3b-8045-89a2f4d233ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88119dfa-e9e2-4e10-a07c-d849d4dd748c",
        "cursor": {
          "ref": "395ede01-8c58-4b16-a8af-548d82ed64ee",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "63d244e1-c6b8-47bf-a46b-e1764aafc78c"
        },
        "item": {
          "id": "88119dfa-e9e2-4e10-a07c-d849d4dd748c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4178dbbb-96cd-4a2f-88a3-daa5a51853ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f43325fb-aab7-461c-8f5b-711597af21a9",
        "cursor": {
          "ref": "ebe4c8bc-df59-4880-8124-d6af6ffa6681",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "327c0667-0226-4294-93df-173f8ce38795"
        },
        "item": {
          "id": "f43325fb-aab7-461c-8f5b-711597af21a9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "be8042b1-d2b7-4874-b0b5-6c89265bd76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c4bd92-e50b-4f9b-b7c9-2477ce8cd9e3",
        "cursor": {
          "ref": "46b19eba-6f35-4e21-9aff-992d93840e0f",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "53f4e69b-689d-4456-ae61-a9e7fef15a9c"
        },
        "item": {
          "id": "c0c4bd92-e50b-4f9b-b7c9-2477ce8cd9e3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "12c0bbbe-b24f-40f1-b9c4-7f61eb2d19a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9333e8dd-8387-4769-ac7f-cb0f9ff9de9e",
        "cursor": {
          "ref": "a7112344-2b7c-456d-9024-98d7bde4879a",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f0ebba31-ea15-4658-a6ed-e8da42ba9ff1"
        },
        "item": {
          "id": "9333e8dd-8387-4769-ac7f-cb0f9ff9de9e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "33508352-87ce-4de5-b27d-c761b034f8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5215dc6-ca0e-4ba2-bd49-4212f3ac8079",
        "cursor": {
          "ref": "ea074363-71b8-445a-8704-e5aeed45177a",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f245f1a1-0ac2-4a5b-ac87-a074d481799b"
        },
        "item": {
          "id": "a5215dc6-ca0e-4ba2-bd49-4212f3ac8079",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "577582b6-dd3c-47b9-8424-587bb92a90d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd54d10-dd9e-4af2-9a17-e1a5e6afa90c",
        "cursor": {
          "ref": "36134ae7-fa81-42c0-a4a6-80d9a0b301e3",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "51fba2d4-242f-4807-b7f6-0b79f590e757"
        },
        "item": {
          "id": "8bd54d10-dd9e-4af2-9a17-e1a5e6afa90c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a2940c68-f8aa-46cd-ba8c-ee76a8395c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb116f3-b2ee-488b-a602-1d066ab7ac0e",
        "cursor": {
          "ref": "24ebcb6b-a6af-4cce-82c9-133ad12074eb",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "24e12781-744b-4a92-8d03-194bdf9cdaf3"
        },
        "item": {
          "id": "fdb116f3-b2ee-488b-a602-1d066ab7ac0e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d2e64db4-0e25-47d7-b9ab-d2db1eeaca79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2cfe2b-8f58-4efd-a256-d738374af8f3",
        "cursor": {
          "ref": "4590e282-72c7-4c67-8ada-43945e25fbcb",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "034b4cae-0b9e-45e9-86e2-eec5f4ac4568"
        },
        "item": {
          "id": "cd2cfe2b-8f58-4efd-a256-d738374af8f3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f3ce65bc-b3eb-4aaf-8055-e5db786bb126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "062ea057-1397-4189-bea1-91b664f40760",
        "cursor": {
          "ref": "fe40cec0-9d01-43bf-9c96-30ceaa650480",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9917a965-fcc5-42ff-8596-acded133b840"
        },
        "item": {
          "id": "062ea057-1397-4189-bea1-91b664f40760",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c83d4b3b-0148-4898-b717-4f7aec431b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80a3e18-fc42-4400-a17e-0fd7a9131141",
        "cursor": {
          "ref": "29fe42f4-f3f3-4f4b-8a83-daeedcd69080",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "830aa61c-4877-4c75-b5f0-518b742c8d91"
        },
        "item": {
          "id": "f80a3e18-fc42-4400-a17e-0fd7a9131141",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "16746cea-2f06-4346-bebf-65d6a1a004ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7786b3d7-2333-48e8-9845-f505c5df1099",
        "cursor": {
          "ref": "407ffb56-40c7-4fa2-a058-db2d11dfe969",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b3ddfc3a-4e88-4aec-92e4-e8cf6c7bff3b"
        },
        "item": {
          "id": "7786b3d7-2333-48e8-9845-f505c5df1099",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e4518074-a4d9-45b6-ab0b-a9cf3f48b53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4149d4-ed1f-4ec1-8a34-05fcfa9048af",
        "cursor": {
          "ref": "f4fb982c-cdf8-439b-b202-7c128ae5e6e8",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "583716f1-7e16-40bd-bf4e-4b991548efba"
        },
        "item": {
          "id": "9f4149d4-ed1f-4ec1-8a34-05fcfa9048af",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f959f4eb-909b-4f6f-85b8-7e9cbcd0fb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36423f19-e969-4115-93c9-cc54de534234",
        "cursor": {
          "ref": "faf7393c-c949-40d5-b4ee-d3afe2fb302a",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "96c9511f-d0f5-4eb8-9172-60e82c52f825"
        },
        "item": {
          "id": "36423f19-e969-4115-93c9-cc54de534234",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1bb989a5-17c8-4133-93cd-c2e64172d19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4be6578-1253-469e-83a1-a3e8d16b98dc",
        "cursor": {
          "ref": "3ea684da-e89a-4314-8978-597f34f11a93",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "952f0818-1af9-4c0b-a44d-d9447f03eb6c"
        },
        "item": {
          "id": "e4be6578-1253-469e-83a1-a3e8d16b98dc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1a7f2f9d-ef62-430e-97cd-18e7f3ac5edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae59ad6-771f-4e36-993f-0bddf40c364c",
        "cursor": {
          "ref": "cc0b28b4-3a35-4eb5-91aa-cb7ff1463c2c",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a9330061-a9c4-4703-a195-26cbbe88a16a"
        },
        "item": {
          "id": "6ae59ad6-771f-4e36-993f-0bddf40c364c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6f93bc96-071b-4bdc-a1e8-4ab0485132bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30310ffe-68ea-4e7d-9275-5dc8e1210b0f",
        "cursor": {
          "ref": "a0ccefdb-466d-42c5-9ed8-0d8f9cdf9fae",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c2ff31ca-94eb-4d75-bb32-aedfca612b7b"
        },
        "item": {
          "id": "30310ffe-68ea-4e7d-9275-5dc8e1210b0f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ca415bda-3c2f-4fe5-a3e6-22b7114cd082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fb5e79-4d27-43d3-b39a-ee9d5f529c12",
        "cursor": {
          "ref": "7d2c482e-de32-4a75-b63f-a323607f6d8f",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "17089c6f-c034-45a3-b37f-7e2c3d3ef3d6"
        },
        "item": {
          "id": "23fb5e79-4d27-43d3-b39a-ee9d5f529c12",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8539ac3a-d9b3-4660-978b-4560ff2372fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43bf84c2-7eaf-4ffb-9bc8-3b0bbf020e81",
        "cursor": {
          "ref": "26a8eeb2-7ccc-460d-8b12-da7d5e9951cb",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fc81a089-4718-4316-98f7-782843af6156"
        },
        "item": {
          "id": "43bf84c2-7eaf-4ffb-9bc8-3b0bbf020e81",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dacbf0e6-5368-4e0c-b51d-26ca7a7053ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fc2142-59d9-4952-a29d-2b9ff0891bce",
        "cursor": {
          "ref": "795d53ea-380c-4cd4-9a45-74c36fff97ea",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "71dbb201-84fd-446d-8c27-8e79f80c2677"
        },
        "item": {
          "id": "b9fc2142-59d9-4952-a29d-2b9ff0891bce",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "35248bf9-51f1-424f-bd22-1d0e22467439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b4369e-fe00-4400-b203-a355a1c1bbd9",
        "cursor": {
          "ref": "d787c1d1-7aa9-4174-87b2-567aa0c0f08d",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d4990f94-ac48-4c25-b010-7be3412960d6"
        },
        "item": {
          "id": "14b4369e-fe00-4400-b203-a355a1c1bbd9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6f934d13-7e75-48a1-bd35-2d29fd7f29d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a544e79b-00f8-4900-969f-e2fab66df367",
        "cursor": {
          "ref": "458551d9-68aa-40fc-af47-c9f8247eb3da",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "457cdeb8-9855-413f-9b9a-a5c63444e92a"
        },
        "item": {
          "id": "a544e79b-00f8-4900-969f-e2fab66df367",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1b03961e-e015-4aee-b6c5-a8a131b8200a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058b1d30-7b2a-4b1b-b375-526b23840a0d",
        "cursor": {
          "ref": "b2538cff-6a0f-4328-9394-cf2eb194399d",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cc26a43a-144e-4bbf-829a-b5338394281f"
        },
        "item": {
          "id": "058b1d30-7b2a-4b1b-b375-526b23840a0d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b65a201c-218a-4f18-ab6c-f0c9fc18f3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cd9c30-8201-4ee0-a3a7-1d7a3a649a8c",
        "cursor": {
          "ref": "ae5b48d0-8537-496d-9207-36acdcc70107",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1cf95556-0829-4fe3-ba85-f3c0fd1d67c9"
        },
        "item": {
          "id": "91cd9c30-8201-4ee0-a3a7-1d7a3a649a8c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "23c84b15-492c-4786-8798-a26e04b614a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a56b1f-1527-4cda-a90a-f332f9dbb522",
        "cursor": {
          "ref": "a80f5990-7a2a-4585-b3f1-5e641dd40a62",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4aa9b54d-17a5-4f98-8400-ba6a1f08bb5e"
        },
        "item": {
          "id": "71a56b1f-1527-4cda-a90a-f332f9dbb522",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "316880af-1bc4-4d4a-883e-45e16aeea137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98c3765-bd62-4e31-b805-0d64a3fc9ea6",
        "cursor": {
          "ref": "953d726e-b8ac-453c-a3e7-5c1282402859",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "99115def-081d-4cae-ab3e-9bbd674fa517"
        },
        "item": {
          "id": "c98c3765-bd62-4e31-b805-0d64a3fc9ea6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b5dfd8a7-0b92-42cb-8a53-f733cc3a6363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c45eee7-4393-4c79-8a54-e504c474bab9",
        "cursor": {
          "ref": "b3333fc2-be87-4600-a8d5-d9358ca02e26",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ab937eb0-c78c-4685-9625-15eb5b90503f"
        },
        "item": {
          "id": "1c45eee7-4393-4c79-8a54-e504c474bab9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f7ff4eb1-b9d2-4b7b-80ae-8b2472426a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a47874-88cb-47dd-99fb-ae71992d1ef5",
        "cursor": {
          "ref": "3db2b033-3b37-4f98-ba46-d735a7fc45ab",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a1018669-a0c7-492c-8859-a14caef5b32f"
        },
        "item": {
          "id": "b9a47874-88cb-47dd-99fb-ae71992d1ef5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "04b5bb8e-1a1c-4699-a627-f252bcaf6deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151cebc3-5fdf-4806-9b27-c89c7059254e",
        "cursor": {
          "ref": "29fa7753-52b2-427d-950a-333d2fbdb67b",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a00f11aa-03d2-417a-927d-f994eb9c62e9"
        },
        "item": {
          "id": "151cebc3-5fdf-4806-9b27-c89c7059254e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "54a42811-3e56-4b09-bb3e-522f422e72e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cbb554-43b8-411e-8d85-9dad82af4e3c",
        "cursor": {
          "ref": "9d503207-87a8-4a22-9584-706caaeb4ac9",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1e35fb29-58ae-44b6-b690-8a3261058bec"
        },
        "item": {
          "id": "41cbb554-43b8-411e-8d85-9dad82af4e3c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a131331b-6ce3-46b0-9899-324b501764a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396b0020-5359-4138-89c7-98651c75f644",
        "cursor": {
          "ref": "a7a6c0ed-21c6-4862-be76-f39beba92903",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5a48c85f-d930-4acf-b48f-ad7e8b087e65"
        },
        "item": {
          "id": "396b0020-5359-4138-89c7-98651c75f644",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e27cf356-8fbd-4366-a431-0d70bafaa263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c02c3bf-2092-4cf5-8705-fff26a54325b",
        "cursor": {
          "ref": "4b289511-f291-4727-a6c7-7d036d5b38b7",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a8bfc272-1d33-4b35-8e3b-a95e720973a6"
        },
        "item": {
          "id": "4c02c3bf-2092-4cf5-8705-fff26a54325b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "71bb1adb-95f1-4a2e-93bf-0304a86d0474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3830c73-3a51-4858-9c31-03a0f4a87214",
        "cursor": {
          "ref": "4c7a07a5-a158-4f21-b5c4-b70b9c25ddfa",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4567d511-4fe2-4a5f-a1b3-db220a5001ec"
        },
        "item": {
          "id": "d3830c73-3a51-4858-9c31-03a0f4a87214",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "364f7579-98bd-4592-b981-39b015c3a521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e59db0-36e9-4503-bb42-71f980d7303a",
        "cursor": {
          "ref": "63c9cdf3-1031-450e-8e03-a83d930a2f74",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6cbe3c63-ced4-456d-95e5-653d621aa55b"
        },
        "item": {
          "id": "e5e59db0-36e9-4503-bb42-71f980d7303a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "34fa6ea9-879c-4cf2-ba2d-ee734bae235e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9275c401-0080-46ce-8a95-f9cc99c0ebab",
        "cursor": {
          "ref": "34acc5cd-2d32-4878-aa81-e2929d538e3a",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d166fff7-bcc1-4e85-a29a-97cc13fd52ac"
        },
        "item": {
          "id": "9275c401-0080-46ce-8a95-f9cc99c0ebab",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e2d71d2d-5038-4dbf-b4a6-cd6e956e4498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137ae547-9c21-4f60-b264-9de229323eba",
        "cursor": {
          "ref": "1f6800c7-2c2d-47b6-8ae8-4741a4eaf49e",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ad22818a-fdb1-4d76-b993-4389f531a6a0"
        },
        "item": {
          "id": "137ae547-9c21-4f60-b264-9de229323eba",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a5c948c8-288a-4c22-b1d1-71688ade7eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba8aee0-6ef4-412f-80d1-866d9c3c3675",
        "cursor": {
          "ref": "35a46aea-24d3-4ba2-8d52-a09e06c6d102",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fbd9ebb3-d904-4e8a-8314-74af7ed58f4a"
        },
        "item": {
          "id": "9ba8aee0-6ef4-412f-80d1-866d9c3c3675",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3f1dc5d9-d8a9-4d76-ad08-7217964e17be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb347c9-92b7-4f55-a078-9c7387e9d853",
        "cursor": {
          "ref": "fe0f1b23-0fb2-47cc-afa2-d7925f290ba4",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a11b3623-23b2-4274-9efb-15153a2a721e"
        },
        "item": {
          "id": "dfb347c9-92b7-4f55-a078-9c7387e9d853",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6d88d90b-e5c2-4d0e-b353-b22eb18e808b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db70885-8fd1-423c-bdae-a8678f8ab62c",
        "cursor": {
          "ref": "2c2c8cc7-0191-4181-8092-df85aad10998",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e4b13acb-f5cf-4891-9e60-da1153a2e463"
        },
        "item": {
          "id": "9db70885-8fd1-423c-bdae-a8678f8ab62c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "99b86bb8-964e-4c21-81d7-3c1d18bd373a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab4accf-b99a-4a03-be02-ab32c160943a",
        "cursor": {
          "ref": "bcf9af50-aaf3-4dc5-ad8f-7584bb3d42d0",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2e822452-1cb2-46a8-a663-524b21e2608a"
        },
        "item": {
          "id": "9ab4accf-b99a-4a03-be02-ab32c160943a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "39709a2f-4592-4d55-98a9-301bf0c6d630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a464c768-c3ba-4084-99c9-615545083d37",
        "cursor": {
          "ref": "5474dda5-827c-4db8-8192-c75d62916e25",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4b3ce4bf-1c22-4409-ad3d-983d17ac1dd1"
        },
        "item": {
          "id": "a464c768-c3ba-4084-99c9-615545083d37",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c3470b00-b2f9-4f8e-a6c5-9290385c8fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fbb6e8-2e29-47b0-ba77-ef51a5db048c",
        "cursor": {
          "ref": "63a06683-7549-4b14-b2f9-64a04e0e7a27",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "64204bee-4943-463a-a337-2f956d2d324d"
        },
        "item": {
          "id": "87fbb6e8-2e29-47b0-ba77-ef51a5db048c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "44c5afc0-7a71-49ec-b317-ca6bdb09df17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b42c171-21c5-46cd-b0fe-71cfd929d927",
        "cursor": {
          "ref": "5b47237e-3693-407c-a02d-be38d6c4718b",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d3a4812e-09f2-4334-a24b-1acb8e2a8c7d"
        },
        "item": {
          "id": "0b42c171-21c5-46cd-b0fe-71cfd929d927",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2c31d6eb-3191-4a05-b930-05b0c50a2e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6193b851-5891-4b9f-a566-87207f62418b",
        "cursor": {
          "ref": "23a407b7-64c1-4ed8-ab3e-16944cd39d2d",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7101c3cb-7652-4fa8-ad6a-78e13d03fa9f"
        },
        "item": {
          "id": "6193b851-5891-4b9f-a566-87207f62418b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7245675d-c946-4108-9bad-4a428021fb7d",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "9b87ad78-254d-48e7-b051-0b07465084b5",
        "cursor": {
          "ref": "e073e878-68be-452b-b0c1-05f2f9265e9d",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "630816d5-46dc-4000-8a0f-646b4a7744d3"
        },
        "item": {
          "id": "9b87ad78-254d-48e7-b051-0b07465084b5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "efd7a597-5df8-4888-a43a-3392deab7ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea056f0e-eee9-499a-85c0-1e8390d9ec29",
        "cursor": {
          "ref": "a3ca9788-f2a2-4311-a81c-e7dfe1453353",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c80a31bd-4cb2-4580-9997-68ebf909cd4a"
        },
        "item": {
          "id": "ea056f0e-eee9-499a-85c0-1e8390d9ec29",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "31d6cffc-8593-4a20-887b-0272d3a1e828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf956a4-5280-47e1-b771-01ce3d6ee566",
        "cursor": {
          "ref": "ff498d0f-ba1f-48ed-b1b5-28934b11e4f6",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f1f744b3-1037-4f17-a31a-d7054ec3aa00"
        },
        "item": {
          "id": "caf956a4-5280-47e1-b771-01ce3d6ee566",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4f333daa-6275-4352-8593-d0bd3c376dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fac363a-e11b-4cd1-b686-94841d046587",
        "cursor": {
          "ref": "1ee34e7e-cd69-4d70-88a9-738f43bb66d9",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c360265c-8105-4cf7-a28d-8e3040e15820"
        },
        "item": {
          "id": "9fac363a-e11b-4cd1-b686-94841d046587",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "01df60cf-a5f8-4a7e-ba89-3f08c61ba235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aa66fe-3a06-4745-a3c1-dd503f6719ce",
        "cursor": {
          "ref": "a056ecd6-7b98-437a-8d12-462340a37f0f",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "efd55974-16ab-4f5f-a421-d792d5a83acc"
        },
        "item": {
          "id": "b3aa66fe-3a06-4745-a3c1-dd503f6719ce",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "74332858-5b21-4bae-a25f-a1745ccb1a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7caf4f85-7e1d-4581-99a3-13e616e31980",
        "cursor": {
          "ref": "c7193cac-937d-4788-a134-0cfcaadcbbab",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a3945a6a-41f0-40e2-9501-5f6d914fb633"
        },
        "item": {
          "id": "7caf4f85-7e1d-4581-99a3-13e616e31980",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b374704a-33cc-4cad-9dc1-36a222919a0f",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "43742223-4bcf-4022-b7c8-87a2f561337a",
        "cursor": {
          "ref": "6840e6ec-870e-4c1f-af94-ddb0cc8ab867",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "14e8032a-aba5-4323-80f5-0bc486277568"
        },
        "item": {
          "id": "43742223-4bcf-4022-b7c8-87a2f561337a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "487f65ae-df9d-48b1-8142-e6f18462c34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075c964f-cbd6-4e56-9899-ed46f5f81445",
        "cursor": {
          "ref": "e58d4c11-9975-4918-a194-d77a40d53ecc",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "84f0f1f7-fb86-42bb-ad74-dabca7bf5271"
        },
        "item": {
          "id": "075c964f-cbd6-4e56-9899-ed46f5f81445",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "78d23e43-5845-4abf-9c14-a199f33f321e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62749559-420c-4074-8a2f-5b67ca7e03ba",
        "cursor": {
          "ref": "4f650e53-6b78-4f32-ac3a-57f0e5d28d17",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4b83193e-29cc-42ba-9368-ccddba319b8e"
        },
        "item": {
          "id": "62749559-420c-4074-8a2f-5b67ca7e03ba",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8f417049-163a-4f7b-a3cd-693ecfda200c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62b8904-c49d-4b3a-b0ee-42ac566db058",
        "cursor": {
          "ref": "35024fb2-07d0-47e7-9907-0677d6986682",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3fc728b5-a531-422e-b614-748bdcdacbcb"
        },
        "item": {
          "id": "d62b8904-c49d-4b3a-b0ee-42ac566db058",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "12f4e3a5-9eff-48ae-a1e6-38359ef1532b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57b8331-b6da-40dc-bc37-64c87f3a88e2",
        "cursor": {
          "ref": "94c37d4e-dda4-475b-8201-3662db5c10ba",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "382e2fc7-7e5c-4767-bb79-eba53423f49f"
        },
        "item": {
          "id": "c57b8331-b6da-40dc-bc37-64c87f3a88e2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cb76bd48-fef1-4d5e-8fd5-512fd3c37363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89eb5787-36ab-47df-a0ab-feb306687a25",
        "cursor": {
          "ref": "dd183fb7-d10f-47fe-a768-ad9f26efbdf2",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8b481bb8-dfc3-4c83-b4d2-fa03f16ec3f9"
        },
        "item": {
          "id": "89eb5787-36ab-47df-a0ab-feb306687a25",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2ae7a082-4b18-4955-b49a-727b5278afb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952db675-f83f-4cca-93ed-a8c0da4180cd",
        "cursor": {
          "ref": "1ac10a63-f46b-44a0-8e04-8e848fc5ce62",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "244ea7f3-05fe-4fc8-bdb4-75dea7f19822"
        },
        "item": {
          "id": "952db675-f83f-4cca-93ed-a8c0da4180cd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9335e195-c975-406f-82e1-01ccf2ea7cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b665ed-7d63-492b-b891-0ac899d17177",
        "cursor": {
          "ref": "20a8613e-2b9b-42dd-bb32-697c1086401f",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "65d3e04c-8e26-493a-88db-a0dd2d7c69b8"
        },
        "item": {
          "id": "e6b665ed-7d63-492b-b891-0ac899d17177",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b6f3f9c0-2364-49c2-8f0e-d235dbcfd08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2fc306-5e3d-4e8e-a5c8-b8b4b35c9c2a",
        "cursor": {
          "ref": "ef35ee7e-ab64-41bc-9992-e897e726cbcd",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5cdf890f-925a-4ac7-8fff-29da38e0c6f4"
        },
        "item": {
          "id": "9c2fc306-5e3d-4e8e-a5c8-b8b4b35c9c2a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "95aa82c7-dc70-4f12-991f-a73200f6a08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f714706b-e930-460a-b4d1-03a945c91517",
        "cursor": {
          "ref": "c6d750ec-9f0b-4f60-bb7c-b124a08b0a56",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "147fe9d7-7ab5-4933-a793-409986aad6e0"
        },
        "item": {
          "id": "f714706b-e930-460a-b4d1-03a945c91517",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7d9a2019-79b1-4cd9-a31b-b7f96544948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b94625d0-36cd-4cbf-a006-593214f2c4d9",
        "cursor": {
          "ref": "313703d2-ea95-40c6-b1d4-174b2194ef7e",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6fce8bb5-9c43-475e-8b9b-583af26500cc"
        },
        "item": {
          "id": "b94625d0-36cd-4cbf-a006-593214f2c4d9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "42659829-1714-44e9-8931-0e32c5402932",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b60bfa-2b8d-4a32-88bc-6493729a55c4",
        "cursor": {
          "ref": "3ee983cb-87c5-42a3-bf50-8482287bbcc0",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "da04db6e-3263-4c7d-be83-9ac6de2e3c55"
        },
        "item": {
          "id": "57b60bfa-2b8d-4a32-88bc-6493729a55c4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "75446f50-15f3-4ad1-8e16-3c050f19ec76",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "772449d6-cc82-4bd1-b3db-65d1f741e2eb",
        "cursor": {
          "ref": "752de91a-d095-41e1-9164-ab246d2259a5",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2f87904e-f640-48fc-b659-36279b0ffae7"
        },
        "item": {
          "id": "772449d6-cc82-4bd1-b3db-65d1f741e2eb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bd7293f2-2974-4e71-8fcc-67b49d7864ee",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a99b6a0-e2da-4ec0-a0f2-aada2972ceff",
        "cursor": {
          "ref": "2e7c0ad6-8083-48f0-9619-211606f39838",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "118ee4a1-1012-40ee-93e1-2b2510aafaee"
        },
        "item": {
          "id": "7a99b6a0-e2da-4ec0-a0f2-aada2972ceff",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "30a2fa0e-e639-4ef2-9ff1-138995e96c32",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ea5968-59bb-4c46-9ccc-c18dbc6dee62",
        "cursor": {
          "ref": "7d2881a9-2293-40a9-9930-0a1ba2b08f73",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a6e43897-1c7b-4491-bd88-d8c094b1ae88"
        },
        "item": {
          "id": "f2ea5968-59bb-4c46-9ccc-c18dbc6dee62",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "16a58e96-1594-4505-96e8-e884fd38a321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "fe8dbfde-ed61-4a88-9fcf-8aa6ea5ba955",
        "cursor": {
          "ref": "877d2749-d145-4f26-a4a9-fc872a3bb73b",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "41b6406b-e5bd-47a8-9af5-2f1d2706de7f"
        },
        "item": {
          "id": "fe8dbfde-ed61-4a88-9fcf-8aa6ea5ba955",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "996ddd66-1be4-4ab5-90a9-964eebf28996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8dbfde-ed61-4a88-9fcf-8aa6ea5ba955",
        "cursor": {
          "ref": "877d2749-d145-4f26-a4a9-fc872a3bb73b",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "41b6406b-e5bd-47a8-9af5-2f1d2706de7f"
        },
        "item": {
          "id": "fe8dbfde-ed61-4a88-9fcf-8aa6ea5ba955",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "996ddd66-1be4-4ab5-90a9-964eebf28996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711bc750-3dc5-4777-bfa2-1658aebd4e23",
        "cursor": {
          "ref": "cac56c0f-b055-44ca-83ba-7bffa76933b7",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cdc8fcca-6b1f-40ba-a03e-c5207bf0504b"
        },
        "item": {
          "id": "711bc750-3dc5-4777-bfa2-1658aebd4e23",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a587f347-2458-4f40-b657-42e92e4533da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847afc84-dcbe-4d48-82aa-103b32e97551",
        "cursor": {
          "ref": "ea92625c-f95d-4cd5-88f6-c94cdcd84b14",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "84a6a2aa-d654-45b1-b9ad-f7840981f84f"
        },
        "item": {
          "id": "847afc84-dcbe-4d48-82aa-103b32e97551",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "717d5855-b2e9-44b9-b97c-29b7eff8f5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6174e80c-52ec-4b8c-8d0a-d3025c135cef",
        "cursor": {
          "ref": "617cf58e-5836-4cc7-9cf9-2ea73a21b864",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5bcb771d-1814-450f-a17b-5bd80a15a925"
        },
        "item": {
          "id": "6174e80c-52ec-4b8c-8d0a-d3025c135cef",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e9f33bf3-0d95-42f2-91b2-6ab2e005c58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92479355-5fac-4e2d-8b25-312c2368e68a",
        "cursor": {
          "ref": "6058c995-5066-45fe-b250-4bff83ee6c77",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "33827c1d-57a5-4a54-9b68-98470ffec174"
        },
        "item": {
          "id": "92479355-5fac-4e2d-8b25-312c2368e68a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7a321929-de86-44d9-b88c-4e9c9522ee87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb6e2e1-b7eb-4577-a7f9-0ca15452cabd",
        "cursor": {
          "ref": "7ea45448-9302-4650-9a35-74bddceb22af",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5eadf6af-849a-40ae-85e5-c8483fa1b30b"
        },
        "item": {
          "id": "7eb6e2e1-b7eb-4577-a7f9-0ca15452cabd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "90847c17-ddd5-408a-99c5-448c6d0fb3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091d7515-35cf-455c-8e47-72482ac6ad2a",
        "cursor": {
          "ref": "f71f2b84-c83c-4fad-a0f8-a0a5cebcc5e5",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "42a84722-dc9f-4993-a0d7-5a8a460f3adc"
        },
        "item": {
          "id": "091d7515-35cf-455c-8e47-72482ac6ad2a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8b9789f3-11ef-4c40-abfa-5eeea9d4e79d",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9660e1b4-0c42-4899-b317-da5957a280f6",
        "cursor": {
          "ref": "1c48c06b-a4ca-428b-8679-941480a45f66",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d5a47294-0628-4c5d-834b-20f41eafafb8"
        },
        "item": {
          "id": "9660e1b4-0c42-4899-b317-da5957a280f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eab7fcf1-d88d-4f0d-b5a2-62151f41236c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19307c2-132d-4db8-8a78-196b4b374b62",
        "cursor": {
          "ref": "ee27bcf8-5da3-423f-81d2-e4265ae12021",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1f39b718-7f02-4373-9f8a-872dcdcc8bf8"
        },
        "item": {
          "id": "b19307c2-132d-4db8-8a78-196b4b374b62",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ce283c6-eb84-455c-bc70-47a0b13b02d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3452f0c-4503-4463-8115-dbd8618dcd66",
        "cursor": {
          "ref": "c898a58a-9f78-4a90-8065-0afaed95ca45",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4835954f-e390-45aa-8d72-3c850358e4a1"
        },
        "item": {
          "id": "d3452f0c-4503-4463-8115-dbd8618dcd66",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "666e714b-e168-415b-bb9b-0f11a4438ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e80f15f-f256-41a5-8fe8-fc21f055cad4",
        "cursor": {
          "ref": "c79ea020-3062-43d6-9027-057b8602fe1b",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9966dadf-4453-4d38-95f5-3b93e6863752"
        },
        "item": {
          "id": "3e80f15f-f256-41a5-8fe8-fc21f055cad4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0cdf8307-56aa-4cce-88ff-bdd74b7129df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3903b1-29e1-4a4f-93b3-040378377802",
        "cursor": {
          "ref": "1fc707f9-bee3-4afa-823c-0a2464c9c2be",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c266e450-58c8-4dd9-a554-67964de03683"
        },
        "item": {
          "id": "fb3903b1-29e1-4a4f-93b3-040378377802",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "766926e2-eb2a-4ed7-941d-15ca1b06294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36dd5d3-04ee-45d3-89fe-2651c28ff301",
        "cursor": {
          "ref": "0f5c59d4-f41b-44de-b911-50c928f934ff",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0b5075e0-1385-4f5e-8a36-d11c1ebd5859"
        },
        "item": {
          "id": "b36dd5d3-04ee-45d3-89fe-2651c28ff301",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cb173946-37f9-415c-97cb-048f7589e38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8dd2c04-d43c-44ac-a218-fb2cad2fa15d",
        "cursor": {
          "ref": "32302a90-14f3-4c82-838d-a67a8ca7ebd0",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a765d0b7-d0b6-4613-a701-07768aec8dd7"
        },
        "item": {
          "id": "b8dd2c04-d43c-44ac-a218-fb2cad2fa15d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "de0ef6de-0bc2-462d-89aa-33489ed9abb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffc4946-b63c-418d-a322-ff04a135dc16",
        "cursor": {
          "ref": "79d6c67d-08df-4102-89c0-ef9657d7b39f",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "db07a487-b8c6-4b3b-b613-49b53ee19235"
        },
        "item": {
          "id": "bffc4946-b63c-418d-a322-ff04a135dc16",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc07a9fb-f226-4253-ba44-e8b36063a6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cef53d-47d8-49a5-8f7a-03ad2dfc978a",
        "cursor": {
          "ref": "c819c8d3-0696-4087-b42d-bcf5a8fbc615",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c8328538-8ebb-41bb-be34-129e486a188c"
        },
        "item": {
          "id": "b5cef53d-47d8-49a5-8f7a-03ad2dfc978a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cd774728-f604-4448-8496-21d5fc90f534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069945be-732c-457d-be35-580050cc8434",
        "cursor": {
          "ref": "62d66f45-b450-48cf-8599-eb4a6e33712b",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "03e0a1fd-83be-4315-b0a7-c20d64b5b406"
        },
        "item": {
          "id": "069945be-732c-457d-be35-580050cc8434",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a990acfd-057c-40ab-85c0-25325e0d43b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc7fd0e-f64b-42e7-a518-d16136e32d6f",
        "cursor": {
          "ref": "1de568fe-3818-47dd-be77-bbb36d1508d8",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "af008cf4-0fb5-4d84-8cd7-e43c1509ddf1"
        },
        "item": {
          "id": "bcc7fd0e-f64b-42e7-a518-d16136e32d6f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bf457524-9c91-4955-8b82-23422af6d7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069f329b-8c81-4af9-b59e-1466d9934cf8",
        "cursor": {
          "ref": "3ce4e732-5dbf-4a6f-b042-9a0d42f591d6",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "26354e0b-8cf0-49f0-bf88-2e40fb057113"
        },
        "item": {
          "id": "069f329b-8c81-4af9-b59e-1466d9934cf8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f106c984-2429-4397-a58b-01d95d21efa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a022e5-0d3d-4edc-a815-1832a46b1e3d",
        "cursor": {
          "ref": "6d6602a1-7539-408a-b518-48db9f02bd1b",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "28f114ef-30d8-42af-8a5f-87bf31b857d6"
        },
        "item": {
          "id": "d2a022e5-0d3d-4edc-a815-1832a46b1e3d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "accaf708-8eab-4b6d-862e-f84908a486c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc888ff-96b4-488e-901f-94a5c9982d97",
        "cursor": {
          "ref": "7a7a6c27-d4b0-4a2e-a5dc-d2b1d6a014f2",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "88540d62-ed83-4508-a9fb-7fb9557e0016"
        },
        "item": {
          "id": "9bc888ff-96b4-488e-901f-94a5c9982d97",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3e2b9b6d-d4c5-4d45-93bb-e399dfa37d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4252c28-da4f-45bf-8e9b-95edcb12d8ce",
        "cursor": {
          "ref": "aa7a272e-660b-4338-8a6e-09bfe2b9eb9e",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4c494fad-f5c1-4e80-a01e-8c81e57ee2fc"
        },
        "item": {
          "id": "b4252c28-da4f-45bf-8e9b-95edcb12d8ce",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cfe83b56-0865-4862-b92a-cd6c2d837eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa56bd14-e2a8-41bc-a1a3-cb71e3d76db0",
        "cursor": {
          "ref": "59be3c59-5059-4cd9-88af-5b8b95b08c3d",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8c363f3e-efd6-48fc-89c1-ae9be2605739"
        },
        "item": {
          "id": "fa56bd14-e2a8-41bc-a1a3-cb71e3d76db0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c370821b-9212-4fe7-8f52-20e83b5c043f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97564397-4ca1-4775-964d-3d202cd83738",
        "cursor": {
          "ref": "b95ccd04-ade3-40e6-a93d-edd696d11f87",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1a9bed91-7d3d-48c6-ba1a-8fc601ad17ae"
        },
        "item": {
          "id": "97564397-4ca1-4775-964d-3d202cd83738",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9b2b4954-b783-4656-baff-6cba12a98fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3082f233-9761-459a-adac-b6ae1aca5f91",
        "cursor": {
          "ref": "0eeffe30-495b-42af-ab31-03252ffc954e",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9c66b183-5263-418d-a879-1ac0dbd630e9"
        },
        "item": {
          "id": "3082f233-9761-459a-adac-b6ae1aca5f91",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f00de987-3e23-4c2d-a849-b1242878d492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d04f01-d2b0-439a-b492-3699c96ea8a7",
        "cursor": {
          "ref": "234ca283-3024-48a5-ab1b-a5a527a2ee7e",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "df0ec425-1815-47d2-bf57-26090771f7fd"
        },
        "item": {
          "id": "14d04f01-d2b0-439a-b492-3699c96ea8a7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b2a64608-285d-4023-96f8-d8813d2c3eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642750ca-0ff5-4951-b62e-77b49d1e72bb",
        "cursor": {
          "ref": "dadfa06d-53c6-4fc7-8a2c-8d150f7674a3",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "146b718d-bd13-4213-94b8-ec830c330e9c"
        },
        "item": {
          "id": "642750ca-0ff5-4951-b62e-77b49d1e72bb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7bad81ae-b15f-40fc-90b9-9f06a407bfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7edf31f-cf5b-426b-bc7e-d457cdb24a33",
        "cursor": {
          "ref": "4d8f3f5c-08a7-4813-8ca4-5ee00dc8b7a6",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5d28315a-87cc-438e-a644-2cfdddfc4cf5"
        },
        "item": {
          "id": "a7edf31f-cf5b-426b-bc7e-d457cdb24a33",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1e6cbf54-e014-44a8-9fc9-9819893f0237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8333cc6-6141-47f3-b509-b0bd56784687",
        "cursor": {
          "ref": "f62c5bda-dd8d-4f77-a904-558299285484",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d5ffd50b-1d5c-43b4-ab22-77bd9bc5595e"
        },
        "item": {
          "id": "e8333cc6-6141-47f3-b509-b0bd56784687",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9909ef55-b2be-41ed-85d6-6b2013886ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cca0723-9f30-49ae-8acc-1a8b42273843",
        "cursor": {
          "ref": "b0e4378a-573f-4b1f-8baf-66560082ff7e",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eb4a39d6-b712-41db-b57e-6f967a92b1c2"
        },
        "item": {
          "id": "2cca0723-9f30-49ae-8acc-1a8b42273843",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "29795869-1676-424f-bf4c-9b3f09e4d886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec95fc8-361c-4db7-bd62-34b39142709c",
        "cursor": {
          "ref": "034132de-8227-462c-a5fd-0177826ab3d1",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "88aaf546-e240-421f-96ce-36c2551d168d"
        },
        "item": {
          "id": "dec95fc8-361c-4db7-bd62-34b39142709c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cff1ca18-61bf-4a3a-8eb2-809e743e75b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac20908-c0a6-4167-8fcf-5e0c8d67f8eb",
        "cursor": {
          "ref": "1c145f10-1665-4048-b46c-f1e64f889468",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "09a48d4a-bebc-4459-a4b4-2f74f879994b"
        },
        "item": {
          "id": "8ac20908-c0a6-4167-8fcf-5e0c8d67f8eb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1415be7b-3ba2-45f9-bedc-7be43d83ae06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835284a3-df30-473a-9961-702d94fb353c",
        "cursor": {
          "ref": "3f4bdc67-fedf-4c78-8152-3da7ce34aba5",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8fe822ed-95ed-4ca2-8d94-264553fb01d2"
        },
        "item": {
          "id": "835284a3-df30-473a-9961-702d94fb353c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1cbd639e-b037-407b-b5da-49bc14224e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "9d640009-6666-4049-88e3-7677dea27408",
        "cursor": {
          "ref": "a8c9977e-8a60-4973-b200-55cc3d322081",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "86f43bc1-b68a-404e-9446-4ec369644686"
        },
        "item": {
          "id": "9d640009-6666-4049-88e3-7677dea27408",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ca4e59be-c849-48e2-9bed-e649214f8842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d2c733f0-8288-4428-8a29-d7fb270f2f2d",
        "cursor": {
          "ref": "5e5c353a-9919-478d-ac50-9e13bd8807a8",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bf49736d-2f39-41d3-94d2-2b1bf42e6650"
        },
        "item": {
          "id": "d2c733f0-8288-4428-8a29-d7fb270f2f2d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3239f5e8-5878-4c0e-8375-8d0c96bccfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c733f0-8288-4428-8a29-d7fb270f2f2d",
        "cursor": {
          "ref": "5e5c353a-9919-478d-ac50-9e13bd8807a8",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bf49736d-2f39-41d3-94d2-2b1bf42e6650"
        },
        "item": {
          "id": "d2c733f0-8288-4428-8a29-d7fb270f2f2d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3239f5e8-5878-4c0e-8375-8d0c96bccfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f248fc5e-eb14-4506-a280-837d119cefb9",
        "cursor": {
          "ref": "ccadd2dd-a92c-47ef-a00d-c065e0b4bb47",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "aa0c0174-a261-4ff2-8d8f-e6de2a169073"
        },
        "item": {
          "id": "f248fc5e-eb14-4506-a280-837d119cefb9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "89ba7891-20d8-47f7-a924-acb7af1b2f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92725fe-9e79-4ca2-a233-e971a80d7d78",
        "cursor": {
          "ref": "fe8a5637-02fb-470a-bdd2-63664d7b0f19",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "77365e3b-755b-4033-9cc9-cb499176da9f"
        },
        "item": {
          "id": "f92725fe-9e79-4ca2-a233-e971a80d7d78",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "be51ef49-f612-4388-86b6-b1f5afd87a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee93ec70-a9aa-49d7-8ec8-eeeafaf06e26",
        "cursor": {
          "ref": "b750b907-decd-4513-9a80-3a93e0fa90bb",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "17efe775-d4c0-4418-b37c-d688e61e427b"
        },
        "item": {
          "id": "ee93ec70-a9aa-49d7-8ec8-eeeafaf06e26",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "de30234c-7f09-4dcd-934a-74fde140ac27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83b66ef-ae8a-4774-92b7-6e387d2a396b",
        "cursor": {
          "ref": "84dd37de-c0b0-49ee-8c08-1436fe7ad611",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3b32ca19-da8a-4bba-abaa-7bb7bbca94ba"
        },
        "item": {
          "id": "d83b66ef-ae8a-4774-92b7-6e387d2a396b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0f615081-e5d1-4946-b5ad-74b62e5ccca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90136ae2-8052-4106-b670-4ae10ada0b29",
        "cursor": {
          "ref": "d3a4a17b-19c3-4ddb-b8cf-ca3d073d3a2d",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bae0a8af-d814-4ba6-9ffa-cc1e9eaeab34"
        },
        "item": {
          "id": "90136ae2-8052-4106-b670-4ae10ada0b29",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6021c39d-a239-4eb2-afff-ec7a04d4f430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1cd04c-e311-403c-9ffc-5a5d8c0a930d",
        "cursor": {
          "ref": "8f6103bb-d8f8-42cc-8a78-ccf6b7e683ef",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ef4b2311-e945-4e14-b467-eca47953faf1"
        },
        "item": {
          "id": "bd1cd04c-e311-403c-9ffc-5a5d8c0a930d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d2b71465-8c33-43fd-8839-2cd44b115d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239e13f5-6f86-43cf-8a2d-ff5ef12db40f",
        "cursor": {
          "ref": "4ffc4421-55cf-493b-bf44-4422667f3c7a",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4fef53e1-d6e3-4a7c-9b50-6f99fb69beb5"
        },
        "item": {
          "id": "239e13f5-6f86-43cf-8a2d-ff5ef12db40f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8333bf03-ed23-4792-af66-10de26585590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5c2edc-6112-4f33-9ee1-48b107b58646",
        "cursor": {
          "ref": "82d6828a-a586-496d-8870-800696b2e6ba",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "045dfc5f-26e4-4ab5-a02c-d4d8fa18fe3e"
        },
        "item": {
          "id": "7d5c2edc-6112-4f33-9ee1-48b107b58646",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6b3d10c1-d6c8-4ce5-ab25-653de8801912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894bd9e2-329a-47c9-84da-9e5ec1f1cb1a",
        "cursor": {
          "ref": "ce1da702-e343-4b6a-88e6-50d9e1bd1ebe",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ef081320-b852-4735-ad89-65a08531560b"
        },
        "item": {
          "id": "894bd9e2-329a-47c9-84da-9e5ec1f1cb1a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "090d9493-30de-4e58-a96a-97d427961912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1c16d5-6b94-4bcd-875a-94cc938ec6f8",
        "cursor": {
          "ref": "dbeee536-948f-4ecf-8af8-5bb819a73354",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a390c6c3-2aa1-47e1-a50c-cbd88a0bd42e"
        },
        "item": {
          "id": "6f1c16d5-6b94-4bcd-875a-94cc938ec6f8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "194b5c02-0921-497c-bd70-9d8814e2e451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210f67cf-2a5c-45ae-bdc3-a4dd7e151405",
        "cursor": {
          "ref": "f2ca2343-8f8b-425d-9817-2b298016e095",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b372aca8-78a3-4d32-a143-7a5392805b1c"
        },
        "item": {
          "id": "210f67cf-2a5c-45ae-bdc3-a4dd7e151405",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7500fe67-25db-44b9-990a-5dc3b2232b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b327257-5117-4baf-8ba4-0a968e173a78",
        "cursor": {
          "ref": "7ed53480-a367-4e53-8bd3-8084be372bf4",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5d025480-8699-4c6b-b9c8-abfa8ac233f2"
        },
        "item": {
          "id": "3b327257-5117-4baf-8ba4-0a968e173a78",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "268a023e-a0e9-4db2-b978-5b871c04aa46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcccd5c-051f-47f6-ae75-52c240493fdf",
        "cursor": {
          "ref": "728bd18e-3473-4311-b62e-04a7ddd952ec",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cb0f3b8d-17d3-421a-9fcc-cfb2a111b649"
        },
        "item": {
          "id": "efcccd5c-051f-47f6-ae75-52c240493fdf",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ac72c8a3-f46c-4ce4-8996-642c97c56fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07627e6d-eeea-4cfb-adc0-d568c0bc9ae7",
        "cursor": {
          "ref": "89c38e02-f596-4b14-b899-a1deabb80ceb",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c791039e-cd91-4e0d-a6e1-849d633f8211"
        },
        "item": {
          "id": "07627e6d-eeea-4cfb-adc0-d568c0bc9ae7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fdaebc98-d458-4f09-9cb9-215b926ced70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f924f85f-e891-4453-b19f-46fe899494fb",
        "cursor": {
          "ref": "2400b96c-48b2-4a5f-b6b4-c8edbe9d1efa",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8d31d419-b316-4156-afaa-1bcb25ca5b6e"
        },
        "item": {
          "id": "f924f85f-e891-4453-b19f-46fe899494fb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "187d00d5-c622-498d-b724-ab999a414ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123a5895-f266-4ee1-a56c-764060c1796b",
        "cursor": {
          "ref": "4c9db8eb-78aa-427b-8344-7a7f705ecfae",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "76806b8d-2659-463d-8e26-a92e6abaa4eb"
        },
        "item": {
          "id": "123a5895-f266-4ee1-a56c-764060c1796b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3b9ef273-3231-4c04-95a4-a4b059abbe6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3737d3-0737-4e7a-b9d6-d976c4f59ac8",
        "cursor": {
          "ref": "20527323-9746-4c46-bab5-74324236515b",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1f7728ea-5f64-48c8-a205-68b45ecff34e"
        },
        "item": {
          "id": "1c3737d3-0737-4e7a-b9d6-d976c4f59ac8",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4483286f-350a-4f3b-b5b2-5f94266e4c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6022d20a-f57a-49bc-8355-b7c8db3293fc",
        "cursor": {
          "ref": "c6aa4462-2754-4193-85fd-9a4947f4be4e",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "70da6ef2-e4d9-49a8-b91a-70fd30b19d25"
        },
        "item": {
          "id": "6022d20a-f57a-49bc-8355-b7c8db3293fc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3db9d2bc-6b82-4202-8b28-87fee1c143dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e3234c-538a-4974-a9af-aaeafec3820a",
        "cursor": {
          "ref": "827a38e0-9a39-4d64-8d12-d8a40177d3d0",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "09812d5d-f5b8-420c-ac4e-f6cb15026f04"
        },
        "item": {
          "id": "01e3234c-538a-4974-a9af-aaeafec3820a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "68391cb3-061b-4612-9652-d21cb819a471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a9bc9b-4a56-4dd2-9652-9858788b3307",
        "cursor": {
          "ref": "a94ccb13-cab0-430a-824d-3ef1b9d27b9d",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e4dd303e-78de-4f81-b22e-92960b61b615"
        },
        "item": {
          "id": "35a9bc9b-4a56-4dd2-9652-9858788b3307",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fa326dc1-f5e2-4f74-af68-8698f350219d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a6601e-16ae-4176-8b48-b231d8c4c320",
        "cursor": {
          "ref": "9414fd37-2d89-479c-8ea2-fff2947fc2a2",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d924c722-2647-48f6-a3ae-6c2d6a6a21ca"
        },
        "item": {
          "id": "a0a6601e-16ae-4176-8b48-b231d8c4c320",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "76d1a944-5b11-4bbc-8459-e560a3069bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4e966c-2f1f-48cb-a5f1-1f4a3bb10ed3",
        "cursor": {
          "ref": "e120e372-96e4-4653-9dec-6b84727ef99a",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "70bb0b53-4df0-4f80-92ae-16cf16194884"
        },
        "item": {
          "id": "dc4e966c-2f1f-48cb-a5f1-1f4a3bb10ed3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d4873296-ec2e-4114-bc8f-02b46819221b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6f60f8-9cc6-48f7-8140-e9aa3fc864e0",
        "cursor": {
          "ref": "4c8031bc-cada-4bc5-80ee-e84436a6ebab",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e90c960d-9cad-4540-af59-a4026a7a26f2"
        },
        "item": {
          "id": "5a6f60f8-9cc6-48f7-8140-e9aa3fc864e0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dc980305-8882-4a43-8f74-85f199d30c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14a3ddb-06ea-4e03-931a-ee5bb7030fda",
        "cursor": {
          "ref": "cf047ca4-086b-4847-ae24-e2b2036e27d1",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "71c8dab2-714f-417c-bcf6-eaa687e0484a"
        },
        "item": {
          "id": "f14a3ddb-06ea-4e03-931a-ee5bb7030fda",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "91c70c85-302a-49b3-b130-82a79a3ee935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e185ac31-4cca-47e6-9d68-848119f8ac9c",
        "cursor": {
          "ref": "6492591b-79c4-40d5-af73-818a90e68827",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c15f5d69-527d-4b0b-8269-42b9b2771703"
        },
        "item": {
          "id": "e185ac31-4cca-47e6-9d68-848119f8ac9c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "965e628a-b62f-48a6-a5ed-37842a0202d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33677b97-6ef5-4604-ac1d-7f5e292fc827",
        "cursor": {
          "ref": "f9c9b645-7e16-4a6c-ae75-63caf06827fd",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "81905f74-b3ec-49ca-b405-b76be5b11397"
        },
        "item": {
          "id": "33677b97-6ef5-4604-ac1d-7f5e292fc827",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "46c5439c-153f-468d-9cc7-35828938d09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20ad29a-53bb-4b1c-8359-26079f8cc04d",
        "cursor": {
          "ref": "ca4f9b55-8225-41fd-8dce-742a41aa75f1",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4b029f45-1ede-4b32-b27f-605bf0d2243a"
        },
        "item": {
          "id": "f20ad29a-53bb-4b1c-8359-26079f8cc04d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dce4d91f-f7cd-47df-8ab3-eafafc3e8586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a5f13d-ee94-41b2-8ca6-ae2487d9fc51",
        "cursor": {
          "ref": "9dda854e-7e4a-4123-bd27-b485f52c18e2",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e642ab12-17da-45b2-b681-0d300da573ed"
        },
        "item": {
          "id": "b2a5f13d-ee94-41b2-8ca6-ae2487d9fc51",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a2af7e93-ec20-47ba-aa6a-50fea30be258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a656a9a7-aae9-4795-a67f-a1110021f926",
        "cursor": {
          "ref": "c18ab98c-2e18-4c88-8e3c-b262ff64a945",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "eb551bc4-2c99-45a6-8f28-aca8101b686b"
        },
        "item": {
          "id": "a656a9a7-aae9-4795-a67f-a1110021f926",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d2aee419-32d7-4051-930b-78be5f1df308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de86e8d3-52d7-480a-b71a-ca98928f9fd6",
        "cursor": {
          "ref": "0408074f-b698-4a7d-a3ac-22ae39ce7177",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "00e9a674-05da-47c3-a61c-be39346f8bc3"
        },
        "item": {
          "id": "de86e8d3-52d7-480a-b71a-ca98928f9fd6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a07223d1-a4ad-40b8-8747-d2a56cd90d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4777531f-d1d0-449a-a314-5071e62e926a",
        "cursor": {
          "ref": "d39b28ba-e1fe-4d89-ba94-d74d50b54d35",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b06b80b5-1c9f-4171-8a64-8dbff06cefa6"
        },
        "item": {
          "id": "4777531f-d1d0-449a-a314-5071e62e926a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bcc749ad-2e1b-49ea-b035-94bb4b41e02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c99a3fd-9ff6-49c4-a857-64f9518e217e",
        "cursor": {
          "ref": "86406a3f-fc4f-42e5-89cd-000c2f0e8087",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "62cf236b-34fb-431a-8022-f510090a5863"
        },
        "item": {
          "id": "6c99a3fd-9ff6-49c4-a857-64f9518e217e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "125cbba3-cd10-495b-ad82-c38fb677a5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322bcc17-acb5-4f4d-99c9-286d14685d7f",
        "cursor": {
          "ref": "7b455ce1-8c0b-4d0e-8c86-b48fb347f0e0",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5209cf3b-dcd6-46b6-8797-e7a72161bf6a"
        },
        "item": {
          "id": "322bcc17-acb5-4f4d-99c9-286d14685d7f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8e49f9a0-fdf6-4d11-8d81-791f7d44c2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c4ec64-7737-415b-8966-6ef8b75cc26c",
        "cursor": {
          "ref": "36fef66f-2381-4dbb-ad10-680308912111",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9f15ba3a-a51a-4522-88d8-f5ebfa7cb540"
        },
        "item": {
          "id": "41c4ec64-7737-415b-8966-6ef8b75cc26c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "16e14c9a-94e1-4b32-bb9f-de470b130b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70773a97-08a2-4bed-ac7b-5ca3dec615a9",
        "cursor": {
          "ref": "2d768646-e2cb-4beb-a368-de177c7c9fc0",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b1f73328-3f2e-4b78-b300-a1df8ff3de6e"
        },
        "item": {
          "id": "70773a97-08a2-4bed-ac7b-5ca3dec615a9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2d71befe-bf33-449f-970b-bef1f514a95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7906f07-7207-4a8b-ad45-8067165592a3",
        "cursor": {
          "ref": "6f61b00c-47e8-46b5-80cc-1bc20ac7f6b2",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8d45db5d-0b22-4370-b7c4-00f4dcbd7237"
        },
        "item": {
          "id": "c7906f07-7207-4a8b-ad45-8067165592a3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4ef1411c-b57a-4805-874a-957119b59a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8e487d-a8c6-44f7-8406-e4bf4bf04e22",
        "cursor": {
          "ref": "8f7efd5d-3f79-4817-ab16-fb42439bb5aa",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3443fb4b-85ad-40c7-9bac-87bd62ebe4f2"
        },
        "item": {
          "id": "eb8e487d-a8c6-44f7-8406-e4bf4bf04e22",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e98af77b-b65b-4832-a519-76fdaeb7601e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ab53ca-e0fa-4f1d-9dcc-ab87b341c986",
        "cursor": {
          "ref": "e3191a66-79f5-4090-89f8-35e8ebb6a35c",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "839665fe-aa07-4af2-9366-5672a23492ed"
        },
        "item": {
          "id": "96ab53ca-e0fa-4f1d-9dcc-ab87b341c986",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cefbe890-4b67-499c-ba40-918802e00912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5924ef-6f9c-4d20-bff8-75a8a05f1b8d",
        "cursor": {
          "ref": "6dd1a2ab-98c9-41a7-89f6-fac662182e31",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "63055a88-29de-41e2-ae89-1ee593cc4010"
        },
        "item": {
          "id": "8e5924ef-6f9c-4d20-bff8-75a8a05f1b8d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cbb002d4-7d33-4266-9c46-8e8996c2e6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8405c8-61e1-41c4-a2a1-74f4de10caf9",
        "cursor": {
          "ref": "6b25d2c9-c1b7-4608-8f64-ee9fa7c3abc2",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c8d0e8cd-b7b2-4113-80f0-3c6b113ba3ee"
        },
        "item": {
          "id": "cc8405c8-61e1-41c4-a2a1-74f4de10caf9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6eedfde8-6ff7-441d-b196-1049b54c5c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ddd0c0-6b94-418e-bb34-a9f6fd51ed73",
        "cursor": {
          "ref": "7e41d62f-9b35-4644-bc6e-4f1b8f06487a",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ecb57637-c9f3-4d7f-b288-5f53b6d58b27"
        },
        "item": {
          "id": "85ddd0c0-6b94-418e-bb34-a9f6fd51ed73",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bee94985-2007-4ce6-8ea4-6ba5ed520b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3160e1de-0cfd-422d-b1cf-46c06a1d8143",
        "cursor": {
          "ref": "5cb22599-8dd2-48f4-aa58-57c327646fda",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5df72bbf-3778-42ea-a7bc-a4429ed33490"
        },
        "item": {
          "id": "3160e1de-0cfd-422d-b1cf-46c06a1d8143",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "64549a51-b177-42db-8474-298597cfa3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56087ab7-2905-4a72-b258-44aa49c415b0",
        "cursor": {
          "ref": "654e8ce4-be2d-4ffa-a6e7-d38176942bd4",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f7caa48a-4992-48a3-ae2a-20e76597c5dc"
        },
        "item": {
          "id": "56087ab7-2905-4a72-b258-44aa49c415b0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ec043c37-28fd-425d-8a0c-bd1e5d0261aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192078ed-ff51-426a-809c-6e8013251a08",
        "cursor": {
          "ref": "8a1f6532-0546-4963-9a35-9c3cd6f07b59",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f76bb636-b297-4eef-a6e0-2fc1efcea4ed"
        },
        "item": {
          "id": "192078ed-ff51-426a-809c-6e8013251a08",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6ba20508-ee18-4a23-8761-a015be6e7ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d959929-99c5-46fd-88d7-8af9b48300e3",
        "cursor": {
          "ref": "0ce9ed1c-20fa-427b-ad3b-6c99ccab596b",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5577a26a-cf65-4b69-9b5e-b232ba8686f9"
        },
        "item": {
          "id": "1d959929-99c5-46fd-88d7-8af9b48300e3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9dba70ec-1d72-4d68-8986-f146ddb7fb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6759eee-83d9-4d65-9d20-b6b81c1304a0",
        "cursor": {
          "ref": "edaef070-74a9-44e7-b6ae-e799be750ead",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "466c2eba-c0cb-4a3c-b41f-f845959813e6"
        },
        "item": {
          "id": "b6759eee-83d9-4d65-9d20-b6b81c1304a0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2ca81992-d2ce-4f84-9823-94cdc7c0f7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f3b0e8-0ae7-44cf-844b-f3afc07d2a30",
        "cursor": {
          "ref": "d2611bcc-187d-4d33-a671-13daa826ef8e",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5e6ca69d-b03b-4e8a-90fb-ca7ceb13f05b"
        },
        "item": {
          "id": "26f3b0e8-0ae7-44cf-844b-f3afc07d2a30",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "45ec77f8-4e9d-4058-98b6-034024d1f590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b355741-066e-40a5-8194-f1334693fc05",
        "cursor": {
          "ref": "ba9271f8-f2ff-4e7b-805a-db2a1b85e9a8",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "465d185e-8446-4ff8-a0ef-7e5e91318024"
        },
        "item": {
          "id": "2b355741-066e-40a5-8194-f1334693fc05",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "288a5570-dee0-4cdd-b845-c66d5d0cccf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eef9481-0790-4e06-8a3b-81a2f10b30a6",
        "cursor": {
          "ref": "37155589-d9f0-4bfe-9504-ed363d8416ab",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "22e62ddc-9dc6-4d6d-94a4-4437b4600543"
        },
        "item": {
          "id": "2eef9481-0790-4e06-8a3b-81a2f10b30a6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "89c937a1-169f-49bc-b711-eaa70a0f27d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4367aa1-4abd-4e9a-9502-d494ecb9e14b",
        "cursor": {
          "ref": "5b21db47-b6e4-4e32-9915-d28d5130466c",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "38c2c351-c24e-4f8a-b0cc-2c2e9ebd1ca3"
        },
        "item": {
          "id": "c4367aa1-4abd-4e9a-9502-d494ecb9e14b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7ad59e30-8292-4416-af20-8b68e4bcc2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977df92f-84ee-4c78-9d02-8a296223d75e",
        "cursor": {
          "ref": "c5174af3-fbfd-4215-95bb-f74b9df463a7",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3689f708-90bd-42e7-a9cf-13ec5b074bbb"
        },
        "item": {
          "id": "977df92f-84ee-4c78-9d02-8a296223d75e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7579b71a-d978-4ba1-9815-13093aa0f0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845a5fb8-f43d-4d36-b8af-773db7a3827f",
        "cursor": {
          "ref": "2d4cd8d6-bc46-470f-9003-aee3fb5ca45a",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e7c0bcb0-6385-44cb-8fc8-069f84ee1d87"
        },
        "item": {
          "id": "845a5fb8-f43d-4d36-b8af-773db7a3827f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dd7c92d0-dc68-4a13-b040-ee69c1018c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c09b8cc-9470-4343-8c3f-2cf6aec4de26",
        "cursor": {
          "ref": "84972c50-a879-41ac-ad6a-e4aeca158be0",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d0495f0e-0b12-417f-a067-2e6938d150d2"
        },
        "item": {
          "id": "0c09b8cc-9470-4343-8c3f-2cf6aec4de26",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8078004d-fa8a-4ecc-85b8-dfb59e9a93b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd244887-907d-4738-8fbd-ca74ad3c50aa",
        "cursor": {
          "ref": "52059aed-dd11-4cfd-ad15-f8d988ff7974",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e6786497-b436-445c-a452-384a7ebbccd2"
        },
        "item": {
          "id": "cd244887-907d-4738-8fbd-ca74ad3c50aa",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ad45a8bf-b638-4919-8743-fed95cac6cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235f7774-9ea2-4b81-8e3f-37e20357b6ac",
        "cursor": {
          "ref": "0922e1f4-a345-4924-a1f9-7ab43d0893d3",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "36437cb3-cabe-4cd0-a4c9-68b16a14645c"
        },
        "item": {
          "id": "235f7774-9ea2-4b81-8e3f-37e20357b6ac",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7491b5c8-058a-4210-b1e3-52e7f838a6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc19d46b-17b0-4f29-9907-d0ec76b16f07",
        "cursor": {
          "ref": "9dd7b5f6-a273-4f3d-ac15-aba3f5bc5c7c",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "328f49a7-9a97-4209-824c-be751c105b75"
        },
        "item": {
          "id": "fc19d46b-17b0-4f29-9907-d0ec76b16f07",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2c2980e8-bbb2-485b-80e1-5696ec91873a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552e7e18-3351-42e8-990c-b02c15d60ab4",
        "cursor": {
          "ref": "e7ef6133-fbf7-4cae-953a-544df1e778ee",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fe9f3885-99cb-4d17-84cb-12b1d1ff9fe0"
        },
        "item": {
          "id": "552e7e18-3351-42e8-990c-b02c15d60ab4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f1cbfbfb-1ad6-4d60-936b-0fcbcd1f0977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3f4fcc-4046-4579-a416-9b8ad6f797a0",
        "cursor": {
          "ref": "6e3d80c5-8f63-4c82-8014-73b079bfd2ec",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ea24cb7f-502c-49e2-8003-0f0cae19b15a"
        },
        "item": {
          "id": "ba3f4fcc-4046-4579-a416-9b8ad6f797a0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bbfc1992-7052-44cd-aa1f-6d5a7e4b2f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb0aab9-9113-4a04-a3a2-ba63d88f2f25",
        "cursor": {
          "ref": "896af971-3000-4707-add1-61e2ab5c9afb",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0803995d-4c75-41b8-a24d-60b2d6876068"
        },
        "item": {
          "id": "0eb0aab9-9113-4a04-a3a2-ba63d88f2f25",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1d5150b5-f596-4bb1-b694-f9d48b829636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8caec9-a231-4aa7-b4af-0319ea07ee2a",
        "cursor": {
          "ref": "8128c9b0-0df0-47c3-82f3-f5e5c9cfb6ac",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "60751b3a-0f7a-45b7-acb8-d2a3fb7e9e6d"
        },
        "item": {
          "id": "6f8caec9-a231-4aa7-b4af-0319ea07ee2a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "92b29ff9-1148-46c0-b8eb-befd33a1f27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02bac23-c0d1-4032-ac6e-6d1b2d69bc7a",
        "cursor": {
          "ref": "8621c698-190f-4c48-9662-73635d9cffcf",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d92be673-529d-443d-b213-aa02b29a558f"
        },
        "item": {
          "id": "e02bac23-c0d1-4032-ac6e-6d1b2d69bc7a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "11afb57d-d8c3-4999-8b46-f1ab5a20f361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902eb9ef-b215-449c-9751-1820fb4cf2a6",
        "cursor": {
          "ref": "2e9085d3-4cea-45b5-b068-249ad9b6b15d",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6f8a2eed-7a9c-412f-b680-0924a2ae536a"
        },
        "item": {
          "id": "902eb9ef-b215-449c-9751-1820fb4cf2a6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cc39257a-91cd-40b2-b0f0-fe85f9c905a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89c0fbf-418e-4214-a988-c295262ea646",
        "cursor": {
          "ref": "4511bd40-8566-4dce-9090-c7459f0720e4",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2746f5c2-8896-4e85-80d1-2027c10e77ce"
        },
        "item": {
          "id": "f89c0fbf-418e-4214-a988-c295262ea646",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3cf34480-7f74-4dbe-b88f-07b35645e010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b10e58-d488-43a9-b18d-cdc147e45820",
        "cursor": {
          "ref": "e83087db-a0c5-48ff-84cd-b41cf300c1db",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f2609446-c8cf-4f86-b2f7-edad1e274d79"
        },
        "item": {
          "id": "11b10e58-d488-43a9-b18d-cdc147e45820",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "375195b9-e8ac-4009-978d-838ed428c8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad49a787-5831-4d20-98a8-db8bfc765c6b",
        "cursor": {
          "ref": "d6fa22e1-b823-41d2-afc5-2c65fc989f77",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1c064acb-c9a6-4c29-a4e7-8af0eb661877"
        },
        "item": {
          "id": "ad49a787-5831-4d20-98a8-db8bfc765c6b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f573b0fc-1bf6-4ecf-bb20-10f938bd0c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140208fa-1c8b-4ca4-8d77-59849ea6ec16",
        "cursor": {
          "ref": "45c5e938-9e52-4210-b7d2-4300378b0176",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1c9c5cfc-03d5-4efa-982a-7a0f10be8b39"
        },
        "item": {
          "id": "140208fa-1c8b-4ca4-8d77-59849ea6ec16",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ae2f46a6-f657-48e5-aa3b-8f72aff2f3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519bbebe-88fe-450e-8be1-cc9b08b8a024",
        "cursor": {
          "ref": "e7039b49-3dd7-4525-b351-560cd63a263e",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "43223fcd-5e03-4dec-9d28-41993182cb39"
        },
        "item": {
          "id": "519bbebe-88fe-450e-8be1-cc9b08b8a024",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "75a5513b-70db-492d-8598-11ac7c2a69a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb028f69-b8ee-448a-9ab5-08fb6b28c3e1",
        "cursor": {
          "ref": "78a352ce-7d90-4483-ba2b-94895c5a69d1",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "18df4677-dd3f-4bd5-81cc-fea2bfa30bfb"
        },
        "item": {
          "id": "bb028f69-b8ee-448a-9ab5-08fb6b28c3e1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "462b0fae-c4ef-4524-9842-7e4f43b90803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d16f25-bc93-4b33-b853-a075c95d8018",
        "cursor": {
          "ref": "bb8b9129-b64b-461a-b507-7123519e43f8",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b66e370e-48f7-4c4c-9fe3-b7221ed61829"
        },
        "item": {
          "id": "f7d16f25-bc93-4b33-b853-a075c95d8018",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "348e2921-71eb-488d-a94d-a9dea81e3f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec579e4-f244-4b70-9900-811b3d5d8505",
        "cursor": {
          "ref": "2b41a040-99b0-4a0c-9bb8-a824e5988e79",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2d70a351-2986-40ac-8a13-2372535713d9"
        },
        "item": {
          "id": "6ec579e4-f244-4b70-9900-811b3d5d8505",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "42b2bda5-c4b7-4f6c-89c2-4899131337b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f37331a-e93f-42f8-a603-c5f599fc045f",
        "cursor": {
          "ref": "e4a53c55-e5fb-4b95-afd9-e0a5020f3a0e",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "85c1906a-d0a7-419b-b465-100c49812e7e"
        },
        "item": {
          "id": "9f37331a-e93f-42f8-a603-c5f599fc045f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b44d2e82-f11f-4d10-a14c-e01092a60035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71118ecd-28fd-4c0e-95e2-af384303260f",
        "cursor": {
          "ref": "ba1e65a7-fdd2-4f48-ba95-2180605c7a1c",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8c791709-53c7-4e85-b9b0-a952d23d4817"
        },
        "item": {
          "id": "71118ecd-28fd-4c0e-95e2-af384303260f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "174a12ef-98e6-4003-b7e3-1f505fe90c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ea133a-e1ef-4512-a247-81d22ce8b336",
        "cursor": {
          "ref": "1ebe8e1a-bc7e-46f5-894c-86357afd5513",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "39513075-1ea8-4a23-a69c-41008002aed7"
        },
        "item": {
          "id": "82ea133a-e1ef-4512-a247-81d22ce8b336",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cf9988db-0f16-41ea-b602-931e37362e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbbaac3-11ee-4536-bc56-86a06a333e16",
        "cursor": {
          "ref": "38a7099f-233f-4007-b9c0-4b6ad295f221",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a68b1b4d-f38a-4c90-89f4-6abed6a821b6"
        },
        "item": {
          "id": "fbbbaac3-11ee-4536-bc56-86a06a333e16",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a885edf3-57b2-4730-bf2d-ac5471849c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae257fb-f17e-47e5-8321-bf2b3f38aae9",
        "cursor": {
          "ref": "e9d636be-841f-4eb3-b2c2-01c46881c612",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e0264900-b68e-4a5d-84b3-017faac09539"
        },
        "item": {
          "id": "eae257fb-f17e-47e5-8321-bf2b3f38aae9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "cfacb6e6-d1fb-45be-8ad0-03dfb99f78da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9e35c1-b06d-45bb-aad3-f787b0921fd4",
        "cursor": {
          "ref": "5428e75b-3517-4f8b-b394-a9fa79c72f72",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d1a24d86-f728-4f9d-8e85-34910f62be58"
        },
        "item": {
          "id": "7a9e35c1-b06d-45bb-aad3-f787b0921fd4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "119898b5-ef56-4fea-8a17-bdad207cc52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9ebf6f-c5c7-4d38-9c65-b1859c68ee93",
        "cursor": {
          "ref": "cf681c4e-b662-4dad-aabd-189bec5b4ff0",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3c73d2c3-bb75-4250-bb9a-6517e2853f26"
        },
        "item": {
          "id": "7f9ebf6f-c5c7-4d38-9c65-b1859c68ee93",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "aff07be1-faa0-42f6-a100-9d59c0a03846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521b1aeb-1a08-4e28-9a86-9ccf3edcd225",
        "cursor": {
          "ref": "1192899a-2efe-4dbd-a4f9-d789041bef21",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dff8bc78-ddd3-42cb-9898-4cd40141c84d"
        },
        "item": {
          "id": "521b1aeb-1a08-4e28-9a86-9ccf3edcd225",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b7b556a2-6309-4cc5-b1fa-7a8fe030dbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00524e34-5088-4ed7-8fe9-7e2423399083",
        "cursor": {
          "ref": "0e177665-6236-44b7-aa9c-14a733f69128",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7560fcc4-2366-4e9e-b18e-1acc8648d1d5"
        },
        "item": {
          "id": "00524e34-5088-4ed7-8fe9-7e2423399083",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8ee4fa16-85c6-40f8-859d-f54fe50e49db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6671bb-2736-4560-a777-1a46b4a12ecc",
        "cursor": {
          "ref": "0076c2e2-1941-4584-8043-2f747e34a23d",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "415ce95a-ba1d-44d5-9daa-52e14b41f04c"
        },
        "item": {
          "id": "6d6671bb-2736-4560-a777-1a46b4a12ecc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1f74dd48-e817-4c20-9c7e-00390e2c2304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db58800-ad76-44b3-96f3-29ab610e3252",
        "cursor": {
          "ref": "e16254df-9873-421c-990d-fcefd73bdeae",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "87fe7fce-8892-4b78-a1cd-c5ff8bc42d94"
        },
        "item": {
          "id": "6db58800-ad76-44b3-96f3-29ab610e3252",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "087c5e8c-f102-425d-89c0-f6da1c74e579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe9995e-3091-43bc-a290-1edea69a1414",
        "cursor": {
          "ref": "95a003d1-2706-4f8e-ae59-f3a4496d0e34",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "27de6e69-e34e-4a41-8825-623e96fb5abe"
        },
        "item": {
          "id": "6fe9995e-3091-43bc-a290-1edea69a1414",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "584e13b6-6e91-4acb-ad79-1b6c115fa7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7818f08-300b-41ba-9e94-13a9c9ca3d0a",
        "cursor": {
          "ref": "00865696-4a4e-4de0-9347-fab308d04715",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "90cff17a-db8c-4784-9b8c-84852e20880c"
        },
        "item": {
          "id": "b7818f08-300b-41ba-9e94-13a9c9ca3d0a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5d2219ea-369d-41ef-b8a7-eae8db5c41e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea278e6-8e64-41f8-89e7-8da41842acd6",
        "cursor": {
          "ref": "37154b09-4e97-4c93-a7a0-cc22eaeeea33",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "178edc6b-6f15-433f-a623-e37c314eb613"
        },
        "item": {
          "id": "9ea278e6-8e64-41f8-89e7-8da41842acd6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c49ea76a-8d54-405e-944a-49a525341c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7aa107-920c-4551-b6c0-af1b94166bd4",
        "cursor": {
          "ref": "febb00f1-8625-48ac-bb2d-9aeee9abdc73",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "46e66b21-4b2e-4d72-ad90-5c0c904e41d7"
        },
        "item": {
          "id": "6b7aa107-920c-4551-b6c0-af1b94166bd4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "981cbf45-86b4-4bd0-90fe-69ead7b01f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93beee4a-ef1a-42f9-ad9e-911c199ea813",
        "cursor": {
          "ref": "5563c333-df31-42db-9497-9e340ec18665",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c8c30914-3cdf-4e41-a522-53576f42169c"
        },
        "item": {
          "id": "93beee4a-ef1a-42f9-ad9e-911c199ea813",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b2de2a2d-6353-49d4-89a8-8331d9c07c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb1fafc-e9e9-458e-a778-b7a18a35ad68",
        "cursor": {
          "ref": "7e3e7097-084f-4b26-be42-5fc3d533788d",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f05ad355-19be-4273-b2c7-2cbd172635cf"
        },
        "item": {
          "id": "0fb1fafc-e9e9-458e-a778-b7a18a35ad68",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "aec6b60b-6dce-490f-8fc2-75f6b1980bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e0c42f-5149-411f-8b8c-fb36d4724392",
        "cursor": {
          "ref": "ebbbdee3-2e07-401b-8ea3-b63b1ab0c04c",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "598fea68-46fe-43f1-8c5b-3bf30a39aefb"
        },
        "item": {
          "id": "f7e0c42f-5149-411f-8b8c-fb36d4724392",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5f3a74d8-ebfc-4a7f-83ba-9f7b15eab5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6246072c-4e26-4086-af78-0e28625b3b59",
        "cursor": {
          "ref": "039158ff-d3e7-4f34-ab11-874cc8a35eae",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "13885653-9151-4feb-9fe9-8fa7a9e85fa6"
        },
        "item": {
          "id": "6246072c-4e26-4086-af78-0e28625b3b59",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "554a4ed5-471d-40fd-9318-1a3dc456eb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de98228c-e167-4a0a-b706-a0039a0bbd59",
        "cursor": {
          "ref": "bdb4a379-f133-4d48-b5f2-f5b06380e137",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "675c5bb0-3dda-45fa-ac3f-2a3534034eeb"
        },
        "item": {
          "id": "de98228c-e167-4a0a-b706-a0039a0bbd59",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a41dbd96-2ced-4396-b46d-ea14ae08d600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363c429c-5ff7-40e7-992a-0cf662a2633c",
        "cursor": {
          "ref": "6b3e58a3-7117-44f8-bfb1-e203a72fd34c",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "01b98641-75d4-444c-8ab7-b56182fea8d2"
        },
        "item": {
          "id": "363c429c-5ff7-40e7-992a-0cf662a2633c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f06b3cc7-a21a-40aa-8290-4c2e48e11008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1019b9-f99f-49d4-a731-78b046572a90",
        "cursor": {
          "ref": "5c0d372e-a9c0-447f-91a0-a90960f23147",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "72d8482c-dd8c-4e6e-9745-2cf02612e986"
        },
        "item": {
          "id": "df1019b9-f99f-49d4-a731-78b046572a90",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3b79e7ac-3b53-43c6-a560-05e82f261a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba8f3c7-302f-452c-85c1-cb54f101649e",
        "cursor": {
          "ref": "624e70d6-3c38-486b-b83e-79caa7df0c45",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5b13e117-2ed2-4f1b-acc3-b942be116f95"
        },
        "item": {
          "id": "1ba8f3c7-302f-452c-85c1-cb54f101649e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fa86936f-a2e6-4eb7-933f-dbd93d4739d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900da16f-e78b-43d8-9e63-b34c17352335",
        "cursor": {
          "ref": "6ca71e02-03dd-423c-be8e-681d932cf4f2",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "117d8544-43df-40aa-a5a1-c27c8a180383"
        },
        "item": {
          "id": "900da16f-e78b-43d8-9e63-b34c17352335",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a8e5591e-d828-470d-8893-d7b11acb0bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777d1ac2-5151-4fd8-a655-2cdb4dff3d2a",
        "cursor": {
          "ref": "8e601b53-c234-498d-b1cb-f75518103607",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "19e545c2-d842-48ee-9593-c984a509e1f9"
        },
        "item": {
          "id": "777d1ac2-5151-4fd8-a655-2cdb4dff3d2a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "539fefac-0a12-4945-80f5-b00a23668f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2651d197-8562-49af-a39b-40599a80891f",
        "cursor": {
          "ref": "08658898-371f-4f5f-b13a-61e86c01fe6c",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "288db26e-80e1-43b5-9305-b863fc440a72"
        },
        "item": {
          "id": "2651d197-8562-49af-a39b-40599a80891f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "befca65c-19d9-4176-bbc8-6148e44d203c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2a1d10-6093-442d-a5f0-d73c48c20421",
        "cursor": {
          "ref": "baa5d413-9573-47c6-9eec-c75da5ee3d66",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ee98d0ea-0a13-40b1-9187-c1d4698ceab3"
        },
        "item": {
          "id": "9e2a1d10-6093-442d-a5f0-d73c48c20421",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "94438dcc-c068-43dd-803e-3f52c4d9ae68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f7e8ca-a070-451c-8258-06d2f92978c5",
        "cursor": {
          "ref": "ea8f35f5-b6b3-44dd-9864-26f4302b6346",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "64bd6538-ddba-4bb2-9ac5-82a4dddbae69"
        },
        "item": {
          "id": "32f7e8ca-a070-451c-8258-06d2f92978c5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "37a6968e-81bb-4a0e-b91f-2ab82a1d0c5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e10b53a-0f4d-4187-b435-ba1cfdd02605",
        "cursor": {
          "ref": "a90189d0-ac51-4cef-b654-0eb6ebd8fc05",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2a279835-ba9a-476b-a2dd-38a470932595"
        },
        "item": {
          "id": "0e10b53a-0f4d-4187-b435-ba1cfdd02605",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "796c6c78-c91c-46df-b5d6-8ec21a6a6bf1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 51,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1348d829-706e-43fc-9463-15427383abe4",
        "cursor": {
          "ref": "bfffd3e6-2655-447a-96a4-5255cf69c4d7",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f236f953-5ee1-450b-83a5-e858377d6b0e"
        },
        "item": {
          "id": "1348d829-706e-43fc-9463-15427383abe4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "78c6ecd7-5454-480d-8672-9d96585a7dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "c3aae923-3da5-4343-abd0-2a0415acd02f",
        "cursor": {
          "ref": "301bd387-c06d-433d-bfdc-cd2d7a5d6bfb",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "62f47c54-4987-4ec3-8c7f-23d6c571794d"
        },
        "item": {
          "id": "c3aae923-3da5-4343-abd0-2a0415acd02f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "54a6d83a-0568-41e9-9b70-dcef3c825a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "027939b7-1688-4578-b70f-d41c938d28a9",
        "cursor": {
          "ref": "713b9d84-f9ee-48d3-b47e-4092cfbb2db4",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4467a924-5054-43e3-8148-fd0d424673c4"
        },
        "item": {
          "id": "027939b7-1688-4578-b70f-d41c938d28a9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b12d12f5-f128-4c05-9de5-985ba509e138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "60692dda-ecb2-4537-9fb4-f52302e6d6b9",
        "cursor": {
          "ref": "b24ecb38-d093-42e1-80ba-d2ffa0e77d4f",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3806fa82-c06a-4253-9ea3-be70e0a5591f"
        },
        "item": {
          "id": "60692dda-ecb2-4537-9fb4-f52302e6d6b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c058fc4b-c2f0-498f-8604-22f42a520c2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60692dda-ecb2-4537-9fb4-f52302e6d6b9",
        "cursor": {
          "ref": "b24ecb38-d093-42e1-80ba-d2ffa0e77d4f",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3806fa82-c06a-4253-9ea3-be70e0a5591f"
        },
        "item": {
          "id": "60692dda-ecb2-4537-9fb4-f52302e6d6b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c058fc4b-c2f0-498f-8604-22f42a520c2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60692dda-ecb2-4537-9fb4-f52302e6d6b9",
        "cursor": {
          "ref": "b24ecb38-d093-42e1-80ba-d2ffa0e77d4f",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3806fa82-c06a-4253-9ea3-be70e0a5591f"
        },
        "item": {
          "id": "60692dda-ecb2-4537-9fb4-f52302e6d6b9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c058fc4b-c2f0-498f-8604-22f42a520c2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb0d39e-81a0-49b5-9de0-a5b2af1e03ea",
        "cursor": {
          "ref": "4b6a2f86-a5da-40b7-88c5-6c720388a576",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c8039065-2791-4e1e-9d52-dd16fc813dc8"
        },
        "item": {
          "id": "eeb0d39e-81a0-49b5-9de0-a5b2af1e03ea",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "89fe3fda-1da0-4729-bdf3-093c2cfcbb4c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b241c96b-ebf9-4e04-8145-da1795f67fff",
        "cursor": {
          "ref": "b440f676-1b36-4a8a-98ba-d131c5b2b321",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8379cfd3-221d-4768-b289-93a1ea3dee1e"
        },
        "item": {
          "id": "b241c96b-ebf9-4e04-8145-da1795f67fff",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "35fe8c8e-f8ad-40a0-829a-9c2a4c2e1feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b241c96b-ebf9-4e04-8145-da1795f67fff",
        "cursor": {
          "ref": "b440f676-1b36-4a8a-98ba-d131c5b2b321",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8379cfd3-221d-4768-b289-93a1ea3dee1e"
        },
        "item": {
          "id": "b241c96b-ebf9-4e04-8145-da1795f67fff",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "35fe8c8e-f8ad-40a0-829a-9c2a4c2e1feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "7e8aa368-dbfe-445b-a19f-be22296d5bf8",
        "cursor": {
          "ref": "81df60b2-88aa-44ea-8cd5-e6db242ead84",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "580ce2af-5dca-4f5a-8055-abb9b63fe1ff"
        },
        "item": {
          "id": "7e8aa368-dbfe-445b-a19f-be22296d5bf8",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c81933d9-24bc-4d9e-a5da-bb4168eced98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "06d9cc25-8a46-4420-ab99-222fc0ed5aa1",
        "cursor": {
          "ref": "309869f7-59bb-4bb3-a985-6b6b2ed5c93c",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d226a986-b205-4e42-9cc1-6a38f494a243"
        },
        "item": {
          "id": "06d9cc25-8a46-4420-ab99-222fc0ed5aa1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e9060ab2-0329-464e-a602-6a6ef4a831cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "06d9cc25-8a46-4420-ab99-222fc0ed5aa1",
        "cursor": {
          "ref": "309869f7-59bb-4bb3-a985-6b6b2ed5c93c",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d226a986-b205-4e42-9cc1-6a38f494a243"
        },
        "item": {
          "id": "06d9cc25-8a46-4420-ab99-222fc0ed5aa1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e9060ab2-0329-464e-a602-6a6ef4a831cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "9d083886-0ba1-4ff5-91bf-fa60cabf0677",
        "cursor": {
          "ref": "528f833e-0ef0-4cc1-b9f2-2c2741b59423",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0674829e-04df-4107-9204-b23a01655ea7"
        },
        "item": {
          "id": "9d083886-0ba1-4ff5-91bf-fa60cabf0677",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8588bfa1-44d1-483f-8a79-5638bd6be3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}