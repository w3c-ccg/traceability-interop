{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1b911339-dad2-4665-a4ee-82baa429e08c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fc5df416-8cea-4c54-8840-d8136bdfb87c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e45fa3c6-0bb1-4dfb-8b0d-9b34e915fb10",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0327061b-85d9-4a45-bb91-81e0f9f2ac96"
                }
              }
            ]
          },
          {
            "id": "e0d60138-195c-48c8-b45f-f12926d2ea9d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "86305a22-1ff1-4214-bc99-ef8c4a13353a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f7c47c04-c675-4215-ab8a-09f7cf3eed90"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4515550c-e10e-43c1-bc32-8a30ea40aee3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9d2cab98-641e-4208-8b7d-b72af0916fa9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e8134b1f-e463-466e-8223-cc56750505fe",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91ccd8d8-d90e-4fe5-9b4c-f236fb39a48f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2b1f8d5-9cf8-4bc9-b346-f4f1116c6cdc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f1a1470-88fc-4edf-bc23-7e87524586c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f8e01e1-8775-4df8-b520-405f8ca8ebf4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f3ea66ab-259d-4c09-9c2f-1e1517306f64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d53b17a-5b39-42b9-8c2c-20052caed83f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91cf748f-f5a1-41c6-bc2a-1f712a9f467d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "07a9adec-4c75-4a19-b5d0-06e47f2edb76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b493f278-1241-4178-b94d-e2bdf30c15dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0756697f-7bb7-4135-8925-b5f0cceb3ab5"
            }
          }
        ]
      },
      {
        "id": "b75e6fe3-437c-4d41-83b9-c04e4a95d26a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7a21fcfb-9ff8-4a41-bbee-cb3aea9f72da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87785716-09c8-4697-8912-01bb1989d46b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "28d99a94-6b12-4923-8f1c-9c34c04ab704",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1b34cb-6607-4410-abf1-0c37c04373e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa50ad6d-ed91-4872-9222-2fc23b06af5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a710a0ef-78e1-4e4b-97af-0b7bed720867",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60ea287-e3e7-4012-af28-c0f8bade82c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef28dca6-a63a-4a92-aae8-cff1dcd9f7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbb40d6-bb8d-4e69-a349-2aed76020b44",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98129deb-71eb-4e88-9ecd-ce897023da93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a883480c-729c-44e9-afa1-7ffc84a7fd68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "50764b3b-0f9b-4937-8916-6458cf772628",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02f795dc-7d91-4662-9888-ee019f60bc76",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237d1d7f-d25a-4052-9964-35594902d3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee5b9160-3c5c-41f7-b828-73a41174b80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf26002-c78e-44f6-9025-6f80d47dc1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7423960f-45ef-466e-b0cb-631ae1f0a7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99775055-e430-4e11-b5f1-c3399f425f01",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad77e70c-5045-4cfa-b983-a8c427bdcb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e483ca0-dd0e-4351-936c-93f0de8b7baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfdc098-b189-4844-913c-54bed27afe08",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "21fa3506-efef-4c3b-9293-3b71a17fe035"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9822880f-0f2e-49cd-bf2e-0074e1535abc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c504f2c1-ca34-4eb2-8967-c866d3f50f77",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98b9a1b7-c653-457e-800b-3bf6b0965a98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a1064784-dfd4-4eb2-b748-8079f46af770"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5614d90e-96cd-45e7-8f14-2a2be5b16027",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "49d9ce7e-fcaf-4595-a09f-85624ec4c94b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6f862cc-afc1-4be4-bbf3-aa663bcddc4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71e64f10-167c-41c5-aebf-fef7c73258f7"
            }
          }
        ]
      },
      {
        "id": "e5f947a1-e98e-490c-aab5-1bfcef3a1747",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a87d029c-2647-4a63-9d37-5ee85e61f250",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9397160b-def5-4a6f-9868-3e2743860db5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d3eaa90b-1f6c-4f11-af78-aaed7e7d59c0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63c8e55-4d1e-42c7-8c25-edbedc7f0146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abeec6f-c292-492d-bd2f-56b318f66c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccc5c1d-5a92-4533-b332-4c6f643488e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1267722f-f02e-42ac-80a5-8f5bc6771f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d2c696-7c40-4f3d-b22f-709e766e8456",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89d4bb8-a16c-4cc0-8b8c-9d26957b7ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5822ca6e-4f39-4ecb-806e-e6355f6575c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2736b7d-9349-4d78-b0ad-1e96ffaa4e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f490ebe-bc3f-47b1-ba72-6d0874c2732a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffc0b43-7717-4c84-a35f-0d83a5abc411",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd75d8d-c16c-4f7b-87a3-219c9b5a1985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b2362d-2ace-4589-8ea9-e3fffa335862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805db4b7-2529-4b3b-9ab5-9046f10b8b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd614fdd-6b5d-4f73-ab82-72458f83bf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca25d68-b8d3-4e68-a169-e83e4fa86866",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b548b243-0610-49e8-91fe-d406eaadb15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332470f6-0a61-4469-a1ed-aca2fded941d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610e5ab7-24aa-458e-9fff-fd837c283601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec0d3a69-9c4e-47dc-b47e-23659fbe34a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0272abf1-3b48-4f47-b16c-437d00ffbd22",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd42fa36-44db-47c1-b9b5-4a8ba0a6c8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd081d5f-f30d-4f62-8b05-80e1e525a499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359c365a-611a-45f4-92c4-5011d385cc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e707467-6093-4c71-a2bc-1843697d38f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1791f38-63fc-4564-a147-15ae7b95a9dd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2bf9b7-3070-4a92-b472-92822c34a964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bc86a0-a046-4a26-9f46-deba1ecf96cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc2827f-e27f-45ab-a925-39748a92593e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4762f96a-22b2-4fb2-bbb8-e1102dbafd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9700b46e-98f3-4683-b45c-f6d839ff9369",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37da60dd-3bf0-451d-b705-ac4f192e702f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130c9c94-9fb2-4557-b9e5-d5dab9379137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8334e7a1-ef93-4e35-8eef-f4eafdcbd8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e688d157-7543-4c67-93ac-7709c1c18292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43579ce-620c-4fa0-bb81-e0845de856a5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511857f3-e523-4597-8aa5-59ebf0cb3c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9362e0fb-7f64-45ef-95c8-6b90c4632ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c3cec1-54a8-40a4-bdcb-a0cc80973607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9abac69e-2cbd-4f0c-980c-3b7e72219e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e845e3-19a7-4c09-a631-e8166490c050",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55d7008-7c2e-420a-93b6-20dc876ecb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0ddeec-72c0-4070-8141-07718f8fdcbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575de567-6bc2-41d1-b806-bda491295d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5feb4ba-8f78-448a-a75f-2b3f69860238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d07a0f6-ddb9-4ef4-86bf-917b5831f377",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98484da-4aa6-4f6a-989b-432ccb6eeeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0dcc88-367d-46d6-bb97-ecde7fedd71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43244d62-f570-4004-8e74-59f0c2cec063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a5a9e71-731d-4175-ac3e-818e945235f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b73a98-d188-4444-8294-95312acfb735",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1abda87-5725-4cdf-9d7e-a59fd9f03c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd3eb14-15ab-44f9-a44d-fec1ea800f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea854fd-f6a1-4dd7-9d6e-44abe66c79e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d718fc8-1ffb-489b-8939-ec7cf041e074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f5ed76-3542-4445-8e31-e741c7ede34d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1290ef61-032d-41e1-8420-49a22d916937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5806fac-0409-42e3-8191-de74d9956dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8603fc73-0177-4816-9a45-2897fc050ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72090313-6432-4d3b-87fd-4a20f106eba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30040b88-9a82-438b-a9b0-393001391a60",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d57949c-82e3-4f9d-989d-f6846a184879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf94f95-7e9a-4771-9bd7-14ee65121bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603ed3cd-5c73-480a-8924-158924cef6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0df53cd-76a5-408e-a745-22a7cd36a1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdbe197-f813-4da7-a568-da7150dc0528",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5be6eb2-52b0-4397-84fd-89bc85c97365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed3e5c5-72cd-48ff-9e15-9dbddf81771b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acead61d-332d-4381-aec9-2ac770d129bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "893316a4-36ec-450a-a9c3-644479cbead1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a4a5bb-8c6b-4d0d-999d-84f84ad49a2c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703b1cc9-9088-4f99-b6a7-8cf24f426ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069c58ae-16d6-432b-b7e4-77a14f04168f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56868fbd-8d08-4161-982c-4d78edfeec7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0eeec4f3-aa90-47d4-8c1e-95b0a1deb522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cce9c46-f147-4dff-b161-1123e1395a09",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a0da95-2383-4cde-b566-42007e935e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87522e0b-5db7-4b36-938b-1b1b6cbc53f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3094b6eb-1fa9-470a-b064-8369140dd5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "938c8e54-63c6-418e-a273-c42753e8fa61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09006fe9-f0d8-44ff-92d6-c7ed1e5ee270",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5e5b19-1c30-4929-bf99-02536012ba27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5cfb352-f73b-40ca-8e7b-00e96fa9a299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97c3427-3d3f-4d1f-b0f8-25d50c6de511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff4abf2c-2df2-4077-a56e-5785c452f0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c6ed31-a992-4e69-bbb8-013d06b5de19",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d32fdc5-c49f-4739-bc0f-99194c93b4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179ffdb6-4186-48d9-a140-4da4c0d6a313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1925c0c-bbcf-4925-9286-4bd0163fe1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "150a8da7-efc0-4425-b695-b6e46e180d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7e864b-e11f-40ee-b2f7-69dff05a466a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efa0c71-3380-408f-8535-fdff66c336bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6966d263-b94e-4c72-8b10-3c14080cbf8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6443b97-07f5-4099-9186-5293f6d6fa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "793d7c1e-50a3-45b4-be77-cdac9ba3de7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2defa3-1014-4527-a553-44f49aa82f7e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a10a2ce-5c3f-4331-90ff-5db6d991f256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3718709-d823-4491-a4ee-f0471b8eeadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c8714d-b0db-4d9e-81b1-a82059087059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b42015-92d4-46e8-9715-e4706e9ef679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f5609f-e17f-4acf-bab9-705ade22419c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4291889-4843-469e-8a80-f7bb2b67630b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490039c2-c66c-4957-b96d-2b7a30fcb08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fc55ee-4cc4-4e0c-a2bb-fddbb6e21536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37984ea7-b100-447f-9b90-98494f59a104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b70d8f-7b4b-4a9e-8f00-680eac047480",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a043eff-eeac-4cbe-8fef-952f08d5a10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad74cfe7-4ec7-4a47-b722-32fa0a6c0065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7d8548-54bb-491d-aeff-3858d40f544e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd2a8ca-23f2-4e68-9abc-8369454c95e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ab3f28-31b2-4e9c-b0ce-e4405e581f9b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a655f809-7066-4187-b092-119cdffe5898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33476c6-09f7-4cf1-ba5d-9816be155b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d835176-31dc-47cd-a1c2-c2e735390bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d326868-1150-4ab8-b29d-73ce4033b16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd01236-f0ab-4b3f-afe3-8da07c132a14",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bd4809-e0fb-446f-98fb-f622aefe0d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacf4948-8e2a-4869-a88c-0fb94b6b740c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095bebcd-2eef-4e56-8b00-8709797322b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5105aa8-eafc-4274-9c45-e8f6a5e79436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22571bbe-4b94-4398-98ec-f3b5a8aa29d3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6967f794-b9e7-4efc-9855-015b7494ab5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e92a03-575a-4ca4-97cd-86d7aedd82d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ddaeac-06de-4ec6-bce1-b0f20f1eea7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e39f616d-853d-4590-a22a-fff618620f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d672be8f-850b-45ca-ac28-1db99e311c6b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e1a44a-cc6d-4d62-bc55-25fdaa4252cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe01f37-fa73-4c58-9708-637f3c3178bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36aa5d5-6d25-41a8-a32a-232c8f337a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4608b5c-d79f-472b-81a6-49bd5a2d288b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5475af7e-2947-4a3f-9554-49a6a34ea8dd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75c6e48-0991-4bc9-83a9-f4f097d5ccee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9399468-4e93-498f-b95c-d34ad0b61a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dead66-c4b8-463e-a0d2-61a7e4597398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67078756-51d3-4d7a-9181-102fea6c26de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0020b7b1-bacb-446c-989d-8eeb7e7f4018",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bf1105-6f10-4fbd-82e4-ec042716cfcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84badea-3019-4a14-9e43-097fa615e346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f74dbbd-e392-419b-8102-57ca9ef1d02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8b8123-c4a7-41e2-aa01-a886bc927a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef136ff2-498b-498f-9bad-2e42a5693d25",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d246882-d224-471a-9454-9bc8cd3a68e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac0fc58-8a64-47d8-b958-e9d837de7fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d8b6ae-c653-4a31-8da4-44b6c56f1542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66194684-fa0f-4754-b5f4-8256a5378e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e2dee6-542d-4865-85c6-a3c13f74f5ba",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd5176f-26d3-4a68-bcb6-78d23e4a4cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395d67c0-32e1-4c9a-a41f-e91d3db63cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4563351-54de-4806-b52f-2212b1e72b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c93306a2-19e7-4520-9be5-b3860abbbd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a99d5e-7b60-4d9e-82e3-f970d75ef128",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfef811-8698-4aa2-a354-b00e937faec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa88e74-2f87-4801-9583-bdf0afb982ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86382b00-d0d9-49e9-8d2a-d1c1387d6bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef140251-c7bc-4d8d-975c-3e4ac5c2796d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24ee526-6669-4df1-8cb3-edff4b71106b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e6a73f-d20a-4398-9ffd-cb3061b7718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db623654-52c7-4f59-a202-5e8587d6f523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd6ff3a-62a2-4b2e-88b8-6f725295ffe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a017d14-c799-4235-a94c-ff47237ec29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fe01ae-63ff-4353-9140-ee175f353d47",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c86155-ede8-4ff9-8e11-22cf505830a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900332d2-872c-4abd-b3bb-6446183a7515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e9900e-b8e8-4c93-943b-4e5b16b1fd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9757e428-8edb-4c78-8d8d-6047ff8cbcdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c4e76b-8fc9-476e-8a64-c2916ee74add",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9129a5e6-a773-4026-9239-d1cb42db1415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9227e861-3d01-4591-a679-c7a729af3361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7597a680-59ea-43cc-9bca-7f3ceec2d92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81dba935-b771-4525-8d14-9b8ab759dc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9edadd-2e90-4531-aec9-c0987bb6e919",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd91023a-79fd-4085-a7b5-d20a2d42fc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f40c6cd-e940-404e-91c6-06ad785b1529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66895154-baeb-4e5c-90eb-37225de6ac2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d06fa385-549e-4aa7-a284-f31b3b8d2b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e28045-8295-4cf2-8508-3af6db6d4df9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddb38cf-3118-4d90-876b-cf48e26b9a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d11a536-3df0-4103-b342-bc519d6dc42d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6aa2bd-34f4-4bf5-88e4-489f72aaaacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3377c17a-d907-4285-836b-69add9b018f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bc08f9-95f3-47ec-9abb-ddb32d5ccdfc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4c0d06-ca5a-43bb-b798-68db960ec0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f01b749-4fba-4514-b61f-6e49bcdb196b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20546876-c4d6-43fd-9960-278e3c0aea90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d238cb0d-2424-4e67-9008-3179413a5eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e93b5de-370b-451a-a1ab-efbf2a8df4f9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab46651-eab5-429b-9a72-75927e6bbbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55115656-6f71-49ab-8214-0dd4e00b4bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfe9a1e-42b7-46e6-9c84-966ccb28b981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "207cabf2-6dfb-49c5-89f1-b3ff750421a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8a23d6-3dab-476a-8a81-e36747b2f791",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1a54d9-9611-4564-8e0c-d7fa1cb2ffe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a76525-b0cb-4d12-9136-b43f1e1326df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc75598-e325-4f24-b599-7de237e3f90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "54779fe7-4539-4e21-83b2-81bd7b55e86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f8a91b-896e-4e41-849a-e5a75f6a8299",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed5ca96-cfe0-41cc-bc6f-2648e5f4e6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112ecaf0-9e70-424f-a41d-748785314778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35c5e0b-03bb-4919-a60a-f3bc5fc4b72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "140f2e2d-225b-4c1e-bf1f-243fcdb09b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547dd84b-30cb-40b5-90b3-cd0b70d7edba",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88ff3d6-3691-480d-aefc-b6a47c1975bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72acfa93-540e-43bc-859e-af58cd87660f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8743a9cf-facd-4a05-b389-413f8353c54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebf0b4e-9417-4844-b687-a3260e29a63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0824e163-e7e8-423c-bb2d-ce71ac29a6f0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ed6034-49a7-4cb1-9a02-530fdd6610de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680a284c-d2b1-47be-a8af-0e87fb905eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b007dc6a-6cd0-4e5c-97ba-b5a83798bf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1353a13c-d153-470c-92d2-2c66e329cb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457773f0-ced2-459e-894e-84397709f2fa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f2bcc9-7399-4bf4-bf11-7ca9df7a42d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d3c4db-27d0-4654-9ba3-83dfc6341a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac6467d-59ed-4fb0-a8a6-0d766be1e316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "741d27c0-827b-49bf-bbc5-02b5e3bb83d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49f6fc4-0a86-4dc3-b203-74938c47ff5b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bbca1a-a233-47f1-bd88-a778a4adcd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4732f9e2-cf8a-42ab-a724-080677cf225d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f557d26-55e6-4eab-a0ee-ad2906dc1be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0109a1a8-4242-4fa5-886a-08887f876404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2928b6c9-cf4d-4927-ac73-8fffcbfc396d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50758c3f-1946-4f7f-8801-0aeeacb6b007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5490d628-6352-4bc5-a32c-5841e0389679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cbfab7-b46a-4311-ab64-f5ece266213a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc69970-1e81-4e07-bbad-6e3a832d63f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47afc3d-a4f8-40a2-8efb-7b4bdb629157",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc13f8fc-d7ad-44be-84aa-af721c3c4f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91132b13-255a-4b06-a619-48927caefb71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3204b6-591c-46dc-8532-ef9d81676f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe00d3d-891a-4543-8865-c64ea8c00600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef4f296-aef4-4a07-88af-dd26beec70a4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f8b6b9-0c76-4786-bfd7-c99556fad0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c669fbb0-637e-442c-8739-699ed52af78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4812d01-cd37-41aa-afb2-16a25017a463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "515da7a6-b47b-4836-a8b8-773a43252c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fae667-2e21-47c0-9ef4-3aa66675e23f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97109607-8c75-487d-b2dc-69b90d410ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b379863-231b-4377-8b61-04b4ff5fad71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737fcb97-3816-4e92-8c29-5be345542573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ef9ca8-6bee-469e-8ff9-b1111489fb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3878862-7855-46dd-88c5-1371ec88f32b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c713c56-f0cf-4683-9497-717baf92abc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d77941-9899-49fc-bb3a-a59047062669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72414df-9536-444d-b37f-1db35caa376a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e263b6-0fb2-4dc0-b75b-466789dcf429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5680fdf-c585-413d-a169-56e911548182",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6653ba-0a0e-413d-a97b-3d086deb0303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea673f5-87f2-46ec-ad01-131875e86396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961e115b-1913-45db-a85f-3f5e55d1c600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed391d10-56c4-4ce8-afdb-5ff4908c3dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8b9a43-144a-4040-aac2-9cd48e52b233",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe2f43c-6fbf-4944-9558-e73629043a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70345889-c6c7-4e9e-909c-a6ff8188a5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afddbbeb-8852-4cc3-99d5-07be453752fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fef6b9e9-fbb1-404b-9c03-a1c519a089d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ed5a9a-7e62-4fe5-97eb-d47399a6f4fa",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed502ea8-0aaa-45b8-b5d1-93684a2456cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b76daa-eb54-492c-9c26-13ccce9d3662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57c03fd-eb3d-4415-b8ff-6b6c898c5371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e874e2a9-6b60-4161-884e-50863c88a2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2310afc6-5503-48f0-ae13-2b12bae04b37",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393ad97c-0173-4d54-a8ce-6bbbf9f55831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee414263-b9d0-4f2c-80c4-34fd4ec8eae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2067d0-03a2-405e-9b6d-2116dcab7f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00a4bc7-c0a5-4a1f-9ef0-7c4a2807b9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6526c9a-e599-48fc-b095-a11d78d599ea",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3642a7c7-d480-43f3-a8d0-09a25d2b664a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b271209-0545-4561-a082-7e7448a82958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc80673c-f06f-4b26-91c9-c831c3e6f03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d21289b4-ad8f-43c0-a174-ad3ff8712a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaee01a-99a6-4389-866e-e19e3a7a82a4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8afa522-2022-4f56-b6a6-d314aa4f4a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3aed41-52fa-4d5c-a100-887ab99dafca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e81e31b-49a2-41fe-b47c-da010876ad87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9499e599-167c-4df5-ade3-d440f052641f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72386c32-5000-441b-82cd-0f96f3f61972",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd64fd7-d51f-4954-aed3-6c6c4f1da960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22a78fa-0182-45cc-9b15-32410e6af17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08660b55-c951-4b90-bdcb-85e00996f2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cd8d45-fd52-4719-b9e2-da678dff38f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abee7982-9a9c-4963-a65e-a04855224271",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca6fa2b-cb89-4375-8460-9ea37156ace4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd00e851-e18d-4917-a2bc-4b365135bcf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bfc60f-336d-4a61-bbc6-7150a8de2817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1320690a-9d9a-42af-b04d-b4210cfff5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52db0c7a-cc48-4666-acb8-50cd9a09623d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea87de4-f59b-4744-9160-e9eca429f59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b68cbd7-e884-4817-9347-8081076fcf99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14db51a9-2c38-4dc2-80b9-f9d329ab689b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0f527c-f31b-45dc-ab29-e5dc2f97fcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d9d0cd-0f81-49ce-aa42-35cf526b525f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184e7fd4-2430-4acd-ba39-04d389c4fcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e365f6-c0c9-4803-87ad-c8cda5aa59bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675ecc8b-299b-4cf1-b917-8a6f7828de12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "92d864ec-1b33-45b1-89f4-bb84fba3c776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c584c95-a955-47e3-a669-f776440d00c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b420f7ed-1857-4191-be72-d5e12bdb9c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1803e219-f1b2-46d1-a2e8-d98263610e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dc988a-88d7-4bba-b61b-ec7096ce055f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2606bf23-28a4-4f85-9155-78fbcd48b9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b943d8e6-726d-425d-b1d1-a488a9a63b28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ede309-54c3-4d1c-a3be-4c521bb29190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a682df09-2da5-4ad4-8cac-05762d277309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581d9e08-78f0-4ff6-a506-083361d995f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8333c364-d80a-4746-a51d-43ba179400c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da2b84b-7df1-4b37-9508-f5b60f5d72f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf52e324-4085-4b7f-9ba2-71df45a32d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c781315-5714-486c-aea0-d362d33c0ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b349417d-1c0f-4ef9-bdcb-64b38dda0b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f04d8cac-cf2c-4214-9f02-bcb44c9cdebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cb81fd-136c-4f39-8fab-33f969f19b16",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1769e0-61ec-46cc-915e-f1ccd21ca95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ad47c2-1321-4620-aa8a-b4c6f071effd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce2a286-1320-41df-a26e-2b8b1f687a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce08e142-9096-4550-ad2c-19624403f331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f79dd7-2689-43b7-85cd-46c89252616c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed31d9b9-09b5-4fd6-be74-54d3f0618698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25d40bf-669c-4558-b5b8-7b25aa7d53fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831c60f9-d74b-463d-92f3-78394799d68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ba2cc8-db4f-4aa2-8841-8026c1bc2fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a80732-35db-4d9c-ab43-0c6731cfb4a8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19eabb1-dee9-4eaa-a205-894c05ed08b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462ca4b0-bf18-44c6-94bf-4500bbbeff17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893f1676-7089-4840-8bc0-0e6f753010b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad4aa47-4322-4724-a77d-fb086403aa1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650e3be6-1ca4-4f01-99a4-9fb2c20539fc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbf7dc1-4f38-463e-b71a-d72dc034b5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5fa294-dc89-49a0-aecb-193bf903c6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c777a3a-a280-4717-a106-61cc98c80b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29cd67d5-dee2-4b2e-982d-6fb11ae75a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153c4fa5-59f8-402c-afc0-815b0cd75031",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213d523c-0996-4c2b-bddd-f8547d1e1834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5331b327-f03f-4165-b664-71ac6a59a1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6348230-8aeb-49d4-850a-0e7c62024ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "716fdccf-d14e-47e5-ba1c-5758226fa5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969813da-03b4-498b-8e12-c07f3529e737",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b10b62-7151-4f12-adf1-ffbd6f34f1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85540228-555d-41bd-a265-c4b48a4fae3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90caf54-94d0-47ca-b19c-f329439f9deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0089a6b3-ac80-410c-8dba-885733b1c5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5567c8f6-2f61-466d-b36b-c827ac620d56",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd21553d-5ce3-4295-a93c-b3c7fa6a8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ca2298-ca29-41b3-b44e-b872c6941359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f69ee2-7e89-4651-9fda-a638baabc8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbb7d1d-7f26-411d-92d3-c99ab6e0f587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56331af5-c782-4e13-8759-c29f88b302c6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026de43e-67fc-4ede-b850-0c560f70e41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d809f7-e3a9-48ad-8866-76e68463bb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c685127-141d-4498-b915-063bd4f8e512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0d103d-fdde-4a36-8306-9a08b2f52c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f92bb36-7229-4dfe-9064-15517a022226",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bf7b07-7085-4837-9b50-3f063ea847d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd2d9e1-9c99-4d3a-876e-e90e3e600802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa596765-62c8-4b55-8d9d-b32b127457ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b283932-1fd1-46db-bd7b-be073e4ab331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69b549d-0507-48f0-a38b-4055f7313ca6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824f2bee-8ddb-41db-a37b-8c705f187fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96aeb2db-5b6d-4bd7-b0df-6b4fea292f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259201b5-b56b-4438-82ca-9a9e8cdbf68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6394582-e7a9-49cc-a920-6ae88f62f0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecc6dcf-707d-4b5d-a1fc-3e0a1cac6582",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34574c0-b00c-4d48-a054-f8aed5fedf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467959c2-143f-48e8-bc79-f6685b320715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7822407c-26e5-4b08-b619-2dad12c87c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27cc2755-883f-4c42-965c-796c406258bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceeac8ad-141a-48bf-a426-c81ecf2aa9b9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dde1cd8-a0ba-4312-870a-a912763d3622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3cdbc9-e60f-4a56-8a86-ab6ab75f8708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a823e42a-5151-4655-8bd5-8f60366422fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65bf0b5e-b1d0-4992-8641-605819854867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1934820-6929-4533-80c5-2423316ab03d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db22d261-7f54-4f84-95c8-9dc77d37e701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ec9511-4a4a-4237-838f-8afff79b1804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477ddb3b-ec0f-4090-b326-0d48af1f4e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a1c0db-f26e-4bfe-9829-e6a6add8eb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712a8814-a9cc-420b-9e66-1bf20d79bb12",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d8789c-fbea-4cc7-ade2-d0ad732fcc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db78870-48a9-4f1d-b9f9-7b0e10402648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a946d4-4089-4367-b5cc-76fc68151f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f96a32d-0228-4b29-a48b-db05989e1d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8884dd4-153d-454f-b85e-26a3568662c2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca3e1b6-476e-455f-a8a6-601fd1b096b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddec8605-8318-4025-8b31-c46ce030032c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cec8d3-a279-40ab-8ee5-608c2c0cccbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72a9a81-fc5c-4de8-b535-fffe611b3f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c7d12f-417b-465b-945e-82f5053586ed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379c6855-067a-4555-a7bc-795454b6086c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd2e91f-b65c-45a5-ae58-d07c5c8ab52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0bcb7b-841a-4e64-9152-cfa0cb5db1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3dd1c92-da87-40ca-94ae-9502d2968596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344640e1-3cad-4e6f-b216-e10c0c51cad8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed213eec-4c8a-41e3-a616-17505e14c56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c783c67c-8eb4-40e0-bc61-759bdc965206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ebdc37-0ea1-452e-a6fc-4013e690a6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61ea6e52-aa5d-4612-b0f1-22db36f0cb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53d916a-5c5c-43e1-a942-3f121e2dd6ea",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2562be0-0086-45da-9ab2-4c9270c0fa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e6bedd-62b8-4359-8be6-507316f2706c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5de3e95-36db-430f-a388-9c9b9e00b157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "457bb0f2-d959-47ca-8e1d-8480dfaa6a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578ce70c-8c3d-45f0-ae2f-6c94fe9e57ae",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983c7453-f6dc-4a50-b706-229d8bde0396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f153fa-6f8c-487f-ba8d-b77fd9446328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add1a14d-d680-46ed-b5ca-440d98aaa0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ecc9a2-03dd-4469-9abb-4049cf2ccd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1363a2-c61b-4f6a-b3a6-b51e5e782470",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bba12e-a02f-4c63-9347-fbe1bb923fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76ed67e-7e03-4341-aaf9-fab839829533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c2f090-d0ea-402a-b797-82ede88faed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b366b26e-2441-4d9c-b202-40d15734d13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c64a30e-399c-451c-84d6-7c01134f0ce0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b139a7b-42ee-4ea1-b671-495bb1b41497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000ba261-99b4-40f6-92a8-6173e599a87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8cb171-cbfd-474c-893e-e9f1e2c376f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "807a6758-773a-4908-b07b-84d359c6b06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019fee22-755d-49e2-9a39-4a5b7102e259",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28906383-9438-4e8e-b094-f06c4ac49afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acf5dba-917b-4cde-b229-18ffe093e1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611e6b07-3c3e-428c-bf8f-db7cd21cdca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f91119a-904b-43c8-98fe-9caac920d02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42cc8ac-0169-4015-afd2-b6ddfd3e17c8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488a00fe-1a53-4ac4-bbac-e1ea60b5be91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c088ae3-9aa2-451f-8519-984b1e200180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed03e30e-30c3-4f14-a2d3-512caad4c26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dad3275f-cbaf-4659-811b-a99735a081ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a42f0bf-4dfe-4294-ae87-f0083385fee8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75db3dea-f5b0-4a27-b020-af9420f18c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507068a7-7829-4766-bcc6-1e0fc9a58f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e00e636-edd8-4507-8c9e-f0b7af073024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b16a3d28-0c75-43d4-b9eb-1f4e8b3a62a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c3bf82-09c5-4292-9ec5-ced316b52d7d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8eafc8a-9eb0-4a6a-904f-cccac842f787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8202bace-756b-436e-94ed-b3cab5adc89c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00999acc-e9fa-460c-bb4c-5dfcf99e7365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83856f24-a790-46ba-baa4-9662e102f61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6d28a2-f3e3-4890-8995-1fb7224f3e2d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cf8bfc-fd89-49d0-a628-dad0ff3d7b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30505d7-1c2a-4480-9728-22a6b41a8475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a60f03-2263-4069-bf6e-554597d2922d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d704b77-b376-4432-91ad-9c87e1f9a711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d20319-df48-4532-8d83-b9bfe35b890b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e97ec2a-2386-4358-b82d-081f3720cf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fda842-6932-492e-bbc2-744845731757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70134535-d679-4ba3-ae78-5f85d5a06502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a2bbceb-7669-447f-b293-83ad7af3dd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899e5f0c-0d2a-42a1-b06e-8da83dc75841",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fa4967-d75e-4cd7-80d2-cb9820be4777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2c9af7-2a09-4b5d-bd58-2fb624bb4627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85204717-6b31-405d-b63e-23dbe8a2eab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "928bac12-296b-4513-bdc0-e84433961c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21b2e53-3e54-4bd3-ab40-5f12db984724",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27e1105-7ed6-489e-a2a8-f6035f670a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d8c3f3-71b6-4a13-93df-7363fbf53ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9501fbee-c3df-4db6-9ab2-0e7b008bc3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "96295808-caac-4e19-9c9d-5b162faa607a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb94361-f86f-4a51-9560-317489a4072d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00a217c-9111-424b-9140-e96e537fd5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397a537b-facf-4f88-bef5-ded80aa50bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301a2ff5-0e68-4405-a999-de4553b5357f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "46c7ae87-7571-497c-b673-82e5334720e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc6d903-5898-4356-a2e5-2264fd78e055",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096eef66-cfda-45b5-be68-a9637f4cd0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "459e59ec-d50a-4c8b-b9c9-2ac0f8c0172b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa242c3-4d3c-4c2f-94d2-88e813f48255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "632d1256-7859-4057-bbb2-83afc0cb0b18"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2d63c37-b74d-448f-99dd-2f4198e4f223",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56fe02b1-6af5-4baa-aa5e-b0d50ca87a20",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da474cac-8c60-48a1-9e85-ff5308c72014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c866691d-a2ae-4207-bdbe-6c0d435a1cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aca20ae-45c6-43c6-a74a-20f4b19f7dcc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "dbdaa1ff-2311-44cb-8e7e-27ceac3e8ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bfdb26-16c7-47ae-9c5c-01a6892cfdc0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b64592-4490-4486-9765-ec8faa99afbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "082a2cf0-a19e-406b-8410-396e01baba38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc0de4d-4b96-4d59-bf39-47e5591287bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ebc6db5a-5723-4545-a743-16fb19144a1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b09606e-d287-4175-bd26-035864dd520b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de2ce5f6-3772-4609-9688-50856a0f14e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10ef513a-f32f-43d7-a56b-555a5f68823a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe1ab2a8-0728-46e5-9480-626d97faf58e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b79776d-6278-43de-8b23-534182f6c1fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f458e3aa-0620-4b5b-ae2d-573206b39ac5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f313e5e2-fa73-476e-b784-179763a34b36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d1e1e7c9-f06f-489e-ae1a-f90f119d7f41"
                }
              }
            ]
          },
          {
            "id": "4886cff1-a51f-4fb0-925a-8522964f70b5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "288a9f03-4896-4ec8-aab3-fb75c7221bfc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f760647-2ecb-4bd6-9686-6788ad80c01a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb226a2d-6561-4029-ae7b-da941441a500"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2b8259e-a9fb-4305-bb49-0f49a911ea0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e62c0da-e4f8-4b9a-8458-b32413ad6843"
                    }
                  }
                ]
              },
              {
                "id": "77e64448-c7c1-4d3a-aead-6e9f2173af3d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad781019-6003-417a-91fa-db2109100929",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c88b125-36e8-4614-8792-fc883a1a378e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "970dd09e-5338-4b8b-b1c3-b3594a1ab586",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e2d06161-9ef0-44d6-bd32-d5f94e978cf9"
                    }
                  }
                ]
              },
              {
                "id": "8036081f-dd28-4178-9678-d5cbbbb45c63",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b43f327d-e390-4956-a0d0-c38815c61188",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "179b2654-172a-4ec3-998c-7cb1711b7663"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43e4f377-3ad0-4a82-af6e-0792a97f0b02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "343e09b4-e6d0-4b98-afd4-f2a18d661947"
                    }
                  }
                ]
              },
              {
                "id": "14361f61-b6a1-4374-b882-08560e8cba35",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aafde8e-de8d-4fb1-a74b-4f861fd3f186",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0f99b66-e6c8-4be6-9871-317830659f9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79e66bf3-fe3e-4f12-b3f0-1ed954bb0fad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "29ab5baf-1eb4-46cf-89aa-15b52353c076"
                    }
                  }
                ]
              },
              {
                "id": "1f2d8b8f-b255-4333-bdd6-ff210caaaff1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0709e425-f32a-439b-8dd0-c56bbb56b62a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f082cd42-d22b-46fc-aa7b-91c287a7087e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fbef6f1-51fd-4850-95d7-5a46749bf4d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe0956ca-d50f-43f7-b5f8-d9953ecabf25"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8e72e7a-760d-48fd-bf06-745b0cc99e40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f52cc2c-9a1e-4a13-b829-c1ed251f23f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e6030e8-f956-491f-8b8d-f1082446baca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "665b7eef-349a-49e7-8c45-cacd84cbdc97"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1d72a64-8caa-47a7-a6f1-359a733b442b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7fda9583-da50-4a4d-b021-1799be65c66f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5940b300-61e2-4341-897e-76b73542f849",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f04070b-9007-4529-800f-7bc3b45509d1"
            }
          }
        ]
      },
      {
        "id": "db3caba2-1cc4-41d9-b981-272dfb1164a8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "95e605b6-f2fd-4155-8367-1d3da109dd67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e4ab33e-43eb-4566-a96e-f5073504da4b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84c7a0d9-626b-4566-bf63-8b07359acbfd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dad58b-8c46-4146-9d46-6962d75bf578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2923ca0b-d176-4561-8cca-c83f9c9da1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7575b26-37bf-4351-91db-32a0b9b56c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0d0b7d-289b-461d-80f8-938dc8383ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a99f486-9375-4ee5-b0c0-cfe0109cb835",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee12c553-0cc3-424d-8c1f-232d501710e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357f9d0b-b1ad-4aee-a0a6-aac3e30021a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac385fc-110f-4c71-afb9-62a4bd9824a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e973c22f-93bf-48c1-ac90-c31d383ba85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36a6618-d034-4cdd-bd6f-61f63f4e3b61",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459fdc91-b098-42ce-ae02-7a7923c54e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add766f7-f21b-47ec-b168-3cd1d4248033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e611615c-6f95-41d8-ad51-c29c0fc5c1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "778e753c-b6ec-4e94-9f09-b68793cf7b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6b6453-2e9f-459c-9f8b-272879107dec",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55c7ec0-9670-4a50-93f1-726bc113108a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbeda4ae-38de-49df-bef0-11431d0f43a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53195c54-7bad-4516-a4ec-e6cbd327ecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "711b1582-920f-4f69-9c59-51ac684e64ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8784e53-d76a-4791-bffc-dac504f0271a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b50f3b-02a6-4792-b3ad-5dc55d88ee77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327dc3c1-9951-4e2a-afe0-ac23ca97cb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54465cb-f3ce-4814-8356-7480aa0f7f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc6d3e4-8659-4236-a1a0-8d80db879a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56dc80fa-ff6a-4207-beaf-84b165b42ec5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760055f5-b747-48ce-9659-171ce2e3d760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a07132a-8f15-4b57-a867-17d41308c982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7009e73-1e80-4452-a067-e41e854b3992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28d19cee-49f3-4488-9490-4d83ec8aaccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b65e72-e073-4481-914f-a8dae9604bd8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a58e68c-f63d-4f87-9b45-d39a060cc923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1c158e-7e11-4cc1-aedd-78a6f1a6a826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad961d2-5b0a-4cdf-b1c9-1ef38124db9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5950a41d-73e9-4612-b47f-f2de4ccc742f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12177c5-862b-4bff-bc2b-98a517a93a60",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1905f215-d169-4405-bd57-351e21a9a1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d23009b-fcb6-4716-9265-0195ddd6a03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139a098b-9bcf-4e72-99ce-6454f6893b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09e43bb1-2c55-4a9d-8fb2-bfb8f19ea143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37378ac-08b2-496c-aec8-1d55ca2a178f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb587ad-456e-4d59-9762-527b37f20e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783d8667-2f7b-49e3-8042-c7fefbdd0ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fdb6d9-a704-4a6c-89af-772f4da74921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a00e33e6-8c50-46e6-b94e-c89446e115dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92538a0-0a33-4dac-9106-976fc982c0e1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c545007-6875-46ba-95cb-a4dde5739ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450fe2cd-8af8-45e4-84ed-78f40c0462fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5e80d2-a72f-4180-a40e-f84f5ba2593e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4069e57-9689-45b2-899a-a33051b99569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0206ce-0ef1-46b7-912f-bbcfd1ffcf6e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cbb07f-dece-416d-bc8f-36ae38590127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09665aa5-81d3-4b7c-9d98-fdd6727d199a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4667d68-b181-4a60-90f6-a9ab959602ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f23de8e8-caf6-4cc7-a1d4-8d762289e59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1ce2fc-469c-4ef2-9b5c-f6dd9922f1aa",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa828c8-b1a6-41d9-8a06-4ef7cb0012f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d441a0-608a-42f5-893e-ea7134996f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f674ed9-6b77-4698-86f2-8e05313da086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f7b8e7-344d-424b-a83e-ec75dde61136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722d61d0-6416-4384-a04d-302b08ddff0f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b7bfd2-e87b-49ac-87ab-75030b8ba3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f6b3f6-47c6-4552-b7ea-42fb48f810b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2fdad1-3702-459c-9c75-4c0bc779fd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a592af-5225-4b13-8c8c-c4cb9243ad02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802afd5f-365e-4fdc-b6e1-1f27a69477b6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747a6b03-faed-40d7-93c6-24b0da034df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4c1af7-9420-45ec-9997-5579096f36e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623ea7b2-c040-4f74-a17d-379aee04ddff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fae7b1d-f4a4-44dd-ae17-362d77d7226e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214ab9ce-54b1-46ec-b404-f4574313cfbf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e4a924-66c4-4cbc-ab89-497e5cda1c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805f0f21-397b-4555-b13a-f5e7bd0576ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58718c7a-5985-4f63-972e-efee977ef2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfc12f8-eefa-4f7a-8cc5-3da1fefa299a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d1b224-2492-446c-9844-3bc47108eaa5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ab1a91-29b8-4cb0-b889-a964d10565a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc174e9-bc4f-4186-b0db-5a6eb98e902a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44057255-6622-4aa2-83d2-5c7a5e949723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fcc0c2a-8d11-4b8d-900d-c816b1925390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad6bd11-d3cd-4aee-a0c2-ec810a7091b2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf26047-47df-4d70-ac9b-2cf17466fea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc28965-d990-46dd-b0e7-f6a3dc26afb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a496a76-bab7-47fc-b76d-7ef8d66bcc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6157a5-ac78-4140-a006-1df433f561e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c54b91-6d67-4116-8a39-7fff4066fa66",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb3725f-1c6a-471c-827c-de118af50dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec90893f-60a7-441d-9348-8a5a148cb802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f37b103-737b-4d1c-9da0-68797db93c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca800679-fe05-4453-8728-f1128af84c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bf198b-7964-45f5-8ff5-ad2fa7475b4a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e3a6eb-074a-4f2e-b23a-c4da1c04b4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1422df6-7b01-45fd-8dd9-b7527c1c9f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586118e6-3b97-41d5-874c-a6316b93078d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "842233e2-47b9-4cf6-8c56-1f469e095ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08489e73-62ae-4f2b-91a1-e3cf64151d0c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f4562e-eb55-47ce-8854-19cbfa2cd137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b4a630-9b70-49a3-b14a-4c5b45ee9448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb08184-d66e-41d4-9588-d86a4693c227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afaa3e80-845f-4f53-a425-2d392b541bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e7c850-3f57-4ac3-ad25-2d1fbf0ebfae",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24241fcb-47f8-4ec5-9ea9-852f0905c262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b71ad6-c038-48ca-b0f9-86489646cc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49336e9-4129-49db-a736-c283c32519a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ae60d5-efd8-4afe-b94c-3d4a0f360257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e39275-4db8-469a-9a8a-d3851496bada",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f3251e-0d0e-4968-abb5-39393f36e66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4874bb0a-af73-4615-a62d-a1984f2f83b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3512b7d0-d5b8-4520-ad1b-2a6234713fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ee65d0-789d-471b-bf7f-ba3bd9a7ab21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50573c4-c335-4479-9974-e808a5e7f65a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe2f451-5d90-46a6-ac9a-c039fa0173c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e66f94-7531-4a92-9c48-198511ec794f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32188f3-0efe-4ed1-a211-e35cc5f6973b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6f311f-1949-4d09-b257-193ce0a56872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40acbe28-4a05-41eb-8ba6-57c483fea7b3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3413faa0-69dc-45f6-8f50-99b1b6d4594c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1437d5a-41af-47e6-87a0-d3442d8a0a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3439fc-8c21-41ad-87eb-6e2c70f080f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8451e061-846d-4383-bb69-e6eaace19c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355576d1-a7b6-47c1-8f13-e0199a4f881a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe417c6-06c0-4cde-904e-9b516e2ace58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16598e40-4dae-4c2e-9daf-37050a66f275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab1e720-80ff-4393-9179-468f1f1ec849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98259c63-9f1f-4c5c-83cb-45f523600fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42cd534-3f67-43f0-b89c-a973b04933a3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcc0ac1-009a-4efc-8b07-1afb9333a569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d97c341-d809-4227-93c4-cabfa65e0747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ffa6a8-c726-476b-8390-8b6cef3d5e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02498839-2424-46e5-8f7a-5880908d4ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f140fa-491e-4b2b-aed9-97c9b35ebe2b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413f3c09-3799-45a9-b8aa-5c16a9de29cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c57e66d-c73b-4f48-8639-64631321a289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6954417d-7191-41d9-9bc7-13eec7532e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f46337f0-09c9-437f-aa79-1bb2e31efa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604c202d-bdbf-4103-854a-f82f9dfeb94e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c078f20-441a-4b1f-92d5-c4bc098e58aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeea5fc6-c585-4fe8-b3a7-2ac3e1f47e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4972572-95d4-4772-918a-bc18ab0212b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8aaee01-1765-4cf9-be4f-a72d5d8d3f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91f400d-95a6-460f-b5f9-6de3a5271df2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10048fe1-e6e4-49d2-8637-cfa870f9eeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91bbd9b-e80b-46fc-ad24-148d8806b28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0be8449-8d13-4daa-b1e6-417297d51b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f208f17f-728d-4e83-a35c-e82106ebb5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1171f494-e464-46bd-9a8f-1d1cebb37b11",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f9f12c-ebab-46fc-ac34-16411c6a4ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f068898a-3de9-4729-9f75-91627f950ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf71dbed-444c-421f-a434-918e311496eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8c1a06-e393-472c-8f8a-1b20616fcb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66358f1-daf4-4036-8197-33f97f480170",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735a2211-7aa9-429b-b5d5-91e7cd9711fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bdeec3-fd10-4e78-b2c6-bf5f1ac98ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56288592-b9ab-4c4c-b31d-5091d560c315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc3a329-292d-439e-8e0e-74780d72a055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3306fea7-3b19-4b17-a7c9-eb7887274d3a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead77eb2-9321-426d-b4f9-d613a54d03e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66a891a-e2a3-4f4d-a30f-382d42baaa82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b77d6e-1427-4412-9b33-a4a3ef239f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba22950-3d85-4b7b-a5bc-e2e08d72e579"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8146b76c-d4ac-4274-b4fc-a0ae4b0102a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbaec434-601b-4166-ab5c-3329f61c3db5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed551fd-06e4-4e9f-8dad-78f73c998002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac15600-28dd-4cef-89d9-07aff374408e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8ef689-26de-48dc-8041-c0741ab9732e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41d08644-2226-4c4b-ae67-f98974b53011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29a8c41-9d00-489d-a4f0-6c0718a1ca16",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13eaccd2-53af-478c-a584-48a54b24d05e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6e51e59c-8ef6-476d-b43b-f532c6aca426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce32d8f-467c-4814-8cce-1829dd147e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12e4996c-d587-41d7-bc00-e0660f9ec593"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46712500-b19b-443a-b850-61c5be1c3aee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20679925-3b96-4bb7-97f5-a5a1737cbd7c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdd5ad6f-42ed-408b-a8db-dac2863a8be0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0ad5622-ef1e-4726-83af-172dc86ff0af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "900b72aa-a696-438e-8730-b464c239231b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f3721f7e-f385-4c8d-bc1f-adbd214ba099"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "740f8b63-dd64-4470-9d9b-5dd7c3608669",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4a5e680-db8d-4a17-b990-75d4486e6317"
            }
          }
        ]
      },
      {
        "id": "f8445d6c-0178-493b-bb19-c3649a9778dc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3fd3c690-8f7a-4f7a-91cb-6f40c3c77720",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8628e03c-2b38-432b-980f-d7c33aaeed39",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c6fe4635-60ea-46f8-a086-9467365b0ede",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44adc4bf-1b86-44d7-ad4b-58bd695180a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33b2983-1b6e-473a-9948-ec765ffa98c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3dafb3-bc6e-4f77-9e47-08a17085b8b1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3fa60f-46ef-4909-930e-8622419e99f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afc2c00-93df-45b4-a27e-0da46a7719a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9490c3-8371-4936-b22f-1c33f910c854",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f261dff0-f599-4fb0-aaa1-3982badfd6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7f5ff0-2ef1-493b-80c6-f867583ce829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66165631-9a4f-4100-8c58-8ab1548d57fc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03476112-d540-4142-b2c0-8e3f67137738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5c7e7c-f4e9-4d53-a36c-eb8ae1c67156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b603de12-df79-4575-90b9-a4693dcbd02a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1aa13b-9213-4ddd-b3df-daf6d489897c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f542a64-8567-45e7-b457-239af70ce2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6101790-f4b2-4699-971d-aec89155a4d9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a449ef1-ec38-480f-a430-e8764dc5f46e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792f9d95-308c-4642-81b5-b7c7fbe7d1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c61a90-f823-4c9c-af06-943e58c4b624",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2207c20-547b-4d41-9e1a-892efeebe323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510d2baf-8d61-4430-a3ce-b693d6627a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d573435e-567d-47f8-81b1-47b248f42792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0db487-dd49-4ce9-a506-ff36558a8c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a8adc8-22d8-441a-8743-2f9d27467cd5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d47aee-1858-4e4e-b4f4-4ccd9fa3f002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdc53eba-d485-4183-bb24-d316515bd37e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9473efa3-ca65-4674-ab6f-696c0d63b3bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17477c6f-acc4-42c9-903b-c19191347988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637d3949-f096-4bc4-b485-2d23f161fbb2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96cc5dd-9c6f-4d4a-a30e-576b5d9fd350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb3e6c6-db01-45a2-8c5d-9f8cc44ef912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bfa45a-61a4-4a29-86e6-0b07da6887fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17af3af-8543-47de-803e-53005e527bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4016188c-ff21-4abc-9a08-c0c566701bb2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113602f6-1645-41ea-a3d8-832f9eddfc9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76d23989-79d7-4d91-a2f6-91a4d1d72c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9680fc-1740-427f-aec8-849965325b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b2c2fcd-45f9-4b2b-9a8c-3dc4488ed95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a98bfe-6b3b-4a74-961c-2b29a07a9a3a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef898a3-9ec1-4c14-8f41-3e5e333de95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bb38fd-6f48-4dcf-9613-5c0aa320a75b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf2ce8f-ff6b-427d-a95e-ced059418f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91ddc16-d20b-4741-8283-70d1a987293d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57152f4-f6df-4031-8617-9331e36ea00f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b1061a-99d5-4bff-aa33-d94702b8866d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab485184-fa8c-4216-9dfa-ea3bb70df6c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad225ff-ae4e-44a4-b674-feeb20b5e561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84817e13-142d-48f1-9002-65ae68888471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c49c4c-6e6c-4cca-8e42-c754d0660212",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3eead4-c792-41cd-81bb-750fc3baa5a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de80d5a-1948-406a-aeab-e58b3858d716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f2f6c9-0eb2-4d13-992a-4be4fdfb09c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48a03c5-be91-4168-8b03-8f5aa1a40e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346b1978-c558-41f3-bab5-0e4ec6d0078b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823174cc-48b2-43e7-9859-9b887a3f96d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d44985-ed7c-4646-8f77-4b233f1352fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a35dfca-0ae8-4df7-8c17-0a9015c77b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b18a6b7-6a22-42d2-98a6-09216870e9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6bfd34-5c84-420d-a3c4-b7d0cee261f4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98e65df-5c17-419d-9b06-3f3b2ccae279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4513929-9582-493b-991b-4eeb0864d857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a678ae5-451d-4ebf-ac88-b0ff2423fb3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9c6c59-2158-4915-8727-2fc586335ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc1f9de-41cb-4422-b5c2-423b26db194c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ca477c-2537-4913-aaf2-a5e64e9977ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5be184b-db66-476b-848b-c7a576af0d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6b31a2-19c9-4c2b-88d6-7ca156c62da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd5b959-9c4f-4105-b55f-56ebeddd58e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66733b21-655f-4362-bef7-047971842dc8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc0af08-d73d-46e8-ae11-487b0b9065a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00cf4ab1-c6b1-468c-b2cb-068f205b7715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c71e84-466f-4bde-90d2-845fcb0f72c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6af03ed-df68-4ad2-803d-721a30d28a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e308f3-91df-46e4-8c5a-992903d7ac6c",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e94967-c2bd-4fd9-96ee-dba8718ccd0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b39de14-df2f-4a6a-88c5-c3f76c32e821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b818dca-6cbf-48c3-9cc5-f1280d6e489a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e21df26-663a-4041-aa7f-ce4e7cdd9ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49ab75c-3a25-42c5-8a1b-491b30fa311d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e651182-d45f-4e23-9289-d57f18c3ce40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a6957d-7913-49d4-a6fc-473bd3fe26b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff578d4c-e9be-4157-bdab-9e40c8bed917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcf4ba7-5084-4dfb-99c9-11b90946e5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce2272d-ff17-4777-9260-4478ddc32bda",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d27ea4d-a2ae-493a-9dd4-c73ea9ca1111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58ef854-9996-4f55-a229-557fdb432c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c4c3db-1c8c-474c-8ef4-54fdc8b87ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e92b4d-26eb-46f1-aaa8-680897135795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cae55bd-6eb8-4d49-babd-bd6cb466b0d7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f97eb7-5391-488a-8292-55de995c5b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4a0af1-9fba-4459-84d5-02aec046a01f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38dc0713-3ba9-4acb-85fe-ff8000d311d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d96949f-34f5-4517-ba36-ef8aef1d55a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9653014-415c-49f2-b86b-3295a9e9881e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa41f590-1193-40ee-996d-2f90c4454ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9dcb37-4934-4322-8b69-d2a562224edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7252cf57-7160-4e10-b141-2923c0970cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bac0a8c-7fee-4d3a-8abd-5043b740d051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06aed184-0d0a-4ee3-bfcc-65abc90ffefc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093ef718-145f-4282-8ea2-ff66d075f220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab215ba-c91e-4592-8850-e851cc884bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7760aa9-a67a-481c-b698-beea4efdf145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ca881d-1994-4c65-855b-3a2e2f2d07ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99e3006-46d7-482b-b934-668c49db004d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77e376f-ab6b-4e7e-ac14-4273f4291f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10baced-6356-45a8-b370-be577c822889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c7d94a-ecea-45f4-901a-a49d162faae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82ed329-6e92-4a00-8c99-012e9529cf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b2c246-71e9-432f-8c45-81aa65eb7d94",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bdf99e-2544-47cd-9c18-6a4a2cccc64e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a13e45e-ec6c-41e3-acd6-56f89617240d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73565cd4-1e2f-46f9-9a0c-b901ae810fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1eeda5-76b3-4151-9f7a-a74366ee9ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fa7b79-111a-4413-983b-6dfc5886f294",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85fcc20-63d9-4fe8-b13d-e4219a50261d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad9239c2-b529-4be3-a11e-ab6a46a8d5d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192ca5b3-050c-4655-9c41-41dcee77b5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04362b36-70b0-4760-aec9-34d9cc4722e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20063998-e86b-4aef-8301-f92b2d7c274a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03ded6d-efd3-4262-9a50-83ce9c6823b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e64dc9b9-a3ee-433e-b92f-e0f4d40ca283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9e8d44-af43-4c57-9a65-f44f1bad894d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d4b72a-5557-4020-89a0-e67b383c9bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a922ad55-54e0-4f7b-aeb9-fb7188edab36",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d996667c-26ec-4356-a86b-4748f5ff172c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a2b381-7064-49d3-8743-ca0d178457df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbad8db8-56a8-4cb1-8515-e645df1ee6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb11a492-2e77-4c7a-9bc9-800d7a863766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c18325-9a02-4f9f-8315-6eb77dbb1a3d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2e4205-1f3b-4b7e-b8c5-9d28febf793e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f80054d-d6d4-445e-969b-d641c3f2f1cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ef52b1-3906-4fc3-99d3-23a4e1e77382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b47811-6e5d-4a91-8b25-c2ea3687f94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfea19c-f392-42b4-8f04-5f640c503fe8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6785ba9-85ab-44d4-862d-14416d17089f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d965a23e-916b-48a5-b20d-c2b1bf3f1557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcd63f0-db7a-4bed-a12c-7d3c3673641a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa881bf-846d-4f61-8245-3266b207d757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cc57a5-dc7c-4fc3-8109-bbe9728d600c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6825e16b-33f2-4ef1-a570-c1c9bd89c87b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f0872b-dad5-4beb-9886-fbe473feada6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6874d4-d72a-452a-a4f4-0b64332d1345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab636bc-7c3a-4877-8e33-27b8a3c645dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93da031f-4e68-48a3-b5d1-9625b1c3c4ed",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f2a967-bd04-415e-b49b-ceba26a8bc85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ff3c3b-7bf3-46c4-8e81-4a27cdd5cbaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054c9d65-8cc7-48c5-972c-22d719b996df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22bfaf39-f0fa-4dc1-9128-c6e16e1fa91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d793833-704f-452b-a8db-fcc71e235ec8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d04ff8-e404-4707-8d72-fe4bb5a363d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47112bf7-636d-4bf5-9a20-c9e6c7471ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc9eada-b21b-438d-b738-f2fa75c243b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e016c83-f1a7-40f9-8b3a-d1e61691788a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc00aa1-a712-4e2a-9b37-3a75e0cd28d1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b59eb0-af75-46c7-8436-3ba112d852f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d57074-f67e-41bb-b933-aaf966a30935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bf18f8-6204-42c4-931c-17189ac4865b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4b2172-36b9-45b8-a716-947657146cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d1243b-d5a4-4735-aeea-5d7d2b21e735",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13863ef-813a-45ad-bd9e-2a1a02d6ef66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a56c4388-9f3a-4d87-9012-eec12127cbd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3246d3-7974-4182-a64c-c355051ac121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87953a5d-7c07-4bb6-b409-dd6766984be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ae6b9b-05ce-402d-81ab-f9ce61675519",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e526f251-07aa-49ec-b1cb-6cc9e4215d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e84b69-f824-48d6-ae90-044a675d2f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18aac75-9831-4d39-95c0-e844ffd1a67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22294558-8ca9-47af-9d91-7cdc55702de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32c98c7-36f5-4487-bdfd-46027bba785d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf354a35-3404-49b4-9cca-a5b068f4c5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d08620-9237-431a-a49a-199ce421b533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3510f0-531a-4603-93e2-eb659d0be7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639baaea-3f33-49e8-ae1e-e42bb08f0792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a039255e-cb3c-4027-8213-3b0a4c1b791b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbe17e7-27a7-4b36-ba44-7de24698ceef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5291fd-847c-4d35-acc6-dd07d5937191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8304fa5e-0a13-4e72-9764-0094c8a6065a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57180458-7a58-40ae-a1d1-5addaf74b37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c16e5d-53a6-43af-adbf-ee68e3904ea3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dabb310-e7dd-42e3-96c6-4c0db85dc413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b06f05a-df9f-43b6-94ad-fa9a9a7513ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a153729-2a6b-41df-94b7-bb3f0de1eb19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97df7405-e353-4c46-a46e-4ff79cd1bae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5831c7-a8f4-48f7-9858-9c829568656c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18a7f27-f45c-40ed-9e35-fb5498715da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329322c4-c57a-4f20-b816-8f2f6ee3b75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b688682e-e891-4f6e-af4c-f79d4fb3f425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48652851-b850-4636-95be-cb45bc205417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4f9b3f-be81-4f87-a35a-95dbcf29d980",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5271469-2cda-48ca-9de7-02bb23db9e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93492610-858e-40d9-a39c-c5ed5ba4190c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606f57f7-1edc-4be0-8ea9-c074c35cec37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b1188e-c801-435c-a9d7-5852e1b555f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfa4f38-1706-4d65-b680-6428ed929e13",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbe9135-0da8-491e-98e9-aff8b1cdb0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d56709-f8e1-47e4-a799-0c46a828fbd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90fdaa6-87d0-42ca-afd6-f1032ccb4c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a704e2-e6b9-4fd2-9b38-079d9886d364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64162042-a84c-488d-8b37-a02772be4233",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bca0ab-b9e6-4502-a8d1-9d2b544b7598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f43423-0abc-4852-8ee1-0af29a9fa891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c122cfd1-4968-49b2-bcac-028071e622b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5edc3628-64e0-4bf7-ae8b-8f93f4684076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b478e3-dd26-408f-8464-dc9216aba602",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d66f1b-7783-41fb-bea9-980ae291e05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961c983c-b8a3-4f10-ab48-a517dc0dd708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14ac72d-3224-4c79-b7a3-684407f54a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8bc7a3-edc3-40aa-88e6-bfd0d376ccd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090eb322-111e-4903-bea0-2fb144874c19",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7e6b06-b1da-45a1-9d04-6851987d3e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a1fa58-a133-463e-ab31-1ea91d3f2cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949c16ab-4fd4-44de-9ef0-7f8b16697ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06b9061-47f1-4aff-a5d8-802cf59f9d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efe0302-9a5d-4b48-8664-8fe3eba3d0c8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7348e748-fa55-4d52-8128-ac8099ce080b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1286f4fb-e61d-4cf7-a98a-092e41232940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1032b169-a477-4cd8-9c3f-0f4877310a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398afa74-70c4-4f45-850a-76c91e324d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d7d538-6c0d-4361-a830-c54a831d3ed1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5098ccda-97d1-47b4-8a63-2d0c88020bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686bafa4-0b5e-4a03-a586-edca7cfe8a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc83a304-616c-4262-970d-7dfd99b95909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6927084-2e8f-4654-91d8-2f3368a18ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fec885-1ac1-41f4-bd64-72aebf3c8fc7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136e61fd-e4f6-4c31-9ae2-14e74aeeca8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7ff601-f8e1-4172-8e81-d09a030c7485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e05aaf4-482e-4cdc-9169-154400d0b2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8434264a-11ea-48cf-b6b0-b96f018acd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905aed3e-7735-4023-aa1e-7f611b625f2b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f107f9-a942-4895-bebf-59bda8d48320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9412a4ee-345c-4152-8fec-37adda4eb649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48577131-84e8-4829-ad76-2a82e6aa6712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf88c48-e7ad-4356-b021-c2262edbd039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0329871a-01a0-47ec-b58b-2b7c68589871",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38534e44-8448-43d1-b3e4-6be48b99546c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409acab2-4c21-403f-9eff-ebe6c032fe46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b145f11-7d44-433f-9a7c-b181f8dfbe82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a744bf7-be88-410c-aa67-e0bacaa8145c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68012f6e-dfd7-4927-ad0b-644b310dc673",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7def4d36-e119-4a81-86af-4a8386edea2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d73300-2409-4542-8215-e5ef693ff691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea1a7ed-52a9-4d01-bda0-9577e8bcb3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51240689-faf6-416a-b1a0-318aee6c4e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263fc9d6-6110-4222-87fe-730fdf952252",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a356f7f6-d200-44be-9fc3-9adf1e805b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe0bc5d-a90b-42f7-b20d-86fcd5221cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43957f5d-ff9d-4235-b618-f071fe18ca9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f737b6-c4f5-4221-ab08-5acbf96c1b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa9406b-387b-415c-bc91-277092d9ce47",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a65f73-5160-4d1f-bac4-119bb94a8823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e54a198-70cd-42dc-a73d-5adfdc713069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d8e9b5-45d6-4aad-be53-bde4f6ecedbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad5776c-043c-4604-94b3-0dfc116847de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6598c128-c9f5-4a81-b76e-03b25eeda0ac",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d09e198-78ec-4726-a6cf-9c4195473884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bcaa80f-f002-4973-9e6b-eb38182c3cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62da566-33cc-4b06-9617-ed30d21f7f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9cb573-4bbc-41e9-bb1b-49c519332ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ffb4a9-4cc3-4d49-8df3-0e26988ac809",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfc0bea-333e-453d-be72-4710cc94c0a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b40d62c-f885-4d64-82de-b40c8a8c3dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de68513-5d55-4d46-a2c8-1e3a9fcd67ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2439a6b2-b2fd-4622-a8ef-8be924f96b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9b5148-a796-4c9f-a63d-6c9cbd8c37b4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af57bfff-bfdb-470c-b7f5-7fcaeceaa5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39eb319a-b7a7-4316-9d42-e639d823b175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d03400d-201d-4c16-970f-22d7884f6056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281267d8-82a2-4098-9495-3f9e01c8288e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119985b4-d6f9-4c71-afc0-29930bd26585",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29bedace-7a3d-492b-a51a-12ec6b63df98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483c483b-6d26-451e-893b-00e49c99f52c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0c0476-c7f1-4805-b286-e1bb8408ff70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd8721c-26d9-444a-a506-f2638f556e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d580ffda-c60e-472c-9d35-a98bf433974d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834b939e-b75d-4d9a-943e-71796b36ff7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc9cff7-c539-460a-8e54-7594fc5ec478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22ba6ab-433d-4bab-9ae0-e060a9cacf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3bccac-aaff-46bd-862e-83ac9948ad4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5eea40-1e47-40c2-af08-5facb2608e01",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f557653-0c25-4303-ba5e-f226dacb6397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8bc11b-60cd-408d-acbd-9233e39a0213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840460f5-e968-41ba-968e-556d8c70671f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cdbbb67-5541-402e-9ae1-315ba27b0df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e428c9d-93ad-4d8a-8ccb-943505c84542",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfed56ea-05c9-4769-a092-865cac4b2539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c5c842-77f3-4d78-b6e5-8e3d3459c9e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1110fa2-5afe-47a3-a111-00c78a9ee505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8388a776-6ae4-4b0f-ba04-1e277addb3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123b9597-ac1e-4326-ae33-76d258d40d1e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac377042-605c-4e8f-8f0d-1f1c2d023582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4b2dfd-7573-46ad-a7be-35b35ea9281b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac86fa12-fea4-46f8-b3d0-17d6e0f6cc99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7416d14e-662d-47ec-a079-9bbb6f621b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9e41c2-b699-4fac-ad12-4d6dee14a52f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c129d81-dea4-49c5-b230-1772da66734e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54205f30-b940-4188-a6cb-c8f467bce8da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abf926c-577c-4b50-ac05-792e357d1ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b00c0c-9e2b-44f7-ae88-edc7425d6eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba6631d-a950-4c1b-a9c7-b570870b606f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f70019-cfa1-43ab-8cbf-1f4d802c90c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c4a280-a00d-4b4f-8720-e71e6ea8e586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa6c7bb-c782-47a0-8066-15cfc8a4b8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b2f09f-84ec-4bf7-852f-abe82411332e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfdbc1f-6c5a-4e92-a2be-ddb7a7c6c82b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238991df-d4c5-4f31-a42c-2da0dd5013d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8275fa4f-fa2f-4d52-ad76-1e38c8e86450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d74e9fc-5a2b-4caf-870e-dfc53e4f62dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a52788b-ff06-4394-b880-00274e973882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dd2763-393c-4224-80ac-4cb7796c92a8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe73790-5b90-4987-b0f4-1428c95b4d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024360ff-e021-4197-a83e-a03ff1751e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25df5ef5-7af1-4c65-a077-8faba3a17a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0748ef6-50dc-4250-b10a-e5ad40f1d560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b12615-521c-4605-9f15-519293c6a73e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df9798e-1f9d-4856-a443-1eafaa727b84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08687674-e4b3-4f80-b064-dc4d4c584451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "959bdfa7-f690-4d2a-9983-957b4c710ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f50312-d3cf-4351-ab29-a655cfbea9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427786ce-51f6-4259-b54f-990939070098",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d875ace-7da6-400e-851d-46e5479ad3d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec45a43-deaa-44cb-aecc-3449b4ab62fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "507c27d7-03cf-4bcb-8462-e0fe6063b51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7065a6-48de-4afd-8617-d787741957b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16be953-66fd-4714-ac01-5071f6933936",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9389d4a-66e8-485f-80d8-48983d9e72d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ab97f9f-9c49-48e3-922e-886c247f9cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3936998b-a225-4b2b-b485-c1027838e96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6069245-90bc-48cc-86ce-06d96d63b9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335e525b-d241-420f-b6e6-ff0400c5a558",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04b0678-9ecc-4f45-a04e-8b81c7747d6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c402c085-43f5-4dbc-8852-5ed0bf76b8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311583a8-5b9d-457f-be3c-e8d2c2633672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c26d7e0-babc-4d18-832d-5ba08668da6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53db892f-f875-4a03-9606-c9b6d3c11cfd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f615f1-e3b2-49af-b05d-4127873cea9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb08d515-91f3-4214-a9f7-d2062817bbb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d38eea3-572b-4c41-aac7-39b3e7dca90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78507958-6b36-495b-ae79-1a29947d51fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e150302-b9a9-4d51-9b3a-3a54de44bb5f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7321c2b-1929-4f39-9b8a-a08a995affb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1a5df32-eccb-49c0-a408-81903e91f153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397b91f1-16b4-49ab-997a-c635517e6499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78e1a1d-03a2-4092-91c3-237f13c53404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db44d11-5b64-4b73-824b-a0be8a55fedd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9191d816-d360-4905-9100-05f52916e907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "454b1c26-81b9-440a-8a5f-71785ae0e83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296b64c2-c570-439d-b75d-44dc12952d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c56d688-898d-4747-813b-2ba25d401e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c178a80-0454-4dd9-8058-2e774b6cf5fc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892e1d25-2429-41dd-a649-c1ffb1c7b97c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2fbb60e-e909-46ee-a17d-8912ee88d9ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78e0ab2-faf5-4586-a010-7f571166265c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83655a2d-86b8-49b0-9381-bae25c70f35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f7e562-ec34-4506-a2d5-c3856289f757",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a02332-16df-4f81-8721-0c564e0baad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b9f1bc6-835a-4a98-90f2-4fa8e3ca186c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d838cd-ceb2-4555-bb16-0bc1a095958a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ad50db-4bfd-4751-983f-efd5693d55cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263d3d48-65ef-4253-9e9f-398afbd64085",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec99ff3d-b6f1-47f8-b419-cd979b3ce904",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96264966-4983-4d30-b3ec-402450a91326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4432d26-6110-4538-9797-91ec2658741b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d723dc8d-70fa-4c47-a8d8-8504c76a3372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d60bdd-4cbd-4d5c-baf9-eda7fe0ead5d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ca1834-3ca6-4257-9b3d-59f37c45bae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f350aa04-1566-41f4-931d-ae5115d937c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f6a969-772b-4c49-887a-3475f152d3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065dee32-f831-4385-be41-64343fbefe1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf1622e-ecf3-47d0-807e-55cb020c2d03",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a759c9a-7b78-4b37-884b-ad927f271255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aed19fc-4ac0-45c4-8d61-d76523e360ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd9fa7f-bf36-42bf-b80f-283fdb9451b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b6c6dc-d97e-47b7-b91c-678bf142c89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a017fda1-bde3-45eb-8b0c-0b2ad8634e2f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ba8c9b-eb7f-43f6-9b47-c3d6e8474e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15a3117b-36ae-4756-94ab-9c728a939d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a57fdf-22b4-402a-b0fc-ab2fb9e69534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25bb1931-2787-4f6a-a8ba-c858c9c33ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f12e8f4-d28d-472f-a610-ba9d9eda4ae1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b35a5c-c68c-47c7-9782-2263c65d8956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f71af4c9-1661-46f5-9039-482db79fcf4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbd5d5b-c7f6-4ab2-9306-1f3086cdcd5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c1fed6-86d3-414c-9aba-73479ce128c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d030c0-d907-485b-b718-7af03d69904f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e3015e-7c00-4262-98da-d96cba35cd42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb3793d-cf2a-4e1c-aca5-192616f21b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0544e2d7-7581-40fd-9146-e1aabdf97963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d149f8-cf37-4030-b54c-989d4298e00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abb1370-4a51-44a7-b112-1ca449d48336",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befa9e24-6017-4048-ab46-0688de7490a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4685c61d-af96-4779-93ac-88894f425274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26f8d44-3195-4408-879a-10a7fab964ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31157f3-fb96-4f68-b618-6e5e5ec29351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b05508-feae-44ef-8dff-200b13f48aee",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfdd71c-a489-45cf-8c65-dd832993044c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278ba585-679f-4219-be7d-f7adc5fca734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ac4a25-224a-4311-a1cb-61c2958efe90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac983833-efa4-4a38-9d8c-030735103067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25041de2-8ea2-46eb-84ea-dd0f1fd3e255",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c58a67-651d-4dae-b8e5-4e9c28382a45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7ca069b-0881-4761-813e-0db0f4795484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af48b8c-9217-4fff-a381-84da3bb16c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a5a1f7-7418-4e04-8ace-b633f69d81a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb3f316-6a95-42a3-9918-ada4926b01c6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dc4855-0bfa-448f-93a9-05842d44fc19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a5241ab-4a6d-4ff2-9183-0252c639a1a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff928008-0944-420e-9ce9-1bb4e7312a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd21a3d5-72cc-436e-b63c-229297d62ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1597d2-2234-489a-8079-0cf9c3000d50",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b2ec09-9636-4799-8fe8-912ac701b622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d6bae3b-7cb5-46a8-8d98-42d9d1c8096f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f5e87c-45ab-44df-8e06-11dc0f025919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2667d7f9-7635-47f4-8534-1b8e604c7716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03e6fe5-5e01-48ff-bba8-d866ce201364",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7f6590-b916-483c-b3c8-719309a093f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ea70c5-a447-4000-9b71-a10e04bdd884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a69ad40-fd31-4b88-a9aa-5066934ff905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f859305-9179-40a7-bbf7-6d3317fc2368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ac52ee-11d5-4bb4-b0cb-f9fd909eba74",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7d955c-5132-4c6c-85a9-65f54a778ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65b1f7f4-e29f-4761-83fc-fe21d28b0df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49e1bf3-0093-4c26-930e-496b9ad0d2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ace806-b044-413d-b625-e1538f54f720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78102391-1991-4a89-aeb7-7843b8fb04b0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3dfb1f-2357-4f9d-bdd2-7e350a25affe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d84c19-7572-45c7-bb95-11f80a626231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e76099-4ec0-4cbb-abd4-68c94f077e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa471e7-b579-4ae1-834e-79f94e4524be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462041d4-09bd-4687-be16-e521a083b7f2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af5c162-183f-47c4-8a39-65c4440860e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a49db44b-a80d-4feb-9dd6-39abae5af4da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590b57a5-5ae7-46e8-9c50-3cf73aecfd7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c26f1f-7181-40c4-865a-5d3648425179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ea7c8e-7e77-4028-a139-79a5b3f84dfc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e4c29e-32ff-43ac-9d7c-6f25a3167a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c4fb47b-7a9e-4b2f-8116-8468eb0a426f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123c89f8-8d27-4fc7-bcdc-0b666f9df13f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c70c2a-ab59-46cd-a7bd-f55dc84fe267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb0326b-778e-4311-bce2-cb146bc01255",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaba0ddf-870f-4d49-8004-7c1bcc3e3082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "631697e8-4b6d-4d53-88ad-9004ecb293c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e447c6e-b46e-4e83-8d60-7e66d6d78236",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b914392e-b7f5-43d6-8670-c37bba05486a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23599a02-34ff-4950-bd15-f47a011aa3a1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6baee2-6ae2-4f06-b1c8-68766b733347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f80699-acb1-4dbd-99eb-9bc40a42cffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2da935b-05d7-4eff-a552-f968d643ffbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67e6f11-ee64-40c2-a3d4-a6ebcf8c8bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d556f24-a3ef-44ae-98c4-7c06ecc8f3b0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fbc138-87fc-41a2-b73e-573b772f3770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8154eb42-a0f4-42f0-bd56-3e58df617df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ce8e5e-fc94-45a7-84c3-89d799a3698f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01821185-c765-4df4-b048-ee824321fa7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545ce9d6-e512-4709-96fd-dea7783e0188",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b798a43-0f83-4da9-afe2-067596228813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "069902d5-9f3f-442a-96ff-440b2d8000a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f05da7e-58f5-4049-a2b7-b51001a9b680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4c0dec-f4e8-4d98-9f29-ddeb14f70df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6806e4aa-50c4-4729-aebe-6f3c3a3d844b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c0876d-8cb6-42f8-9429-32bcb0c5c4bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa8beb5-e8a0-44fa-8e80-e479ff40996e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dff818d-1b98-4ac9-ab57-6fdf5d803b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5911004c-53e2-4ce8-9786-323dabb974d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24be5d7-0bbb-442c-aa0f-e63a4d6d1866",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affbf30c-9349-415f-ad7b-c1507a30a690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9074c7c5-4c51-4619-954e-7d8b49d66ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e9b084-3b71-452a-9abb-d196cdeefa52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da0ab6b-27a5-4398-88b4-790bf4690d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02dce90a-6ade-4777-a3db-bcdde8a36e2b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6908b5-0010-43b0-a6c5-59262732395c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15159ce5-db37-4a8c-8687-05403a1beeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e352ba4-e427-496e-b5e8-818f81d522d6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf31b478-9b60-4288-b4da-94579d1cc9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81118d3-2a5a-4c13-9c35-5a064628cb33",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c9a910-263a-4753-8504-a939df7cc536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31043766-b687-4852-87e4-507751b85dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635965db-8b80-41f6-b982-319200fdac00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd90cfb-007f-4092-8f0a-3f996c6a0448"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a866e185-c5f5-4560-9160-3a467b3f539e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa4a4b73-16b2-4a6d-8523-6a0096a3423f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "485519be-9cf0-4c2b-a120-bb72b7bbcfaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecfc386c-dc0a-4116-b865-6f8acb30ce56"
                    }
                  }
                ]
              },
              {
                "id": "e54e81ce-f38a-4009-be65-21eb0b96f638",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6acc342-7634-485f-bc88-df851ff19eda",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb384dbd-0839-47ee-9634-a6cfeb7a201e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4695ad58-f8c1-4a37-a916-55d64878a3a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acfd6bf-3bc1-45fb-ac05-e3701d35a372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83bb6047-cec7-4b0e-acd0-ae8e7a1e3dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf8c978-96e8-43cf-948a-cbdd66ca4763",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812bdea7-f566-4eaf-9c93-45b6f40fc778",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "672b6144-990f-4ae4-a49a-27519dd63974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433e454e-06eb-4ab7-8700-12d19b27518b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7b61166-6ce8-456c-8378-9eaed6f94be2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "463b21c3-a07a-4f89-b0f3-51aa66af08ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "284d3c06-9f7b-412d-a8a6-68b84588e7ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee503028-34b6-43c2-a7b3-a9ec8fae4ff5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1904e7d1-6996-4022-a4c0-292b5e84db19"
                    }
                  }
                ]
              },
              {
                "id": "e4b5c51a-34ca-4ffc-b15f-228af7493c28",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "01401cfc-ec66-45d8-9f5b-fe8c4eb82f87",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de1ba9a-4d3e-46e4-8c6c-60a811a0fa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "330f3524-f7c1-477c-8214-9d1c768f6312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba046e7-4800-4e75-8dce-1bbb6fa0637e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49210d3-dc53-4ae1-8e44-d8691fc6d68e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "91cf43c0-2ac4-4f84-88af-562c6057b34d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "27d2cd80-b2ab-4899-a763-c95609c5b74d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2c0af66-c462-4d17-8cac-965042a54083",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6902a4ab-cda2-4638-ab6e-7c2c0d35f827"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69e5bd0d-bdea-4187-b5e7-5a65fb6615b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9652a021-0463-4518-b94e-a748f687a187"
                    }
                  }
                ]
              },
              {
                "id": "655b0c86-c039-46fc-ae7b-1374734e0167",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6edaa0b0-6396-4187-a52a-26b69eb3b611",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2a06430a-f5bc-48ae-8927-b0cdea0453e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3e033c1-9d80-41fa-923e-1599f707fb81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8cd80db-4c9a-4fda-b083-856788aa2dde"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c210006b-7967-4718-88f6-4fed9483b5fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f8a51a40-c5cc-475c-8cf5-b3e36dd04db6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b882fc57-2b9f-4a36-9561-b60d41d4ef85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c49e4a65-109c-4e5c-8588-051b8fe68149"
            }
          }
        ]
      },
      {
        "id": "78a80331-3bcb-45ca-b803-d602f0eaaf70",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dd1b18e5-0d77-4d49-9d85-6cb548092c4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93e57e02-ccf1-4234-abac-88a72b2157a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c85cb61b-be0f-48ef-8ecc-af6c90cdb47c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff4c46d-9cea-4c41-bfd2-abb6fe74a320",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5d6c9c0d-1683-4e0e-8ec5-26d38485ffde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b817c9-48ef-455c-8de6-cf7a0c6ed29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39578122-a867-43af-babc-834b21753167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6514677-bd8b-463a-92f5-ad6805872afa",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86915ff3-043d-48b7-bf62-398ed08e37f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bd7f1fe3-2064-4ab3-8323-1888ae4f66f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639b3473-013d-4ea5-abff-172cee44bdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "258bfa03-83d6-465b-8517-cdf96a029cf2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35667509-b391-47e5-a738-63dee6b61914",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b0f1dc4-1552-4dab-bb24-d18cea78ec1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70dc8430-0907-44bc-8169-e80888f6fe3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c83fdba2-f51b-48a1-a473-ce40c0d46920"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d844e49-4ea7-482b-a756-c96cc18eb91c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "73668f24-ef0d-47e8-9544-b83cfd5e11d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4ea1808-c6f7-4669-a568-11522a794c4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7440041-3327-43ce-98b8-d0023007b2ca"
            }
          }
        ]
      },
      {
        "id": "40415129-17e0-431d-a96e-9bae9ad48a1e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "30f5065d-2f69-4249-b1ec-6f10f1822034",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abd5f9f2-d088-45da-9f7c-c3f0391de936",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "efacac42-0240-418d-a07a-4f260aa03371",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ec7544-c03c-4149-8131-a3f7ff17ddb9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c226d069-d78b-49af-aba2-c09f0cfad414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cfb423-577e-49c1-ad6a-38f857283d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "406c7123-84b4-4891-beaf-2527d636a410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64519c6-2868-4cb2-b39b-3d4477ce33a5",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527809f3-4acf-4f09-bb00-5f5504a22bbd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "03a6883e-dd5f-4611-9eb7-fb7da2cae832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4173c37a-71fe-4ea7-8cfd-7c076ded5c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e6df95a-56b3-47a8-93ee-f0d5ff495120"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ed8683b-c243-4f1c-a08a-623cee67b071",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e12c489-0ad9-4d1c-9471-d96c1e9763e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec9079b-63d3-43a1-a007-07f647e169cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "236813a0-9c65-4e0f-bd0c-8d150ac4055f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4875e08a-41e1-4201-b10f-96d7694e72b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2e3032b1-3c4f-4e9b-b02d-165eba179851"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "297e9361-6fee-4e62-bf09-dc497b7d015e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75b5efb2-434d-4e36-b3d3-9d08b8f422ff"
            }
          }
        ]
      },
      {
        "id": "5a0ac733-6f3c-47de-81ab-6d83f269da01",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3eb0c6b3-6f75-4017-b0c1-44a03dc988ec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "247aeb5a-ac64-4590-b07b-e0da3c08f5ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "795841ca-3a7f-494a-a37c-21254ea6a510",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd915e3-71fe-45ac-b454-534415939d06",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cf76b09c-09e7-4b3f-9baf-ce4c67cfdf35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43135bb-d551-4b62-bc12-85643a072c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f4bba1f-6d39-4aa2-98a9-7e94a92a2705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c27a25-0c6f-4850-8983-2ecb485ff582",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517d65b3-f87a-4b3b-ab9e-ecc5a37eadac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "857f4de4-beba-4796-8936-fa447bd605ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21d354f-1fa3-4c20-b713-ab6cb377057b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca257259-63e0-44ff-8dfd-e2818ebb6539"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a71089e2-6de7-4a4e-89dc-995929ab0bea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92ad5e73-479a-4e8f-a276-0fcf6ed58293"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fe7ac81-25e1-4fda-8c94-686dc5e88f74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c92ab86-ce2b-4441-8862-6c3122465346"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3f5ddfd-182a-462e-884f-1ef732493a71",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4c0ff6d4-47cd-4fd3-9f25-c49207479b88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b150e02a-fa96-488a-b786-ea93a5cda3ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43e839e9-32c5-4f7b-849c-21cfc3d64e82"
            }
          }
        ]
      },
      {
        "id": "9982fde5-5ee5-4351-b080-152c29174f5e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4e2ddae-349a-4c9f-8142-05770b89a564",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b59e4a8c-3875-4277-8a25-de6eab15b0c5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "25f4f040-395a-4133-a4cb-767972df0f49",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31bc10b7-5039-42ed-86a9-f20d76f9078d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bde825bc-5653-4f02-8dc6-335dabd5411b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 49
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 231.01027927896135,
      "responseMin": 10,
      "responseMax": 3347,
      "responseSd": 557.9455505932366,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676498282949,
      "completed": 1676498355941
    },
    "executions": [
      {
        "id": "fc5df416-8cea-4c54-8840-d8136bdfb87c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c4afd61-bf60-4d7d-8fff-374b8b836cd9",
          "httpRequestId": "b4e4a206-ae2a-41aa-97f6-e28e50726d61"
        },
        "item": {
          "id": "fc5df416-8cea-4c54-8840-d8136bdfb87c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "581d5591-9ef3-4af0-a957-4235df7ddd19",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "e0d60138-195c-48c8-b45f-f12926d2ea9d",
        "cursor": {
          "ref": "ffd65e30-4b49-4ed9-9a9e-9b524e864331",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "74013c43-70d1-4d32-895a-a76598619bf9"
        },
        "item": {
          "id": "e0d60138-195c-48c8-b45f-f12926d2ea9d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9adec695-f41a-4426-9300-ac4fd638353f",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "e8134b1f-e463-466e-8223-cc56750505fe",
        "cursor": {
          "ref": "7505ff4b-43cc-40ee-80b4-42b1f7bf0f64",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "59017588-3706-4b74-89ff-1e19daea0c84"
        },
        "item": {
          "id": "e8134b1f-e463-466e-8223-cc56750505fe",
          "name": "did_json"
        },
        "response": {
          "id": "e2d8d654-4ce9-41a5-ab94-4c5894591da1",
          "status": "OK",
          "code": 200,
          "responseTime": 301,
          "responseSize": 1290
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d99a94-6b12-4923-8f1c-9c34c04ab704",
        "cursor": {
          "ref": "92b3ec5d-d23b-4018-b07b-e40d00a30dc2",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "caa89ff5-b18b-4ce6-8b15-28723913c6fc"
        },
        "item": {
          "id": "28d99a94-6b12-4923-8f1c-9c34c04ab704",
          "name": "did:invalid"
        },
        "response": {
          "id": "a46a0bce-6d31-4875-b87f-70dc8fbbf1b1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 386,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "28d99a94-6b12-4923-8f1c-9c34c04ab704",
        "cursor": {
          "ref": "92b3ec5d-d23b-4018-b07b-e40d00a30dc2",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "caa89ff5-b18b-4ce6-8b15-28723913c6fc"
        },
        "item": {
          "id": "28d99a94-6b12-4923-8f1c-9c34c04ab704",
          "name": "did:invalid"
        },
        "response": {
          "id": "a46a0bce-6d31-4875-b87f-70dc8fbbf1b1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 386,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a710a0ef-78e1-4e4b-97af-0b7bed720867",
        "cursor": {
          "ref": "a4f79b05-0acd-4b5e-b315-2ff472ba948e",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "04ab8108-4c50-4ec3-9598-b4a765682a33"
        },
        "item": {
          "id": "a710a0ef-78e1-4e4b-97af-0b7bed720867",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6511e345-351c-418d-933f-95d64f2cbce6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbb40d6-bb8d-4e69-a349-2aed76020b44",
        "cursor": {
          "ref": "82fa47c4-5efa-4c10-b4ad-f0499005ba5d",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c4c035fb-04e5-4b83-ba53-673b4867e37a"
        },
        "item": {
          "id": "8bbb40d6-bb8d-4e69-a349-2aed76020b44",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "08f6671e-6257-4810-939b-37946945d01b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f795dc-7d91-4662-9888-ee019f60bc76",
        "cursor": {
          "ref": "5b646b71-afaa-4b66-ae26-88091c193933",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "73e12e8b-57ed-4052-94ff-b9d9c8700696"
        },
        "item": {
          "id": "02f795dc-7d91-4662-9888-ee019f60bc76",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1cd79249-3fea-4925-b263-293e7d88e1b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "99775055-e430-4e11-b5f1-c3399f425f01",
        "cursor": {
          "ref": "f5bc2482-ee55-4477-a4cd-e1d73a27ce28",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8b0c8bd3-09b4-4be1-b239-d4511effb960"
        },
        "item": {
          "id": "99775055-e430-4e11-b5f1-c3399f425f01",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ac34ea6b-7f8c-4ada-b46c-a0e70036b8c9",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "99775055-e430-4e11-b5f1-c3399f425f01",
        "cursor": {
          "ref": "f5bc2482-ee55-4477-a4cd-e1d73a27ce28",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8b0c8bd3-09b4-4be1-b239-d4511effb960"
        },
        "item": {
          "id": "99775055-e430-4e11-b5f1-c3399f425f01",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ac34ea6b-7f8c-4ada-b46c-a0e70036b8c9",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c504f2c1-ca34-4eb2-8967-c866d3f50f77",
        "cursor": {
          "ref": "e1a45bf1-794f-412c-a7c7-394e3e383a42",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "34dbf07a-cc2d-4173-b9b9-caa35bd95ecc"
        },
        "item": {
          "id": "c504f2c1-ca34-4eb2-8967-c866d3f50f77",
          "name": "identifiers"
        },
        "response": {
          "id": "ab3bc650-0b02-43b6-a407-03cdb0888603",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eaa90b-1f6c-4f11-af78-aaed7e7d59c0",
        "cursor": {
          "ref": "b05d625c-1f99-48db-9003-a3b688d31338",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "df9c9ef5-1b71-45d3-8f30-43309e4ee2f7"
        },
        "item": {
          "id": "d3eaa90b-1f6c-4f11-af78-aaed7e7d59c0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4e858311-4e47-4cde-878c-80882da6bae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eaa90b-1f6c-4f11-af78-aaed7e7d59c0",
        "cursor": {
          "ref": "b05d625c-1f99-48db-9003-a3b688d31338",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "df9c9ef5-1b71-45d3-8f30-43309e4ee2f7"
        },
        "item": {
          "id": "d3eaa90b-1f6c-4f11-af78-aaed7e7d59c0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4e858311-4e47-4cde-878c-80882da6bae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d2c696-7c40-4f3d-b22f-709e766e8456",
        "cursor": {
          "ref": "c739b10d-d9d0-434b-986d-da388cd08703",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fb1e6f85-a322-4b4b-be05-ad99a486f3ce"
        },
        "item": {
          "id": "38d2c696-7c40-4f3d-b22f-709e766e8456",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0c926d19-556c-4ff8-b2cb-2b1c3311d48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffc0b43-7717-4c84-a35f-0d83a5abc411",
        "cursor": {
          "ref": "189d2ce3-55e0-4b8b-9289-8166c873dca0",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "828be76e-0836-4b11-8480-2562cf947f20"
        },
        "item": {
          "id": "cffc0b43-7717-4c84-a35f-0d83a5abc411",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "80037f91-114f-4a99-a596-c5eb9f6ebb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca25d68-b8d3-4e68-a169-e83e4fa86866",
        "cursor": {
          "ref": "36a38d25-cb5c-47bf-bef0-83a132d63905",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a1df4ade-cf58-4913-9fb8-fcbe5d20bb97"
        },
        "item": {
          "id": "eca25d68-b8d3-4e68-a169-e83e4fa86866",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "57c1d365-f348-4914-bc82-1be767b96716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0272abf1-3b48-4f47-b16c-437d00ffbd22",
        "cursor": {
          "ref": "db3df60c-bacf-4533-b91c-42f10e9dc78d",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "daf96b33-a3be-4020-ab98-429a57234774"
        },
        "item": {
          "id": "0272abf1-3b48-4f47-b16c-437d00ffbd22",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5e65f505-7ba4-40d8-afb4-d69d48e1fa53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1791f38-63fc-4564-a147-15ae7b95a9dd",
        "cursor": {
          "ref": "c0b89140-8e9d-4abc-b3e3-95a9fdce5887",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bc65fb51-57d7-4021-9aa3-b5932ceeea77"
        },
        "item": {
          "id": "b1791f38-63fc-4564-a147-15ae7b95a9dd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3dcdf412-b240-4f6a-877f-a527b8a7e438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9700b46e-98f3-4683-b45c-f6d839ff9369",
        "cursor": {
          "ref": "dc041631-07ee-4f32-b859-fab39d393ca7",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fa1ab4fc-393d-46dd-840c-85741236f226"
        },
        "item": {
          "id": "9700b46e-98f3-4683-b45c-f6d839ff9369",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "759611de-005a-42c3-a067-cc2793d29f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43579ce-620c-4fa0-bb81-e0845de856a5",
        "cursor": {
          "ref": "1685a5cd-86ba-491f-8a77-811fd93b70b2",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d727fe09-8e07-46ec-a355-9e5ba3ba177c"
        },
        "item": {
          "id": "d43579ce-620c-4fa0-bb81-e0845de856a5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fd633f5b-504f-4116-8f95-579e6a2143bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e845e3-19a7-4c09-a631-e8166490c050",
        "cursor": {
          "ref": "548c4e59-b58d-4277-bc15-40950cfdf72d",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "408389a8-4c26-43b0-aa5d-2cfc9deab01d"
        },
        "item": {
          "id": "53e845e3-19a7-4c09-a631-e8166490c050",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3880b1ab-6b58-4538-a8c3-e021282beaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d07a0f6-ddb9-4ef4-86bf-917b5831f377",
        "cursor": {
          "ref": "f971cf74-71fe-4a9d-a7ae-571b62974a7e",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a9e8029f-a05d-4ee7-93a8-bb3f76b25638"
        },
        "item": {
          "id": "8d07a0f6-ddb9-4ef4-86bf-917b5831f377",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "70be1c57-da93-4d39-a4cc-4078d66b60c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b73a98-d188-4444-8294-95312acfb735",
        "cursor": {
          "ref": "d916f21c-d9bf-411d-9a69-e8f01b968fa9",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d9d9f63b-5ccb-4d8b-a6c1-9d728b1ca636"
        },
        "item": {
          "id": "02b73a98-d188-4444-8294-95312acfb735",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "73520c08-0171-4db7-90d7-440c43b61c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f5ed76-3542-4445-8e31-e741c7ede34d",
        "cursor": {
          "ref": "3d5bfff1-28eb-4475-9fc7-097dff29729f",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "027127d7-2da7-49fb-b51c-9d784ee24549"
        },
        "item": {
          "id": "49f5ed76-3542-4445-8e31-e741c7ede34d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b9d2fbc9-a6ba-444f-a107-05270ce1083f",
          "status": "Created",
          "code": 201,
          "responseTime": 496,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "30040b88-9a82-438b-a9b0-393001391a60",
        "cursor": {
          "ref": "7c06c0eb-aecf-4815-9faf-604f1bc247b3",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ad3f63db-6490-45cb-8f16-9795acd7b13b"
        },
        "item": {
          "id": "30040b88-9a82-438b-a9b0-393001391a60",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "a1135688-aa21-4e28-b29b-e642f5770430",
          "status": "Created",
          "code": 201,
          "responseTime": 3347,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ffdbe197-f813-4da7-a568-da7150dc0528",
        "cursor": {
          "ref": "72d7b725-da09-4d3e-83c7-669bceae4fb6",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "95cf42c3-f0cb-4b79-a353-f3e522374af6"
        },
        "item": {
          "id": "ffdbe197-f813-4da7-a568-da7150dc0528",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "31ffa083-13f8-4801-812f-da8de3e857a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a4a5bb-8c6b-4d0d-999d-84f84ad49a2c",
        "cursor": {
          "ref": "256a20fa-a3d1-4a07-b294-db0e3b9f3e3b",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "29e1fec4-3ff0-47c5-b15d-a790f0c7c12c"
        },
        "item": {
          "id": "58a4a5bb-8c6b-4d0d-999d-84f84ad49a2c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c2b7a717-5c6a-4ac5-8a0b-b7470cd74f5b",
          "status": "Created",
          "code": 201,
          "responseTime": 2420,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "8cce9c46-f147-4dff-b161-1123e1395a09",
        "cursor": {
          "ref": "56d4cd84-67b6-4f6f-973b-d7ae585250b5",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7d1d262e-a55d-41bf-b89c-6e804e93af75"
        },
        "item": {
          "id": "8cce9c46-f147-4dff-b161-1123e1395a09",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6ec75038-cd39-4835-9ce6-3f18e4733325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09006fe9-f0d8-44ff-92d6-c7ed1e5ee270",
        "cursor": {
          "ref": "9e595efd-c939-442a-8ef7-bac735bbcae1",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "16f9e30d-3969-47cf-ab18-114c8c8984a3"
        },
        "item": {
          "id": "09006fe9-f0d8-44ff-92d6-c7ed1e5ee270",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9140cd82-0543-418f-a8df-94e74d51eabd",
          "status": "Created",
          "code": 201,
          "responseTime": 2231,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "89c6ed31-a992-4e69-bbb8-013d06b5de19",
        "cursor": {
          "ref": "6dc33e3a-52b1-4f09-8182-9759791fef76",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "55564cd6-9894-401b-badf-246062b447a9"
        },
        "item": {
          "id": "89c6ed31-a992-4e69-bbb8-013d06b5de19",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "724e07e6-2dd0-4c09-a908-a3ea78a3dda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7e864b-e11f-40ee-b2f7-69dff05a466a",
        "cursor": {
          "ref": "33f9338f-534e-43e2-93aa-f3c4ca9f2b07",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e1cfcea1-b5a8-4a08-a650-a3c42a22d270"
        },
        "item": {
          "id": "0b7e864b-e11f-40ee-b2f7-69dff05a466a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "556688df-925e-4518-a54f-069bd0a20a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2defa3-1014-4527-a553-44f49aa82f7e",
        "cursor": {
          "ref": "0a1636c4-2f77-43dd-8033-f635270c2134",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "972f9be2-c139-402d-9354-38fc5c2acd89"
        },
        "item": {
          "id": "2a2defa3-1014-4527-a553-44f49aa82f7e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "91f64381-b0c2-4e6c-a99e-ab754f1d4aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f5609f-e17f-4acf-bab9-705ade22419c",
        "cursor": {
          "ref": "f72968ad-c927-42a4-ab36-84d47d2712f4",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "096d9220-3bbf-459a-9973-4711d3c3f3ce"
        },
        "item": {
          "id": "b9f5609f-e17f-4acf-bab9-705ade22419c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "63ee93d6-cb0b-4b30-aa32-889af5a78be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b70d8f-7b4b-4a9e-8f00-680eac047480",
        "cursor": {
          "ref": "642e2123-2cf9-4cb4-b270-4cc2d48d2170",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2b3f0ea0-98f9-4e13-ada8-5a4362cd4e89"
        },
        "item": {
          "id": "43b70d8f-7b4b-4a9e-8f00-680eac047480",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "14ad717e-becd-4ddc-9cd4-a3f3def0b31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ab3f28-31b2-4e9c-b0ce-e4405e581f9b",
        "cursor": {
          "ref": "64e99c18-8704-44b6-945f-88e482a85af2",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6f978b5b-e568-4402-9a63-875bd3656b36"
        },
        "item": {
          "id": "e0ab3f28-31b2-4e9c-b0ce-e4405e581f9b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ffcb9ac3-8f07-4394-8065-a7f76c92009a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd01236-f0ab-4b3f-afe3-8da07c132a14",
        "cursor": {
          "ref": "6db8c927-b056-4b17-b30b-40f1c4d4bc3c",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "087c54a0-0e76-4dde-b04b-0f2da1d054eb"
        },
        "item": {
          "id": "1cd01236-f0ab-4b3f-afe3-8da07c132a14",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "44637e2f-6c39-4f92-a692-e11ebc44b338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22571bbe-4b94-4398-98ec-f3b5a8aa29d3",
        "cursor": {
          "ref": "617332b3-d12f-4b03-a6e8-089269498e07",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f593ea37-c374-4b1c-99e2-a8e91e98e7d6"
        },
        "item": {
          "id": "22571bbe-4b94-4398-98ec-f3b5a8aa29d3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4ede3ee4-cad0-44c7-9658-8daefe051e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d672be8f-850b-45ca-ac28-1db99e311c6b",
        "cursor": {
          "ref": "6991fe29-0a77-44ba-8859-b3e209dbe0ff",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "46bb6b77-a0fe-42cc-a24f-aeb1a0a92bbf"
        },
        "item": {
          "id": "d672be8f-850b-45ca-ac28-1db99e311c6b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5e52260c-7e1f-4c8f-879f-58e63d58c52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5475af7e-2947-4a3f-9554-49a6a34ea8dd",
        "cursor": {
          "ref": "abdf3a51-05f4-47bb-8872-928e44b16aed",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "53bd102f-cc49-4dc0-9f06-954be49971cd"
        },
        "item": {
          "id": "5475af7e-2947-4a3f-9554-49a6a34ea8dd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a817b4b6-18f6-4668-aa4a-b1765ceaf3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0020b7b1-bacb-446c-989d-8eeb7e7f4018",
        "cursor": {
          "ref": "0f0b0539-f052-4ab1-ba15-53eb3cb7a59c",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "05f12728-882f-4b85-a636-dc73709cfb14"
        },
        "item": {
          "id": "0020b7b1-bacb-446c-989d-8eeb7e7f4018",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7012e092-0a76-4889-b3b4-63cd2fa78e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef136ff2-498b-498f-9bad-2e42a5693d25",
        "cursor": {
          "ref": "7b11a053-0497-43e8-b271-73165071d93e",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "682a0e57-8ce8-496e-8f42-f1c96a3afab4"
        },
        "item": {
          "id": "ef136ff2-498b-498f-9bad-2e42a5693d25",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4aa563c1-4aa6-4fb0-bef5-5b5b79f54e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e2dee6-542d-4865-85c6-a3c13f74f5ba",
        "cursor": {
          "ref": "059d2f72-dced-4ef9-9af6-a5e7731d669a",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fb94a6c1-7875-411e-b188-af005e699317"
        },
        "item": {
          "id": "98e2dee6-542d-4865-85c6-a3c13f74f5ba",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aa18fa8f-4019-4ac8-ad82-b6807e96fcd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a99d5e-7b60-4d9e-82e3-f970d75ef128",
        "cursor": {
          "ref": "422d66b9-4f0e-44de-9790-7279dd9cdf05",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "aea4d143-2b44-4b0d-8452-b521f64aa71d"
        },
        "item": {
          "id": "24a99d5e-7b60-4d9e-82e3-f970d75ef128",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "368188b4-3f81-41d3-bb2b-8a68378bb984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24ee526-6669-4df1-8cb3-edff4b71106b",
        "cursor": {
          "ref": "d6aca03c-8439-4014-a8f7-a52fe85d104e",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8468c9fe-adb8-4903-bef7-938fe7877ecb"
        },
        "item": {
          "id": "a24ee526-6669-4df1-8cb3-edff4b71106b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5ae4afc4-94a0-4250-bf94-5ab85905c8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fe01ae-63ff-4353-9140-ee175f353d47",
        "cursor": {
          "ref": "d64e48f1-7cb5-4891-9d44-21f43f3bfeab",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7e522745-c6e8-4d0a-949a-89b76d490d14"
        },
        "item": {
          "id": "74fe01ae-63ff-4353-9140-ee175f353d47",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "438f6a03-a175-4e49-a86a-c314e606ce87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c4e76b-8fc9-476e-8a64-c2916ee74add",
        "cursor": {
          "ref": "f5d44423-1d3e-4ad3-86cd-44c8285d3126",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b18905ec-f5dd-4704-8ea7-54e4c1e91e24"
        },
        "item": {
          "id": "72c4e76b-8fc9-476e-8a64-c2916ee74add",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c3bb7b4c-908e-45d7-8f44-217c3982b19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9edadd-2e90-4531-aec9-c0987bb6e919",
        "cursor": {
          "ref": "40e4a06d-7782-4480-a46d-24dbc5a74219",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "56626b2a-fb6e-4dfe-b19a-c2351bae4b6b"
        },
        "item": {
          "id": "ce9edadd-2e90-4531-aec9-c0987bb6e919",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e6ef9a3c-6ec1-418b-ab07-0eccfcc360bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e28045-8295-4cf2-8508-3af6db6d4df9",
        "cursor": {
          "ref": "4711b267-7724-46a3-903e-b25136fff66d",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f8771209-ee2c-43c3-af57-80148d5e3995"
        },
        "item": {
          "id": "33e28045-8295-4cf2-8508-3af6db6d4df9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8d502167-a5c9-4731-9108-5460f1f24551",
          "status": "Created",
          "code": 201,
          "responseTime": 2209,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "14bc08f9-95f3-47ec-9abb-ddb32d5ccdfc",
        "cursor": {
          "ref": "cbc7fc7e-efa0-4a91-8fe6-84f1d28655cd",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2f1b4528-ebfa-4f46-a8a2-b17781c52f47"
        },
        "item": {
          "id": "14bc08f9-95f3-47ec-9abb-ddb32d5ccdfc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "69f9faff-1c59-408c-8322-8318e8e80e74",
          "status": "Created",
          "code": 201,
          "responseTime": 2222,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0e93b5de-370b-451a-a1ab-efbf2a8df4f9",
        "cursor": {
          "ref": "cbf69090-cb8f-45b3-864a-52234e1a0085",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9339b54b-2bd7-4c65-8610-a71411ed5b8e"
        },
        "item": {
          "id": "0e93b5de-370b-451a-a1ab-efbf2a8df4f9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8a61d3e8-af86-4745-a316-bda2586bf209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8a23d6-3dab-476a-8a81-e36747b2f791",
        "cursor": {
          "ref": "e0559546-2438-4c9b-8847-d91ec97a1d61",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6aa34184-6e24-4fc0-a104-30b687d55a76"
        },
        "item": {
          "id": "da8a23d6-3dab-476a-8a81-e36747b2f791",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "462322cd-f615-4423-bb14-83fff3688509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f8a91b-896e-4e41-849a-e5a75f6a8299",
        "cursor": {
          "ref": "7dcbb2b8-9294-4913-8656-c092c65d0500",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f9188cb8-7804-492c-8061-4c9c037120e2"
        },
        "item": {
          "id": "93f8a91b-896e-4e41-849a-e5a75f6a8299",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "841e2824-b8d5-48a5-a7a7-5edffa116ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547dd84b-30cb-40b5-90b3-cd0b70d7edba",
        "cursor": {
          "ref": "f57154e6-f151-4206-8d32-5e4d198a8af9",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2a2da169-33b8-4e26-a3af-5bcf3972e0d9"
        },
        "item": {
          "id": "547dd84b-30cb-40b5-90b3-cd0b70d7edba",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "598cd824-d102-46c5-825d-f999b97e85f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0824e163-e7e8-423c-bb2d-ce71ac29a6f0",
        "cursor": {
          "ref": "88c13a6b-cbc1-40ce-bd71-dc87365c4906",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "16c367f2-6472-4922-b396-1741f639574f"
        },
        "item": {
          "id": "0824e163-e7e8-423c-bb2d-ce71ac29a6f0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7a7b6285-7057-4f11-98e8-1a941629f968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457773f0-ced2-459e-894e-84397709f2fa",
        "cursor": {
          "ref": "c04db0d8-807e-4088-a225-021e83157e5a",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f6c1c43f-df8c-4c4e-b3bd-0d97997f4ee2"
        },
        "item": {
          "id": "457773f0-ced2-459e-894e-84397709f2fa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ff45d55c-218b-4382-971c-0df394757c32",
          "status": "Created",
          "code": 201,
          "responseTime": 1880,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d49f6fc4-0a86-4dc3-b203-74938c47ff5b",
        "cursor": {
          "ref": "843a9e23-2af6-454a-ad09-8c9823e0548a",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5ea32861-c631-4707-82a7-779a80a4ad89"
        },
        "item": {
          "id": "d49f6fc4-0a86-4dc3-b203-74938c47ff5b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "02f9fcb7-9e0f-4ccc-805f-c07ea3c64a25",
          "status": "Created",
          "code": 201,
          "responseTime": 2307,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "2928b6c9-cf4d-4927-ac73-8fffcbfc396d",
        "cursor": {
          "ref": "773519c2-67eb-4144-ab8d-730fc268b817",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1bfcca08-a2b6-427c-a809-1e2f7d020be9"
        },
        "item": {
          "id": "2928b6c9-cf4d-4927-ac73-8fffcbfc396d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e741fae6-3b8c-4465-96db-db2e614cd0cd",
          "status": "Created",
          "code": 201,
          "responseTime": 2338,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b47afc3d-a4f8-40a2-8efb-7b4bdb629157",
        "cursor": {
          "ref": "de608a61-7036-4af6-bc69-70d84a4ea157",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "14af58b8-5760-450b-937e-546bd671f7bf"
        },
        "item": {
          "id": "b47afc3d-a4f8-40a2-8efb-7b4bdb629157",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3b29fcf0-2b36-4efb-b140-a2d5ceaa0bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef4f296-aef4-4a07-88af-dd26beec70a4",
        "cursor": {
          "ref": "c64ce082-d198-494f-82bc-2a69ee7b567d",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "663cef71-98c2-4fc8-bb5a-f88f5be694e4"
        },
        "item": {
          "id": "4ef4f296-aef4-4a07-88af-dd26beec70a4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "04b9316b-c3cf-4eb5-8f1b-554993cd038b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fae667-2e21-47c0-9ef4-3aa66675e23f",
        "cursor": {
          "ref": "b62b153b-2117-4313-93b0-dc07492614b9",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8ccd0aef-5388-49ac-b1e4-19e7354c8bc3"
        },
        "item": {
          "id": "d0fae667-2e21-47c0-9ef4-3aa66675e23f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0434ecbc-b9d8-4050-bbdc-078d37d12c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3878862-7855-46dd-88c5-1371ec88f32b",
        "cursor": {
          "ref": "f69308c2-5745-4689-9c3b-c533412e2992",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f631b06a-6a79-4eff-a44f-e6ce1d417b6d"
        },
        "item": {
          "id": "c3878862-7855-46dd-88c5-1371ec88f32b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0344d42b-c92c-430d-b5c5-fa418a932841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5680fdf-c585-413d-a169-56e911548182",
        "cursor": {
          "ref": "32c99a40-d466-488e-a7fe-176289634d1a",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6eb3cf67-3023-4bd0-b90c-9fc53c2da348"
        },
        "item": {
          "id": "f5680fdf-c585-413d-a169-56e911548182",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c228779b-dd23-459c-b7c4-da86e840575b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8b9a43-144a-4040-aac2-9cd48e52b233",
        "cursor": {
          "ref": "1d454291-b167-4aaf-a92f-55dc0448ec63",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "935339fe-b038-4664-a67c-20c6cee618c9"
        },
        "item": {
          "id": "4f8b9a43-144a-4040-aac2-9cd48e52b233",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "85c62cda-dd69-42a2-95cb-941041c15235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ed5a9a-7e62-4fe5-97eb-d47399a6f4fa",
        "cursor": {
          "ref": "31c06610-d6ca-4517-9cba-63391911b416",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "192d4b24-399e-46ee-ab24-2bb2a7e88ffd"
        },
        "item": {
          "id": "f4ed5a9a-7e62-4fe5-97eb-d47399a6f4fa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3ca5eebe-934d-45dd-b972-5d374b139790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2310afc6-5503-48f0-ae13-2b12bae04b37",
        "cursor": {
          "ref": "500ba372-9127-4cce-8e12-aa53b40b5a74",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7473b5ac-385d-44a0-9ccb-e49b86d566ed"
        },
        "item": {
          "id": "2310afc6-5503-48f0-ae13-2b12bae04b37",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fce778ea-ce11-4a3e-8f21-d1f6362c5ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6526c9a-e599-48fc-b095-a11d78d599ea",
        "cursor": {
          "ref": "3f851880-bd9f-4d82-a6f4-e27a590e4608",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a2edfdb4-8868-41c7-ae29-135470439433"
        },
        "item": {
          "id": "f6526c9a-e599-48fc-b095-a11d78d599ea",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9264854f-8adb-406e-adf0-61643d8bc47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaee01a-99a6-4389-866e-e19e3a7a82a4",
        "cursor": {
          "ref": "811f4c51-e9b9-4c05-8689-3422567d71ef",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8256dddd-1824-4852-95d0-ee3b69b08849"
        },
        "item": {
          "id": "caaee01a-99a6-4389-866e-e19e3a7a82a4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "59da5285-0f63-45ab-b3bc-c7788d1a5866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72386c32-5000-441b-82cd-0f96f3f61972",
        "cursor": {
          "ref": "5ba1720b-0b81-4b3a-904b-3b4ea5603ff6",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2f6527a0-140d-45cb-b355-8b26445a1d01"
        },
        "item": {
          "id": "72386c32-5000-441b-82cd-0f96f3f61972",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7ec7f0d1-58da-411e-91a6-91ea1b2dd8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abee7982-9a9c-4963-a65e-a04855224271",
        "cursor": {
          "ref": "0bce3100-3954-4f1a-b5bd-44e862018256",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "97a9f8e4-7814-4cd2-85b1-402c5faaab32"
        },
        "item": {
          "id": "abee7982-9a9c-4963-a65e-a04855224271",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3c31cd35-34f8-4559-876b-f70228f59528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52db0c7a-cc48-4666-acb8-50cd9a09623d",
        "cursor": {
          "ref": "3fa53a59-c2ee-43f4-a0b5-b0a6c8c369cc",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "534e93ac-a4f6-4a09-bc26-2c08b6fd807c"
        },
        "item": {
          "id": "52db0c7a-cc48-4666-acb8-50cd9a09623d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "84197fdf-af06-4e9a-a676-0aece3d1ae53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d9d0cd-0f81-49ce-aa42-35cf526b525f",
        "cursor": {
          "ref": "e280488d-bba0-4f41-8779-b53e2eefe50b",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "21781631-5858-4dbd-a146-5ea0ba9de62c"
        },
        "item": {
          "id": "e8d9d0cd-0f81-49ce-aa42-35cf526b525f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "412d5859-b8de-4a76-8529-fc0cf0c05339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c584c95-a955-47e3-a669-f776440d00c1",
        "cursor": {
          "ref": "c4dec01c-6b91-494d-be1b-026f05fdc1d1",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c794ca10-465a-4a27-9f9d-18bc6d7d895d"
        },
        "item": {
          "id": "4c584c95-a955-47e3-a669-f776440d00c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8372b1ec-9064-4589-b498-2ed83f33cf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b943d8e6-726d-425d-b1d1-a488a9a63b28",
        "cursor": {
          "ref": "5101fcd4-2d4a-484e-b833-8d777f26d2d6",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bcf585f0-d028-4480-b084-75a814d0d694"
        },
        "item": {
          "id": "b943d8e6-726d-425d-b1d1-a488a9a63b28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "698ac63c-7031-431c-8c88-e98e07ba715d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da2b84b-7df1-4b37-9508-f5b60f5d72f9",
        "cursor": {
          "ref": "5b8deb48-c58f-47cf-bc43-1ef0ef34dfc4",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fbabd3d1-f790-4149-945d-0e5170b5b9fb"
        },
        "item": {
          "id": "3da2b84b-7df1-4b37-9508-f5b60f5d72f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6987b91e-0e08-4a9d-ac31-0675da1c93ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cb81fd-136c-4f39-8fab-33f969f19b16",
        "cursor": {
          "ref": "4e2b0359-91b2-4a64-9d6d-a8efce35482b",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e246d1d9-3af2-44db-9c88-6f3d675290a1"
        },
        "item": {
          "id": "c3cb81fd-136c-4f39-8fab-33f969f19b16",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c2d7e45e-405f-4589-a4f7-d6b052e69a7a",
          "status": "Created",
          "code": 201,
          "responseTime": 2326,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "57f79dd7-2689-43b7-85cd-46c89252616c",
        "cursor": {
          "ref": "f95f4291-5194-4528-ad0b-94a1ed8d5c31",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6b043e8e-0ae0-4356-a5a5-41977bf0104c"
        },
        "item": {
          "id": "57f79dd7-2689-43b7-85cd-46c89252616c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2b4e9093-780f-408a-84c0-1edab5ae9151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a80732-35db-4d9c-ab43-0c6731cfb4a8",
        "cursor": {
          "ref": "e2e73171-85f5-4ad7-a090-658d069aefbe",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "25398d23-0311-4f99-9e5f-5507f282ce46"
        },
        "item": {
          "id": "c9a80732-35db-4d9c-ab43-0c6731cfb4a8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a24a87cc-7674-4d2c-9fc1-0722b6df5ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650e3be6-1ca4-4f01-99a4-9fb2c20539fc",
        "cursor": {
          "ref": "0c3b5705-5f6e-4bb1-8c34-3775540a161d",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "723aef8a-251e-4e8c-9ce4-c707662d212b"
        },
        "item": {
          "id": "650e3be6-1ca4-4f01-99a4-9fb2c20539fc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7737bc61-4df8-48fb-947f-a15c31ec5b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153c4fa5-59f8-402c-afc0-815b0cd75031",
        "cursor": {
          "ref": "b506dd5a-f7c7-499e-8c9c-087bb05fbd80",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8c81f045-a92f-4bec-b96b-336b6ac7b883"
        },
        "item": {
          "id": "153c4fa5-59f8-402c-afc0-815b0cd75031",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "98a83d41-de9f-4292-87f4-c4cbf5e11654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969813da-03b4-498b-8e12-c07f3529e737",
        "cursor": {
          "ref": "d5305b84-1236-489d-8413-e6f03193572b",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5144ad8d-b316-4202-accf-95be95197a52"
        },
        "item": {
          "id": "969813da-03b4-498b-8e12-c07f3529e737",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c6b6eec3-fe2e-4fb7-9883-b3b6fcff0143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5567c8f6-2f61-466d-b36b-c827ac620d56",
        "cursor": {
          "ref": "00bbcfd3-f14a-4fca-bb12-4a0faea4a05d",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2a5bb31d-ba4f-4ad0-b4d8-5196c57e2878"
        },
        "item": {
          "id": "5567c8f6-2f61-466d-b36b-c827ac620d56",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "accba758-4c2a-4d8e-ab1b-6a421099ec69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56331af5-c782-4e13-8759-c29f88b302c6",
        "cursor": {
          "ref": "8525f3d7-8e6e-4998-8cc9-36c22880c876",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "80f1190b-9b5e-4964-b59e-dcd2d77bbb23"
        },
        "item": {
          "id": "56331af5-c782-4e13-8759-c29f88b302c6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "683ddebd-6ef2-4e88-9beb-be62df742689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f92bb36-7229-4dfe-9064-15517a022226",
        "cursor": {
          "ref": "432c50bd-f38b-48bd-8d37-304911ea42b9",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ec0ed45b-18e3-4d4f-a3c2-a9fa3677a8d0"
        },
        "item": {
          "id": "8f92bb36-7229-4dfe-9064-15517a022226",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ddb3376e-1acc-4264-9bde-7d709a513a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69b549d-0507-48f0-a38b-4055f7313ca6",
        "cursor": {
          "ref": "8c2b5c45-a9de-48af-bff3-13c9ff4f53a0",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ae6f67d3-6243-4230-b0c1-7fe3b91b3763"
        },
        "item": {
          "id": "b69b549d-0507-48f0-a38b-4055f7313ca6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "40c763ab-c51f-4b47-b37a-a10433390677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecc6dcf-707d-4b5d-a1fc-3e0a1cac6582",
        "cursor": {
          "ref": "8a45e2a5-5b31-4865-8d35-2e707ee953de",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f7c8a262-2d1b-47ac-b836-3e4b24716b2f"
        },
        "item": {
          "id": "eecc6dcf-707d-4b5d-a1fc-3e0a1cac6582",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "08e93cc2-d022-4ebb-8bbe-426b130a3884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceeac8ad-141a-48bf-a426-c81ecf2aa9b9",
        "cursor": {
          "ref": "211bcfe7-b5f6-4261-ba15-2419c1e72232",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0fe069dd-3195-4421-a88d-b43ced7b4528"
        },
        "item": {
          "id": "ceeac8ad-141a-48bf-a426-c81ecf2aa9b9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b349a9e1-9fed-4dff-9089-de379915a7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1934820-6929-4533-80c5-2423316ab03d",
        "cursor": {
          "ref": "90616709-324e-4999-a873-e33843fb5ab9",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "64387c39-6cef-4da8-825e-6bb098d9ef06"
        },
        "item": {
          "id": "e1934820-6929-4533-80c5-2423316ab03d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "afcd9998-d2f4-4d0c-be84-f5d09d4bc4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712a8814-a9cc-420b-9e66-1bf20d79bb12",
        "cursor": {
          "ref": "faeddb04-fe0a-4699-af89-3218774f44ad",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9d8f85f2-776c-4442-ba63-4f5a0c9cc47d"
        },
        "item": {
          "id": "712a8814-a9cc-420b-9e66-1bf20d79bb12",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2fe509fe-1e3c-4065-aa62-e32f205700ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8884dd4-153d-454f-b85e-26a3568662c2",
        "cursor": {
          "ref": "46e3e1d3-e073-4fb1-a8cb-e15e4d3991f1",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b19533c4-09b0-4398-a90b-bc9753d7b2ce"
        },
        "item": {
          "id": "c8884dd4-153d-454f-b85e-26a3568662c2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "76b86551-686a-412a-a145-6b86f21d7916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c7d12f-417b-465b-945e-82f5053586ed",
        "cursor": {
          "ref": "77dcff57-2744-465a-ae08-525d3445be7b",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "988f8198-ef75-4094-92d6-73bf4c6341be"
        },
        "item": {
          "id": "91c7d12f-417b-465b-945e-82f5053586ed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8555bb78-6e27-4157-a3aa-88e4faf690b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344640e1-3cad-4e6f-b216-e10c0c51cad8",
        "cursor": {
          "ref": "aba3a78e-5f14-475a-8ede-3294055a327f",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3d58dede-3d0b-41f2-853c-7585cc11ae63"
        },
        "item": {
          "id": "344640e1-3cad-4e6f-b216-e10c0c51cad8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "13efe589-4ce0-4471-a174-cc3241f650c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53d916a-5c5c-43e1-a942-3f121e2dd6ea",
        "cursor": {
          "ref": "f0aa2c11-e72d-44e9-9049-110020d13bf7",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "95587038-5250-4bd9-bc29-a48d6a952a5d"
        },
        "item": {
          "id": "d53d916a-5c5c-43e1-a942-3f121e2dd6ea",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5b887af2-5685-4975-adaf-6c19c851bb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578ce70c-8c3d-45f0-ae2f-6c94fe9e57ae",
        "cursor": {
          "ref": "4eeb2330-3175-4eff-acac-e34510bdbcae",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0e1d3632-b376-4a7e-8444-9c2b2e551cc4"
        },
        "item": {
          "id": "578ce70c-8c3d-45f0-ae2f-6c94fe9e57ae",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4b80bb09-eb18-45cb-bc05-668d891d6881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1363a2-c61b-4f6a-b3a6-b51e5e782470",
        "cursor": {
          "ref": "4b0753ac-4fe4-4b9f-bcfd-cffcb59b13de",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "433f0ab8-c225-4543-a5ae-7f043b281939"
        },
        "item": {
          "id": "4c1363a2-c61b-4f6a-b3a6-b51e5e782470",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1d185419-742b-4496-bf44-0cf22de73ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c64a30e-399c-451c-84d6-7c01134f0ce0",
        "cursor": {
          "ref": "cd197433-2e5b-4862-baa7-67e1488ad54a",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "19e77c22-dc72-4c2a-9e5d-67b1dcdea980"
        },
        "item": {
          "id": "1c64a30e-399c-451c-84d6-7c01134f0ce0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "da927695-ce2c-4e89-9e0a-72f8556c06d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019fee22-755d-49e2-9a39-4a5b7102e259",
        "cursor": {
          "ref": "02d8b3df-9fe2-4bc8-9928-f82ba7fc158a",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e5768e09-ea8a-47ad-b20b-58aebbcd70d5"
        },
        "item": {
          "id": "019fee22-755d-49e2-9a39-4a5b7102e259",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9db80fde-80e4-42d6-b2fc-560641c262ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42cc8ac-0169-4015-afd2-b6ddfd3e17c8",
        "cursor": {
          "ref": "b05687b8-d30b-44bd-8111-5b8d9fac8abf",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d1db3229-2c29-4fcd-be3a-89de4aa1dde2"
        },
        "item": {
          "id": "b42cc8ac-0169-4015-afd2-b6ddfd3e17c8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5ffc1681-e7d7-4df6-8e1e-3aa422a6a2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a42f0bf-4dfe-4294-ae87-f0083385fee8",
        "cursor": {
          "ref": "9f214016-bbe5-42af-9950-9ae495762c62",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "46302f8e-d139-4760-8b37-ca8d7dfcc930"
        },
        "item": {
          "id": "7a42f0bf-4dfe-4294-ae87-f0083385fee8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "253aefbb-9891-4522-9b0c-611ebee9e96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c3bf82-09c5-4292-9ec5-ced316b52d7d",
        "cursor": {
          "ref": "37769463-93a8-48cf-96d7-457c92ffbc2e",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "eca20f48-1c38-4d14-a8b6-d2162b4abb6b"
        },
        "item": {
          "id": "60c3bf82-09c5-4292-9ec5-ced316b52d7d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e69b3da6-61bc-4d92-8718-df7b36522530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6d28a2-f3e3-4890-8995-1fb7224f3e2d",
        "cursor": {
          "ref": "ffe8ebf1-62d8-442a-a598-6d94f3d4b0df",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "58981f78-12eb-4341-bd07-68a37b2e3c85"
        },
        "item": {
          "id": "ff6d28a2-f3e3-4890-8995-1fb7224f3e2d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f81cb8dd-b32e-4fd7-b769-234ea83fe174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d20319-df48-4532-8d83-b9bfe35b890b",
        "cursor": {
          "ref": "3527c1e0-d638-4171-88fc-15e84faf960b",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a2484472-bd8e-4f6f-9cf4-d45a521faddf"
        },
        "item": {
          "id": "79d20319-df48-4532-8d83-b9bfe35b890b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8a851e05-3f5c-4ace-a64b-402302b542d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899e5f0c-0d2a-42a1-b06e-8da83dc75841",
        "cursor": {
          "ref": "ae8ea2bb-d830-4966-ae0d-48119e4c8d56",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "20790410-fb0d-4166-ad46-630c41b443b4"
        },
        "item": {
          "id": "899e5f0c-0d2a-42a1-b06e-8da83dc75841",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6750b4ed-41bb-4bf7-8947-c711863b38cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21b2e53-3e54-4bd3-ab40-5f12db984724",
        "cursor": {
          "ref": "c026d816-db7b-40e4-85e7-a29097f6fce4",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a2c7e9ed-22d9-4da3-9138-e5d874a36867"
        },
        "item": {
          "id": "c21b2e53-3e54-4bd3-ab40-5f12db984724",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ac401d57-df1a-4b98-beff-bc700e972e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb94361-f86f-4a51-9560-317489a4072d",
        "cursor": {
          "ref": "f9421d6b-9546-4abc-8e91-047c736dcdbe",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cfb8b5b0-e325-4a1e-a7bc-929247f4f61e"
        },
        "item": {
          "id": "5eb94361-f86f-4a51-9560-317489a4072d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2f17cc90-bca2-40e7-b952-49252b498495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc6d903-5898-4356-a2e5-2264fd78e055",
        "cursor": {
          "ref": "c75835ea-a02c-4dfd-bf4a-d36c86fa3373",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cd7adb5c-7b3a-4879-9512-7fbfacc58ad6"
        },
        "item": {
          "id": "bbc6d903-5898-4356-a2e5-2264fd78e055",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "10e266ee-b76f-4119-9ef1-72dad15cb849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fe02b1-6af5-4baa-aa5e-b0d50ca87a20",
        "cursor": {
          "ref": "99c2f6cc-0026-450e-98b8-1bdb813d3c8c",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a87c5c8c-09a1-4548-a01a-9097a114f4da"
        },
        "item": {
          "id": "56fe02b1-6af5-4baa-aa5e-b0d50ca87a20",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "10358672-b05f-47b4-94a5-9e248af68653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "59bfdb26-16c7-47ae-9c5c-01a6892cfdc0",
        "cursor": {
          "ref": "00140513-e9fd-4512-a794-520afa508606",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7c5aba72-82ce-4c22-9385-425f30126083"
        },
        "item": {
          "id": "59bfdb26-16c7-47ae-9c5c-01a6892cfdc0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9eb761bb-e20f-4257-a56f-09304db2be4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "288a9f03-4896-4ec8-aab3-fb75c7221bfc",
        "cursor": {
          "ref": "f97639c3-9655-4f65-b1fd-f7cc84aea96f",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0af89ac7-6b9d-4ff2-bc87-f3cb692a19f0"
        },
        "item": {
          "id": "288a9f03-4896-4ec8-aab3-fb75c7221bfc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b554e276-d3e7-4e64-b3f6-1011c6c78991",
          "status": "Created",
          "code": 201,
          "responseTime": 1843,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e64448-c7c1-4d3a-aead-6e9f2173af3d",
        "cursor": {
          "ref": "0e967ff1-f80e-478f-a99e-675b883d9791",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8546203e-c4cc-4ece-8748-28a101769a00"
        },
        "item": {
          "id": "77e64448-c7c1-4d3a-aead-6e9f2173af3d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8baca7a3-57a0-4b84-9ebf-7506d4ccf04f",
          "status": "Created",
          "code": 201,
          "responseTime": 2336,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8036081f-dd28-4178-9678-d5cbbbb45c63",
        "cursor": {
          "ref": "56e211cb-6182-46fb-946f-91698914a0f9",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b5a33c3d-bb0f-4d3c-a498-a7b81ecf8c9a"
        },
        "item": {
          "id": "8036081f-dd28-4178-9678-d5cbbbb45c63",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5861e9bb-a26c-47cf-8b7f-20bb58ec07db",
          "status": "Created",
          "code": 201,
          "responseTime": 2595,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "14361f61-b6a1-4374-b882-08560e8cba35",
        "cursor": {
          "ref": "fde27be0-aff9-4b74-b045-0cac44518b54",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5fe3dd95-a5c3-48c0-a670-47a580498124"
        },
        "item": {
          "id": "14361f61-b6a1-4374-b882-08560e8cba35",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4d57ab2f-5e1e-46d3-b3bc-15d014c84e1a",
          "status": "Created",
          "code": 201,
          "responseTime": 2145,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-15T21:58:48Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-15T21:58:48Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "1f2d8b8f-b255-4333-bdd6-ff210caaaff1",
        "cursor": {
          "ref": "7f2dce6c-104b-45ef-9a57-ed73380231db",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4f4093f3-01af-4cba-889d-733b443b0d77"
        },
        "item": {
          "id": "1f2d8b8f-b255-4333-bdd6-ff210caaaff1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1e1ca6b4-a867-4a01-927e-3bd4c5a692ba",
          "status": "Created",
          "code": 201,
          "responseTime": 2247,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c7a0d9-626b-4566-bf63-8b07359acbfd",
        "cursor": {
          "ref": "0dac7b3c-75c2-4428-8c15-3ba09a47f349",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a8a9ea4c-623f-4858-ae19-9dc3fa6c1977"
        },
        "item": {
          "id": "84c7a0d9-626b-4566-bf63-8b07359acbfd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8f100796-db31-49a7-8339-4ea4643dc84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c7a0d9-626b-4566-bf63-8b07359acbfd",
        "cursor": {
          "ref": "0dac7b3c-75c2-4428-8c15-3ba09a47f349",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a8a9ea4c-623f-4858-ae19-9dc3fa6c1977"
        },
        "item": {
          "id": "84c7a0d9-626b-4566-bf63-8b07359acbfd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8f100796-db31-49a7-8339-4ea4643dc84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a99f486-9375-4ee5-b0c0-cfe0109cb835",
        "cursor": {
          "ref": "da4c8185-191d-4aec-afdb-c27e924884b1",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b44d49ae-7cf5-4b2a-85b2-1919a905817a"
        },
        "item": {
          "id": "8a99f486-9375-4ee5-b0c0-cfe0109cb835",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7bffed83-214f-4cb5-84d0-08e9377ee489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36a6618-d034-4cdd-bd6f-61f63f4e3b61",
        "cursor": {
          "ref": "6f39c7e3-8135-4f8a-874d-85acabf61ac2",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "323c1239-9973-4800-88ac-66ac99c25c1d"
        },
        "item": {
          "id": "f36a6618-d034-4cdd-bd6f-61f63f4e3b61",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "093e38ee-d983-4538-8aa2-fda12ace8e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6b6453-2e9f-459c-9f8b-272879107dec",
        "cursor": {
          "ref": "f2a96e3a-8137-4a0b-90ba-0301c70cd0f2",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c83cd3ed-0d64-4aaa-b0ab-a260b617417f"
        },
        "item": {
          "id": "bd6b6453-2e9f-459c-9f8b-272879107dec",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "24497268-627c-4e0d-a990-8b1f5c16345a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8784e53-d76a-4791-bffc-dac504f0271a",
        "cursor": {
          "ref": "0144971c-ba19-45de-a2ff-599a64153ff3",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d92936dd-ef24-4249-afb5-23a604bdb1dd"
        },
        "item": {
          "id": "b8784e53-d76a-4791-bffc-dac504f0271a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cbf5f63a-fd50-40fe-b485-355558217db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56dc80fa-ff6a-4207-beaf-84b165b42ec5",
        "cursor": {
          "ref": "39a0f764-05d3-4601-80b7-b773fbeab894",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "25146981-0d16-43b1-99aa-fc2194ac4968"
        },
        "item": {
          "id": "56dc80fa-ff6a-4207-beaf-84b165b42ec5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e4b8f214-4d0a-4034-9e53-0c15736aa72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b65e72-e073-4481-914f-a8dae9604bd8",
        "cursor": {
          "ref": "4c88d081-c8cb-4e98-b4f0-ef06c1b02dd2",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2095eaca-0ede-4f44-87b5-c601b067b63d"
        },
        "item": {
          "id": "63b65e72-e073-4481-914f-a8dae9604bd8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "48639f6b-743a-4d55-bd83-6b729aece606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12177c5-862b-4bff-bc2b-98a517a93a60",
        "cursor": {
          "ref": "f98023a0-dee3-4d18-a536-f94d6201e09d",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0fdb3879-92c7-4346-bb25-30bb67598800"
        },
        "item": {
          "id": "a12177c5-862b-4bff-bc2b-98a517a93a60",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bd936820-ec98-4e9c-a529-e3f4f23b9730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37378ac-08b2-496c-aec8-1d55ca2a178f",
        "cursor": {
          "ref": "2a999386-faa2-4f01-af76-56e78f478291",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6b05e719-f264-418d-b820-5d5fef83bb57"
        },
        "item": {
          "id": "a37378ac-08b2-496c-aec8-1d55ca2a178f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "27a8473b-c520-4da5-879e-a1beafbad9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92538a0-0a33-4dac-9106-976fc982c0e1",
        "cursor": {
          "ref": "52e7494f-3c8a-4616-acb6-dbe0ac87f22d",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fb9b4830-61dd-4ac7-b699-8e07ff7b46c9"
        },
        "item": {
          "id": "e92538a0-0a33-4dac-9106-976fc982c0e1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "957d2013-bf4d-469d-a1f8-1251b551b465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0206ce-0ef1-46b7-912f-bbcfd1ffcf6e",
        "cursor": {
          "ref": "a3e83ace-ff60-4132-a048-c645f6ffb0fe",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "342c37ab-9c25-4ee9-912f-81c350ea8e57"
        },
        "item": {
          "id": "9d0206ce-0ef1-46b7-912f-bbcfd1ffcf6e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "54677b1a-6999-42f5-ae90-ed8ae9d9b252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1ce2fc-469c-4ef2-9b5c-f6dd9922f1aa",
        "cursor": {
          "ref": "aa434772-ed5c-4be0-8ff2-7861f19f742a",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "27808c73-f993-4208-b8a4-c18a24cd2fdc"
        },
        "item": {
          "id": "2d1ce2fc-469c-4ef2-9b5c-f6dd9922f1aa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8316f5e6-e1a7-4fd8-8fce-72a2edcb6c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722d61d0-6416-4384-a04d-302b08ddff0f",
        "cursor": {
          "ref": "dccd7a84-93f2-4417-b01f-593aa6b67e88",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ae4d5ab8-1110-4207-b5e3-4600dff0eebf"
        },
        "item": {
          "id": "722d61d0-6416-4384-a04d-302b08ddff0f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9db0a97d-ac1f-4845-897f-c356f9a0c836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802afd5f-365e-4fdc-b6e1-1f27a69477b6",
        "cursor": {
          "ref": "11bfaab3-58b2-467a-a6dd-580c4dda61fc",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f3fb2312-4cf3-49b9-99d1-3546fb548fb2"
        },
        "item": {
          "id": "802afd5f-365e-4fdc-b6e1-1f27a69477b6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ac57cb03-b518-46dd-abde-bc70f7c405ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214ab9ce-54b1-46ec-b404-f4574313cfbf",
        "cursor": {
          "ref": "b428ff8c-b9c4-4f9a-9b2d-afb303bf4481",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "781978de-87d5-4036-b8e8-7e775a9522f6"
        },
        "item": {
          "id": "214ab9ce-54b1-46ec-b404-f4574313cfbf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cc8f487d-f9e0-4c89-915f-c96ed800366d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d1b224-2492-446c-9844-3bc47108eaa5",
        "cursor": {
          "ref": "38e842f1-2100-4937-bd7b-267be94dfc21",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0e263cd1-a818-4d3d-963c-e0e644d54bc3"
        },
        "item": {
          "id": "56d1b224-2492-446c-9844-3bc47108eaa5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "748e8299-3cd0-4ea1-8b30-593c8ab23412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad6bd11-d3cd-4aee-a0c2-ec810a7091b2",
        "cursor": {
          "ref": "7d090753-3e01-4aaf-892b-4777c68923b8",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "309c8c0b-e20a-4ff2-b814-8b5ecd38e06a"
        },
        "item": {
          "id": "2ad6bd11-d3cd-4aee-a0c2-ec810a7091b2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d860eed9-be8c-42a6-9145-2759a8300603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c54b91-6d67-4116-8a39-7fff4066fa66",
        "cursor": {
          "ref": "ee2b61a6-ab88-4306-9410-2192ba3dd267",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cf06e939-0bd9-4ede-afc5-2dc1c6ceeeb6"
        },
        "item": {
          "id": "00c54b91-6d67-4116-8a39-7fff4066fa66",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b6a173dd-00ab-4526-85e7-69434cf017cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bf198b-7964-45f5-8ff5-ad2fa7475b4a",
        "cursor": {
          "ref": "9cdb9385-d7e9-4a95-ac9e-43be9fc3a8ed",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "48565f8a-1b8a-42a9-82b3-7ae47a332683"
        },
        "item": {
          "id": "69bf198b-7964-45f5-8ff5-ad2fa7475b4a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "86482c4c-2578-4932-b0ab-2b4b07afb64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08489e73-62ae-4f2b-91a1-e3cf64151d0c",
        "cursor": {
          "ref": "e13917f6-2f9a-4616-95be-b3d0ab3ca344",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "23d8b47a-68c5-4a68-96e6-e249a35bc6af"
        },
        "item": {
          "id": "08489e73-62ae-4f2b-91a1-e3cf64151d0c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9bf05553-cbb4-44dc-a76c-ba00eb0ee7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e7c850-3f57-4ac3-ad25-2d1fbf0ebfae",
        "cursor": {
          "ref": "7de003ab-64ec-4f28-80f9-534a5b79ae1c",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "06b75966-5a8c-4e60-9ec9-4ff68d96c603"
        },
        "item": {
          "id": "11e7c850-3f57-4ac3-ad25-2d1fbf0ebfae",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6eeced64-4fce-4b01-bbe4-12a02920d058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e39275-4db8-469a-9a8a-d3851496bada",
        "cursor": {
          "ref": "8c2f2a6e-43d6-43f1-89e7-5d9f81853e45",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "83bae111-ceff-4b5f-a889-52a06b857a1e"
        },
        "item": {
          "id": "e7e39275-4db8-469a-9a8a-d3851496bada",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6a294a0f-2917-46c4-b7fb-c6f481554244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50573c4-c335-4479-9974-e808a5e7f65a",
        "cursor": {
          "ref": "40477211-18c2-42b2-8227-534c2872b3a7",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b72b9a46-0c13-46e3-afc9-7d349cb562a9"
        },
        "item": {
          "id": "a50573c4-c335-4479-9974-e808a5e7f65a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5d7f619c-c6c4-4949-b5dd-c47c608b91a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40acbe28-4a05-41eb-8ba6-57c483fea7b3",
        "cursor": {
          "ref": "f8ee2a35-485d-4a2f-88a9-87c3baa21516",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "56b0fa50-385b-4e61-a69d-6ba106ea687d"
        },
        "item": {
          "id": "40acbe28-4a05-41eb-8ba6-57c483fea7b3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "83956c2e-78a2-49da-97a6-8ee85febe761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355576d1-a7b6-47c1-8f13-e0199a4f881a",
        "cursor": {
          "ref": "dc6e6883-23f0-4666-bbcb-74a5a10efffd",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "71fd6145-bdb5-49d1-9451-571fb38e6866"
        },
        "item": {
          "id": "355576d1-a7b6-47c1-8f13-e0199a4f881a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a2799dba-5b66-49f2-9d84-796beb8b16fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42cd534-3f67-43f0-b89c-a973b04933a3",
        "cursor": {
          "ref": "77febf5b-dd46-4f91-bf04-d3f42ce63a25",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "81d1763c-3523-467a-b5a7-f79948ef07f8"
        },
        "item": {
          "id": "c42cd534-3f67-43f0-b89c-a973b04933a3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3d403f30-12ee-4619-8e63-32c614c2f8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f140fa-491e-4b2b-aed9-97c9b35ebe2b",
        "cursor": {
          "ref": "edc1d65b-fe23-49fb-a072-dbac4f81c864",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c11129b5-7213-43ac-8458-3c804466c675"
        },
        "item": {
          "id": "e2f140fa-491e-4b2b-aed9-97c9b35ebe2b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "daa371a7-eb8c-4f35-943d-6d2ed83b51e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604c202d-bdbf-4103-854a-f82f9dfeb94e",
        "cursor": {
          "ref": "d40151f3-f553-4596-8dc2-ad4c38127a25",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d13ce877-6e46-4f0d-a379-a39ad16c8228"
        },
        "item": {
          "id": "604c202d-bdbf-4103-854a-f82f9dfeb94e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "25d479be-aa31-469e-816a-f4a18a27f1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91f400d-95a6-460f-b5f9-6de3a5271df2",
        "cursor": {
          "ref": "5f125173-151c-4777-bd90-d0db526fcc19",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f63299db-67f0-4a98-877b-4d27f3aa6fb1"
        },
        "item": {
          "id": "c91f400d-95a6-460f-b5f9-6de3a5271df2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b665026f-09a1-482c-b801-57a46792a7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1171f494-e464-46bd-9a8f-1d1cebb37b11",
        "cursor": {
          "ref": "5da39eb2-b4c7-4601-b27b-ce1efb16b510",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0dbf5d0e-e207-46d2-a1f8-7321f0c03c73"
        },
        "item": {
          "id": "1171f494-e464-46bd-9a8f-1d1cebb37b11",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "da57a03d-13bc-40ae-a4cf-50f0a16e2172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66358f1-daf4-4036-8197-33f97f480170",
        "cursor": {
          "ref": "51e691b9-e7c5-4bdf-801c-6f9a60f32a12",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d64df7a1-019c-4422-b7c9-bbbce256895e"
        },
        "item": {
          "id": "d66358f1-daf4-4036-8197-33f97f480170",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1c35cc42-9a1d-4fb4-b4c9-ad39cf5b02b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3306fea7-3b19-4b17-a7c9-eb7887274d3a",
        "cursor": {
          "ref": "4418ebd9-b3a7-403a-9eea-ed2af17f56a3",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "895cb9e3-8dad-49ea-84fa-7890146d8f78"
        },
        "item": {
          "id": "3306fea7-3b19-4b17-a7c9-eb7887274d3a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "19bd8a88-35b3-4ddd-88d3-91ca0bc67f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaec434-601b-4166-ab5c-3329f61c3db5",
        "cursor": {
          "ref": "b9359610-fedc-47b3-b1bf-632dc2b3e7dc",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8bc00352-2088-42ec-a094-3f69712c9c36"
        },
        "item": {
          "id": "bbaec434-601b-4166-ab5c-3329f61c3db5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4dc26af0-73b1-4ce9-838a-a2918eebef1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c29a8c41-9d00-489d-a4f0-6c0718a1ca16",
        "cursor": {
          "ref": "e2eac35e-3a32-4fd4-bf3a-8adab6faf86c",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "81646337-93cf-4cce-be11-4ff38041e20b"
        },
        "item": {
          "id": "c29a8c41-9d00-489d-a4f0-6c0718a1ca16",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f43aa9dd-6ed4-436a-ab3d-58bb1dcf6e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c6fe4635-60ea-46f8-a086-9467365b0ede",
        "cursor": {
          "ref": "4b94cc3f-f64f-4965-aac0-3dac9fc0b800",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "acbbff49-3c44-43d9-a1ce-c790208a361a"
        },
        "item": {
          "id": "c6fe4635-60ea-46f8-a086-9467365b0ede",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e11bafef-6dc8-4374-b667-875c6c13870f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fe4635-60ea-46f8-a086-9467365b0ede",
        "cursor": {
          "ref": "4b94cc3f-f64f-4965-aac0-3dac9fc0b800",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "acbbff49-3c44-43d9-a1ce-c790208a361a"
        },
        "item": {
          "id": "c6fe4635-60ea-46f8-a086-9467365b0ede",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e11bafef-6dc8-4374-b667-875c6c13870f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3dafb3-bc6e-4f77-9e47-08a17085b8b1",
        "cursor": {
          "ref": "d38a5699-3c25-44d0-9b04-a84b1271ff0d",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c6a1280e-651f-4171-9c5d-3cc4b4bb58df"
        },
        "item": {
          "id": "7f3dafb3-bc6e-4f77-9e47-08a17085b8b1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d693aab6-9a04-4d3e-8a08-fb5f21119de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9490c3-8371-4936-b22f-1c33f910c854",
        "cursor": {
          "ref": "e9339fb3-b9a0-4ac6-9fa7-93b0afc0a2c0",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f39b830a-92e3-4229-916f-fbf387d7cfd0"
        },
        "item": {
          "id": "dc9490c3-8371-4936-b22f-1c33f910c854",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d125022f-8c6d-4380-a3fe-acf9f5cd4888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66165631-9a4f-4100-8c58-8ab1548d57fc",
        "cursor": {
          "ref": "2d24a97e-c1d2-495f-bced-dca4e016b1dd",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "23be36ed-eb54-4534-9381-7a76b36bb713"
        },
        "item": {
          "id": "66165631-9a4f-4100-8c58-8ab1548d57fc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e07c6791-512b-4402-9a60-0cab5c43a6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b603de12-df79-4575-90b9-a4693dcbd02a",
        "cursor": {
          "ref": "55d91a8f-011f-4ec5-a574-ed18bb5f80cf",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b746798c-dc0a-4e97-808b-df85ec11849b"
        },
        "item": {
          "id": "b603de12-df79-4575-90b9-a4693dcbd02a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "38097d62-a1de-45c1-830b-41e2f968f80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6101790-f4b2-4699-971d-aec89155a4d9",
        "cursor": {
          "ref": "6960b12d-8379-431e-b1f9-efcf25d45bd1",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "475b3730-dfce-4d93-92fc-133076d2a31c"
        },
        "item": {
          "id": "d6101790-f4b2-4699-971d-aec89155a4d9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8f5f7ba3-4258-4e12-831a-043b58852eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c61a90-f823-4c9c-af06-943e58c4b624",
        "cursor": {
          "ref": "45ebe0c5-129b-4ff0-a8fd-fc82b2192d50",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b3a3f414-e15f-4c7e-8f76-eaf9324b46ac"
        },
        "item": {
          "id": "a7c61a90-f823-4c9c-af06-943e58c4b624",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4df50bc4-9a01-46e2-9c80-c56d0c7d8cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a8adc8-22d8-441a-8743-2f9d27467cd5",
        "cursor": {
          "ref": "1e69405b-dd8e-4ac7-9488-c5ade2f7c27d",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "896223b1-c797-47ef-af8c-c6179c586718"
        },
        "item": {
          "id": "c8a8adc8-22d8-441a-8743-2f9d27467cd5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "465ae29c-cf56-46ef-9f2b-7bb9edb15bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637d3949-f096-4bc4-b485-2d23f161fbb2",
        "cursor": {
          "ref": "100ae2de-ae8e-4215-9dec-761fee78d60e",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "34085fc3-5c68-4959-bb75-ee56967367f5"
        },
        "item": {
          "id": "637d3949-f096-4bc4-b485-2d23f161fbb2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b84cd145-6a3d-42c0-8571-d2606a353c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4016188c-ff21-4abc-9a08-c0c566701bb2",
        "cursor": {
          "ref": "76f8d848-e2e9-40f1-906a-ca9372ed168f",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "da9c8e06-d773-40c8-9d90-27883622e52d"
        },
        "item": {
          "id": "4016188c-ff21-4abc-9a08-c0c566701bb2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "265b229c-d854-4403-b458-655be7a81c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a98bfe-6b3b-4a74-961c-2b29a07a9a3a",
        "cursor": {
          "ref": "3cd34119-c829-4e8c-852e-1efd7e55853f",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5ae05521-9b1f-4c15-b399-b9c48950afb1"
        },
        "item": {
          "id": "26a98bfe-6b3b-4a74-961c-2b29a07a9a3a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "459afefa-55c3-47e8-b29e-72bd79cf2efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57152f4-f6df-4031-8617-9331e36ea00f",
        "cursor": {
          "ref": "a6b00e29-f4b9-43cb-a3ae-c3f2ad22d818",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "83d3328e-0294-44d4-bab7-f3fa9deff722"
        },
        "item": {
          "id": "a57152f4-f6df-4031-8617-9331e36ea00f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fc1f98d3-e98a-4b53-bb68-28fdaf64c911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c49c4c-6e6c-4cca-8e42-c754d0660212",
        "cursor": {
          "ref": "ebc42611-7070-4d6c-ae77-06b745f47238",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "520cd17c-e4d2-40ed-9f93-2c387d5784ce"
        },
        "item": {
          "id": "a7c49c4c-6e6c-4cca-8e42-c754d0660212",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3de56bc4-ef1d-48c8-b82d-a59815925da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346b1978-c558-41f3-bab5-0e4ec6d0078b",
        "cursor": {
          "ref": "b73fabac-1df8-415d-9382-c318ece8d6a0",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5ace8033-ac8f-4f62-b54e-924b6f0b5a2c"
        },
        "item": {
          "id": "346b1978-c558-41f3-bab5-0e4ec6d0078b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "16090632-c911-4895-b45d-d8553ccb7392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6bfd34-5c84-420d-a3c4-b7d0cee261f4",
        "cursor": {
          "ref": "fafdb88a-03db-4205-b311-073ad2956130",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cab0c279-0d1a-4796-8652-c319184bce68"
        },
        "item": {
          "id": "eb6bfd34-5c84-420d-a3c4-b7d0cee261f4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1980361b-1e53-4cb0-986c-72abb4323cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc1f9de-41cb-4422-b5c2-423b26db194c",
        "cursor": {
          "ref": "08197fba-2a94-49d0-ad64-276cca8a2b78",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ffaf95e9-2cf3-4496-a7d4-04e31e58e451"
        },
        "item": {
          "id": "8cc1f9de-41cb-4422-b5c2-423b26db194c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3fc9e001-068e-4f0c-9962-99ab5f4625c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66733b21-655f-4362-bef7-047971842dc8",
        "cursor": {
          "ref": "b9e0652b-e352-4696-be03-4d2089d2bb1f",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a06035cb-1e84-4dbd-8182-19a35b0c6b95"
        },
        "item": {
          "id": "66733b21-655f-4362-bef7-047971842dc8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cc37d61d-865a-4dec-839e-1bbbe434a260",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "55e308f3-91df-46e4-8c5a-992903d7ac6c",
        "cursor": {
          "ref": "0d04709d-a714-4c33-ba8f-220f6435d4fa",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0da957ed-9170-4a9b-aa79-cffe47703991"
        },
        "item": {
          "id": "55e308f3-91df-46e4-8c5a-992903d7ac6c",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "7a643c92-d6d7-454a-b55a-f12ed049cf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49ab75c-3a25-42c5-8a1b-491b30fa311d",
        "cursor": {
          "ref": "e21f3b9b-e423-4627-95de-85f70b532735",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1238653b-8395-4966-ae44-457c6cf571c1"
        },
        "item": {
          "id": "d49ab75c-3a25-42c5-8a1b-491b30fa311d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "186816b6-80a2-4211-bf8f-8cf5a9db530c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce2272d-ff17-4777-9260-4478ddc32bda",
        "cursor": {
          "ref": "a73f7c4b-f16f-42bb-8456-74a5cc476273",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3c9efe2f-b664-4a0a-b56d-128208e385c0"
        },
        "item": {
          "id": "6ce2272d-ff17-4777-9260-4478ddc32bda",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9b8cb959-ceec-4ccc-84f6-c76da09dcdb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cae55bd-6eb8-4d49-babd-bd6cb466b0d7",
        "cursor": {
          "ref": "1f30b408-ee1b-42c7-aca8-99eebfdd0891",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3816544c-c621-4e32-9a36-b23d652086fd"
        },
        "item": {
          "id": "4cae55bd-6eb8-4d49-babd-bd6cb466b0d7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d3470294-f20d-4cd7-b154-864393c5efe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9653014-415c-49f2-b86b-3295a9e9881e",
        "cursor": {
          "ref": "fde98aff-aa07-4b01-aa30-c0157256752a",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e0732c9a-04ae-4023-9ee5-3ed9b51d3d0e"
        },
        "item": {
          "id": "d9653014-415c-49f2-b86b-3295a9e9881e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3ae673e7-d4a5-41c9-b804-e7b89bccece1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06aed184-0d0a-4ee3-bfcc-65abc90ffefc",
        "cursor": {
          "ref": "c2225524-7789-4ccb-86b3-ee0f4582e6e6",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "014859b3-4a6b-4829-afc7-823f0a7c8336"
        },
        "item": {
          "id": "06aed184-0d0a-4ee3-bfcc-65abc90ffefc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d2325985-d930-4261-a6df-6d7a484508f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99e3006-46d7-482b-b934-668c49db004d",
        "cursor": {
          "ref": "a617342e-dc13-4d46-accc-82f20e34ecae",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d901dae2-6d46-437e-b00d-9542e82aef30"
        },
        "item": {
          "id": "e99e3006-46d7-482b-b934-668c49db004d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c094ad43-e1e5-4054-8782-5ce1dc34f28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b2c246-71e9-432f-8c45-81aa65eb7d94",
        "cursor": {
          "ref": "03642d89-ea3f-4233-ac89-442ce8bcd0b4",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9269c87b-b402-4350-977d-c17f3bef8715"
        },
        "item": {
          "id": "f7b2c246-71e9-432f-8c45-81aa65eb7d94",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f0cc4aeb-af0c-4482-abd3-2728a53c30b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69fa7b79-111a-4413-983b-6dfc5886f294",
        "cursor": {
          "ref": "233ca6ed-6d63-4c1a-8244-8e4e97124f87",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "371aff0c-a725-47e5-b648-0d169d1fd51d"
        },
        "item": {
          "id": "69fa7b79-111a-4413-983b-6dfc5886f294",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7d9bac41-55c7-41d7-9cdc-4ed3b203b359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20063998-e86b-4aef-8301-f92b2d7c274a",
        "cursor": {
          "ref": "a9df4a7c-70f3-44ec-b678-59f62b94334c",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b7a0faf8-0102-44c2-88bc-e58c68c276db"
        },
        "item": {
          "id": "20063998-e86b-4aef-8301-f92b2d7c274a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3134d257-bace-44f3-9160-da236559660d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a922ad55-54e0-4f7b-aeb9-fb7188edab36",
        "cursor": {
          "ref": "53214ba3-0d6e-41bd-a734-63bb0110c193",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a7a8f756-3ddf-4e07-90ef-20d8783dd2b8"
        },
        "item": {
          "id": "a922ad55-54e0-4f7b-aeb9-fb7188edab36",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e38efc27-7da5-4e2b-bef6-f0845d3dc515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c18325-9a02-4f9f-8315-6eb77dbb1a3d",
        "cursor": {
          "ref": "83698439-61e9-4a16-a8a5-3f7595756bd8",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "108d3651-f2a6-44c9-8a41-0ff2d271dbb0"
        },
        "item": {
          "id": "e6c18325-9a02-4f9f-8315-6eb77dbb1a3d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "65886027-ccbb-4515-922f-ed07a9dcb689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfea19c-f392-42b4-8f04-5f640c503fe8",
        "cursor": {
          "ref": "727ea377-7da2-4f86-ad9c-67220580ed13",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7b751a00-dcfb-4b31-8ea2-1a64b9037910"
        },
        "item": {
          "id": "9cfea19c-f392-42b4-8f04-5f640c503fe8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bb8017e7-11c8-44a9-a59b-242092bb347c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cc57a5-dc7c-4fc3-8109-bbe9728d600c",
        "cursor": {
          "ref": "010326bf-ba2c-47b0-bdf8-32f45262eec2",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4ea87e21-2a5e-4867-901e-0a88c339c5ea"
        },
        "item": {
          "id": "44cc57a5-dc7c-4fc3-8109-bbe9728d600c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "48196459-0cb7-4363-8a87-e7f6abc6aa68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93da031f-4e68-48a3-b5d1-9625b1c3c4ed",
        "cursor": {
          "ref": "52d5f234-3573-428b-a446-de87586c266a",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b93318c1-5768-4f3b-ab14-840efb333bd5"
        },
        "item": {
          "id": "93da031f-4e68-48a3-b5d1-9625b1c3c4ed",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c59030f7-6c8d-4cec-a993-ff5929f97431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d793833-704f-452b-a8db-fcc71e235ec8",
        "cursor": {
          "ref": "acadc795-b783-41d1-9ae1-edd63815fd29",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "204fe73d-0c99-4033-a137-c0d1595c096a"
        },
        "item": {
          "id": "1d793833-704f-452b-a8db-fcc71e235ec8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a14f0323-5548-463f-9e09-669326150856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc00aa1-a712-4e2a-9b37-3a75e0cd28d1",
        "cursor": {
          "ref": "a3377a5a-e15e-482c-b9e7-2538c431507c",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "659ba51d-f157-4d25-9b3b-f8ae2a488e87"
        },
        "item": {
          "id": "3dc00aa1-a712-4e2a-9b37-3a75e0cd28d1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ffb061b6-b7ff-4d85-810b-418345ae3f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d1243b-d5a4-4735-aeea-5d7d2b21e735",
        "cursor": {
          "ref": "071775ec-7cdb-4f74-8388-6d15269bcd86",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4ed2ab16-9be6-479d-8ade-9d7f3ee742bd"
        },
        "item": {
          "id": "43d1243b-d5a4-4735-aeea-5d7d2b21e735",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3eba3356-bd7f-4444-a79c-771447a213d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ae6b9b-05ce-402d-81ab-f9ce61675519",
        "cursor": {
          "ref": "841c25cc-f4f0-49a3-9df0-f2edd59d5afa",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7b55f9dc-8cb8-4147-b5a8-e84c04e7f61e"
        },
        "item": {
          "id": "d3ae6b9b-05ce-402d-81ab-f9ce61675519",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8bcffc31-bb8d-42c5-9b55-0c1678e5e07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32c98c7-36f5-4487-bdfd-46027bba785d",
        "cursor": {
          "ref": "ad814d21-1082-42d3-a63e-31ba98b691a6",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e9733bf2-fa0c-4ba7-bb4a-5e0ab0056895"
        },
        "item": {
          "id": "c32c98c7-36f5-4487-bdfd-46027bba785d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f93f0199-aa2f-45de-a764-78d7227b9706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a039255e-cb3c-4027-8213-3b0a4c1b791b",
        "cursor": {
          "ref": "5f32fa72-e643-47e5-ab6d-e7d076f83ed4",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b4978bb8-57e6-42c5-b2f2-238d75f726b2"
        },
        "item": {
          "id": "a039255e-cb3c-4027-8213-3b0a4c1b791b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cf3f3881-a156-402f-b8ac-f4a577653ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c16e5d-53a6-43af-adbf-ee68e3904ea3",
        "cursor": {
          "ref": "afb9a1d3-5ee5-4565-abf7-25b892db3ef3",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "810f3ae4-e026-4545-97c5-c72eb0716235"
        },
        "item": {
          "id": "44c16e5d-53a6-43af-adbf-ee68e3904ea3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4b67d832-f131-4399-a4fb-403b79da4e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5831c7-a8f4-48f7-9858-9c829568656c",
        "cursor": {
          "ref": "8947c705-c521-4512-8136-9e378ab6534c",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b45680a2-9ef0-401e-af38-68d00284a9ba"
        },
        "item": {
          "id": "cd5831c7-a8f4-48f7-9858-9c829568656c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8b9798d2-cb78-4b9b-817b-03309e704bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4f9b3f-be81-4f87-a35a-95dbcf29d980",
        "cursor": {
          "ref": "e3494c14-5ec1-484d-851c-64b8c076fc21",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5d1059d1-5133-4996-8012-ecbdfe323e7c"
        },
        "item": {
          "id": "df4f9b3f-be81-4f87-a35a-95dbcf29d980",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3c3748a1-f197-4896-bfbe-3e6694d0963d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfa4f38-1706-4d65-b680-6428ed929e13",
        "cursor": {
          "ref": "665c3eb8-5281-453f-9215-2198dd398197",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f85dc773-1ca5-4d2d-80a6-7f8b93a00bca"
        },
        "item": {
          "id": "bdfa4f38-1706-4d65-b680-6428ed929e13",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5024c0af-845a-414f-8198-71c458d63c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64162042-a84c-488d-8b37-a02772be4233",
        "cursor": {
          "ref": "31ff28b8-a26c-4d87-acd0-6bc15bc50928",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "49277a81-b77c-4843-b880-b96e601febbb"
        },
        "item": {
          "id": "64162042-a84c-488d-8b37-a02772be4233",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ad0cfc87-3bd3-4302-bad5-ce04bb8c974d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b478e3-dd26-408f-8464-dc9216aba602",
        "cursor": {
          "ref": "1a4c84fc-d9a2-48c7-adea-1f672710239f",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "55a7a075-73b0-4977-92db-70c52b6b8313"
        },
        "item": {
          "id": "e9b478e3-dd26-408f-8464-dc9216aba602",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6b0ff6c6-740e-40c3-82cb-14190d7dd59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090eb322-111e-4903-bea0-2fb144874c19",
        "cursor": {
          "ref": "c0c3e9a0-89e6-4505-8f8e-4973f8a51e46",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "91160fe1-50b5-4cfe-b3ca-402334dcc5ab"
        },
        "item": {
          "id": "090eb322-111e-4903-bea0-2fb144874c19",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1826c41f-58d6-4ced-a28f-eab86b769416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efe0302-9a5d-4b48-8664-8fe3eba3d0c8",
        "cursor": {
          "ref": "b53c31e3-448d-4b3f-8085-e9306b4b6fed",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c286b367-cccc-4f19-81ed-008698683d73"
        },
        "item": {
          "id": "7efe0302-9a5d-4b48-8664-8fe3eba3d0c8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "928ddfa0-65c6-4298-98ac-a7e00a9b9379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d7d538-6c0d-4361-a830-c54a831d3ed1",
        "cursor": {
          "ref": "5fe76841-afde-40ab-b265-8f570bbcb250",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5e081f06-1563-4216-9c52-31b91777f878"
        },
        "item": {
          "id": "64d7d538-6c0d-4361-a830-c54a831d3ed1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f7b101f1-31dc-40f4-ab69-c85b5fafa0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fec885-1ac1-41f4-bd64-72aebf3c8fc7",
        "cursor": {
          "ref": "7825a5cf-5a09-4d0d-bcd4-48e41d062a5f",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "91664642-38bd-48ce-ae51-c42b61613929"
        },
        "item": {
          "id": "e8fec885-1ac1-41f4-bd64-72aebf3c8fc7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "568c072d-ca92-43d2-8757-b6889c14e7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905aed3e-7735-4023-aa1e-7f611b625f2b",
        "cursor": {
          "ref": "7bcc23c8-c51c-4ff5-aa85-0d53ad09681a",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "88774e66-06ef-483e-8d28-c97e2cc44d8e"
        },
        "item": {
          "id": "905aed3e-7735-4023-aa1e-7f611b625f2b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8c0f4a86-2cf2-401b-a40d-698d3746713d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0329871a-01a0-47ec-b58b-2b7c68589871",
        "cursor": {
          "ref": "f5e13312-2131-4aeb-8299-21d2b78f9812",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7b07baac-d84d-47da-a4f5-3215e51ce107"
        },
        "item": {
          "id": "0329871a-01a0-47ec-b58b-2b7c68589871",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "39a2086e-d215-4cbb-8954-63eba7a2e0fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68012f6e-dfd7-4927-ad0b-644b310dc673",
        "cursor": {
          "ref": "7b3fc862-63ff-476a-b6f5-fbd17144154e",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f893bad9-279b-447d-86f1-a3f092150997"
        },
        "item": {
          "id": "68012f6e-dfd7-4927-ad0b-644b310dc673",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6646a09e-5d18-46e5-b90d-1100dc9208fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263fc9d6-6110-4222-87fe-730fdf952252",
        "cursor": {
          "ref": "1ea0adaf-01c7-44d8-a689-f3d9c3aa8ab3",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "271b33ed-3ef8-453e-b1bf-24dfe74748be"
        },
        "item": {
          "id": "263fc9d6-6110-4222-87fe-730fdf952252",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "890915e0-034d-4151-9825-1a6c5573267a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa9406b-387b-415c-bc91-277092d9ce47",
        "cursor": {
          "ref": "b712e39b-c5c3-4ca5-b318-f24445b9c71f",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e77d7c36-765a-4872-b7df-5ef41b9a044b"
        },
        "item": {
          "id": "efa9406b-387b-415c-bc91-277092d9ce47",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1b90dfe8-0308-425b-940a-807ec568b414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6598c128-c9f5-4a81-b76e-03b25eeda0ac",
        "cursor": {
          "ref": "29040161-bf8b-49ee-8045-1578be0f5334",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a0e3f302-bb5c-4552-a128-68088ada76ef"
        },
        "item": {
          "id": "6598c128-c9f5-4a81-b76e-03b25eeda0ac",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8c0855d3-45b3-4453-ba48-20bd450301e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ffb4a9-4cc3-4d49-8df3-0e26988ac809",
        "cursor": {
          "ref": "e7eb91af-ad5d-4f1f-a6e2-6e6c016e6e08",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7ac66c98-862d-4d57-bfe8-8ea36508b08e"
        },
        "item": {
          "id": "33ffb4a9-4cc3-4d49-8df3-0e26988ac809",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "04158557-9f94-4f28-b9db-e68b7a3cb377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9b5148-a796-4c9f-a63d-6c9cbd8c37b4",
        "cursor": {
          "ref": "42b6f94d-7ce7-4b4b-84cd-87b016194171",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f66ac44a-02f2-4234-92d7-c270c65cc356"
        },
        "item": {
          "id": "7e9b5148-a796-4c9f-a63d-6c9cbd8c37b4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c6f17b2c-464c-4693-826e-d2da0c043de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119985b4-d6f9-4c71-afc0-29930bd26585",
        "cursor": {
          "ref": "7559b654-8166-4a8a-8ff0-93f5b38636c1",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "20d2a5c6-3f2a-44c1-ab10-a15fda1f80b2"
        },
        "item": {
          "id": "119985b4-d6f9-4c71-afc0-29930bd26585",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "70773924-4e1b-4f0b-881b-6452f8a96952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d580ffda-c60e-472c-9d35-a98bf433974d",
        "cursor": {
          "ref": "6c53e47f-6e10-42bf-a851-759b964baa97",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "66f25d73-d8d4-409b-b76e-224e0e0b3745"
        },
        "item": {
          "id": "d580ffda-c60e-472c-9d35-a98bf433974d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "eecb9b4c-6771-444c-a91f-6c46e07f5d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5eea40-1e47-40c2-af08-5facb2608e01",
        "cursor": {
          "ref": "954162b0-2381-40aa-9c89-c3bc7357ec29",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "71ce4022-7714-4db3-86b2-5d1c51fd2bb4"
        },
        "item": {
          "id": "bf5eea40-1e47-40c2-af08-5facb2608e01",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5ce58890-e831-4ce2-9931-557089eefcff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e428c9d-93ad-4d8a-8ccb-943505c84542",
        "cursor": {
          "ref": "86033018-4a3e-4164-b8c9-4dcd32cc52b2",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "270763ad-6300-4891-93b6-746a1e2bab26"
        },
        "item": {
          "id": "4e428c9d-93ad-4d8a-8ccb-943505c84542",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a3ca0ec8-9900-43c7-b92f-f27b240b2686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123b9597-ac1e-4326-ae33-76d258d40d1e",
        "cursor": {
          "ref": "5ece508f-ca72-4fae-a26d-db29b37a36e1",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5916140b-8a37-4f73-b523-b642538c909c"
        },
        "item": {
          "id": "123b9597-ac1e-4326-ae33-76d258d40d1e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5c833a4c-a5ea-403b-9cbb-201447481c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9e41c2-b699-4fac-ad12-4d6dee14a52f",
        "cursor": {
          "ref": "455b094e-20a9-4a7a-ae67-4c704d2e5160",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1a96c9db-6e80-41dd-9b70-f28cad8f20a2"
        },
        "item": {
          "id": "cb9e41c2-b699-4fac-ad12-4d6dee14a52f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9d06b2c6-24fd-4169-a568-d6d7462a7ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba6631d-a950-4c1b-a9c7-b570870b606f",
        "cursor": {
          "ref": "a511a12b-1547-4b1b-b211-78020ab95743",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "042a572d-ea88-4036-a111-bfc5068fc4e2"
        },
        "item": {
          "id": "eba6631d-a950-4c1b-a9c7-b570870b606f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "03e9a4de-2103-4e40-bbe7-3a51c01e3814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfdbc1f-6c5a-4e92-a2be-ddb7a7c6c82b",
        "cursor": {
          "ref": "49c9c825-257b-4f27-9347-4b7f54d2bfdf",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "43d8182d-ee63-4b79-97c7-a9273d417b59"
        },
        "item": {
          "id": "1bfdbc1f-6c5a-4e92-a2be-ddb7a7c6c82b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7efdf09f-a80b-4a57-b5b1-694564342c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dd2763-393c-4224-80ac-4cb7796c92a8",
        "cursor": {
          "ref": "2cc79327-4f2d-4e4d-92d8-7cefc8d0474e",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "abdcad77-6a60-45a5-b264-fd1b0e6dbf14"
        },
        "item": {
          "id": "a7dd2763-393c-4224-80ac-4cb7796c92a8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bad7c290-100b-4db9-9954-0dccfc167f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b12615-521c-4605-9f15-519293c6a73e",
        "cursor": {
          "ref": "44436d2c-9e01-45ed-a2ad-d3a45af073f5",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bff05a85-279c-4710-b718-daa3aa8c3f38"
        },
        "item": {
          "id": "13b12615-521c-4605-9f15-519293c6a73e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "eaf1eff3-75f7-4e5e-be6d-839343a730d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427786ce-51f6-4259-b54f-990939070098",
        "cursor": {
          "ref": "97df2427-f5be-436e-b516-ecb5869ed07b",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c14654a5-8eba-4343-b197-3b7f219f4f54"
        },
        "item": {
          "id": "427786ce-51f6-4259-b54f-990939070098",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e831bd1a-df8c-49b2-9231-ac7aa004436e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16be953-66fd-4714-ac01-5071f6933936",
        "cursor": {
          "ref": "f74b90af-5158-4b49-960b-c786e2f4e097",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1093fdc5-7c1b-4271-85d5-e7492dc97f88"
        },
        "item": {
          "id": "f16be953-66fd-4714-ac01-5071f6933936",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "239b7905-fd22-4520-ad77-3e79ea3e845e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335e525b-d241-420f-b6e6-ff0400c5a558",
        "cursor": {
          "ref": "c3031ddf-e122-461e-9f5f-9427c2661623",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a081d62a-bb49-4675-8023-46e883ac21c5"
        },
        "item": {
          "id": "335e525b-d241-420f-b6e6-ff0400c5a558",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "708a3467-2d07-421e-9531-9a932a3bd421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53db892f-f875-4a03-9606-c9b6d3c11cfd",
        "cursor": {
          "ref": "64d7d797-ad3d-4ced-8b35-fe50794b8f07",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d70a4fee-1cc0-4ae5-b2a6-4d0e872dfab5"
        },
        "item": {
          "id": "53db892f-f875-4a03-9606-c9b6d3c11cfd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9cfdfee2-dcff-40c9-bcc2-517639467b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e150302-b9a9-4d51-9b3a-3a54de44bb5f",
        "cursor": {
          "ref": "2e5201af-cfa9-4e5e-8b6a-00c70e12eef1",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "59fd8add-82aa-4010-8da0-3bd172295841"
        },
        "item": {
          "id": "0e150302-b9a9-4d51-9b3a-3a54de44bb5f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c4f7daff-d747-4045-9084-7c2bb0f56967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db44d11-5b64-4b73-824b-a0be8a55fedd",
        "cursor": {
          "ref": "59f57b44-6017-425f-8db5-1ba986ea7d8e",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dcd51121-2792-4182-a1e7-7de852e07ca2"
        },
        "item": {
          "id": "5db44d11-5b64-4b73-824b-a0be8a55fedd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "19e6cb7f-a986-4167-a6d8-6c6af312a850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c178a80-0454-4dd9-8058-2e774b6cf5fc",
        "cursor": {
          "ref": "faab5d75-50e1-45a6-84ff-e39ea9baf08c",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "31ab8f45-8fcd-47f0-991a-7a402ca9cc57"
        },
        "item": {
          "id": "1c178a80-0454-4dd9-8058-2e774b6cf5fc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1ad78429-e2e7-45d4-9866-6f60f3179301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f7e562-ec34-4506-a2d5-c3856289f757",
        "cursor": {
          "ref": "7db32703-f4f8-40a8-ba57-ab41060787e6",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "df34db78-e4b9-4c3b-9077-dd2d02a438ee"
        },
        "item": {
          "id": "64f7e562-ec34-4506-a2d5-c3856289f757",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ac873032-2418-4d2c-8324-444b3de84534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263d3d48-65ef-4253-9e9f-398afbd64085",
        "cursor": {
          "ref": "fdc5ec26-4ab3-4cab-8bff-5d696a0bf971",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "49709171-4dd7-4651-9a9b-fdc152070c65"
        },
        "item": {
          "id": "263d3d48-65ef-4253-9e9f-398afbd64085",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "770bf467-b154-47aa-8b8f-f2762121ff30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d60bdd-4cbd-4d5c-baf9-eda7fe0ead5d",
        "cursor": {
          "ref": "ab053b3b-bc8b-4055-bd7b-77b235ee945c",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6fdbe861-60b1-42b3-8803-e3645b314de2"
        },
        "item": {
          "id": "90d60bdd-4cbd-4d5c-baf9-eda7fe0ead5d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "012d44c7-597f-414d-8aa7-9e757f4110d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf1622e-ecf3-47d0-807e-55cb020c2d03",
        "cursor": {
          "ref": "4cc42157-ee43-464b-9ddc-babae7a726d0",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6feed766-a87c-4378-9d27-1396fc2ba01d"
        },
        "item": {
          "id": "3bf1622e-ecf3-47d0-807e-55cb020c2d03",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "32ceb261-3283-42a4-a76f-192ada9ba87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a017fda1-bde3-45eb-8b0c-0b2ad8634e2f",
        "cursor": {
          "ref": "9fcdf4de-1739-49ba-95cc-7aa27bcde139",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5a2b2767-d0ec-4f87-936e-6517c0d5dcb2"
        },
        "item": {
          "id": "a017fda1-bde3-45eb-8b0c-0b2ad8634e2f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "370d1d47-56e7-4457-b89e-5fb1ecd15d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f12e8f4-d28d-472f-a610-ba9d9eda4ae1",
        "cursor": {
          "ref": "c0e932b1-f7f2-436e-b4cc-3de76a4eb39a",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "52078435-95d5-42ca-a79a-bcdf79dfbe8a"
        },
        "item": {
          "id": "7f12e8f4-d28d-472f-a610-ba9d9eda4ae1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ba375866-e271-4d74-9ef0-ac7b3dbaf2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d030c0-d907-485b-b718-7af03d69904f",
        "cursor": {
          "ref": "7ebb2acc-ed6a-46d1-a687-94788469c1e3",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d74789c0-71f3-496c-82d2-7a816fb16eba"
        },
        "item": {
          "id": "02d030c0-d907-485b-b718-7af03d69904f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "510b5ce5-4e3f-4a51-8ece-fe060cc3a62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abb1370-4a51-44a7-b112-1ca449d48336",
        "cursor": {
          "ref": "ffa2cf4b-ceb2-41d1-bd02-35d62907aa35",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d56c7d8e-8eac-4441-95b2-0c993587aa4e"
        },
        "item": {
          "id": "9abb1370-4a51-44a7-b112-1ca449d48336",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "69c8e773-e9a9-4a34-8db7-8db9d3f5ee6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b05508-feae-44ef-8dff-200b13f48aee",
        "cursor": {
          "ref": "03f55350-b50c-4dc3-a732-1c4593a77a8c",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4a83e550-a483-4b08-8567-ec837e8d16cf"
        },
        "item": {
          "id": "f0b05508-feae-44ef-8dff-200b13f48aee",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b325b4d8-8c78-40de-8d67-edcf7aba5db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25041de2-8ea2-46eb-84ea-dd0f1fd3e255",
        "cursor": {
          "ref": "40c12326-bad1-4f08-ad69-0996f26ed27c",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "19e417d5-0cf3-4837-9ffe-c4daac6ffeba"
        },
        "item": {
          "id": "25041de2-8ea2-46eb-84ea-dd0f1fd3e255",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a3eccc7f-4379-4070-8f41-8d84a4e557e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb3f316-6a95-42a3-9918-ada4926b01c6",
        "cursor": {
          "ref": "f89b0194-1f82-474c-b211-18d93b0c6fa2",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "41c67c26-3061-41ce-8719-66858eb1f4cf"
        },
        "item": {
          "id": "6cb3f316-6a95-42a3-9918-ada4926b01c6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0de6ce87-c248-4f21-9eea-a4d212a2c340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1597d2-2234-489a-8079-0cf9c3000d50",
        "cursor": {
          "ref": "b9e41556-8ff7-49b9-84da-1855b19d110c",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1f46453c-64d0-4dee-9be5-7757a0981b38"
        },
        "item": {
          "id": "8c1597d2-2234-489a-8079-0cf9c3000d50",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8b4c3574-231c-44b0-968a-aeef03b370cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03e6fe5-5e01-48ff-bba8-d866ce201364",
        "cursor": {
          "ref": "954bd2fc-9c92-4d38-a590-15cc8e2c6033",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "34b58aff-626e-4d31-a530-5f4ac5da279f"
        },
        "item": {
          "id": "b03e6fe5-5e01-48ff-bba8-d866ce201364",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "25cf55e2-59bd-4a6b-a001-21998a5a3e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ac52ee-11d5-4bb4-b0cb-f9fd909eba74",
        "cursor": {
          "ref": "3db3c68a-d8e7-4c5d-b57f-db108bcee421",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "15e6fcb2-c8f9-4b26-a71e-bf7905712e0f"
        },
        "item": {
          "id": "f3ac52ee-11d5-4bb4-b0cb-f9fd909eba74",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dfa44b8a-ede0-4765-adb4-d6008677c5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78102391-1991-4a89-aeb7-7843b8fb04b0",
        "cursor": {
          "ref": "992857eb-21a2-4b01-9430-89d6ee41644b",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d6adf774-b48d-4c90-a4ca-1b0b2bcc03c0"
        },
        "item": {
          "id": "78102391-1991-4a89-aeb7-7843b8fb04b0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3e2bf116-d3b1-4231-a799-ae2c134ef1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462041d4-09bd-4687-be16-e521a083b7f2",
        "cursor": {
          "ref": "6e878f3c-d7f0-4705-b65e-8a0744b387b2",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "31c015be-8f3b-453a-8954-6c85f3f468a0"
        },
        "item": {
          "id": "462041d4-09bd-4687-be16-e521a083b7f2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1e35bc79-7ea1-427b-996c-6258a010c45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ea7c8e-7e77-4028-a139-79a5b3f84dfc",
        "cursor": {
          "ref": "a0b64f58-2f42-40f5-a4de-16af070be2da",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "98cf9631-e9a9-4211-9bdb-35eb9f428bd2"
        },
        "item": {
          "id": "55ea7c8e-7e77-4028-a139-79a5b3f84dfc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fe57a08d-8132-4911-b36f-37ad1515b8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb0326b-778e-4311-bce2-cb146bc01255",
        "cursor": {
          "ref": "501417e7-c7e4-4f44-a2fe-1506b60e58e7",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "454c1cc0-5b8e-445c-8835-b2f93933aed1"
        },
        "item": {
          "id": "cdb0326b-778e-4311-bce2-cb146bc01255",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4dbc1881-64f3-402f-a98a-45b3044e2f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23599a02-34ff-4950-bd15-f47a011aa3a1",
        "cursor": {
          "ref": "fd2ac484-1b9d-454a-bb3b-b6cc597171a1",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "db36a54e-4a14-4f50-ad76-4893b11dda42"
        },
        "item": {
          "id": "23599a02-34ff-4950-bd15-f47a011aa3a1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6bdfcf52-9bbe-414c-b553-3dd9f7e9cd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d556f24-a3ef-44ae-98c4-7c06ecc8f3b0",
        "cursor": {
          "ref": "77d23f90-a8c2-4d83-84cf-73e00aa6cd1e",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9dd4dd92-ca08-4c54-a780-88c460365203"
        },
        "item": {
          "id": "8d556f24-a3ef-44ae-98c4-7c06ecc8f3b0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fd69b208-993d-4ca0-a9f0-32b6829f9d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545ce9d6-e512-4709-96fd-dea7783e0188",
        "cursor": {
          "ref": "ca2ae0dc-9c37-4961-aea8-d2f4674ca260",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f7c861bf-3ac8-47bd-84e2-ddcf04df3e19"
        },
        "item": {
          "id": "545ce9d6-e512-4709-96fd-dea7783e0188",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "85ee8111-e2a1-4c14-8d36-21c08da676bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6806e4aa-50c4-4729-aebe-6f3c3a3d844b",
        "cursor": {
          "ref": "67ac67dc-6aaa-46d1-a42d-f634413d1ab7",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bed9670c-1f80-43aa-b979-08f99fe90382"
        },
        "item": {
          "id": "6806e4aa-50c4-4729-aebe-6f3c3a3d844b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d92e180d-af41-49c7-831d-733bd98cb708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24be5d7-0bbb-442c-aa0f-e63a4d6d1866",
        "cursor": {
          "ref": "8706acc7-82b7-44bf-af61-c5bf52dcb42b",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6f438a11-7fe5-4f7d-8609-76ac30e7a179"
        },
        "item": {
          "id": "f24be5d7-0bbb-442c-aa0f-e63a4d6d1866",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "52184482-4ffb-4188-8623-4b63a3d5e62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02dce90a-6ade-4777-a3db-bcdde8a36e2b",
        "cursor": {
          "ref": "4cef38c8-a965-44c2-bfdb-492a722ea9a5",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3d3cc994-f23d-483d-ac04-5158cf885737"
        },
        "item": {
          "id": "02dce90a-6ade-4777-a3db-bcdde8a36e2b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f5b5095d-64c7-4693-8729-783b1fa7d769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81118d3-2a5a-4c13-9c35-5a064628cb33",
        "cursor": {
          "ref": "fd107113-c29a-43cd-b4ce-5c98e0062cee",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7b2e6eac-ef1f-4027-a317-ae38956e52de"
        },
        "item": {
          "id": "f81118d3-2a5a-4c13-9c35-5a064628cb33",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a8590382-468d-4f11-b8d5-e5ee828ae8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6acc342-7634-485f-bc88-df851ff19eda",
        "cursor": {
          "ref": "3adbfa4c-5fb9-449f-bdc7-488916f965a5",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cc857b5e-c129-44b7-aae1-0dd3e6cc5610"
        },
        "item": {
          "id": "a6acc342-7634-485f-bc88-df851ff19eda",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca6b53f2-89b4-4308-a3f4-df451b1d66a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "0bf8c978-96e8-43cf-948a-cbdd66ca4763",
        "cursor": {
          "ref": "30955734-f70b-4a75-809c-04bb0d3ee355",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d4628e70-110f-47bd-8d8a-e0435eeeee3d"
        },
        "item": {
          "id": "0bf8c978-96e8-43cf-948a-cbdd66ca4763",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8197381d-69d7-433f-bd46-c6af8349b436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "01401cfc-ec66-45d8-9f5b-fe8c4eb82f87",
        "cursor": {
          "ref": "28297807-7e9e-46f8-9db7-2053119206f2",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a04ed36f-9271-4520-8643-ebb3c0599699"
        },
        "item": {
          "id": "01401cfc-ec66-45d8-9f5b-fe8c4eb82f87",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "83b95ed4-2c91-4056-9f16-3433bd4a8cc9",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d2cd80-b2ab-4899-a763-c95609c5b74d",
        "cursor": {
          "ref": "3e9bd090-b2a8-4f50-98c1-53942d469bfc",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9322ff89-b255-462d-8cba-640566840ae0"
        },
        "item": {
          "id": "27d2cd80-b2ab-4899-a763-c95609c5b74d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f6bb27f0-1865-4656-8ef0-1b12df036c21",
          "status": "OK",
          "code": 200,
          "responseTime": 2567,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "655b0c86-c039-46fc-ae7b-1374734e0167",
        "cursor": {
          "ref": "c5b56fab-9625-4778-8479-4d390489ee53",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "657fb6d1-bbe6-4d3f-a1e7-b2abb67da873"
        },
        "item": {
          "id": "655b0c86-c039-46fc-ae7b-1374734e0167",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0b0fa50e-47d9-4486-920d-b70336840c72",
          "status": "OK",
          "code": 200,
          "responseTime": 2359,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85cb61b-be0f-48ef-8ecc-af6c90cdb47c",
        "cursor": {
          "ref": "5d0aba79-50d3-450a-a0a7-5cff0ba36ffd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1568c8a7-79b3-44dc-a34f-481801276aff"
        },
        "item": {
          "id": "c85cb61b-be0f-48ef-8ecc-af6c90cdb47c",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c85cb61b-be0f-48ef-8ecc-af6c90cdb47c",
        "cursor": {
          "ref": "5d0aba79-50d3-450a-a0a7-5cff0ba36ffd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1568c8a7-79b3-44dc-a34f-481801276aff"
        },
        "item": {
          "id": "c85cb61b-be0f-48ef-8ecc-af6c90cdb47c",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c85cb61b-be0f-48ef-8ecc-af6c90cdb47c",
        "cursor": {
          "ref": "5d0aba79-50d3-450a-a0a7-5cff0ba36ffd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1568c8a7-79b3-44dc-a34f-481801276aff"
        },
        "item": {
          "id": "c85cb61b-be0f-48ef-8ecc-af6c90cdb47c",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e6514677-bd8b-463a-92f5-ad6805872afa",
        "cursor": {
          "ref": "676f7b61-48e0-4145-bf86-b3fe69e524c8",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e5135cd6-d29e-4e03-9c32-fec7a7ae4ed0"
        },
        "item": {
          "id": "e6514677-bd8b-463a-92f5-ad6805872afa",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "efacac42-0240-418d-a07a-4f260aa03371",
        "cursor": {
          "ref": "414d776a-7785-460e-8054-8017f1713aa5",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "23680926-81bc-4359-9cec-752c6508498c"
        },
        "item": {
          "id": "efacac42-0240-418d-a07a-4f260aa03371",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "efacac42-0240-418d-a07a-4f260aa03371",
        "cursor": {
          "ref": "414d776a-7785-460e-8054-8017f1713aa5",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "23680926-81bc-4359-9cec-752c6508498c"
        },
        "item": {
          "id": "efacac42-0240-418d-a07a-4f260aa03371",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f64519c6-2868-4cb2-b39b-3d4477ce33a5",
        "cursor": {
          "ref": "82cd8870-ab5c-407c-9c1c-581bc8f4af27",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8f108074-4e7f-4ac7-a610-f324fbdc4590"
        },
        "item": {
          "id": "f64519c6-2868-4cb2-b39b-3d4477ce33a5",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "795841ca-3a7f-494a-a37c-21254ea6a510",
        "cursor": {
          "ref": "9ce8dccf-6021-4b16-9ccf-f3130c810f25",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "abf0ca14-e97c-4e7b-aa60-3a8a9d533ef4"
        },
        "item": {
          "id": "795841ca-3a7f-494a-a37c-21254ea6a510",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "795841ca-3a7f-494a-a37c-21254ea6a510",
        "cursor": {
          "ref": "9ce8dccf-6021-4b16-9ccf-f3130c810f25",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "abf0ca14-e97c-4e7b-aa60-3a8a9d533ef4"
        },
        "item": {
          "id": "795841ca-3a7f-494a-a37c-21254ea6a510",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "86c27a25-0c6f-4850-8983-2ecb485ff582",
        "cursor": {
          "ref": "bcec4772-cd4e-45e9-8e96-61afe4b1dc68",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b078d82b-3028-40a9-8909-77b23e2dd701"
        },
        "item": {
          "id": "86c27a25-0c6f-4850-8983-2ecb485ff582",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}