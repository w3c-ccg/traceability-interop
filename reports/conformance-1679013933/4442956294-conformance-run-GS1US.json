{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "65038720-8a44-4075-8ad7-8267a1938292",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5a6a8f17-57b0-4482-bc6b-faadbfa5ec9d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d7dfe7e-56f0-4b3f-95c0-965f8a9a9972",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b48e8694-7a38-4ed3-98df-f44cc81c2229"
                }
              }
            ]
          },
          {
            "id": "b1a71e25-79c5-4c7c-bf33-50032fd66faf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4402a58a-7d89-48fb-8fa2-46b6046bebbb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "77606a98-1868-47ed-b14d-7b5858fbfbdd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6b59be26-b05f-4987-9194-0e4345cfa497",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "68ac3ad3-9373-40d1-a6ea-7f7589ea97a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3287b632-a6b5-43b6-ab5a-091959c40c26",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f389b063-1bff-4be9-b723-0446b3cd006a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4ebdc75-a608-4a57-8123-1073c5b91268"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2f692fd-de75-4484-983e-f0705862d6ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c4ef10b-5f95-49ce-a22b-a2245d976a13"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ec1f413c-ab42-4100-8bc5-d102e86eda5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "046c4f37-2fdd-4129-b00a-f9714d86d92f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce8234a9-902a-47e7-a791-96543de6acfe",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4bd39d67-e01f-4023-b2b0-b5cdb073d276"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec8f37f5-78e1-4964-a28f-bdd324a75002",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dd9438d-2ddc-44b6-b6a6-771eb8a1adee"
            }
          }
        ]
      },
      {
        "id": "6561bd3c-3abd-4ccf-9304-1421b0daa4e8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "79e571c4-4879-4b6c-bdfd-00a00e84d49c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de6c3071-fd50-4dbe-8b79-ec79922b3e99",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e3b4e5d-3cec-4ed8-9c5f-0df0c8965ed1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0aa3c6-60e7-4916-a122-dba4fb1de778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97dc3fb7-18b9-4d23-a8a0-3616469a3887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06d09cd-0d28-4b4e-81d7-c8e85050beef",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df3a7c0-0488-4172-a21f-de2c4e037248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0835e6d0-cbbf-45ed-983b-8925698d5bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08193e5a-a6d7-41b9-870c-e5f9d57222e9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf3dd9a-4f98-46b4-9bce-17b66942636f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1329bb21-3849-4e09-9301-5505926cd37d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8050714c-95c1-42bf-a181-927636725b7e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41ceb67c-c408-42d3-b2c5-62aa74feda22",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48d6b75-90f2-4356-9867-933e05f0d761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11d0f9a0-a60f-4324-bfa4-e788c002cdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0b1645-27f4-4033-a6bd-992b7006b4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb48393-8919-4518-bfee-5781c68222a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a5f6bb-90db-4631-a788-9fa8e6de04dd",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baad7d9c-eb46-44f1-ad84-2781cd97e70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2e2a1f8-2a04-440e-bc03-ac92033e31cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cd30c8-a58f-4391-b527-506b470844bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d5f7dd5c-379b-4879-a81c-fac99812707d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a31f762c-10c9-4029-8289-4d7b4a187c95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2c770514-ca3d-4513-bfbf-d2cb784ae731",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7d170df-8ee7-4edd-90ec-f7a5c15e0111",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1278f7ac-6500-4e40-8a4e-febe04d6147d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "935e48ea-91cd-4e92-ae99-554033260efb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e701a213-6947-4054-b8f2-7ffd1b44e2c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c2fe749-16a3-4daf-8409-d72bf0c82eaa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2bbef4f-df72-42ea-84e3-55e963265594"
            }
          }
        ]
      },
      {
        "id": "2f9d7cc4-485c-4a28-ac11-e25fe0c21521",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8316f7cb-343b-47fb-a55f-e052c3a3065f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db793a87-1ea1-4105-829b-4d3dd025d97b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "128ea815-8e5b-4f35-b6e0-164cfd4dd54b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ff3ccb-c7af-4c58-9a77-ce22cc33580d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a883959-99d5-40db-93db-c59b331b2fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ee0d78-f0a0-42e9-87c6-efc909a9a903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bc2630b-83ee-4c3e-b618-4f07bbe3325f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6087bc-cdca-43d3-910b-e2c754e8af7a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90146ddb-1c1d-4faf-8db1-1a3c2411e188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0304315e-5ff9-45ea-a1e6-451d8305fd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71668455-d1d0-49d8-bf2a-5d892167f957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fabd7881-c596-4c29-9ce3-b15cdfa9e384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3329cc-988c-463f-b1b2-2631bc1c7614",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b437359-f75c-45b2-a2c4-34debd5ff136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7608b7e0-331b-460a-9210-1d82ab8bafe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d712c83-d339-4452-846c-08235b62d270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "038b48d2-cd5e-4a00-b05a-7ffb8f84081c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac98edc-579f-4a34-96e9-971468f0924a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5739dc-a505-4a7e-9044-7514b11599ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead5fdfd-fca6-403f-ab62-49079c649488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e78675-15bd-48d0-87e4-17459999b368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f8008d3-617d-4141-896b-b21fd77f3189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb74aa9-5c4e-4dcb-a9a2-fbb7af14bf9b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8155984-27bf-4bf1-841d-95ca419fd7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240228b0-5f62-4a67-92ee-ba6cfdd308ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee348e0-bc62-4043-8656-5f6cb1c4cb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21904f27-47e2-43eb-974e-2778fd5f22ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37a9734-6bc8-4c8b-8dd0-aa965988ad93",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a0dd22-0698-4665-a959-6e0abc93e08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e7ceb7-b4c9-423b-a2b5-6a01b94d7c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ed2327-7bad-4496-a5c5-a0570bd2b6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "075c2f26-62c8-456a-9101-8f826dba9395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d65e1dc-0e84-42bb-8cc9-87f3309b1bd4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3070a14f-43a9-45f6-b50c-f3d62bdf17b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b189e05e-c092-4ad1-b975-82583bb67066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a19247d-65ed-4f05-86b3-5d07027b53fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0871bde-97b0-4341-9d92-3a78e7d1602f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57730cd6-a3fc-45c2-b2de-857967a7ff65",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a357b528-c216-490c-ac89-8d7db9a6f9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb34db78-a0dc-48ba-af7d-3e8d14d2b458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d8fdb3-b38b-4ec8-883d-cb4f5e25349a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39e7a44a-dff3-4219-887a-dd2e0e480492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43c10d3-33c2-4022-a827-5ccdd95a9df4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0845ffe-ef4c-4234-9474-b128c23126d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604f2e45-6648-4a9d-814e-b0d5140ecfa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33c6fcc-1dba-456a-b611-866f290544ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd26716f-973c-4659-bc02-bfef260a77cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c064061-1ff6-4ba0-acba-7ac1a36446dc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35ede53-78db-43f1-b780-369ab78a4d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011d11c6-d2ea-4e07-8359-3a12f61f4514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef238de6-d322-4c10-9355-29102b7b8e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d396a44a-459f-4285-ae2a-ef355001a511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f3df57-07c6-4286-95f2-a96bd5676af6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a43050-ef31-41ec-b724-37e927d28cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5224f784-0dab-43e1-b802-58b2c90c20ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae19d3f7-7dbb-4ced-a248-c1ab3c9f2b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8adedab7-b299-41b2-8b37-ff81627296cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db80de39-0ec7-47b2-85e5-e237dd90b520",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189046f8-f495-4617-93e5-8b2fdf499cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8975b99-4196-4d00-8c83-6911a3995d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6047515f-4af0-4091-8c73-d1153778d464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "877a5953-04a5-4c7f-9688-9e3088ee8187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cce796e-7c7b-4728-9ff6-fa8002bedd85",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366270b4-8593-4f06-a4ae-85b4e1e47800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc542ec-a4e9-4d73-bd96-66c33c61261e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493345a0-e0f7-42ad-bdd2-b6b118abf5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22a07cdf-4211-49ff-aeb0-2b62e75ce697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeab34e-8075-478c-a81f-b87d58503f60",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7545bf-6c83-4c38-a399-5a858aca0ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e4c25d-c133-4a2b-bbb7-b676b67c7afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00405fd-b544-4002-9442-0f298aeebf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f3e35fa-e7eb-4b3b-87be-6bbfed9c73ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70ca951-c8d9-4619-807a-025004d9040c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acc1b4d-521d-40ed-a323-4b03b79570e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54d9b0b-2ab4-479d-beaa-ee2db6aea261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8431a62f-9845-4685-8b1c-eabb27445f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78980f8a-80f5-4a55-bb62-4a19bbd1ed65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dc04eb-2368-4215-bf47-7df175f4b9dd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8726fc-71c0-4a4b-ab61-4146b5d04d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7970630f-6fb8-44ec-9d82-9f154b6d7e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9dbd6f-37ef-4593-b909-3fb63f3432b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d22bb3d7-ec90-4be1-bbd6-f45e2961cd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763ba874-f984-4e13-8c47-9272a42a9b69",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e323d6-c3d5-4235-a641-36a2b248b5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537e590d-ce5d-4672-8c12-2540cbcb5bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e9598b-fe4b-4a9d-b9c6-d06035b1f9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4062d278-d7ad-416c-bb26-44e2eab83e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b318cb7-6d3f-4e69-a837-020c5351575a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77035fb7-48ce-4e3a-9910-9c2e15a1d688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f67653b-8483-4641-8d6a-4da57bc12c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f9a538-d704-4c81-bd90-c3db43b8aba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "14763e57-b360-428a-9944-6ecfc349c762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30b7443-e6f9-4487-b29d-9547faedaa89",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80323303-86b7-4814-84f3-e19ed96f0f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fdca2d-3256-4183-8407-809f50364745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c401eefb-d7bd-49a5-a45e-be00726cbb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9233a283-04db-468b-ae43-bc17ad3dddb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693fe493-c6d2-463c-9669-0eef21266fd1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa3beab-1deb-4f90-8168-8ca0a5d9f8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c074adab-f93e-4333-a432-1b3e7f20f132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf784e66-3b53-4b39-8409-c63b36e8af73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a333c87a-4fd2-409f-9de0-12a7840ad8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44042da-b906-4ead-9968-df0ddd57fcbf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2e7d02-5f32-47bd-af8d-4d6da142ae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d081bb06-e493-44e7-8fbb-0f9860514456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5311fd6-4aa7-498f-912e-9e79f7a33317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7352b50d-5921-4c09-a100-c33c73ac5397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20787d7e-2b14-42fc-9ee2-bfe55a544f10",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5f1f60-0368-468b-9c8f-3618fca3cfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb00ee9d-706f-4aec-9081-8291f8fa5174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ffc123-45ea-4041-9f61-df79a5653961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "579824e1-db92-4035-9cfb-b1fb42d1dfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad965f3-de44-4151-9baa-edb54552fcbe",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05fc2dc-695c-4db7-9e18-5b4dd26d9e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8188b1d4-1bb9-48e1-b475-709c038e657a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bb0910-a71a-4d02-ba5b-1cea84116353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab79f7a-dc3e-459b-b593-180ac0fe439b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb9ec9-70c2-4bc8-bf34-a21ca4f0a982",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae0b283-7db2-44de-9e36-f25db52b7988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c9786a-3828-4c86-a9a5-b27acb4f2ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259d26e2-cb8e-432f-b390-2015bd38dc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1711ab62-8692-471a-9a15-f279e6afc08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4cd214-6ecd-4fe1-9d76-f96315132318",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e22f57-ea8a-4737-8316-956459fd10aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7132e42c-9539-44b1-ab0f-93cc1c674fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f49341-2ccd-48be-a0b8-4dcfcd30d7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74ad2797-b732-4a5c-9df5-6de64e7a7022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3400307-5e73-4aa1-bf11-6f76a8b97794",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4007feb7-a7d6-49c0-85d0-1fad8e005c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5da3479-11b4-4303-bbfc-66c4028c028a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f241e0b-f0d7-4cbc-bfe0-d7c15e703e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96fe44d6-0632-4fee-9224-c9aa092b95c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85282235-5c8d-429a-86b0-6a273d97045c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1870173e-ff7f-4368-8ce3-987cfbba1301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7589816a-5732-4e18-9223-1e3efd91e83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c2cfdc-8f5e-4a5f-9eac-e53f94b4d43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b232ca8-b854-401e-b590-ee02d1bc1692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecd0d8f-90d1-4cf7-b8bd-55d7057ccabd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf4ad0c-e007-46b5-b1e4-06b401e7e2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0a9bd9-3b7c-4314-b792-ffd717a6bc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80eeeaae-ad98-4c04-a61e-053da065c1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7808e9-d82b-483f-b16d-d6d81678649e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f660b8-3c9d-4c9a-86b8-29f7d0d0801d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f53959-24df-4d7a-8020-96316658ca0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45ae287-9185-48a7-aa2b-333a553b9ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c958f96-466c-46a9-9554-439ef7e1bf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5a86f9-036b-4dd6-b967-1b93e7057b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d7afc2-fbb4-4e3d-aa17-5e98ed6210c2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790c307c-f41a-495a-9cd1-b14f7c9a3def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76fb88e-b73a-4f22-b577-b88939a8e407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c424cc5-badc-45d1-ab8e-35037354ec1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "78bb5e3d-a0b7-40e1-b3f8-b77c05c071b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36815b4-59f3-44b6-80b1-6139b37b8d54",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2dfbeb-519e-435b-888a-8d7e7ab5e25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff357fd-88de-4caa-bbf0-7b97c4cfd109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0643049-d317-402a-b2bb-3c297099f7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d10007b-2582-4994-b386-71a9ad6d10b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0858c995-5480-459a-81e9-94996e4877e7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d9f12d-c791-4317-8bf2-4531435f7bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b7e774-21d6-4ca0-a14a-15269555cc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04299b5c-31e0-461e-88e7-b571091fd0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc2dd0a-7099-4aa8-b109-72a62aa7c0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534252da-1464-4d01-8e61-3e90b53a17dd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680eb776-9c12-45fd-b344-38eddd20a422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417df0fa-b671-43f6-9ff0-63c36a26bba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f97218-3133-4e37-b108-f3676c4c9b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0433f00f-4b0e-47d1-a320-78ec5d2a3cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4308ab8c-b148-4b22-a740-d84f85ae7b13",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27edea0-e840-4455-9a0e-00b6b9c826bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3491ea0a-bebc-4b6f-bdaa-8de4ae2239e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b32937-0450-468f-985d-1fbe7ad2238d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5042bd07-1fb3-4bca-8c6b-e73c5f1cc75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7be0f7f-b054-41a0-bf57-796b6a687848",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abab3f3-eed2-46b2-8e91-2431613de7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2aa0b5c-90fa-4d7b-ac03-67a142cb10f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bf37a5-b9e1-4fed-97c4-dc440d56c755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3e94e58f-3096-4bf6-8d74-c49101420ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a418a452-5eca-4139-97a9-0bcc77b5e118",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3451ab-522f-4668-b2a6-b6f3a15b9bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11c67348-2de8-433b-9b08-e9c7bddae9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec159f2b-8b06-4237-8684-edb7e94ab60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd9fb6a-d963-4011-b077-0bd262583dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4adf597-583e-4a99-bca5-68fca79ca2dd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfbf9d8-8aa7-4b5b-9791-c5a33fb40554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d77172f8-c8e5-47c0-9755-381c1305d8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0bd7bc-f717-400b-9c6b-d55f921a5207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a9882e-530f-4304-a25e-da92eb78c505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a91ef0b-d2f0-4692-adb1-068a9e4d5d45",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b3ba28-1f54-43ce-92eb-925fab915559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e6515b-cfc5-480f-89e1-30aea9e8fb52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226422f6-73ca-456d-a1fd-f8b0c4d7a8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f469241-e928-4dfc-8de2-5eef722fc89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b4114d-22c9-46b8-9e99-615aae7c4081",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dc6bcd-bc30-46e2-a820-5c96b28e6d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ef7b06-1057-4027-8bbb-8b138bb1ad8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c220cb2d-68e8-4470-a370-dedcce7f73bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c231fed9-262c-4f5a-af71-9e25adbb9f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7faaba-f1e9-4833-857f-560d797ac0f8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559b3c7c-bac8-4544-895d-1adba2b61cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781c76a0-aed0-423f-a794-d9265549140c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770e3023-a9ed-46ac-9332-8b329e427c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6d60f2-9138-4868-ab70-554ad0a980b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e9d6ff-f7cb-4a5f-88b0-0c13d64a1915",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4c0038-6177-407a-ad6f-1dc8f87a685a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c7b112-7456-4146-9edc-d4cbe150e2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672e14d7-78e0-416c-8d93-96a33a611635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ab9411-c5aa-4a24-b1e8-a77193b46701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65ff499-2461-4556-a436-91a42d9709b0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefc92b9-4c62-4f1b-b071-0aeacf08c03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97561f99-f020-4cbc-b819-f40490c0e897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c867a4a-6f19-493f-8615-96cdfaaf1a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "12f2660c-1f9b-49da-8b49-d648cc82d051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1085833-887a-46ba-aabb-080db8397afe",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80ac53a-ef51-4f6d-bf52-eb9132ea1c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0422c577-540f-446a-ab2d-1b4e5a87b0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633e3649-47fe-47f4-8f14-893520f37f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0235fad3-e17c-4fc6-ac3d-c98d8dffccc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84251c7d-d15d-42d0-a8b2-e093c03ded5c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99243883-0a3c-46ff-aa0c-97f7ff9a69e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c730563-594e-484c-8bae-0b47a76842e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e18306-7c57-47e4-864e-faa52eb2377e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e35f043-4633-40d5-bfc8-b9df24c69119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283f102c-c296-48cf-b134-99b1fe2cf044",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674ec0bb-5369-4d92-8c27-56fb33ef1500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04a34f1-03ae-4630-8838-09a97c0731f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1575c656-1176-4baa-a452-ec71d2c0eeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65464f8d-1d2e-4af0-b7a8-2e7fdc433125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86092d92-0280-4c31-a8f5-3250bafeebb1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6a903a-c256-4f8b-8698-d22713e4b574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30bc5648-09af-4ea3-80f0-a8b11c0299e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae47a8c-5e1a-4296-b7ca-a763b49edd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bb4f68-4ecb-4b86-a53f-70510b9c829c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e552ff3-7d9c-4eb8-b7a2-a69027077f88",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf947aa-8d9c-4e42-be50-48acb494944d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827beef3-9f32-4fb7-931b-410d49319c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e80f04-73a9-4f60-903f-95172c4dccad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d2995a-4108-4d29-be32-804a79f7a9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4131884-3784-4b25-94a9-557fa7d021db",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251228cf-0176-489a-a735-1379c6ee8eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598c3cfb-c1fd-4005-a74a-d1e6f998f330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3191ca4d-5015-456d-8f12-31e808bfbea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73870a0c-4b39-44b1-8bd9-2c71240d99c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cebec9-4819-43eb-9a91-1881d60ac028",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62540ca-117c-4aeb-ab57-20df0e5c3fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34966c60-8495-41e2-b335-0a4aac0b21b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb44733-d02d-4534-b8f6-1c9663d01e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "796fa96c-2519-4366-a310-2d6d07ab15e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9b6a3a-aba6-44fd-a9e5-2f5ee5c19753",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb868ac-c65d-4283-951f-4d3867a9940b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fde0879-0d8e-4996-9b4e-cc2c4cdcf188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf8c19d-2197-4519-b0a7-00d14c3bbda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e41c42-0f00-468f-99a8-69200a1eb48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1743928f-4c9e-4d0c-b0b6-6d240830a03a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb7671a-2f63-427b-ab23-dbeba5663adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46740014-7f21-430a-bdb9-a918bd7e9339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ec35df-cde2-45ef-b50b-523fc9e42864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfab14b5-5286-4246-b3c8-996ab6abe1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1438520-abf7-4491-90d5-0adfd3b7d66b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcbfa3b-2985-40ae-82a6-4c3f28e5612e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2292ba79-0c5a-4fd1-9b5a-ca938fed150b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448e96c5-0ee4-44c7-aa62-93282e0ff5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dcb1baa-9d7b-421b-833d-3dabab01a0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a161166c-fa3a-42a3-82f1-f0437d8a578e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1192f8b-7d81-4f9d-b560-2093a01406d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871a6d01-0148-4e70-b351-21fc6a682e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6e0ddc-6842-454b-9faa-ceb286ca07cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43fd5282-d483-4216-8bd1-491999d8b13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab40b95-092a-49fa-97b3-9f26231eba96",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c88e12-3859-4684-947d-cc9d1cb284ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f9dce7-7d43-463e-9397-33296b9ce59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a78afc-a560-42aa-aec8-bbb43feaa0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aec0253-c90a-4e27-9fbc-77c371a33dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832b1421-9eaf-459d-aad8-ff0c135f05b8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32af0810-be4c-4ad9-aed8-21c4a8a9a6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d011cd8-e7c9-4727-b967-17fea8a10b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae3a6f3-6f06-4367-a404-785a2c53ed69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e139760-d14e-4820-a014-7789551f3b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6487406-115b-433a-8f44-747d0e615260",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31c3400-7828-4ee7-9bba-a46c5b4812fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a487b00f-72e9-4c38-a932-a00812ab8058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48a7b51-8e91-4fc3-997a-c237eb7fd4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b340abbf-08b1-490b-8975-c4042238aa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e49e1e7-c240-41a0-a43b-43fffd2b3bf3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdaff807-9d5f-49f8-ab3f-9e463d731b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff871aa-2bff-486e-b2e9-f0510d25a161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6cd6ef-951a-4371-9b5d-aca72b8789f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9842ab96-e5fe-4582-acb2-e6fb3d0052a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9864de-ed80-4269-82ef-e571a2ea5e9f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b86ef5-1c00-484f-a4ef-3a4a04590dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b52f496-65ed-4d64-b35e-99bdd853f53b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2c6735-f6d0-40a5-a990-45c4949eb53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "81c1c92e-5ccf-475f-88e3-3d1a8617138e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1b3222-b046-4f09-ba0f-0d74bc65e988",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d748a4b-3d4e-4b3a-9ebf-ab86911a7002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec63aa88-adf5-47c9-819a-4bb9f2461484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26207ee3-20ff-4f5d-92b8-9948e196c7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "be5e6592-830c-422a-9bba-141bb8e8eda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf3d66f-cce0-456a-950e-562c3a6bc7cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da3e70b-42e5-42f8-880e-7f615bb0c669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93af6d44-8612-47fb-8ff3-998c74e9a275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1c5ce0-de3c-439c-9012-55d12b74fb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4fbd4b-7ce2-43fd-9466-6ecf28454892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e516971d-892a-4e2e-adca-7cb11603ac5f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c7eeae-4b6b-470f-89b1-3c53e21b58ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d69402-6b73-41d3-b8e6-7a31319bac60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39513a1d-5804-4b53-9ef9-647caf21c099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb186a2-2cb7-4393-81e9-11a164f6f46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd07f5e-8453-43c4-b0b0-d1702b792f88",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507fc57e-3c94-4ee6-b383-d3eb23b5eb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b72e2c9-61a7-4e6b-8611-8c836d3894c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5dfe60-f57f-4b2e-88fe-4c4e8e67f450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5cc6c2-b47e-4e8e-b51b-199a120263c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cf7d41-4ea4-4f3e-a2ce-800a0448251d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f6d0d2-8c55-4a05-9209-6f8f66391934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba70ea3-0b5e-4a5c-8bb4-eb1865761c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923f5e65-7fe5-4595-a738-ff273ee41c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "979cdc75-789a-4d22-af3e-3866e34df30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67f8b2d-c60d-4cd0-bb9e-a8a687b28dde",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4ec6b9-7230-4241-9930-cc96f3002319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55a77c3-49db-4ffb-99e1-e9e1b5215d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b28746-8129-4762-90bb-9b8a1ad59750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "daea4b37-1803-42f4-bf54-ba358ef2fded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b18e0c-728b-44e9-bc50-6a6f367b5568",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17890550-5f32-425e-b4cf-8e3ab8fd09a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea1f89e-90bb-4fb0-9e4a-53ff0f98e727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2f4994-5c2e-4a24-b13c-b89b5e1e2f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee65d894-6d30-4d7f-8971-96af10887df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1512a8-e554-442b-8f35-16e56bdccb72",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd949e7-ae9e-43ef-8bc6-ee337b117a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a6b4a7-8f88-412e-b6f2-d646be9188c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091151f0-49f6-47ef-bef6-1fad56f5358c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fad57aa9-ab2b-4a50-8d3c-2f742b71d7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb92ae16-e258-4923-aa1f-d3ac8f9e83ed",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588e1d5d-a972-4792-b54a-4f34268f98e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f48d06-97d6-4def-ad01-e7c9ee4e89c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dac8faf-6cb9-4dce-9eb1-163759462036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68abbc05-3b8d-4db9-8db8-c9cc41482f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2abbdbc-aa14-4118-a548-9e8561eaa518",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd721dda-a4cc-4f03-abde-d90fe495f70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98c9859-1693-4feb-b3e4-ef571626b496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e651793d-5acd-4b56-bb3f-e37e8ca62da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8fd88d8-46fe-44a1-bd76-5892dcb5ce5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6b345b-f33c-4a0f-ae49-57cb2fd1abf0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcf266e-1a7d-4db0-a7d5-79e9f94fdbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf55c1e-a37b-48f0-a01e-dbd571e7512c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc52fdb7-023e-447b-89f1-bd85d76f3355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c992482-0081-44b7-9b18-7bc493a50725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c845351b-b023-418b-8981-32149eb8cead",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18b2c52-bc7a-4b17-9cf2-5a3ccfdecfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84880a85-cad5-4619-8c63-81fd6428c360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77639803-87e3-4eb8-a128-c208443bc585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe12cd80-7253-4107-8259-a5e84fbec9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7ac0c6-e9cf-475f-a291-9a106fb10a03",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f315959-e7cb-4aa3-bec0-074059b7f705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0127e404-9e79-4b4b-b883-58130022b8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246541d0-af1b-439b-80a1-bcb8dc1f2135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5db6cf83-646a-4b9b-8c32-afb434526a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3b7284-bcef-4277-8580-1dda8694d1ce",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafcc700-4136-4418-a712-70f9560ebb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce7cc03-ab16-434a-984d-e9e63232dd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9b9be5-cbe7-4fac-b0fa-a3de8364649a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78feff88-c21f-4e9c-950f-e6c49611ff20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a8621c-7f63-46fb-915f-98b1a940a104",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7568f2-a508-42ae-a631-c291130d4fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f19dda-ac5e-4085-96a0-65a616d3f7ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c081039c-a73d-4958-9f39-68f6f0469c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eba8eec6-7431-4473-9738-19e854018fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3854aa0c-373e-4aa0-b618-f340c75dee86",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f3934c-4c0d-46b4-a617-3f58ca7cbe2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b1f175-0cbc-4c98-ac47-9e46db115003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147a9581-fdb9-407e-a947-097e90034a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e1a0a9-b4b8-4894-aad7-c5d097db2d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a8b6d1-805a-401a-affd-db413f02f789",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ae7451-6855-469f-8769-ef051c0e874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ce78e3-2f8e-42f9-86c3-970f24e81f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75451921-849d-4d2d-b908-9fdf5c5e6d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e45cde6-c72c-43d4-b080-e34d555b5100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c2d39b-c4f8-4eb3-aeba-ec8e80845d14",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee97753e-2805-49d5-a1ec-8e74f3bb9a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b040073c-9a34-4d2b-816d-8e929894dba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762d4243-18e5-460a-b338-9a419e5384ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7caaad7-daef-459d-810b-96ad9a2e1d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553b0e1c-7d14-4640-b68c-12a7da3910ad",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf2683c-8dcd-44e0-928b-471227509397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2039af-7ef5-4285-aa28-01c867eac483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ea7207-335a-4daf-89aa-16dbe561ded9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c008dfc1-561f-4416-a44c-72daa4033c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ed9dd8-cb4a-4158-a098-697e3037536c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e14d442-00fc-47ff-b18c-6d897c272a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182b27c7-421b-48f5-9d2b-facbac2b240c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fb5b8e-e602-49b8-9c1d-4f04f6a192af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70591761-03eb-479f-b6c1-fe92994aa97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1494d245-6180-448e-b997-05dcc1b0b68f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ef3e65-d2cd-4f0e-8989-bfe52c48a547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61bc3cd-eed7-4d4f-9430-4a8dba1b8387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d5c406-e435-40da-8960-62df1f99ef15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5df4de80-44ce-498e-bf35-f2d5a9a167b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cda29c-de5a-45ee-bca0-95cb21b8b954",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c03eef4-d447-4e58-9167-45ea079e4e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202f4ac9-2a2c-44c0-a399-8208a0f0a541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e33ebb-ae72-4b0d-ab6e-408d254b1b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21c9887b-d5c5-463d-99ea-2d350485d9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b38918f-4354-4e31-9c3d-e15306411e8b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8fab18-454d-4880-8327-2f42aaac11ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582d49e3-3a65-4dd8-a5db-d12fb58c06fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71894b17-da45-4414-a29e-02528b7c04d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e10de7eb-d69f-4327-9dd1-47ea4fc917d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f3bff0-3438-4a64-997b-18f217a560d7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c36f320-31fa-4757-b04a-ba2a8a7cf5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bc474a-b8eb-451b-80d5-06ca64fbc1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc127b6-aae4-4e4e-9d34-3b6c0c3322ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a55ddc3-990e-4943-87fe-c6e69c64c268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946974c5-8db3-4cfa-9524-d37278ea6d1c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dff45d-1d52-4942-8182-ea32610de25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bb3b1a-0859-4866-825d-4569d85e680b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef4020a-7205-429c-9d84-2e992ff1e405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa05f7a1-2854-46ea-b0de-5d2273304e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dd1985-6326-4ec4-bb56-106fde9d8918",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb94d76b-27af-4eea-9312-f368508f6be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8164f85f-f2ae-439b-8823-6f364b7d6ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b83263-8ab3-4ba3-8373-aa0010c05cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1811a5f3-469c-4d47-b89e-e71398f965e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d89d887-b648-4c5a-907c-0b64cb221c2f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2914d71-3cbf-43d8-9df3-c40f74a4b9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af61bff8-e61c-4c94-9a35-29fa8f510840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797cf972-bd92-4839-b0f9-efc555db15a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "663a518d-88d3-48a3-b95e-ef4f0b1ff968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8595e6f1-9f55-4b89-aefe-cecb34e8ff6e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd85603-7a15-4fb6-a17c-1d3647940f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d5369c-5f3b-485e-8cb0-05318d2af9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2849c5ff-7e58-418f-8de5-196b751ef9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6973885-a370-4c49-b816-b2c7c5536e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f48d01d-04a8-4ee9-a372-b865c8836b23",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4826ecf2-22a6-4395-ac68-a0eb2b4858ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069e7c80-0fdf-4b14-9716-d76ad1007918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e3eda8-bd66-40a4-9e80-939a38e900eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e07a1fe-db6f-448d-a7a8-754027617f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4db8c4-b9d3-46de-bcf0-ef6d3c3392e0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbb5b2d-f438-4a23-9446-4353290f7612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af720d3b-c999-4e4a-8386-beee945a9f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbf6f61-46d4-4762-8068-a7993499e769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d0e2a2-cef2-49ab-894f-46b066f78af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02693b8-a5db-4d95-807c-0190cb423e74",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09bcfa3-9947-420d-a134-dcf8cd113012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdbc5ad-5119-4322-9626-ccb01ac4c72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdbfe82-0389-4320-a4dc-eb4c49f055cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "17c15be3-936e-4236-b3e5-403c11ab1a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b6f38c-2225-44cd-97b4-3d1bb4a810ba",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3213ecef-d2b2-4427-a36d-0127eb4b64dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8c8e85-4ef6-4e5e-8022-d4a1c4c22a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6d7b56-c048-4c16-8699-5eac3c6a8406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf691db-4572-4a3c-8868-a8bd61fdcfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd458852-07a7-4037-b204-b340053c4c3c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c519eb5a-443d-454c-b266-677fdbf6a328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3886e0e8-a407-45d3-bdda-c4b0abc354ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b813a24-e22e-4df4-a34d-d9bde6088bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "df32ae89-bb3c-4b81-b10a-716e8ea84c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4274f860-4bcf-4e67-b0c3-87112be00808",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fde3d7-d7bf-4b4b-82aa-740da2430ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ea42900d-42f6-4ea9-8e00-a3c72e534754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2c4f5b-926f-4e25-8e7b-52c2d3fb5cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c91690-1b4f-4e66-8ac5-f68439ad6485"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a091e2c8-1e1c-45d3-96b3-1ea16b0062f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "087be969-acbb-4624-adb3-69d4112ca5f0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5046136-29a9-49ee-8900-fa230951f11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6edb9f2-4576-4cea-ab01-1f094ad4b3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e454e97-e2b8-4bc7-a2a9-beddb9dc1c2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b0c1bb3-4e40-469b-afba-4d3cf434657f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19c396f-bab5-40da-a561-434343f8db9b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b17c45-9b38-4f96-93f8-b8b0da43a2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8912287f-b407-4c83-8dde-50f435147aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd996cef-b399-4d95-acc8-91880ff0eb1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f4c5d36-2a4c-43de-a8ae-db0451f3cf9d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f126c66e-5c11-4308-bb62-52ecddafcf56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "213c2827-96d9-4e95-bb02-a3fae0ae3b57"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6e32a82-91e9-4f26-b86e-52a5c1e4e501",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48be6884-8b38-4c64-826b-c6c3ec1c6f16"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0bb02aec-36c1-49ed-9949-3988ec4fe51c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51b6d18b-6c4b-478a-b251-56365a320f1a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "603496cd-166d-44ae-98bc-9c856057669f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7db6136f-3b13-46f4-9601-fcdbd435e6a0"
                }
              }
            ]
          },
          {
            "id": "081d1dd5-b103-4018-af7a-f7a4c8a5735f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "71dee106-ed9d-4f9f-a9c7-8cdcf416358b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2fefe04-4472-48c1-baab-163a60e61d74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "beea0912-4e59-4384-98cb-a50a332669fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56f597f1-0fa2-4471-b581-73d95877b9c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11bb1a9d-f31c-4f65-b496-f2eeeba0e46f"
                    }
                  }
                ]
              },
              {
                "id": "2211f255-248e-42a1-9d63-0a86f65f0ccb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53b0bc73-912f-401c-b057-f1832e668b00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b32ad8ce-b55f-4162-a4a8-b43aacea447c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58e11657-ee69-4b6c-91a4-3b3e40505f86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "718a33c0-01c6-45f4-977d-ca96250593a8"
                    }
                  }
                ]
              },
              {
                "id": "e925bf4e-5605-4285-bc6d-e4772dbd3dcc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "685bdea1-cebb-42eb-8614-f49a41035efb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "588c91c1-7990-4445-bdfa-79606ad1f9a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af77565a-f1e0-466f-b6a7-780d0f2e8e2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e4555b92-b821-46b4-84d2-05ad666d6762"
                    }
                  }
                ]
              },
              {
                "id": "4d4614cf-8b41-4c23-9c40-f628d05b7c97",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c18169ff-dcc4-4d2c-946e-4382d291bf2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f1568d7-92db-4661-91c0-936e9612aa53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c7fb915-bbd3-4475-ad0b-1095699966a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2cb5a141-2e77-4b98-badb-5d7615a581dc"
                    }
                  }
                ]
              },
              {
                "id": "80a7b693-4654-4768-bb29-c201aa1f4440",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7138bfc8-2944-45f1-9e4e-38128653d2f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa46ca51-47d7-4b9c-9460-97666d358060"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b0b9580-2a7d-4238-9636-392d0fef6138",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8fde3995-f807-4e5a-925f-768edc494cf0"
                    }
                  }
                ]
              },
              {
                "id": "71f7d69c-193e-44cc-93fd-6f29cf1e1d5f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1cce6fe-84da-40dc-b6f9-2aad21584797",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d0e5694-3a27-4e52-96af-101eb2feb075"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f076ea15-fe7d-4584-8a50-a783910baa12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d71f3dbd-71a9-481e-9207-0f3f00347187"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3fdf3bc9-27b4-4098-be95-6759d81e705b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3a7b236-d753-4bee-be11-17c1e3e358f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "58974191-44ac-4dd5-b1d8-316215989d6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c9e7de3-8f6c-4401-a144-7f963fe4fe35"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c803a390-e77a-45d0-bcfa-96567c0182ef",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f3cf239a-010c-486a-91d2-1472f574525d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a59959ad-73bd-4233-b66e-a81e0f976ade",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1bd44cd0-9828-4a6e-a591-e503f4ed09ff"
            }
          }
        ]
      },
      {
        "id": "dd0e40f9-dcf3-4d9d-9a74-0eee8f8f41c4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "aeb44139-9bd3-4753-aab2-746213f05a11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90f015f2-f24f-41f3-8ad7-460546c9630d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c0904a30-5c66-4368-8429-c4e201a9eb31",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103a8773-2fa0-49ef-b6b1-f6bbfdac9737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055f5531-af77-4cc7-ab28-7f2e6d45834d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e61515-1eb6-4890-908f-eb36b5928e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "94d2fbb2-5c47-4ba0-b06d-baa0c6689f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a6b19-f44f-4200-8255-1904095292de",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8b4cac-5fb4-4e4d-9e35-3ea67aea3b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e637822c-996e-4126-a1f1-700c5721f31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19113329-faf8-4606-8d63-6a762534d685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b98637d2-832a-4d88-aaca-fd99813f2588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba4d4d3-1ee1-4127-84fd-908dfce3a116",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e6b1af-718b-46c5-bbaa-44be1013d7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4fa365-1377-4b02-a610-7894eef32331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a59c11c-3c3b-4983-9b56-4c2510a86212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a059e5ab-fcd0-4204-a6d8-6257c8472a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9152cdbd-c4e4-466f-8114-7056d089b9f7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a19ee8-6894-4b03-af6c-244cf7645ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffe73cc-43fe-4d38-8c36-0295a5ceeabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05faabd1-2abc-4dda-8119-4142eed4a482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba83829e-967b-4c48-ac93-8a491c7b7e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80384dfb-fd27-41da-845c-3d5f69f5fd7f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3412fb63-5409-4297-a3b6-cfb91a8804ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b4e4b7-4ba3-48f6-aa4a-0ee72ac32287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f5509d-2185-4cb6-8b22-4dd0050af73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12207b16-b86a-494f-a15a-2a3f4c7e8938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1ca075-c01e-4edc-85c7-ca6ee614d227",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcd9504-fef1-48d6-b4c9-7681ff8cb12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fed9b1-50d6-42d3-a5e7-4844b7026de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f93c2df-1e7f-4f01-8f1c-269b78511cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e00c48f6-da89-4a51-8913-8260757088cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4a4080-b001-4272-bcdc-9352ce9ac53c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95724efc-c953-4487-867f-e8bda4a7e88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46657c30-1031-4a10-8330-65183d54243b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8b266d-f3b6-4b32-9d4e-1d219df54781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "52ff1f31-ca71-4ccc-84e0-139e39910371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469d0a0f-98f6-4722-af6f-7c6720229c10",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bc749e-c5f1-4123-8cab-82a30be94349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ceebe4a-a27d-417f-b6f5-2a3568f1739f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45f314e-d93c-47cd-a907-29660546662b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97a5feb-445b-4cd0-823c-9cee482da96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ec04a3-e81c-47bb-86b2-b3ac2ac2b196",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979823f7-9b40-40c2-b449-21d248a777a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3045d8-70f2-4ea4-a0ff-414d82e0a5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af79d9e-aaa7-43c2-bff2-42964c851941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70e60d62-2b41-42b1-ab57-fd119154a8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6166f89d-a6ff-44f9-85f3-ceba54d3916a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65256c0a-a51c-4e8c-b528-98e7195e6218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce413b6-86a4-4722-9184-ef29153b1e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d3a265-0651-4974-8384-6f0a4685e75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "caf4dca9-7868-4a5c-b658-63b2cf14e5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4a8b61-e20f-4220-a3a6-46cb49463ea6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26e001a-caa4-4bc1-b749-79ae9a7cbc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd88e480-33c6-47c8-bc43-2d3b4eebc87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49985fbb-0f5f-4920-9c1d-7cb6e9a95f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6b295869-619b-4846-8f4c-14ecfb6b224d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac942a0-6b83-4581-93fb-513b9e9733b7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43954de-0f02-4e8e-b5b7-27f652a14a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a40bda-1498-454a-b246-376fced5d689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a41738-8c2c-49a7-8357-5c9b069ac904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78aa08cc-3fb4-4ca3-9132-d8074b7e8f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185cb60f-334d-4d3c-b85d-c817e89a225c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b733cc2-599d-4cc3-802e-283513017a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa96de8-2eb3-472d-8651-043a5d1fd0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af43aa0-9ab1-4fc6-b6b7-95fffa458ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a81c244-9a7c-4143-8c92-0c7171591770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a427593-3668-4186-8f8c-b612af94b82c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a08e13-6bc7-4f1a-a563-4bd2b1cfd083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8457d3d-c7e2-404b-ab11-3ff1cb50305b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24ce008-b448-4d06-bc5a-cbc6212501fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "554ec872-0531-46d3-a8ac-a7e589b9ca62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246c0cc2-cb84-4e40-8ff0-c8c1dca3c64a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5da672-4a6e-43fb-867a-c915a69837dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6f5698-2278-4c63-80f1-29cbbaf96881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c203201-7b3d-4855-8191-acb2bfffbbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "eed8937c-fbd5-42bd-9f59-83481a722a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07f1c0c-4d15-4d4e-b077-13f18cd2582d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a1ab4e-1b73-47ae-80b5-056a25aaa07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7f4126-cb88-4ee8-9229-3720e93eaa32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cee8f2-982b-48ca-a0f7-47023aa41773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb1c57b-6707-4904-9c3d-fa2ac3a57248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944ede60-44e3-4a8b-8171-d78491f712ba",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc64697-cc60-4738-9398-21bcfbff6d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf39d1d-33b7-4670-b5f9-d7e48a93f91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaf307f-73b3-4e71-bb97-f5f957ce9826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e51d51b-7415-4c7c-b127-d5a2ad8dc161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd265e77-a9ee-4ab6-8418-deb5dfc81753",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517600e8-739d-45b8-b86d-32ddc754a1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b6b3bc-e188-4b02-ac33-ef92cf4c2888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48893a2-0f67-4da6-9a8e-0dab286bb55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "576eff94-602a-443d-bcc6-4ff0596d468e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af65759-dbc3-4c17-ab04-c0c40271427d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f6a4ef-be7a-42d1-9a62-e13e989b4e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704cae27-382b-4266-b60c-1c2fce67892f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eab5161-bb5c-4422-9fad-42aa62ad5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56c66608-1c71-4ede-a2bb-ff890d242657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6be3f7d-2871-493c-b937-700692edebe6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc0d5e3-5fd0-4140-a60e-27fc078c2606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757e4ae4-fc09-45d9-b8d0-91f13bebfe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3b3b8e-f445-4fe2-b375-f52c955d8ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "533ab154-d71b-4500-aa76-edc0d61b02cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e802165-0793-4a5c-9816-407b53968355",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953dc77c-5533-492a-bc12-3db1cf54c35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed7f155-1715-4403-94c1-1ef4ef53a861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cef742d-7697-41ec-9fa7-9becbcf28144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c32e347-9d23-4181-99d7-bbdcb3c9f4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3330459e-7e69-423f-99d1-6a8af50b1d78",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9459e5b7-17c2-40d0-857b-9f981eb6ef84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2955f2d9-096b-49b9-aa7d-f3bdce71fb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd670b0-5449-46eb-91c8-39b145e5d867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ae1cbc-681f-4e5c-940f-14b1beb377eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb8e255-b8da-4dcc-b130-cb4e28744d9b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e2c606-adfd-4c40-aefd-a9a0e4d775de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1825910-fe9c-4337-a6f0-4af4a23223c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee2710f-bf4a-4cfa-b210-db3cc0390e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a311e473-0d56-448a-a56d-c2ec0b6596c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8292ea5-6bb8-44bd-8bc6-33c418d3088b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b159748-8c45-47b0-a3f5-ac2eaf627fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae252f62-a739-48d3-8ed2-ea87f0fc312a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b81f1a3-cade-4604-95de-b9d956f925cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0399147e-a00c-4f78-9eb1-2f11516a1743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e34c56-cd5a-45c8-a961-fa2666ef6749",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ef3294-d538-4673-8c7e-dc6c18e519a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc759ec2-6d3a-4785-be29-ee8c2d19bf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2a7af9-7665-44d8-9f47-c121a90f1375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f41038a-1a3d-4080-95e4-28c42626e54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b37b69-7134-4259-9458-2def1df54481",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc66c57-7632-437c-852d-c031f136a288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1392fedd-b501-4510-ab45-c7a74f384c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5107b144-27a7-4d26-b2c4-f758aaf383d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e40d213f-415a-41a4-86f7-f2d4745cb5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5905d21-bc47-4e02-b4ac-7d8ad1236fa8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13879ea1-4753-4803-afa7-288a52692084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4aaf2f-9e9d-4877-a9c8-98147f677599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a8ced6-048f-45f8-9b07-85c20570a882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3754128b-5eaf-4cf0-a861-9b8b8e2ab371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293e022b-bd61-4e8f-ab2a-dc67c2e87a8c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe90b1c-2d18-4651-9622-54f79b3daa8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d30784-cf19-4425-9708-5376f861a005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fd1d4a-1e9a-4e85-9c8c-4d859225db4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25fcc980-6324-485c-946a-1e6f8ef5565c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39c6645-0d91-493f-8b4e-8fe22e6779f5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d66d3d8-975d-4f08-ac04-80d718636135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80030eb4-7f4f-426f-be99-7fa3e7423448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2448a68-f159-4870-910e-80e803a204cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da755edd-17ce-4c38-80a3-371416eed647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8305b2b-91c0-44de-9745-8ce523f02e03",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253a7a98-a20b-45a7-80cb-301c4e103d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc044f9-965c-40cf-accf-bc2fb6d12736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b201e1e3-0d01-4e45-a9f7-a4d47f6e9ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36fd6400-0722-4d87-a2b6-4b10375efa8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8f0e14-1aae-4928-b948-877825130ca3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595cc0ad-f939-4654-ae30-d2191e618ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e78eab-45e8-4265-a8c9-2e3e255c9c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486b45ed-7405-4a19-a28b-5b93dfa1be2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24255a9a-1e56-40e0-b073-0d53526b4f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99023d48-8027-4841-8f3b-e67860291ab9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8ba96c-59e8-4250-b036-2f7170787b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50fb1895-a2b5-483f-9934-1fc7e8469e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a03d11d-7f46-44db-8c8c-e1608eeda630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f605c8b-af40-4e32-bea2-e3ae866f32d8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6dfbebab-8754-4595-a079-1d1f7e0de41d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95d2bc59-7474-4355-9349-034758469333",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a713cd8e-7533-4d8a-a771-8df0001e1e1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0244434e-53d0-4cd1-bdda-38eaeb1b562c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b1b204-d718-4841-af9c-00ed73e587f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b670be3-7363-4eec-8c52-6af56c5b99e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5657d7ce-5418-411c-bae8-ec004f085e50",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6632a5ed-fb05-4f03-9ef3-861f73a2662f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5002ea7c-dade-4bfd-9b8f-0daf9b1cb597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c63c51-12a8-4c12-99a3-d34fdfcaf4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "583706ae-554f-4e92-b080-5d820cb83d00"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3588962c-31b9-4528-b563-5f2e010f074d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eca3c6d3-4aa9-4722-bc15-b1c73ba43056"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdb71aaf-c8aa-4fcb-b341-a4923c10e326",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73181093-dade-4779-afd7-fc1edffea25b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8d4af55-8a8b-4ea6-8ae7-4aa250b19f01",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c78668ce-18d4-47c5-af69-827fa4ef2dae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49506b59-33e6-47ee-84d6-be8855ffc6f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb480a8d-45bb-4e85-988d-c1af7ea92891"
            }
          }
        ]
      },
      {
        "id": "8322ea20-5dbb-450c-98ed-8e399114b028",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "434bb04b-121f-4b14-a148-09e0aeca87b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "832d4093-e168-4fc8-8895-2e7ec1cca11f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cb2764ab-7d51-4043-970a-e54c1f42e18c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5e92bd-2b6a-4c36-a083-e9f1246f529e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c958b68d-6af0-44cd-9379-a1dc0913e894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664f73e6-8121-4723-ace7-dc701c8ea3a1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bb6d41-2de2-405f-81a5-491726302b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38adda4-2a6f-4832-8a26-fd4f0f7810a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d7b72c-e317-4cbe-88cf-5e3f7c94d774",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cd5983-0ec5-482b-a48a-b39e49eb093e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d448b5-613c-468e-b86b-30ab051ebbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1a90ac-9817-4819-84da-a1c35a520b0d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b26e993-ec0d-4af5-93ab-a3fb21cc264e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03bb57e1-c8eb-4f62-a3d9-595aebd31d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b95a58-5b58-47c4-ad46-14e58193692a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5613fa2-d3c7-4367-a2d5-8007aa4d690d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611bf2ed-ad45-46da-81c0-317077bd0152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b900b4e7-1f93-40ad-b080-a49a2804ef9a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92999141-579a-4448-9fcb-81925da44db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18eca1e-db7b-4b54-a057-27ed61a7a77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a8abe3-b81c-4cfd-8742-4a29c4256de5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b916f51b-21df-47aa-b75e-73cf48674bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3c3aee-4a2a-4dcc-99f2-81d491749c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68678733-87a2-40a0-bdd3-22d05a3c0ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef960fd-d03b-4312-ae07-283fedad7a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a658260-20ec-4462-8aa4-94430913ff98",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7b7046-5722-4f51-bcc1-1afa12405d9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e2883af-1c2e-4ce5-9d38-932af964b082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3b5c2e-18a3-4954-b9f8-88d942c3e509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb37714-f4f7-4a9c-a481-0b9f63a5dee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23682f24-47d3-4295-96ba-e4b83670ba0d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b300ca0b-e1d6-4f49-a5ee-b3766423ef9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95b11653-7107-4c2a-b86e-b9d8b79b5d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f270b7c8-beda-45b6-9860-ad1a088f67f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57005ce-c1ae-4994-8cab-d8b71b32a271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3687529f-d88c-4c3a-b5ac-8f014615b64b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4a220b-dd62-4879-9e22-8fbe193925fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14072932-7efc-4513-9230-4a3a045eaeec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d204d6b-bff3-4c41-a9fc-1426c8370924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb860283-7b94-47ae-a9ae-4098d96b376d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e0676a-b2c5-4785-96ae-c291c5ef45ce",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f8a026-c880-4275-bc72-20f1f0b71418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7118a893-703b-4edf-b4cc-baac97acbf91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e67c2f4-eb95-425d-a3f8-be62ae5b979a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe9feca-d745-4761-9151-1af422dea964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d00acc-14bb-4470-9133-099425570f44",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588c5f13-f9aa-4a58-bf61-914160fef033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89015e73-9bbe-4886-8bbf-71c887139a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252c3975-788a-49c9-9b83-9e0bf9984505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb25c49c-e251-4a99-b42c-d043737efd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea02569-0995-447c-8f53-55f9d06ab95c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd591c3d-aa51-4d0b-989b-9bb530806df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65b697f5-8d65-476b-94fe-69498bc894ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bdd274-b8e1-4f1e-81e0-b032ca2d57ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cebffbb-a47c-4138-8204-0d967601416e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c393ce3c-8e43-4741-96b1-542096e6ba54",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a62a94-b698-40b3-b4c8-e1b631de68ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8109a8fe-3ca9-4329-917d-248b513f636b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d221a5-a9f6-40c2-a51a-b08d6a3fa9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7b3cc0-3863-435b-a06a-b1e26399f2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf95afa9-739a-4aee-b7f5-9364579361df",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776e2409-ea22-43a3-a809-b2ce2a727219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b5e103f-f59a-4449-a993-d838ff190081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1b8907-377d-428d-ae8f-1704ba6ecec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaaa78e2-6257-41a1-8062-9c17206de956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26f0ac5-2bf8-40d5-a878-1f2807a83d9e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199344d9-5782-4260-870e-62846dc5cc0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "017a88d4-eab5-47ec-9c9c-b8cea17f2006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f14599-fd2a-426f-b4ab-aa58992c6048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85475ce-a22d-49fe-82da-3507eb6351bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b60115-db16-4434-bbca-c47c21a092c4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d3a29d-2f08-4abc-9abe-510b76001ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3029701-0179-4490-9622-b7b335eff280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7746b568-1782-4ed9-b43c-b6bfec1955eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b7e242-0ae5-407c-805a-edf56dbc5a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06b85b1-8f91-47ea-9ed0-d129694c7112",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3b092e-342b-45c1-b26d-b0de5fbcbae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc3508a-4bb6-44b9-81bb-0286d1b559c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d6ed40-5e7f-49a6-98f4-386a87aa6fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f324c681-9926-4787-b923-d7de17e6e87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f05b57-74e0-421f-9bda-703d320d1523",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63686ce7-78af-48aa-9697-0cbbc25da34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de96139b-24f5-48d9-9ff0-a90423327a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d489136-f100-4714-962d-63b845bf3c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159c1803-ccf0-403c-afb4-4522998cc40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626f0053-8875-4989-9aed-6d85a941c176",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b97cc2f-3345-4da5-aee8-2872df5442d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66810ac9-97ed-46a0-9fc6-ccbdf86f97e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f500bb67-f3a9-41a2-b3cf-794b2a26ea73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab1d894-df26-4fa2-a251-a24ef007a5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bcafb6-3947-4428-b865-99be2c0d0782",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfbd66c-b2cd-4e1c-a9e9-0a38d0ecd8fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de3398a-dd86-4f40-8527-f26a8e31bf11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa65f097-a705-4c08-a62a-48838c9f6a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f644901a-5c89-41cd-806e-37a255bda449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351e6aff-9023-4b38-aa9d-81868e6a707a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e178ab-d2fb-4919-86ac-08deec55db85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e7e877-4f3f-487c-afae-2b9383dd9566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a778cb-35ef-4887-8309-a19da09bbc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc31bc60-aa2a-4cb1-8e05-fd41c7498fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5276ec6b-acb6-48f7-8fa6-afae8a2abd79",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bf3e54-4b6c-4443-b943-6c4391cb4d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b422a28d-c81d-44eb-bc14-73fe6164a0f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a2759b-3fda-49eb-b76a-a55265310bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa223b7-0032-4b5a-945e-ed229e9d6e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86300e34-b68b-4ae9-a331-e589a5847a18",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362bb9d8-6688-4a73-8e02-7ecf97dd9103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e7c058-9a1a-4d6d-a0db-d54e2ef0d935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4877c19-52e8-4a7e-b850-2f840ab56cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebe586a-5889-4e49-84a9-6cac6d937799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47663199-b64a-4e2e-ab19-1e23c8cda667",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf47387-b40f-4274-9683-16c8ccfbc6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cba458e-d645-48e4-b2ed-17aa53cb7e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8687a2-c55f-4d25-894c-51d03199091c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f23895-8170-4ca5-ba57-11177c7160af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c817d87d-9104-45e1-8e04-fb7954538d8d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeddef53-0b60-470c-90fb-0ec5c925a567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c49241e0-52cf-4bdb-a85c-3177461af920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b8214e-7bcd-4059-802e-bcd5492bce17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4d84bf-d3cf-479b-9456-707a0102384a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20439d7d-7987-42e6-b2a3-5ffef95d90a9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2aca8d-fcd4-41de-81f1-b2f82e6f4c5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d3b86b7-34ab-4948-bcbd-52e459a0f7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7632a9b5-4b9c-4dc9-8225-d6f201395527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629953cb-32a6-48b6-924e-0412e89c78b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce6bb6d-e040-4f8b-b62e-0f8b136e6a64",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c536790b-4415-4532-b85f-8ba979d5fd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d553d3d-fef9-4231-8a1b-fb4e8cf6eb46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5f9135-b8db-48e3-a49d-63e73e3ceebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b67b5cc-57c1-43bd-ba37-2ceca9090c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e467178d-5521-4e9f-a1e2-3f35733f0df1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a37305d-91ae-4621-a016-b25d9181e341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8383314-ab35-44bf-95f2-76747ddfd9bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c484353-c169-4f44-b438-71b653963f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39740ca-90ab-4216-a7b6-64ba4a64be03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1aa62b-55de-4ffa-a2ae-be1338b3c88f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033dfd6c-7c7d-4753-acc5-a0bd28580c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aacf2be2-a2f7-416f-9f21-0417cc4e0654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "523b6f36-95bf-48d4-9994-b187e51d2b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85bb1c2f-55e2-4bbd-9930-1e590864ffd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cfe522-a7d4-43b5-aa96-f255e434e20b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9206d084-f8c1-42b9-b21a-2622c95a7a09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1fd5e1b-bbb9-477a-9079-968172d638fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa19a692-d185-4139-b1c0-b65a9afe24fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49674466-b18f-43da-a6e6-87fb2a02612a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e54d27-7b7c-499b-ac3b-2eb96f8342b3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0161c4-27ee-4a71-8881-113c01447b37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e5f5064-3951-475e-9819-62eb1957dbf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35a8dfd-9ce0-4653-83eb-6370fc41f9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfe59cd-a77d-4aab-b082-f9af1ebf175b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30903e6-88ee-47c8-93ea-be977cde9bd5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7db2524-01c6-4c6d-a2bf-111a4b4905ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e44034c-7395-4f90-87e7-05a48468d37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be295c91-a565-497f-adbe-1a47508069cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc70acf-aa28-4f1b-a69c-052c4c47c2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff92235-04a7-4e84-9fd6-be2209fc3ffb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144ca4f2-701e-4bc7-ae9b-750de26dd33f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ee54612-c817-4c16-8a35-50499ba23ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5231961-a443-4af6-88c8-1640dcc34b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9f5669-407f-4626-84e7-d0bc71137c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18eaa4f0-e24d-4d5b-bf91-707cfddf02ee",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90406dfe-8a85-4220-941d-070042ca5d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02a0288-8dda-4c84-ba68-0b5e33373535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b04d5d-d615-4e1f-8b4a-e702ba667876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bbf464-f2e4-4a10-9c63-0f1478ee4bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89537c3-d6d7-495b-8fa1-d3d7ccceb9a6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aae45f-c025-4eff-a508-12d6d1429052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0baf8426-0fb6-46c1-bc54-0fdb7dc5a8fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d044b99f-3ff6-4fa2-b04f-2eb64bb044c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de0704c-e076-4c78-a061-cb00f68b5d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93caa221-8421-4095-88d9-88b68eb62764",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb20f024-e943-47d4-896b-a3c4a039160f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f245c90-b460-4b89-b224-be91f87a16f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92837b42-b161-4855-8829-e01356ec5090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c736a8b2-7d4d-4264-8a44-19d86cae52d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ed09de-26d2-41cc-8699-63788c38b8a2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fe952d-221e-48f9-bc07-162a9d0ee535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df2caa6-51ab-4b51-b8f8-1aa0e8b2d12f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21a7980-f540-403e-af40-e235e928ba6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69185098-0f7a-4976-b485-b703c13a2d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f902de-8e2e-4ff2-af22-cba9e4f3f776",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b93dfab-e266-45fe-b482-eb019053cce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecc6931-d89b-4b05-bc18-751dce742ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73767ef-1759-4b59-954e-ca727083fd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5d80e1-bf63-44e2-b089-97bfcf81c139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3beb3023-645c-42a0-84d1-cd48a789e071",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6f305d-8959-4d24-82e0-70467de40c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44884660-9279-499a-a6fe-b41fb27d05b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5793769-c164-4ae4-a190-1d318cf5dbbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befb8fcc-2518-472a-a430-a17000dbe7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856a0871-b002-4860-b395-121da1d86414",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab4df9b-f6eb-40f9-ae3a-57bf6121d0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd252b6-8895-47c4-97de-cceb00e195ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c872c16a-135d-4b3b-aa00-b60ca1ee0681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8356061-6607-48ea-b998-3d59a8323eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77419aa1-8726-43e9-ba92-730165db9aab",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2394f237-de0d-4b0d-9cf4-395eaca3e9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc084312-b252-4d69-8709-6204510da824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c541c2f-e232-436e-8cc1-4e4223e0bf56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d997cd7f-2cc1-4b01-bb89-f61ef2f6e458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f8a0ce-bb99-44bd-9e92-f6127637af8f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19a22c7-8902-4e35-b187-e39ef68fa915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4aa36d-1a6b-46d9-988f-bec38b472fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ea12e1-775b-48a3-857f-aa19be4d2c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "338c4c48-e8e0-4c07-b962-7aa61d2d020e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a5396f-eb5d-45eb-b82c-251aa923b7c0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d405ee-12d6-4ca6-a5bc-36fb61d21c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d017d6d0-2263-49c8-8856-f71445806993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "704ed69d-b14c-477a-865f-c90c690157cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18fe4237-c4c2-4c99-9b68-118a20c0502a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c4aa9e-7954-4130-84a2-3402e29bce6b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c5c142-5e3f-4347-b179-03ddca6a2797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1240c3cd-a975-4f68-acbe-b28a64ceaef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9ab01e-3baa-42d9-9497-7463a118861e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd2dd1a-f377-447e-93cf-4a5895b97b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7628f97b-8044-4e0d-b4dc-eef9c3542062",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45d8955-eb74-4437-a703-95273990d909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538ddc35-1aa8-4ddd-9bc5-a965b6ccfe9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054cec14-3645-4209-b9ee-2fc909c7ca2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b657c81-e9cb-4b7d-9995-e4026329968b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31950140-f7d9-4e5e-b61b-a12821c93d91",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142c9c54-4ebf-4951-9c37-86783dd04ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad984694-34f5-4071-a955-dcf96d20cee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d367c13-7268-4d0c-8d0a-564f2470e009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be39bcb7-f4c5-41d3-84b0-02c42f730370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d617d8e0-4a60-48a5-ae8e-68da88eb6d3d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ca7bcf-2baf-4642-aeb3-0f333fe2e8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eabff66-4f50-4d35-935b-45e30df4fae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c23e415-7ff6-43d0-8990-f02d4178c950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a7eeab-6007-4ecd-9626-908b6d69f1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223730a6-57b6-4092-a1c4-a6f6f89dbeec",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8468d37c-54e7-4ce7-829b-288ff8bf6612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbc2e23-91dc-4518-a1c4-f0a5a7404408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c346216f-82bd-49b7-93d5-1e2c491fac90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab8524f-07e4-4f77-9607-f3f46d0acc71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce07b62e-9553-4a74-ae18-a02974af4908",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa728d5-a22d-4de7-8a3e-e16d69a0d79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff281fe-d05a-4117-8d69-02727dc7f142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1831140-d894-4954-85b6-42f2e43fcb4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a026c6f-2d24-4e27-a92b-d12eb6888c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c7e814-865b-4a3a-aa64-f5f198fa4251",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba5cad9-1f5b-461a-aa3d-03838cf3e992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc10a901-b466-4820-aece-f65199694ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7504ea05-3c9b-4c08-a8f3-5b787e3808fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9d1e87-480e-4632-bdd3-bfdf54748fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118e321d-e251-4942-a283-fe9958da830e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec31145-f768-497f-8a0e-7ce0e30d3c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f778f387-afcb-49e7-8839-3d60eb480ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ccd3bc-84cf-469f-9d2f-c8f43ec90b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f91cbc4-9854-420b-845d-382d5764ccc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4706aace-05ab-4afc-9dce-d91b9c89aaa5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99644fe-7c84-4210-af98-5eeea72c9412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a5baf7-4c02-49c1-a77a-b2febb6a1731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee45df60-975e-4ad8-8860-4f464f7d1b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f66bb0-62d9-4b79-9656-6f0cabb39740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc97501-e8d6-43d7-9ad6-dbaed54695f1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac59ca26-0274-4900-8f4e-4b6a15c6aad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89cf98f5-dfe6-4b06-93c3-9291c9479e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b4c21c-d4f0-4b62-a061-a50e13a79395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30e71a0-5648-453d-bdac-4bb4e526a237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d933ea-4a4b-4de4-90d0-b552dc455d52",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836055a9-6434-4998-9eaa-428867148dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3951305c-83df-4105-a263-73b9d4c0c343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e290bfe5-a98a-4392-8d74-c9afe8e8eeba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a206fd-e151-4ce7-83a2-b79d97f6f3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50966a75-2a39-4356-9606-734e3e8b3a85",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce733d2-1951-4855-988e-944b2a1bc431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76e75422-df38-4425-8624-5361da53cd9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1c27ce-245a-47af-8e79-c31fcd0d1add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f56e3a-11be-4cd8-a4b8-86f2e040ad4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f3bc9e-2582-4e0b-adf6-8235ee8c23f9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e97d3a6-b622-48da-80aa-754169e59f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819643d8-1b20-4b3d-8136-81ba2e2566a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3529b40d-b40e-4c4e-8704-841fff595339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723c5703-432c-4f09-bd65-0b15d569c25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff19c35-ccba-40b2-9d87-b85c93423788",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d9c20e-1704-4107-836f-3c91b53cdd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ef45b3-a287-49ce-afb8-e04a0cc9b7aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f1f8fe-e98b-4e91-a470-d92008f7fc89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e613c2-65d5-4143-b882-7be873b3c1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b183996-7d5d-461e-afc9-735b6c7c0e94",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22bfaf3-9652-4db4-87b8-ffe8a89a2c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b12e2d-5938-40f6-91f4-adc781e9893b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5a52b6-fa7d-4da1-9c5f-cbff70eff2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f15f4a6-2169-4ee0-b60d-dbaff9d53b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e15924-3fd1-41a7-826f-dd8f76b3243c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c9741e-20cf-4212-a603-847fed4b350f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b04af0-1e9c-4413-86e7-4af3d203dded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b70b10-f798-41f6-8638-db9ece838131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe7518c-1c11-4564-a8ed-d89463f2a9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f6372d-56a2-4db6-b8c3-b09ef32bdf3b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527382ea-8ad6-4966-8454-08352c75b62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f151f4-e874-4891-8093-68aa9776a1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d06534-0674-4ad6-97f1-46d0f13befb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f528954-9cf7-4db2-9d18-835c3ca9ee53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa6426e-5463-453e-ba9c-0ed88a8e4046",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3186ace-b4d1-4c9a-9d53-f735942a2815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c48ea6-2fbf-49ac-a265-a8c40140f807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e5a9ed-035c-479d-a649-485c350c5d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cb0315-62a3-4799-9163-99baf0080b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9be3ac0-87d0-4c0a-8d64-1830152d79e9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97df4035-73d2-4f19-b7c6-9e3d14fb1535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41cfcf0c-2c02-437f-b0af-8942bb4ebb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3da770e-e9e1-4398-820a-620b47a65a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545de5c0-7b71-4482-9445-bcc1f7d5d2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5593a366-d3d8-455e-8242-6f820a473294",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311fc7be-188f-41e3-8389-4449e1191af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf416ad6-d225-4de6-b2be-a2b03da5b282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb65b776-f34a-49ff-ae74-bf9ffb6c1853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebf2d1f-99de-4442-904b-fda9e798500b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fae3ba-46e7-42c5-adb6-ba5bcfd305fc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08aa86ae-472b-40d6-ab0d-2445e11d22cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e5125d2-9706-4123-b8ff-a30b4d560d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b11f23-a2c6-4561-9451-4aebef4dd90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a43358c-8a80-410f-b108-b6081d14381d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c63abdf-4337-4fab-bc58-ccdbb480be6f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4965ad35-51b3-4fca-8cc7-69ed442496b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1074f0f-de0f-4cf6-bea8-0dcb1b7bdc2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc14289f-f703-4ff2-a799-70967441a79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45adfa40-7e28-4b6e-aa27-ef7274e19e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f8a7e3-a41c-4c51-9bcc-22a94ea904d6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8c8c57-4363-4c69-b337-4f53315f20c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55bd7827-5ff8-4c06-867d-976c3ce4c29e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc7a04b-ca5b-4c12-858a-99d302a182a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538aab6d-489e-4370-95ad-d12c107c0d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f087be9a-3d75-47cb-8938-1757289bbda6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36d6bc9-de46-4bdc-ad8d-5c59ce7e4a45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "791d8f8f-3924-4cca-81a1-015728d19f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6b087c-471e-4967-bd59-cea6bdb0bbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b702c269-3db2-4752-8e8d-327ba9b7f8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3270a259-dac4-4e17-860c-43e9bb859d12",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e06977f-3ae1-4d87-8071-5ea948530e98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64c8bd6c-c54c-4cfa-9541-69783a408a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aa51be-c08f-4da9-b00f-31a73d1612d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd758b0-7f40-46dd-8ebd-796d04434112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f63d47-7ea6-4fda-9efc-fe09fea006a8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95077714-1ed0-410f-ad8a-1de4fdb073cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db039b1e-85bf-43bd-bdbc-727015ddb63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc487ab-0688-4ff4-8370-33ae30e9b3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f872a2-4625-41cd-8918-800752f4bc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8c358d-c3b9-4a56-b68c-6fb1e73bf9d6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc2ccfa-afde-4c5c-8223-ccc4f731294d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1c6a3f1-ef91-467f-9a4c-fd4388ddc755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb791d19-20bc-4c61-a47e-693a7f507f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010ba77e-0e05-4c51-94c7-8df77debbc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef10f290-7fdf-486d-a334-5095019ccc8f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100cddb3-d8b6-43f7-996f-c03e1eb6d475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b147902-8b53-4839-ac13-4af770c58e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "026cc522-2234-40bc-9b5b-430963f03681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772b7d89-445a-4e7a-9a6b-55ffa3f73a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f2a4d7-2af1-4625-93b8-94e2eca099ee",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5cac15-c68b-4819-8842-66b98631c770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c4898d-12db-43b9-9993-659c5317b495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef77c95c-d5b2-405e-8500-e235e74ae462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e93021a-5efe-44cd-ae14-904b097730f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb24246e-8c8e-4839-94c5-2062e7d3f67d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86704362-5832-45a8-8a95-f9e2c40c875d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3d5476-df0d-4f79-b4c6-9f13af7a7a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a14e3d0-dda0-4853-9ea7-45c33b8d23db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b19b3c-1071-4e62-8449-3f6162a3eebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c9b035-0ce4-4b9b-9f79-90cb2632df75",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10153653-ad24-4fa6-962a-c016c1298e65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e7593b-07f8-4ac8-97bd-16f013f048dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a7b58e-c413-4c05-aa49-ecc560f93654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2fdc59-3c7d-4c67-8394-4f7511bd8c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcef5852-6977-4134-bfc6-6701443487d2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32587354-b19e-4aaf-b454-acbdfe52f94f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaa01a53-921f-496d-b9c4-4ab87a803f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6b66b3-248c-490f-b7a9-19a90a4b62ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ca5f58-3b02-456d-b254-867107285902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7216b5-0be9-429d-b024-bed4458c7d3a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03c9121-5069-4e0a-8cc9-c75401784e37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15564452-29e3-4bb1-b01c-bf4fa1ac379e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44be86e8-2c94-4034-b4ea-6a6bab437169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8faf29f-e056-4259-ba21-de151ba782d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6310ef-1f19-4b85-9643-77c322195e4a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42274bf5-986f-4aa8-acc9-c5ebe9178a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4beb5db4-b87e-4073-bd62-5a697d3b6f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5033c50-5ef9-4b02-a974-245de95ed006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e660570d-16ff-4856-8acf-aeeb441e4747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5336aec2-cf69-4ca6-9896-4e507b8756f6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fb91d2-d5ba-4ab4-9f0d-76d5f73216ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82e25df-edbd-4398-a37a-be2eb4264abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e320153-eee7-4d96-9e00-bca0075d0d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c382f4-c523-4c7d-93f0-80de0f02dd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0f6d54-24c8-4671-b9a5-6601872a374b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a67213-914b-4f10-84db-e16053d19b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52454389-2f69-443f-89e5-6951884ce4db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12f7a62-f7a4-45a3-b1c3-89b71c332df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db212d7-5b9d-4bc0-971c-b8c2e8258971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e17855f-64ad-47e0-927e-614ba3217054",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6940756-bb9f-4d54-b8b8-0d7ddbb4c1aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8908cb87-eb5c-4575-8d35-f9410ad387b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc28e21-2f75-4c03-b5a9-d7e759207dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58307926-ba93-48a5-8b40-2e84330bc60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98fa7b4-2d3f-41e4-9986-3bda0a200c0a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d7c53d-745d-497a-8360-6557d83a8493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a27f8168-8ba0-4297-a60f-8679cb19de54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e0594f-0711-461c-8737-1577b17ac33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c8904f-945e-4edd-a0ea-eef8d18b3829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9767e99a-98b5-4cac-891a-5234949a6be9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f0d050-9212-45ee-96a5-7a3c39f5c7b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebcf0177-e24b-4ef9-adfe-a8b235c709d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f34e6b8-996a-4f3c-813f-f00ad49e5da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4630083e-66b2-46b9-8afa-cc09334c3f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f7a73b-e258-474d-be89-354fd1072912",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb00099-a474-4c49-acd0-d3f22772ab03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00068ef0-d84e-4c85-956f-52f1a2573586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8900ab-9c22-4705-8db8-6c4be757b5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af621c2f-533d-4ba8-86fb-94f6c05e85cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bfbc30-a949-46ea-87d0-3358d6efc3a6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12130c96-d903-4ed0-a030-9b9bb8f6ecde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "884f2d2b-3f44-4c56-a849-2db9f7b2b642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfb0510-2fd2-4daa-8581-7bb11dca64ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7864a6-c820-43a9-8c5e-b6ce579031e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5128878-7285-4625-8af4-58f3b62f27bb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c4eb3b-3a1a-4350-9327-406c9acac459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf343eb-01c8-4e46-8654-a2292a62f4cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff9cc15-6af2-4d8d-82a8-0d1b259e2140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f4809c-ccf7-46b4-98f8-39fc70f58571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23845acc-648f-496c-bd82-721424c662f5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c0aa74-39bc-4b5f-a1f7-392b690c8a6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42e573df-a56b-4d72-907d-bcd2cfe28544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777f8d27-cb05-4eea-bc75-d34d0db77c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f1fbc3-0fb6-4d9d-babf-727727c5ac9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64396024-b74c-437c-ad36-84c90b42c178",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb80282c-d2a1-4890-93b0-78b5289bd3c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cfc0809-e898-4d6a-82b7-0ed22e79302d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9614d72-5c88-41c6-80af-b09dd4a9a344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f560b57-a6d2-4b38-a7a8-d1ebf66fa792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c671eb-8e08-42d2-9e59-538f4f6ce9e9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee83f58d-5e00-4a3e-90d3-e5645ab44cf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08d66e06-ea8d-454d-85f4-d51afbbee734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09d30d8-e072-47f3-a23a-9005fdc40806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c4462b-d6dd-451c-b3c2-26db660a7fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b91f494-141a-45a7-a0c8-3c4d9e59281e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521fd308-8a24-46c5-b338-da474407e590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd926af-1dda-4f18-85c2-471a1184a5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385d2ddb-5189-4589-bb5b-258310a4a639",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806a1454-2a90-4683-a270-ca62579fa882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cacd6f-931c-414a-87f4-1585ddb11839",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445cd30c-d3f2-4f62-8c70-00795b18ec23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede631a2-046d-4317-806b-1c4022471fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625a464a-0286-4bb0-8ff4-fc9e25d68d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7984ae0d-71f2-451e-aa84-f05721c0f023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e0ea39-5956-4b7a-a14b-7bd2dce33e75",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad2ad03-f160-4682-aa90-8a161a10223a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c3c174a-bd5f-4091-8867-808510698c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94db6b1d-9799-474a-a54d-476fbc10f196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a840f4-2b14-4f41-9e9e-4c59022437bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3714d04c-b37a-4ef2-a5c0-17ec67632bec",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93523dd8-486d-4914-9c83-a6ef2edc743d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d072178-39f6-41ac-a511-f426de86f740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07f9858-a013-44e1-9827-03e7c903171c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240b8167-3959-4b76-90e6-172b52bd60a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11917eb1-403d-4c81-9ff6-441e4b895a8d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ffea24-2f74-46ab-a59f-440e158a22dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b098aa77-c876-47ca-b2d5-5a27d0cd73bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08528e3-9fdb-4f28-b2e4-df786b01bd79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366728ef-5a44-40be-8b27-3b6e0d56efe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfc678b-f02f-4f3f-973e-1d8fa2937ac4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce748e06-4fd9-47c7-9ee4-f5fc2ee55992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "424beb30-ea20-4a5d-8bfb-92184edf8ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4999c03-3bde-4fce-ad56-0b06de3015fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed670057-af50-4c4d-902e-9f23b126bb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe6acc2-9867-4ffc-a747-e8f044d65c62",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e962bac6-5281-4bb4-b4bf-d28e43f2eef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b908b21-e70f-43b9-b0ca-b1638b5754d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a968fa-f580-4c12-8895-e7df5f52ef17",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6fc959-c03a-4d76-ba12-bdd2282a284f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c28b59-b64c-4ada-a644-ec8ce64cba90",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1e9329-891f-49fa-9cfc-bc590789f509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75529848-8395-406f-8d78-e3268084f07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee92226-d281-4cff-a8e7-19e056184be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b0ad0b-5d8d-4813-a64c-3b438e7590c5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9befe3f-2bab-4e61-bc05-134902f09aec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a064aecb-c1f0-44ba-b75a-d0a7c3e0e564"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b355aeb0-73aa-4ad6-9ae0-ad148f11d697",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d09e34a-fce8-42d6-b1f4-43d9fd483674"
                    }
                  }
                ]
              },
              {
                "id": "ffd0ecc1-4395-49e7-a3e5-90138ea05e8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8f0aba3-f60c-4ad9-bb24-dcc6aa4cc584",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cfebba-f839-428a-aae4-6acbe61158d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cdb9fe68-5569-4134-a727-d5b1d398ce71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad69269-18f9-4787-b45d-8816262dd137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d79c962-ce67-4b2e-bb6e-88569b78458e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdfc32f-7402-4609-9770-ee67bb2d32a9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd65c322-95df-46b4-a345-a6b15bc4cbdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "083b4df8-996e-49a2-8936-bbdb97a38ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5272a3dd-ecd0-4e65-831d-6ac545d65007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0fb2c92-c49d-46ee-8075-ff3f21b92a50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "288e0d36-6c4b-41a6-88e9-878409e5e723",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92d9d5c4-4220-4f15-8ea9-4f357937ded8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03c384ac-cae2-451a-a645-0b829773c52d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d50ebb5-a5be-4084-a686-8b5f93753971"
                    }
                  }
                ]
              },
              {
                "id": "2f0610d9-d5c7-4f75-ad8b-5ec8abaa2e1d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4a215df9-4bce-42a6-b754-28a750c856f5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30e028d-50d2-473c-be16-1058e7b533ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c01e2817-ef81-4a01-93af-6081b49ac3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6faa2d-c369-42b4-bba2-a7265539852a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0160835b-9342-4424-aa99-53267c8112a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c7a45be4-e4af-4f05-a44a-c3ef8c19edb6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a5ab7a8-19c9-4a76-914f-0e4b84f701b5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1480215-e8d4-4dd8-80c3-682d36b52383",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b1003e28-f0e4-4355-a110-097a96ca63cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0fe0e6c-4879-4ce5-80bc-b836fa134bf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9c5e0a8-4bdd-4bfa-87ed-b37ebbbac868"
                    }
                  }
                ]
              },
              {
                "id": "7741abc3-5c7b-4885-bc9c-7ca4e3263bde",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d44f7f4f-bf5b-4e3b-823b-adeeb14a60c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6f41686e-ce67-464a-a777-cbe5a13ce8b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a76b60fa-fe4e-48ae-9aef-9923f76e3039",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a437aecf-0f77-47a3-a6da-c736a5db7b21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29c987b3-0aff-4104-9e0c-0a392d9093a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "812dcbf9-241b-435b-a731-1f36990c8957"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69674d85-2b4e-4f57-9739-f93bb6845541",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d01a043-e291-4a13-a2dd-402077767df6"
            }
          }
        ]
      },
      {
        "id": "f9d0ded4-4052-4b94-948a-fafb3d3758cb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c438bad0-f544-4941-9411-026e24fff54d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fad9218c-add9-464e-b31c-4d412b82b697",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "caad7db0-01b4-4f76-b37b-38dea0dc83e5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29a9e48-159a-45b0-ad16-15cbd0f8b26e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dfc7bca4-6f08-4413-bba0-c473486cc33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed1786d-91a9-4af3-a7fd-5cd810188384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f476828-55fa-48c9-9605-6d2398c295fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e67a0e-1540-4388-8ae8-4ebe791c81a3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feaba23-8ef2-433f-a880-ade69bc610fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "24ddeb39-b7ec-4874-91ff-b0c0c903b89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb8b033-1ad8-4039-b8c6-30d028234d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8a2f4bb-172b-408b-ac83-9cd0bef21370"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63e4c302-7f67-4c73-8f2e-1c175b452222",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "768f4465-e251-44b2-9b72-1997be5b55f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1acdc55b-0032-4c13-857c-0376e034953b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dce91a94-6f23-4885-af67-87d694c26dba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfeeddf3-7c97-4c1d-8f20-4a4ab2fbba1c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6e854ffa-13df-4fc3-8a11-72a680f86c1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a5029cc-6ca6-4410-a333-d3a5aecd9560",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94812983-e260-470b-b5a8-14d4c147819d"
            }
          }
        ]
      },
      {
        "id": "8bf7eac7-dbb1-41be-bcbf-998e5874b750",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0abb2bb8-8b69-4a60-8a7d-0dca3784468c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12dd9640-68e4-459e-ad0a-f07dead162c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef91717f-b45b-4686-936a-1a8f92dcdb3f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ee09bf-d964-407e-9c2f-eab65ed545b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbe81dde-ced2-41c9-bd7d-1f17a2c7e410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8d7166-1514-4f47-92a9-3a4180033af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abfcc84c-1a80-4e15-b4cc-281c42cc1dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7e7ef6-0170-4c8d-9946-7655b3cafb79",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b4a230-15cd-49c8-a06f-82755f6a1d7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e01a078f-4d48-4446-979a-a3d4656d6151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19e5836-f3cc-4ab2-90ca-2afdd5f522b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d58c40b2-5e34-4f2e-88d4-ef2bb49659fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "181623bc-9468-40d7-ad08-934fb0244d79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6102941d-a814-420c-b5d5-846f500769c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27c23f3c-85b7-4a57-833c-f321d84e682e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e2a64ec-1ea3-4c19-8d13-1b66d525e816"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "836d0fff-7648-4e84-9942-67810fe14baf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "295b4f6c-6e37-4287-a51d-0b49af44e239"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71ebab0d-edee-4937-a407-ede23dadd098",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93f0a84d-cc2b-4557-a7ad-ff6322f57ba7"
            }
          }
        ]
      },
      {
        "id": "69543bc3-194f-45a1-b33a-1fbbb562fc09",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "46710be8-b477-424a-9d3b-b56fbddf002b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d77ca611-c9a6-4ea0-822a-abe2106d7f26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c5d33b5-1a3c-4293-8aa6-37ae92fb82c4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9902b3f-cc41-4ded-9698-0bd74a01a8b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e6489d8-f14b-4a68-9b8c-bf90cc0c36c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1be4af2-67e2-4ab7-bbe0-3c4f0b190ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec695da2-02ad-4441-8610-9e9bcf3835c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4429c221-c468-4397-ae2c-445d42c1e82b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75091a5-3a5e-4034-882d-90bfb0f281ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66ce4ca6-9a7a-48d5-8e1a-f1ce75d34768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292e5044-ce2a-4c7a-b65b-901733f6442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bed9677-c173-4618-8d45-82615b5de71d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31e76af9-d91e-445f-b864-f3d707bda4ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93cf4590-d9c6-4956-bc18-a2a55eb79278"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "383f442a-6fc1-417d-9e65-80cf87d58b4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2316d1b1-520c-4b86-b9b2-85f894db2b6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42b6f6e1-9e8d-47ee-8a1a-7d92f2ec7eb7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f5449ccb-60a0-473e-8636-f96ad869fc7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02a8d0d6-71f0-4042-87aa-32774dabf2af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1085f909-031f-4811-8f6d-479a8fd83573"
            }
          }
        ]
      },
      {
        "id": "7750b309-1d0e-4c30-90d2-30e16f77db33",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6316d475-30dc-4424-8ad7-5496015bc64b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76aa8d5b-a54b-42b0-b159-253f78e99ffb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2d3b5af1-ba49-4d8a-8f04-21a38f717fe1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca475f68-6bd3-41f2-8528-aa93f6295052",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bfe8a36-ff20-4119-b6bd-328100668dc3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 363.4307692307694,
      "responseMin": 7,
      "responseMax": 7800,
      "responseSd": 1024.6430405715525,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679013579435,
      "completed": 1679013686124
    },
    "executions": [
      {
        "id": "5a6a8f17-57b0-4482-bc6b-faadbfa5ec9d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1852d3ed-195d-4c7f-a111-debc4148e431",
          "httpRequestId": "69d4ff6f-e855-4c3a-969d-ee8c293ad588"
        },
        "item": {
          "id": "5a6a8f17-57b0-4482-bc6b-faadbfa5ec9d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "61fbf444-b468-4386-8d1e-0f02661653c2",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "b1a71e25-79c5-4c7c-bf33-50032fd66faf",
        "cursor": {
          "ref": "d68ed5cc-b8b2-4294-ab10-ed7d829352c4",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f7c0f524-7cb7-4480-8e44-58113af52e81"
        },
        "item": {
          "id": "b1a71e25-79c5-4c7c-bf33-50032fd66faf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0f34e3fb-6201-4777-a380-47f8fc74aff6",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "3287b632-a6b5-43b6-ab5a-091959c40c26",
        "cursor": {
          "ref": "ee3fa9a0-abe2-4dd1-b5e1-6db25fe68943",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e00e3a31-f56b-42e9-a992-5f43ca8487a8"
        },
        "item": {
          "id": "3287b632-a6b5-43b6-ab5a-091959c40c26",
          "name": "did_json"
        },
        "response": {
          "id": "bf570374-95e7-45b1-82cd-af03e3a2cd2e",
          "status": "OK",
          "code": 200,
          "responseTime": 445,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3b4e5d-3cec-4ed8-9c5f-0df0c8965ed1",
        "cursor": {
          "ref": "4dc5608b-85c9-4d41-ac15-939a218ff384",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fddb200e-9af9-4b89-97cc-ed8742d4532b"
        },
        "item": {
          "id": "5e3b4e5d-3cec-4ed8-9c5f-0df0c8965ed1",
          "name": "did:invalid"
        },
        "response": {
          "id": "063418d7-2953-42de-b8d7-5268607dfe72",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1314,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5e3b4e5d-3cec-4ed8-9c5f-0df0c8965ed1",
        "cursor": {
          "ref": "4dc5608b-85c9-4d41-ac15-939a218ff384",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fddb200e-9af9-4b89-97cc-ed8742d4532b"
        },
        "item": {
          "id": "5e3b4e5d-3cec-4ed8-9c5f-0df0c8965ed1",
          "name": "did:invalid"
        },
        "response": {
          "id": "063418d7-2953-42de-b8d7-5268607dfe72",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1314,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c06d09cd-0d28-4b4e-81d7-c8e85050beef",
        "cursor": {
          "ref": "5ae41c88-6f56-42b9-b05f-902043e5d401",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4f5f80a7-35eb-42c3-a289-cd8a64eab8f9"
        },
        "item": {
          "id": "c06d09cd-0d28-4b4e-81d7-c8e85050beef",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9d785a05-97c0-49e4-9abe-6b7772add96f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08193e5a-a6d7-41b9-870c-e5f9d57222e9",
        "cursor": {
          "ref": "1aee98cf-8197-4ae5-9a21-c60dfc7849c4",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "994d6679-3c3e-4c24-9727-1645270e0fc0"
        },
        "item": {
          "id": "08193e5a-a6d7-41b9-870c-e5f9d57222e9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "38646c8b-90f0-4f71-85e8-322b7f29582e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ceb67c-c408-42d3-b2c5-62aa74feda22",
        "cursor": {
          "ref": "47828c36-780b-4be5-be52-ca2da801b737",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5bff2f8e-183a-417a-9c1d-6d7e61c8d101"
        },
        "item": {
          "id": "41ceb67c-c408-42d3-b2c5-62aa74feda22",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8fd84cf2-5337-4f24-941b-628fd87dc9c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a1a5f6bb-90db-4631-a788-9fa8e6de04dd",
        "cursor": {
          "ref": "2eb4c427-1425-4d08-b167-6453d5ab9689",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "875ab3b0-7490-4602-9cb5-1fc8343a5663"
        },
        "item": {
          "id": "a1a5f6bb-90db-4631-a788-9fa8e6de04dd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "46c3eb4d-4b32-4549-a6b2-5eabdca5d4e3",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a1a5f6bb-90db-4631-a788-9fa8e6de04dd",
        "cursor": {
          "ref": "2eb4c427-1425-4d08-b167-6453d5ab9689",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "875ab3b0-7490-4602-9cb5-1fc8343a5663"
        },
        "item": {
          "id": "a1a5f6bb-90db-4631-a788-9fa8e6de04dd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "46c3eb4d-4b32-4549-a6b2-5eabdca5d4e3",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2c770514-ca3d-4513-bfbf-d2cb784ae731",
        "cursor": {
          "ref": "86a5dca2-933a-4ac8-8c95-e356821c9677",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a52bc787-e652-4e0f-8de4-84a37982adb6"
        },
        "item": {
          "id": "2c770514-ca3d-4513-bfbf-d2cb784ae731",
          "name": "identifiers"
        },
        "response": {
          "id": "841167db-bd4a-4dfc-aab3-4d1b79024f0c",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128ea815-8e5b-4f35-b6e0-164cfd4dd54b",
        "cursor": {
          "ref": "8dff3628-119f-4375-af2f-cf3cdda8696f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ac6e6d43-ef02-460c-89b5-ea9aed2ade3a"
        },
        "item": {
          "id": "128ea815-8e5b-4f35-b6e0-164cfd4dd54b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d445b8ea-d79f-44cd-8da5-613f59812cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128ea815-8e5b-4f35-b6e0-164cfd4dd54b",
        "cursor": {
          "ref": "8dff3628-119f-4375-af2f-cf3cdda8696f",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ac6e6d43-ef02-460c-89b5-ea9aed2ade3a"
        },
        "item": {
          "id": "128ea815-8e5b-4f35-b6e0-164cfd4dd54b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d445b8ea-d79f-44cd-8da5-613f59812cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6087bc-cdca-43d3-910b-e2c754e8af7a",
        "cursor": {
          "ref": "9a5d4e33-198b-4ff3-b0a9-38fa65ec596b",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1607f34d-434e-4a6d-abe9-d345370516ff"
        },
        "item": {
          "id": "ad6087bc-cdca-43d3-910b-e2c754e8af7a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af6969e8-1440-4681-8434-239d77105331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 958,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3329cc-988c-463f-b1b2-2631bc1c7614",
        "cursor": {
          "ref": "6bbe3738-6f80-4bcc-860e-b0388ec4287b",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e6d0b570-ef95-470a-a249-78e64d86d29e"
        },
        "item": {
          "id": "2c3329cc-988c-463f-b1b2-2631bc1c7614",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b42f92fb-733d-4e73-bee8-89b67fd9f185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac98edc-579f-4a34-96e9-971468f0924a",
        "cursor": {
          "ref": "3ee2c185-1743-4468-a351-fc062ae9459a",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fcaee422-e21a-45e1-b104-50c439b07b7f"
        },
        "item": {
          "id": "3ac98edc-579f-4a34-96e9-971468f0924a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a8ab9da5-fb23-45b9-ad98-f18152dd6e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb74aa9-5c4e-4dcb-a9a2-fbb7af14bf9b",
        "cursor": {
          "ref": "904d8c36-35fe-407c-95c8-88cb981a0536",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3a1e3c50-da51-4315-8adc-0c987f37662f"
        },
        "item": {
          "id": "bfb74aa9-5c4e-4dcb-a9a2-fbb7af14bf9b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7af798ba-39eb-42b6-b615-0a8c5353cca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37a9734-6bc8-4c8b-8dd0-aa965988ad93",
        "cursor": {
          "ref": "660ec485-3e71-4ab2-b442-84cbed2082ae",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ed5bb88-acdd-4f8e-ba8d-b2352b8fc6bc"
        },
        "item": {
          "id": "f37a9734-6bc8-4c8b-8dd0-aa965988ad93",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a5cc6bac-359b-4f4f-9dbb-24064724edec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d65e1dc-0e84-42bb-8cc9-87f3309b1bd4",
        "cursor": {
          "ref": "6eb21ffd-93a6-43c1-8517-cc68580d5fb3",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6e7e112-5968-4862-aeed-23c032996a2f"
        },
        "item": {
          "id": "8d65e1dc-0e84-42bb-8cc9-87f3309b1bd4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3abadbe7-5812-4dce-989a-c0b0e60b65d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57730cd6-a3fc-45c2-b2de-857967a7ff65",
        "cursor": {
          "ref": "ac1da21d-7cda-452a-a363-a30e49553c02",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1153b387-6b0b-4e95-b0bc-0a9746df0485"
        },
        "item": {
          "id": "57730cd6-a3fc-45c2-b2de-857967a7ff65",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "85e7dadb-ae5b-4633-afde-f8d3925cccd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43c10d3-33c2-4022-a827-5ccdd95a9df4",
        "cursor": {
          "ref": "0e3a9bb1-b474-4fe6-a2e9-9c20353ea90a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0afa7308-294f-4e58-b295-071c7900213a"
        },
        "item": {
          "id": "d43c10d3-33c2-4022-a827-5ccdd95a9df4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7e55e3ce-f77d-40e6-8e27-f6b9e4578655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c064061-1ff6-4ba0-acba-7ac1a36446dc",
        "cursor": {
          "ref": "768a7dc7-8865-44b5-aeba-712aa68cd681",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1da9e5ed-a6e5-4fea-81e0-49732f323630"
        },
        "item": {
          "id": "7c064061-1ff6-4ba0-acba-7ac1a36446dc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1a98e484-1d50-47dd-a173-321841baa9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f3df57-07c6-4286-95f2-a96bd5676af6",
        "cursor": {
          "ref": "62754d2e-ea29-4cd0-93ba-cdcc4a4db0cf",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c4fad1bd-45f2-4227-986a-dea670125060"
        },
        "item": {
          "id": "a4f3df57-07c6-4286-95f2-a96bd5676af6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f8cd794f-fd41-4d94-be9e-6bc3348d4255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db80de39-0ec7-47b2-85e5-e237dd90b520",
        "cursor": {
          "ref": "53201500-dcc3-4963-932d-e149d8703edc",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1f4f25ca-07b3-4613-bd44-15a4c6849a66"
        },
        "item": {
          "id": "db80de39-0ec7-47b2-85e5-e237dd90b520",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c89619fa-38e1-4d5e-85b6-ae54a3156ed1",
          "status": "Created",
          "code": 201,
          "responseTime": 2481,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3cce796e-7c7b-4728-9ff6-fa8002bedd85",
        "cursor": {
          "ref": "16a3d619-065f-4b96-8d72-f44e703b212a",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "73e99e83-1b40-4456-8166-9d399153ea8b"
        },
        "item": {
          "id": "3cce796e-7c7b-4728-9ff6-fa8002bedd85",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "80eb0f22-f730-4827-9466-5cbf877485fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeab34e-8075-478c-a81f-b87d58503f60",
        "cursor": {
          "ref": "739e0c15-225c-443f-84ef-792825f78141",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b0a7b489-7b96-4293-8c8d-b89b86d332c0"
        },
        "item": {
          "id": "edeab34e-8075-478c-a81f-b87d58503f60",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dd5933fe-9200-41c8-af9c-cdfda1da6665",
          "status": "Created",
          "code": 201,
          "responseTime": 3848,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a70ca951-c8d9-4619-807a-025004d9040c",
        "cursor": {
          "ref": "5ee67caf-48d6-4894-9e01-e705ac23dc3b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "88e20c26-5c8c-4c40-997c-b85a089c977d"
        },
        "item": {
          "id": "a70ca951-c8d9-4619-807a-025004d9040c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "901e562c-11ec-4a92-89e6-068383387ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dc04eb-2368-4215-bf47-7df175f4b9dd",
        "cursor": {
          "ref": "1f2e3ed8-7ae2-4110-9e0a-c9cc3b444f96",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8e6e6944-6932-4a92-b910-e80d93e2104b"
        },
        "item": {
          "id": "e7dc04eb-2368-4215-bf47-7df175f4b9dd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "52b826e4-05cf-4d51-b6bf-f4f0fcbfe698",
          "status": "Created",
          "code": 201,
          "responseTime": 3582,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "763ba874-f984-4e13-8c47-9272a42a9b69",
        "cursor": {
          "ref": "a0720c65-424f-413c-b228-56cf1c3c2edc",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c381d560-aea6-4226-9225-dac98e0e1e51"
        },
        "item": {
          "id": "763ba874-f984-4e13-8c47-9272a42a9b69",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "69fabceb-876b-4f71-bd06-5d93f1a10541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b318cb7-6d3f-4e69-a837-020c5351575a",
        "cursor": {
          "ref": "da0d923e-14d9-45ea-976d-4aade4010309",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "729eccf7-ad4a-4dc1-9030-64e165d055b7"
        },
        "item": {
          "id": "6b318cb7-6d3f-4e69-a837-020c5351575a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6907fdc8-d167-4407-b199-2eda68564193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30b7443-e6f9-4487-b29d-9547faedaa89",
        "cursor": {
          "ref": "199fb2c6-7a4e-4b9f-9914-60c824c8a44c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "10d236c6-7c01-4664-af32-709ee7b2f1a8"
        },
        "item": {
          "id": "f30b7443-e6f9-4487-b29d-9547faedaa89",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "60e72375-8f64-4304-a5ca-3729abf0d4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693fe493-c6d2-463c-9669-0eef21266fd1",
        "cursor": {
          "ref": "9056c572-0c05-473a-95cc-5c4bee7119f1",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2739fd04-21f8-4350-8d54-33a4ec473db2"
        },
        "item": {
          "id": "693fe493-c6d2-463c-9669-0eef21266fd1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0db3b897-abff-41bb-99b7-54d311278ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44042da-b906-4ead-9968-df0ddd57fcbf",
        "cursor": {
          "ref": "669f8a7d-3887-416b-b25d-54e30bf2f979",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ed6fbfc7-e24d-46a5-9da2-861218bd4afb"
        },
        "item": {
          "id": "e44042da-b906-4ead-9968-df0ddd57fcbf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "eb9201de-2369-48eb-a199-db63a30a1b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20787d7e-2b14-42fc-9ee2-bfe55a544f10",
        "cursor": {
          "ref": "5e155dc7-3e85-4fb8-bc91-3ffeaf6e506b",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d132f4e1-0425-49df-943a-c850e865af32"
        },
        "item": {
          "id": "20787d7e-2b14-42fc-9ee2-bfe55a544f10",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b3c2480e-abdf-49c6-8278-9075aa7446c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad965f3-de44-4151-9baa-edb54552fcbe",
        "cursor": {
          "ref": "5b091bbb-672f-4fbd-9e03-e3c4cdb2a9e3",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "889a098b-0a11-4295-9ff9-858dfa83e4fe"
        },
        "item": {
          "id": "4ad965f3-de44-4151-9baa-edb54552fcbe",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "41ede56f-e325-4e1a-bc30-ee420ae37273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb9ec9-70c2-4bc8-bf34-a21ca4f0a982",
        "cursor": {
          "ref": "3cdcb4ee-a67b-49bf-ba7d-d79c8e0cbf40",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "acc2a22d-28dc-4e0a-9f7a-a51aa90d850e"
        },
        "item": {
          "id": "dfbb9ec9-70c2-4bc8-bf34-a21ca4f0a982",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3c4a6a48-5ece-4d48-b1e2-980902d931c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4cd214-6ecd-4fe1-9d76-f96315132318",
        "cursor": {
          "ref": "4f13e6d5-80ef-438b-b0e4-66fbdcfcf14a",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "21116770-58c9-4ebd-a3b0-bbf060d34553"
        },
        "item": {
          "id": "5b4cd214-6ecd-4fe1-9d76-f96315132318",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "58a456ca-7627-4934-83ee-d73c89bbda6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3400307-5e73-4aa1-bf11-6f76a8b97794",
        "cursor": {
          "ref": "e101ad3c-d79c-4936-9365-ad634bbfdd0d",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0039e871-52e7-4bb3-a984-e76eba28aad2"
        },
        "item": {
          "id": "f3400307-5e73-4aa1-bf11-6f76a8b97794",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2f296369-2dde-4f8c-adf1-dbe3e37c1b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85282235-5c8d-429a-86b0-6a273d97045c",
        "cursor": {
          "ref": "20df4649-f9be-46f2-a238-fedac4c25b56",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4346688d-cda3-490e-9918-f719a208ef27"
        },
        "item": {
          "id": "85282235-5c8d-429a-86b0-6a273d97045c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "584f4e7b-b08d-4462-81dc-383b290add93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecd0d8f-90d1-4cf7-b8bd-55d7057ccabd",
        "cursor": {
          "ref": "9c873c14-ec2f-4aa2-b132-6df3b116294e",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f9721827-b792-47e0-ab23-afad5693f33a"
        },
        "item": {
          "id": "8ecd0d8f-90d1-4cf7-b8bd-55d7057ccabd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2153879c-c995-4c22-80b6-3423743c1268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f660b8-3c9d-4c9a-86b8-29f7d0d0801d",
        "cursor": {
          "ref": "e4d4377f-a88f-4a54-a578-621adb3551a3",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2297cf44-2d89-473a-9a1f-63711981ce62"
        },
        "item": {
          "id": "a5f660b8-3c9d-4c9a-86b8-29f7d0d0801d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cc9bdff5-a24a-4ab1-a884-70c594d6b1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d7afc2-fbb4-4e3d-aa17-5e98ed6210c2",
        "cursor": {
          "ref": "ad54d2df-9193-4e30-8796-1b4c003de31a",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4196a081-1748-4770-8cf8-0f20f80f1ca2"
        },
        "item": {
          "id": "46d7afc2-fbb4-4e3d-aa17-5e98ed6210c2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "61c18e44-45d7-4abc-9b49-f8809ac0416d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36815b4-59f3-44b6-80b1-6139b37b8d54",
        "cursor": {
          "ref": "5f95164b-44fc-4f89-abf7-4470ddffbe35",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ae669630-6945-45cd-ac53-ecac7cbb3866"
        },
        "item": {
          "id": "a36815b4-59f3-44b6-80b1-6139b37b8d54",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "094c677e-72a0-47b5-93f7-cc74cc110c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0858c995-5480-459a-81e9-94996e4877e7",
        "cursor": {
          "ref": "aa9ab1fc-58fa-4606-86e3-6fed498c90ef",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a42ae617-4811-4547-8ad5-a206c25c5db8"
        },
        "item": {
          "id": "0858c995-5480-459a-81e9-94996e4877e7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "58ad9073-74ed-46d8-82c7-af4d53c67b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534252da-1464-4d01-8e61-3e90b53a17dd",
        "cursor": {
          "ref": "b3a2a7a9-4d19-43e5-8c24-2220957b0664",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7a25c060-24ba-4269-9001-de149ddced37"
        },
        "item": {
          "id": "534252da-1464-4d01-8e61-3e90b53a17dd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f49ed578-7795-4007-8d5b-b8b546ce1aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4308ab8c-b148-4b22-a740-d84f85ae7b13",
        "cursor": {
          "ref": "87e9311c-64e6-4381-8918-b816ac9c4009",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "77abec5e-b33e-460a-b232-d9c5c0cd5145"
        },
        "item": {
          "id": "4308ab8c-b148-4b22-a740-d84f85ae7b13",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9e07bd35-d257-4a1d-b0dc-585b401e2241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7be0f7f-b054-41a0-bf57-796b6a687848",
        "cursor": {
          "ref": "3fc3b0c6-8bc8-46bf-9967-7e89a28ef075",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e4f05392-a0d9-44c2-bee6-e95a21ba69b0"
        },
        "item": {
          "id": "a7be0f7f-b054-41a0-bf57-796b6a687848",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "04ccab96-9d30-4cd3-96be-4c0025f822d1",
          "status": "Created",
          "code": 201,
          "responseTime": 7434,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a418a452-5eca-4139-97a9-0bcc77b5e118",
        "cursor": {
          "ref": "6419a5f0-f346-448a-9d7f-75b60c04efea",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f1d05400-8acc-42c9-bfc5-d051240aba53"
        },
        "item": {
          "id": "a418a452-5eca-4139-97a9-0bcc77b5e118",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3a0cc03b-468e-437b-b1eb-2ef6f69f1a6e",
          "status": "Created",
          "code": 201,
          "responseTime": 3198,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d4adf597-583e-4a99-bca5-68fca79ca2dd",
        "cursor": {
          "ref": "5582548d-8091-4d43-a823-234b028e83e4",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "53417793-d97a-4492-8062-fbfac630173a"
        },
        "item": {
          "id": "d4adf597-583e-4a99-bca5-68fca79ca2dd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "69f990af-9fe2-479c-b3d5-e913d02f0a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a91ef0b-d2f0-4692-adb1-068a9e4d5d45",
        "cursor": {
          "ref": "ad6fa33d-963d-47de-b858-1956f727ff20",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7e0fe6db-b33c-4659-998d-77ac889ff102"
        },
        "item": {
          "id": "7a91ef0b-d2f0-4692-adb1-068a9e4d5d45",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "631a9613-fe50-4901-b866-f9f9d9d3c576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b4114d-22c9-46b8-9e99-615aae7c4081",
        "cursor": {
          "ref": "3f1a61f3-2611-4908-898a-412cb90b1da5",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "20327229-8d3b-4d95-9736-e84688b28c03"
        },
        "item": {
          "id": "05b4114d-22c9-46b8-9e99-615aae7c4081",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d2027211-e09a-46c1-b61a-5b05fe513f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7faaba-f1e9-4833-857f-560d797ac0f8",
        "cursor": {
          "ref": "e643e152-5332-4977-b6eb-291d3f1c4433",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "174daa6d-4717-4111-9f76-9ff2005cc897"
        },
        "item": {
          "id": "df7faaba-f1e9-4833-857f-560d797ac0f8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ae7708e4-968e-4d5d-9ef8-c3e56406569c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e9d6ff-f7cb-4a5f-88b0-0c13d64a1915",
        "cursor": {
          "ref": "ad2a7811-1f09-4b72-9b3a-b1dee7a37ad4",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0b834900-6b8e-4e09-80ed-4f3e2d1fc104"
        },
        "item": {
          "id": "80e9d6ff-f7cb-4a5f-88b0-0c13d64a1915",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3a211374-a251-4c7c-b3b5-641be546139b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65ff499-2461-4556-a436-91a42d9709b0",
        "cursor": {
          "ref": "3efd6a6e-6909-44f5-8ceb-f2f6db3da62f",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2ded8ec0-a3af-4677-a3cd-dba3af558a77"
        },
        "item": {
          "id": "b65ff499-2461-4556-a436-91a42d9709b0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "955ed4a1-5389-41f7-8de4-3ac99c20fabf",
          "status": "Created",
          "code": 201,
          "responseTime": 2444,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a1085833-887a-46ba-aabb-080db8397afe",
        "cursor": {
          "ref": "21e1e82b-2436-4351-99d5-1c26dcb968d6",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "285b3084-9f35-48dd-b9b5-d2ad5b58ef84"
        },
        "item": {
          "id": "a1085833-887a-46ba-aabb-080db8397afe",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ccb3399b-469f-4501-b83a-92ac6d4ec661",
          "status": "Created",
          "code": 201,
          "responseTime": 4535,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "84251c7d-d15d-42d0-a8b2-e093c03ded5c",
        "cursor": {
          "ref": "93c3a79d-d1fc-4866-a182-bad59b52979b",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e7bb7877-ae92-4674-b2cf-ddc1054b949a"
        },
        "item": {
          "id": "84251c7d-d15d-42d0-a8b2-e093c03ded5c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "786b0033-364f-4e4f-a623-4a7a3a390f9f",
          "status": "Created",
          "code": 201,
          "responseTime": 6744,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "283f102c-c296-48cf-b134-99b1fe2cf044",
        "cursor": {
          "ref": "2d61c4fd-fb04-4d93-bdb9-a07fca42d866",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8ea557ee-e411-4731-92e1-27adda510bed"
        },
        "item": {
          "id": "283f102c-c296-48cf-b134-99b1fe2cf044",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "91823a3e-0dee-4b91-a3a0-a945a4b75e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86092d92-0280-4c31-a8f5-3250bafeebb1",
        "cursor": {
          "ref": "1780758b-4aeb-454f-9afb-e6584de5856a",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "532f7d46-9234-46d7-9119-67166e612100"
        },
        "item": {
          "id": "86092d92-0280-4c31-a8f5-3250bafeebb1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "25bf8e01-eb2b-49fa-b502-3b70fa9e2853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e552ff3-7d9c-4eb8-b7a2-a69027077f88",
        "cursor": {
          "ref": "0aa146d9-bd78-463d-a007-45180e067b99",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e75b673b-9154-41ba-92e9-deffaf44774e"
        },
        "item": {
          "id": "5e552ff3-7d9c-4eb8-b7a2-a69027077f88",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "95733129-26cc-4bff-aa2f-47b4f74d32c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4131884-3784-4b25-94a9-557fa7d021db",
        "cursor": {
          "ref": "6e7f24b7-e92d-4c93-bbd7-f405d407b99f",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6c856483-7320-493f-be26-c918f4907a34"
        },
        "item": {
          "id": "d4131884-3784-4b25-94a9-557fa7d021db",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "927ba19e-f0b0-4572-b9ea-052ba6ec903f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cebec9-4819-43eb-9a91-1881d60ac028",
        "cursor": {
          "ref": "c9478566-b838-42dd-9791-4f785c8977f1",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3c7f8228-c175-4a32-98fa-3b6485a17cdd"
        },
        "item": {
          "id": "94cebec9-4819-43eb-9a91-1881d60ac028",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "66f46a3f-3a4a-4b29-b6e8-ec9541aa6950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9b6a3a-aba6-44fd-a9e5-2f5ee5c19753",
        "cursor": {
          "ref": "f79c0609-a884-4701-b6b1-bf84cf255a0e",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b5033ef7-4b7c-42f4-8372-7e96b21d0ddb"
        },
        "item": {
          "id": "0d9b6a3a-aba6-44fd-a9e5-2f5ee5c19753",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4f79d85d-8f15-4179-b4e1-21122961cbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1743928f-4c9e-4d0c-b0b6-6d240830a03a",
        "cursor": {
          "ref": "b8710aac-8318-4574-be9a-0e4654b97584",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2bcb102d-b8a3-42ed-9f35-f1814f373d9f"
        },
        "item": {
          "id": "1743928f-4c9e-4d0c-b0b6-6d240830a03a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ad0ecdc2-feca-45e2-bd96-73904b7ef69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1438520-abf7-4491-90d5-0adfd3b7d66b",
        "cursor": {
          "ref": "09808d55-232c-4227-9e5f-6d8422f96e80",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b7bd84ea-61a7-4ae8-a06d-b82804b838f4"
        },
        "item": {
          "id": "e1438520-abf7-4491-90d5-0adfd3b7d66b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b30a80c6-1b11-4242-9ae7-772a1a4748d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a161166c-fa3a-42a3-82f1-f0437d8a578e",
        "cursor": {
          "ref": "56260af6-7b49-4fd7-b6ee-233789f779af",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "da488fa4-9935-4f50-bc98-be4b904181ab"
        },
        "item": {
          "id": "a161166c-fa3a-42a3-82f1-f0437d8a578e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "04815e1b-b9a3-4ab3-8cdc-4d0037be368f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab40b95-092a-49fa-97b3-9f26231eba96",
        "cursor": {
          "ref": "8aaccc7e-549b-45fc-88d6-463cdd7152eb",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "43b39671-ed2d-4a76-8dd5-7841451ed7ac"
        },
        "item": {
          "id": "6ab40b95-092a-49fa-97b3-9f26231eba96",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "853ad1d2-4486-4850-9e31-5b473c5c510d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832b1421-9eaf-459d-aad8-ff0c135f05b8",
        "cursor": {
          "ref": "4b7f11ac-26e5-41dc-ad08-51b99fdf86f9",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bff92034-b4d4-462b-b10c-97e12bfabc84"
        },
        "item": {
          "id": "832b1421-9eaf-459d-aad8-ff0c135f05b8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3264fdb8-10c0-4645-8086-257dffa154f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6487406-115b-433a-8f44-747d0e615260",
        "cursor": {
          "ref": "9c88ae4b-f16c-4c5a-8495-d8258a0cece6",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "21ed8ba2-3566-4e8c-9ee2-fe4796d58732"
        },
        "item": {
          "id": "f6487406-115b-433a-8f44-747d0e615260",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3f616ba6-36b5-4b98-ac59-c47b9d64d20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e49e1e7-c240-41a0-a43b-43fffd2b3bf3",
        "cursor": {
          "ref": "026e8564-ea80-4e92-93ba-57fa4f917708",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "69b2f89f-f2f1-4078-bae9-b0ce7092a428"
        },
        "item": {
          "id": "5e49e1e7-c240-41a0-a43b-43fffd2b3bf3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "369f7243-607e-4b1f-8b5a-f0c8fa63ec3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9864de-ed80-4269-82ef-e571a2ea5e9f",
        "cursor": {
          "ref": "c485bedc-bebb-4165-8ea1-7cd66040ffe3",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a400c1b1-53fd-496d-ace5-89c3b1f34e28"
        },
        "item": {
          "id": "5d9864de-ed80-4269-82ef-e571a2ea5e9f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c927e7c0-6179-4bbf-aaa8-a4d01a243fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1b3222-b046-4f09-ba0f-0d74bc65e988",
        "cursor": {
          "ref": "eb6fa3eb-15c0-4b6f-ad0c-d6ed5eb89367",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "18b95190-05e0-416a-8285-847a3670adc1"
        },
        "item": {
          "id": "5b1b3222-b046-4f09-ba0f-0d74bc65e988",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5210d074-3d2e-47ff-a62e-1e57f3b52e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf3d66f-cce0-456a-950e-562c3a6bc7cd",
        "cursor": {
          "ref": "21374f48-9892-4d1f-b738-a2ca07a5d11b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "003ca330-0b68-4694-8e31-663e4c1b3e82"
        },
        "item": {
          "id": "dcf3d66f-cce0-456a-950e-562c3a6bc7cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d0930c2b-d53c-4214-8ae7-0ecd688c5d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e516971d-892a-4e2e-adca-7cb11603ac5f",
        "cursor": {
          "ref": "40c18dfe-2d7f-451e-aa49-58dd711f46f3",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "92fc3cda-fcf0-48c8-b2c9-66a1d2a245ac"
        },
        "item": {
          "id": "e516971d-892a-4e2e-adca-7cb11603ac5f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a9b4a012-886c-430f-9269-0293895d1f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd07f5e-8453-43c4-b0b0-d1702b792f88",
        "cursor": {
          "ref": "57f9ed62-ccd0-423c-8618-ad31d9d63197",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "cb82e498-8bd1-48ea-b5af-46806c418a6d"
        },
        "item": {
          "id": "0cd07f5e-8453-43c4-b0b0-d1702b792f88",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ec0a3fe3-68ea-4746-92bf-3223d1a8c5a8",
          "status": "Created",
          "code": 201,
          "responseTime": 7800,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a1cf7d41-4ea4-4f3e-a2ce-800a0448251d",
        "cursor": {
          "ref": "c84c0290-c622-4cc3-8e95-65a2c14b0248",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6da20f83-e74c-42df-aef7-1a156ac49582"
        },
        "item": {
          "id": "a1cf7d41-4ea4-4f3e-a2ce-800a0448251d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7287f5c7-1baa-479c-b613-f963f2b3c23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 551,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67f8b2d-c60d-4cd0-bb9e-a8a687b28dde",
        "cursor": {
          "ref": "ec5d5389-0ee8-4fa0-862c-62f359d8ad29",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9fa4dcae-ce5e-4647-bfe3-e7ff0d8f752c"
        },
        "item": {
          "id": "d67f8b2d-c60d-4cd0-bb9e-a8a687b28dde",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "07894c7d-0932-4f3f-855d-7882a5c97946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 555,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b18e0c-728b-44e9-bc50-6a6f367b5568",
        "cursor": {
          "ref": "58d18cd5-efd0-4061-9d89-6b9fdda7f815",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6b2427e3-7321-400b-99ab-fd36e29c6208"
        },
        "item": {
          "id": "00b18e0c-728b-44e9-bc50-6a6f367b5568",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d2f6e332-2adc-4135-b1da-f3bf5af0799c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 597,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1512a8-e554-442b-8f35-16e56bdccb72",
        "cursor": {
          "ref": "8c3fbb3d-5f11-484b-9200-3439ff6f2915",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ad532e58-8d04-4029-8790-63a212879a94"
        },
        "item": {
          "id": "dc1512a8-e554-442b-8f35-16e56bdccb72",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "89c1bf06-3d2f-47f1-b43c-f21bf4f058ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 563,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb92ae16-e258-4923-aa1f-d3ac8f9e83ed",
        "cursor": {
          "ref": "0e999148-943b-4ecb-8701-94407cbbecfd",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b48b7e0c-e98f-444b-8bc6-5d52bd300825"
        },
        "item": {
          "id": "bb92ae16-e258-4923-aa1f-d3ac8f9e83ed",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2892a38d-c57c-4554-a5b7-54ed0970a9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 575,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2abbdbc-aa14-4118-a548-9e8561eaa518",
        "cursor": {
          "ref": "845654c3-df9f-45d3-aafb-ce596936c516",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8c72fa45-c582-40a3-ac5b-fd542c0d1300"
        },
        "item": {
          "id": "b2abbdbc-aa14-4118-a548-9e8561eaa518",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3c472f51-bee9-41d6-a64c-130fa24fd613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 621,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6b345b-f33c-4a0f-ae49-57cb2fd1abf0",
        "cursor": {
          "ref": "b2a31c51-4aeb-4aa5-9c71-dee372dc4a53",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "29f99e58-3b46-413f-9935-9544fa7cdc75"
        },
        "item": {
          "id": "4d6b345b-f33c-4a0f-ae49-57cb2fd1abf0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ecfbfb5c-e4a8-45e7-995f-28c47edf5cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 703,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c845351b-b023-418b-8981-32149eb8cead",
        "cursor": {
          "ref": "1e6c125d-298c-4559-a041-ad536f3ab4e4",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "da7b31c9-0a0a-4226-81b3-d13dd508d24f"
        },
        "item": {
          "id": "c845351b-b023-418b-8981-32149eb8cead",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ddd3486c-5873-4c3c-8a74-524f9fdc2061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 642,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7ac0c6-e9cf-475f-a291-9a106fb10a03",
        "cursor": {
          "ref": "d4f941f0-8275-4f14-ad40-c77f8570fef5",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b43a36df-1fd0-427c-bc2b-9d0cc8e2427c"
        },
        "item": {
          "id": "ce7ac0c6-e9cf-475f-a291-9a106fb10a03",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f378ef01-086d-43fc-b65a-0accc4d87fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 724,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3b7284-bcef-4277-8580-1dda8694d1ce",
        "cursor": {
          "ref": "d9a5ea5d-4357-499d-a264-36d0f9c7d16d",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7a3c23f2-dde0-414c-a202-b8fdb6e18513"
        },
        "item": {
          "id": "fa3b7284-bcef-4277-8580-1dda8694d1ce",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "968135d7-b092-4caa-b480-7fc20fa1dc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 590,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a8621c-7f63-46fb-915f-98b1a940a104",
        "cursor": {
          "ref": "18b18ff3-810b-4a40-afb8-7eb76b17e2f5",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2187c923-c3d8-4d38-93df-bfce40c10146"
        },
        "item": {
          "id": "67a8621c-7f63-46fb-915f-98b1a940a104",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b2342559-5b75-4ed7-9d15-39a634558aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3854aa0c-373e-4aa0-b618-f340c75dee86",
        "cursor": {
          "ref": "70e255a2-ecd5-4a90-8582-1a86d8ffebd7",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b7f90610-a6e4-4b38-a4e2-b95f27c5213f"
        },
        "item": {
          "id": "3854aa0c-373e-4aa0-b618-f340c75dee86",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e6bbb28e-4f75-4885-b7f0-4ef0a7a98bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a8b6d1-805a-401a-affd-db413f02f789",
        "cursor": {
          "ref": "be6c5374-1c0f-4906-bbd8-076d250e9ed6",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2383c29d-47b9-4a1a-9654-7fffbe7b87be"
        },
        "item": {
          "id": "26a8b6d1-805a-401a-affd-db413f02f789",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6cc3c715-7a57-4981-8941-467bea6e0349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c2d39b-c4f8-4eb3-aeba-ec8e80845d14",
        "cursor": {
          "ref": "032d911d-ddc6-4d17-ac1d-0277a991006c",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e0f12574-ab4d-4491-8067-040e8899d376"
        },
        "item": {
          "id": "75c2d39b-c4f8-4eb3-aeba-ec8e80845d14",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1ae21688-e570-47d2-b48a-5675be151e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553b0e1c-7d14-4640-b68c-12a7da3910ad",
        "cursor": {
          "ref": "a5380943-d8c6-4bef-b4b3-a9fb6ce1b434",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ecc965fc-ffd5-4cc4-b16e-1deea5b77d5c"
        },
        "item": {
          "id": "553b0e1c-7d14-4640-b68c-12a7da3910ad",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9483fb22-f402-46de-a3e7-5848ef426213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ed9dd8-cb4a-4158-a098-697e3037536c",
        "cursor": {
          "ref": "9a6014b2-b97e-4674-858d-f575b54e1d5a",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c8557f03-4e0b-4820-8e62-17e1e47d2233"
        },
        "item": {
          "id": "59ed9dd8-cb4a-4158-a098-697e3037536c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8e867b6b-8540-40d9-b5a2-df8ca0d2d118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1494d245-6180-448e-b997-05dcc1b0b68f",
        "cursor": {
          "ref": "0c2d7427-a2dd-4115-9b3f-f24b4393c9f5",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ee2843e7-72ad-400a-9362-3631b650d9af"
        },
        "item": {
          "id": "1494d245-6180-448e-b997-05dcc1b0b68f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "78b056bb-0887-4335-909f-1086e93fe263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cda29c-de5a-45ee-bca0-95cb21b8b954",
        "cursor": {
          "ref": "bde9c8da-5f35-47c3-9f8f-27f37e836099",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "91d7fe65-c535-4cb1-aa58-baf78890cfb1"
        },
        "item": {
          "id": "e5cda29c-de5a-45ee-bca0-95cb21b8b954",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fca488be-afa8-4921-8d19-cc0dfa45bff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b38918f-4354-4e31-9c3d-e15306411e8b",
        "cursor": {
          "ref": "2d8b763a-5609-4562-8d1a-b2da22b97130",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2937ed62-4c47-4da1-a121-e7304b1a0d5f"
        },
        "item": {
          "id": "1b38918f-4354-4e31-9c3d-e15306411e8b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cce6aaa2-6960-425c-8d75-b7e37cc35701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f3bff0-3438-4a64-997b-18f217a560d7",
        "cursor": {
          "ref": "eadea641-2338-422c-85db-7ba6e592c789",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1539c4a7-de03-4f4c-bad6-06a2961c8d69"
        },
        "item": {
          "id": "11f3bff0-3438-4a64-997b-18f217a560d7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8e44d9aa-b6d0-4950-aa5f-a4a606e08c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946974c5-8db3-4cfa-9524-d37278ea6d1c",
        "cursor": {
          "ref": "cc44fc04-7fd0-4ab1-a878-008c7f61dd9d",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "67c6a922-3b29-4845-8187-fe8e0244aaf5"
        },
        "item": {
          "id": "946974c5-8db3-4cfa-9524-d37278ea6d1c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c7790ce1-28ec-4732-a6d6-63428a443a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dd1985-6326-4ec4-bb56-106fde9d8918",
        "cursor": {
          "ref": "44be2d26-2e1c-41b4-b400-36e73474921d",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9f7f832c-7f02-420b-b625-bc22f7245352"
        },
        "item": {
          "id": "01dd1985-6326-4ec4-bb56-106fde9d8918",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "86f31a92-2d63-439f-b0d6-8e30fe8f5172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d89d887-b648-4c5a-907c-0b64cb221c2f",
        "cursor": {
          "ref": "ff71dc55-765b-4f6b-a991-ba1f4a6b7cde",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "72c9d946-e6fa-4436-9888-470089985fcd"
        },
        "item": {
          "id": "7d89d887-b648-4c5a-907c-0b64cb221c2f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f4ca2e4d-36c7-4cd9-9e36-5db7a75b554e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8595e6f1-9f55-4b89-aefe-cecb34e8ff6e",
        "cursor": {
          "ref": "fd770d76-c55a-42c8-90db-a09c59229e93",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ebc1bc93-afcd-4af4-8f0a-5efc6d51733e"
        },
        "item": {
          "id": "8595e6f1-9f55-4b89-aefe-cecb34e8ff6e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "81127c39-1260-4a13-ac02-d4aad86c186f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f48d01d-04a8-4ee9-a372-b865c8836b23",
        "cursor": {
          "ref": "6b5e2569-d0ff-4083-bb9c-246ef73175ca",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "56aefddd-08b2-4500-9c71-94e2f4b912b9"
        },
        "item": {
          "id": "6f48d01d-04a8-4ee9-a372-b865c8836b23",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bee99ab3-7eef-4001-ba3e-12c97f867d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4db8c4-b9d3-46de-bcf0-ef6d3c3392e0",
        "cursor": {
          "ref": "9b0c994f-ed63-4ba7-a86d-7e4980602f12",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f141d0d5-134b-4f7a-bb1a-8628042c8b49"
        },
        "item": {
          "id": "0c4db8c4-b9d3-46de-bcf0-ef6d3c3392e0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "41149a8a-5215-4be0-b61c-fb2924ec154f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02693b8-a5db-4d95-807c-0190cb423e74",
        "cursor": {
          "ref": "57f84501-8ef1-475a-9eec-4cf367120067",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "820a82b8-0228-4fbf-bb35-cb3af566788d"
        },
        "item": {
          "id": "d02693b8-a5db-4d95-807c-0190cb423e74",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cc205d82-8e64-4fb7-b3c9-e6fd2e286d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b6f38c-2225-44cd-97b4-3d1bb4a810ba",
        "cursor": {
          "ref": "13f70b32-13bc-4a0d-81bb-f1e90e24fdcc",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bd4a16a4-d1b7-449d-b2d2-78e9bd4e065f"
        },
        "item": {
          "id": "86b6f38c-2225-44cd-97b4-3d1bb4a810ba",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a939156d-fae5-49a2-84f8-09e7fdd3a54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd458852-07a7-4037-b204-b340053c4c3c",
        "cursor": {
          "ref": "491e9568-af7a-49a3-871d-a5596a9271ee",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "00c67f86-4168-434c-bb04-b7302963257c"
        },
        "item": {
          "id": "cd458852-07a7-4037-b204-b340053c4c3c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c322aa2c-33b1-481e-8946-f764c77b60cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4274f860-4bcf-4e67-b0c3-87112be00808",
        "cursor": {
          "ref": "05818a0f-9ae6-452b-b773-d6023c8b5304",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a09155b8-4dad-48e5-8d51-2915c5d0216b"
        },
        "item": {
          "id": "4274f860-4bcf-4e67-b0c3-87112be00808",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "77b47b93-ab9d-46e9-8484-f654b5b9fb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087be969-acbb-4624-adb3-69d4112ca5f0",
        "cursor": {
          "ref": "c577bc6c-5390-4990-95b3-d1aa1aa4fcee",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5eb229ca-abdf-4215-9d24-dc5946c9c836"
        },
        "item": {
          "id": "087be969-acbb-4624-adb3-69d4112ca5f0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "25fab146-8176-4973-95dd-250b1b6e16c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f19c396f-bab5-40da-a561-434343f8db9b",
        "cursor": {
          "ref": "f41b0454-bfe7-4a5c-a109-2b6598c06c53",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "68a18610-22a7-4238-a169-dff625da989c"
        },
        "item": {
          "id": "f19c396f-bab5-40da-a561-434343f8db9b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9201b90e-47c7-43dc-86a6-04f0186f03b1",
          "status": "Created",
          "code": 201,
          "responseTime": 2181,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "71dee106-ed9d-4f9f-a9c7-8cdcf416358b",
        "cursor": {
          "ref": "0e3931ab-6adf-4dd1-95d6-65588ce0c532",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "54768e36-7141-40a6-90ff-ed9882f3ac2a"
        },
        "item": {
          "id": "71dee106-ed9d-4f9f-a9c7-8cdcf416358b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bf8e4618-7ce3-4fff-8601-3f8cd0d7dcc0",
          "status": "Created",
          "code": 201,
          "responseTime": 2456,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2211f255-248e-42a1-9d63-0a86f65f0ccb",
        "cursor": {
          "ref": "0d72d613-8769-4410-9720-61eb8430f6b7",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "47c3b401-7bbf-42be-8bee-306a104d6203"
        },
        "item": {
          "id": "2211f255-248e-42a1-9d63-0a86f65f0ccb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "193cc6d4-cf9f-439c-9d2f-cd0286cbbcbb",
          "status": "Created",
          "code": 201,
          "responseTime": 2262,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e925bf4e-5605-4285-bc6d-e4772dbd3dcc",
        "cursor": {
          "ref": "dab458d9-85df-4f31-8051-d8bad63df1dd",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "29ca3d22-04b8-4d64-bd54-dd3670b9392c"
        },
        "item": {
          "id": "e925bf4e-5605-4285-bc6d-e4772dbd3dcc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "665087f4-56fd-45c9-98bf-005de788f9c2",
          "status": "Created",
          "code": 201,
          "responseTime": 2504,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4614cf-8b41-4c23-9c40-f628d05b7c97",
        "cursor": {
          "ref": "bd9c3bab-3aeb-4fc6-9af4-922de220bb92",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a715c16b-c659-4553-9e28-f25bc58c2ce6"
        },
        "item": {
          "id": "4d4614cf-8b41-4c23-9c40-f628d05b7c97",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "98cf21ad-0bf5-4c7f-b9f5-9ad80f9797ab",
          "status": "Created",
          "code": 201,
          "responseTime": 2659,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a7b693-4654-4768-bb29-c201aa1f4440",
        "cursor": {
          "ref": "04a83758-ba07-45bd-b6b9-bb27b60d0562",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8d0539aa-3866-40e8-9bb5-f5a4fcd56359"
        },
        "item": {
          "id": "80a7b693-4654-4768-bb29-c201aa1f4440",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d01cfd30-eaad-4484-bd35-a11dbce55a39",
          "status": "Created",
          "code": 201,
          "responseTime": 2482,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-17T00:40:59Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-17T00:40:59Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "71f7d69c-193e-44cc-93fd-6f29cf1e1d5f",
        "cursor": {
          "ref": "5cac9d9a-7a15-4c86-aebf-459f3f0144bf",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "710d79a9-a0a0-4c5e-8d4d-2703a944f3e4"
        },
        "item": {
          "id": "71f7d69c-193e-44cc-93fd-6f29cf1e1d5f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d65ae8cc-c0a8-4f29-9a42-31a1d446b918",
          "status": "Created",
          "code": 201,
          "responseTime": 2474,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0904a30-5c66-4368-8429-c4e201a9eb31",
        "cursor": {
          "ref": "bb518096-d681-4c0b-a402-db6c65c39eb7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d3bb6459-87f2-4072-9d0e-b67ab2169770"
        },
        "item": {
          "id": "c0904a30-5c66-4368-8429-c4e201a9eb31",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d964cc45-1dc9-44a0-a42d-a0e394829669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0904a30-5c66-4368-8429-c4e201a9eb31",
        "cursor": {
          "ref": "bb518096-d681-4c0b-a402-db6c65c39eb7",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d3bb6459-87f2-4072-9d0e-b67ab2169770"
        },
        "item": {
          "id": "c0904a30-5c66-4368-8429-c4e201a9eb31",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d964cc45-1dc9-44a0-a42d-a0e394829669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34a6b19-f44f-4200-8255-1904095292de",
        "cursor": {
          "ref": "3e8cb705-e619-461a-8a82-17d5faab0e26",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8a2338bf-ab79-44dd-b1bb-16ae19351b00"
        },
        "item": {
          "id": "c34a6b19-f44f-4200-8255-1904095292de",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7d105694-51e0-4c4a-a92d-c84026b4733f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba4d4d3-1ee1-4127-84fd-908dfce3a116",
        "cursor": {
          "ref": "c8e93b17-5997-4c54-84d7-33cc09d0d639",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c26ba305-5b36-4b16-a3f3-37a944baa1da"
        },
        "item": {
          "id": "5ba4d4d3-1ee1-4127-84fd-908dfce3a116",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "12feefc2-8df4-4f37-ac5c-3c46d22800c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9152cdbd-c4e4-466f-8114-7056d089b9f7",
        "cursor": {
          "ref": "72abfbdf-af78-42c7-a6e1-09e96a2e0e45",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fdb1d384-0cad-4d82-b20c-f4ab03314287"
        },
        "item": {
          "id": "9152cdbd-c4e4-466f-8114-7056d089b9f7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "213eb45e-429b-4908-b5ec-947974d4d72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80384dfb-fd27-41da-845c-3d5f69f5fd7f",
        "cursor": {
          "ref": "5aea8037-01a6-4002-a16f-8f4b4a116c26",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "01da467e-5104-4e61-b21a-0897233b4fc7"
        },
        "item": {
          "id": "80384dfb-fd27-41da-845c-3d5f69f5fd7f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e04edd86-2842-4612-aedb-986a596e43b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1ca075-c01e-4edc-85c7-ca6ee614d227",
        "cursor": {
          "ref": "e5b42570-cf21-4d1e-a13b-c898177d9115",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "64ae5341-36ad-45db-a359-9a5d9d2a64cb"
        },
        "item": {
          "id": "dd1ca075-c01e-4edc-85c7-ca6ee614d227",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "213c6842-fe88-46de-8b9d-96951355318d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4a4080-b001-4272-bcdc-9352ce9ac53c",
        "cursor": {
          "ref": "6309d0d4-f953-408b-96fd-eec4ebad2513",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a11b55c0-b6dc-4b44-8779-873a66e12168"
        },
        "item": {
          "id": "8e4a4080-b001-4272-bcdc-9352ce9ac53c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3f762cea-a294-466f-9c41-5c58a0016083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469d0a0f-98f6-4722-af6f-7c6720229c10",
        "cursor": {
          "ref": "432ba876-91e4-4e95-b1db-991133081349",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4c0de515-fd29-43ba-9211-eea900371adb"
        },
        "item": {
          "id": "469d0a0f-98f6-4722-af6f-7c6720229c10",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a526f003-7069-4386-b2c9-ecd436146889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ec04a3-e81c-47bb-86b2-b3ac2ac2b196",
        "cursor": {
          "ref": "58b0536d-0036-46f2-933b-cdf3744249ea",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "41e625d7-f43d-455d-83b8-c67cef1cd61a"
        },
        "item": {
          "id": "34ec04a3-e81c-47bb-86b2-b3ac2ac2b196",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d73d8087-387e-45bf-907c-004197c453da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6166f89d-a6ff-44f9-85f3-ceba54d3916a",
        "cursor": {
          "ref": "936c281f-600a-4f1a-8280-b94df5329458",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f0fc6561-9b6d-49fd-916b-3e7c44e26818"
        },
        "item": {
          "id": "6166f89d-a6ff-44f9-85f3-ceba54d3916a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "55e71197-8332-4947-9b27-b900f75f2cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4a8b61-e20f-4220-a3a6-46cb49463ea6",
        "cursor": {
          "ref": "b2e44832-65f0-4dea-9d13-028bd6a037d0",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7ce6fb4c-3271-4c49-b76c-8fb13bc4cef2"
        },
        "item": {
          "id": "0c4a8b61-e20f-4220-a3a6-46cb49463ea6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7f71d6f5-f2e5-4a8e-82f6-77d39ded0e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac942a0-6b83-4581-93fb-513b9e9733b7",
        "cursor": {
          "ref": "f710ddf3-a86b-4fa7-89e2-19c0c965e954",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2f7d6c09-7278-4bde-8076-f8f3f726e3b0"
        },
        "item": {
          "id": "3ac942a0-6b83-4581-93fb-513b9e9733b7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c0b5a459-8a14-4edb-817a-8e3de6410c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185cb60f-334d-4d3c-b85d-c817e89a225c",
        "cursor": {
          "ref": "3514fc9a-d47e-458a-92cb-ba2ccbf9ffe0",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cbaedfda-367c-462e-bb3a-b305aeed2053"
        },
        "item": {
          "id": "185cb60f-334d-4d3c-b85d-c817e89a225c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6d66a4e2-ca77-4194-a4f3-78db7a627057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a427593-3668-4186-8f8c-b612af94b82c",
        "cursor": {
          "ref": "37721876-91d1-4277-9771-8b41f808eefa",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "46ef7f0e-833e-4dbb-a51d-729b6a711661"
        },
        "item": {
          "id": "6a427593-3668-4186-8f8c-b612af94b82c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "477cea29-174b-43a3-9976-404d055aed6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246c0cc2-cb84-4e40-8ff0-c8c1dca3c64a",
        "cursor": {
          "ref": "4b85f1d4-d04e-4e72-a716-6164f23308a3",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "796a80b0-7fc8-42fb-a760-0e63a6ae9cef"
        },
        "item": {
          "id": "246c0cc2-cb84-4e40-8ff0-c8c1dca3c64a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0fb50a20-a99d-483f-a78a-6f50785e2634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07f1c0c-4d15-4d4e-b077-13f18cd2582d",
        "cursor": {
          "ref": "00b32cab-c1cf-493c-9430-56477ce2acda",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ff23655f-3b79-4a35-a121-b93ec5cdab2b"
        },
        "item": {
          "id": "d07f1c0c-4d15-4d4e-b077-13f18cd2582d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ebe5bff6-2174-4fdc-85e1-a96d954e2141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944ede60-44e3-4a8b-8171-d78491f712ba",
        "cursor": {
          "ref": "cd04026c-6b0d-44ed-a8d0-d3dc7c72b153",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "afa99bf3-85f2-4a8a-9642-8b3d8bec7623"
        },
        "item": {
          "id": "944ede60-44e3-4a8b-8171-d78491f712ba",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e5593736-b515-415b-ae9b-adda9730a456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd265e77-a9ee-4ab6-8418-deb5dfc81753",
        "cursor": {
          "ref": "90d2c56a-3747-4df7-821b-d80579c5fa6e",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4e038e02-758f-4ff8-8e3f-ccbafa4d21bc"
        },
        "item": {
          "id": "cd265e77-a9ee-4ab6-8418-deb5dfc81753",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7a344949-5b65-4e21-b386-f90230ca3546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af65759-dbc3-4c17-ab04-c0c40271427d",
        "cursor": {
          "ref": "c3b3a760-3c01-4c3f-bf6a-ce03d0865dce",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f4ff8957-1224-4326-87e8-875bd28a87f3"
        },
        "item": {
          "id": "3af65759-dbc3-4c17-ab04-c0c40271427d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "de2bf8f7-fd70-47cf-aacb-5f313d3604e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6be3f7d-2871-493c-b937-700692edebe6",
        "cursor": {
          "ref": "374d446c-9887-4f79-b56e-abf2d24745ba",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "17fc1579-5f84-4376-8111-d97cc40d44a8"
        },
        "item": {
          "id": "d6be3f7d-2871-493c-b937-700692edebe6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2bc4e7e3-a6b7-4455-aa11-d51abbe75692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e802165-0793-4a5c-9816-407b53968355",
        "cursor": {
          "ref": "0da97f75-d7c5-4e8b-a208-909b91c192d2",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0239798f-a7f6-4852-95ea-4dd551b78fff"
        },
        "item": {
          "id": "5e802165-0793-4a5c-9816-407b53968355",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "00403744-8492-4c07-92fb-7268514e13af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3330459e-7e69-423f-99d1-6a8af50b1d78",
        "cursor": {
          "ref": "0407f2f3-b508-4f9b-9641-038399337b16",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d83c42d4-0ee7-40ff-8313-5dd6d75e4b7f"
        },
        "item": {
          "id": "3330459e-7e69-423f-99d1-6a8af50b1d78",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a3c777e4-ad76-468e-890e-649aff6f4cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb8e255-b8da-4dcc-b130-cb4e28744d9b",
        "cursor": {
          "ref": "3d3dee94-ac57-4ec7-9f2b-423d62870e5b",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8277f8d2-0868-4cd3-9fb2-b98610cded63"
        },
        "item": {
          "id": "1fb8e255-b8da-4dcc-b130-cb4e28744d9b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "54f716e7-e900-48ee-8804-84b75c653ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8292ea5-6bb8-44bd-8bc6-33c418d3088b",
        "cursor": {
          "ref": "097d39f2-f453-40cb-8c90-3e79ebcc737a",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e3b77f3b-9aea-4523-a5c6-a23ad986eecd"
        },
        "item": {
          "id": "e8292ea5-6bb8-44bd-8bc6-33c418d3088b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "632a67af-7898-443a-a13e-629ca2700c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e34c56-cd5a-45c8-a961-fa2666ef6749",
        "cursor": {
          "ref": "7b429e02-068a-4cd7-835f-4e5e8218f8df",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c8290ac9-6162-4d64-8671-09d9f1cc6c86"
        },
        "item": {
          "id": "67e34c56-cd5a-45c8-a961-fa2666ef6749",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c9110f3c-586f-4c6c-8985-bc287279b057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b37b69-7134-4259-9458-2def1df54481",
        "cursor": {
          "ref": "8fb82702-ef72-408c-9269-21c37d2cdfd8",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "94af3553-b717-4352-b5bc-961fd1be0094"
        },
        "item": {
          "id": "f8b37b69-7134-4259-9458-2def1df54481",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "652c67ed-ad4a-4f5e-b8af-c4c954807975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5905d21-bc47-4e02-b4ac-7d8ad1236fa8",
        "cursor": {
          "ref": "85b9da39-5423-4851-a53c-735f1546ca32",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fac3cac7-2692-4f01-addb-411b7659b848"
        },
        "item": {
          "id": "e5905d21-bc47-4e02-b4ac-7d8ad1236fa8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1c5f4f77-6d26-4b09-9e6f-15889192b031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293e022b-bd61-4e8f-ab2a-dc67c2e87a8c",
        "cursor": {
          "ref": "ea3927aa-03ea-4a0f-9652-b685bb56d663",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cc641998-66c0-4567-9488-10dccf324f56"
        },
        "item": {
          "id": "293e022b-bd61-4e8f-ab2a-dc67c2e87a8c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "97493478-9495-42c5-9cfa-a82e69b3139c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39c6645-0d91-493f-8b4e-8fe22e6779f5",
        "cursor": {
          "ref": "6bf2bc17-880e-4f3d-8949-86172ab21afc",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f1abfbba-2b48-4908-8f74-54a7fee0a1ac"
        },
        "item": {
          "id": "e39c6645-0d91-493f-8b4e-8fe22e6779f5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae6ab5ef-4f30-4c4e-82eb-6ff24a707b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8305b2b-91c0-44de-9745-8ce523f02e03",
        "cursor": {
          "ref": "95320b30-aaeb-4f73-af60-c245e64034ec",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6cb01c11-3d95-4a02-a484-d991ac78a973"
        },
        "item": {
          "id": "c8305b2b-91c0-44de-9745-8ce523f02e03",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "14c71e53-6623-4508-9a71-ef67babfd803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8f0e14-1aae-4928-b948-877825130ca3",
        "cursor": {
          "ref": "9f4a90da-b957-474a-b17a-0129d09abdd9",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0c8464ea-ce4f-4836-8e63-6e5da385ec81"
        },
        "item": {
          "id": "6a8f0e14-1aae-4928-b948-877825130ca3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7eb67d08-abf1-4771-8634-c268eb9a311c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99023d48-8027-4841-8f3b-e67860291ab9",
        "cursor": {
          "ref": "e4e0f09d-f5a5-4429-9e7e-313f8ffcddec",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ac990497-d545-4976-9079-3e2d59cf726f"
        },
        "item": {
          "id": "99023d48-8027-4841-8f3b-e67860291ab9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5468c553-024d-41d6-9041-6fe87f93fb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d2bc59-7474-4355-9349-034758469333",
        "cursor": {
          "ref": "14b20eea-bdce-4823-9455-914a23ee8b98",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4e0aab4d-c37e-4da4-a265-fa67fc468080"
        },
        "item": {
          "id": "95d2bc59-7474-4355-9349-034758469333",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f97352b1-2fb8-4a50-8c4c-92aec7d78cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5657d7ce-5418-411c-bae8-ec004f085e50",
        "cursor": {
          "ref": "afc82cb0-4644-41fc-8836-f3432147a4d1",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "27763380-7e02-4956-9e6f-92e246d97d79"
        },
        "item": {
          "id": "5657d7ce-5418-411c-bae8-ec004f085e50",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "770b2102-88f8-4f9a-8441-5714770a3d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "cb2764ab-7d51-4043-970a-e54c1f42e18c",
        "cursor": {
          "ref": "ad9d2daa-644c-4c66-816a-6cb95aaf57eb",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "46f012af-307d-42ca-8389-c6b7815e6a89"
        },
        "item": {
          "id": "cb2764ab-7d51-4043-970a-e54c1f42e18c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "61095ba6-664d-477e-8470-eff03c62b4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2764ab-7d51-4043-970a-e54c1f42e18c",
        "cursor": {
          "ref": "ad9d2daa-644c-4c66-816a-6cb95aaf57eb",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "46f012af-307d-42ca-8389-c6b7815e6a89"
        },
        "item": {
          "id": "cb2764ab-7d51-4043-970a-e54c1f42e18c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "61095ba6-664d-477e-8470-eff03c62b4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664f73e6-8121-4723-ace7-dc701c8ea3a1",
        "cursor": {
          "ref": "839c5499-65e7-4a98-9734-507345b16faf",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "de625813-5d02-403a-866b-8dd616b8d479"
        },
        "item": {
          "id": "664f73e6-8121-4723-ace7-dc701c8ea3a1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c9bdcd6c-be28-4c98-9c96-1977618e48b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d7b72c-e317-4cbe-88cf-5e3f7c94d774",
        "cursor": {
          "ref": "49035de3-3dca-4c3c-b673-e1eaa03bf862",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "db9d6dab-382a-4788-8a02-71efaaff851e"
        },
        "item": {
          "id": "f8d7b72c-e317-4cbe-88cf-5e3f7c94d774",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0cc0505f-32ea-4a0f-b0d0-5e88ea2f4da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1a90ac-9817-4819-84da-a1c35a520b0d",
        "cursor": {
          "ref": "0bbb89fc-ad79-4300-8d42-6cc59fb701a3",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ccb3a11a-8966-41b8-b10a-77c82e8e193b"
        },
        "item": {
          "id": "6b1a90ac-9817-4819-84da-a1c35a520b0d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "013091e4-6a7f-4b07-a2bb-cdbb2541436a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b95a58-5b58-47c4-ad46-14e58193692a",
        "cursor": {
          "ref": "f8fcc8a9-6b26-457c-bf60-04a29f4a839c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "aa15c2a4-e559-445a-9a9e-7b20b87d3da4"
        },
        "item": {
          "id": "47b95a58-5b58-47c4-ad46-14e58193692a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "31d5f864-6fbe-458f-a661-f1d291103be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b900b4e7-1f93-40ad-b080-a49a2804ef9a",
        "cursor": {
          "ref": "39d8cf67-5daa-4987-8903-c6369dfc3db4",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fb75c85f-aa26-4a3d-a10d-a52b91511351"
        },
        "item": {
          "id": "b900b4e7-1f93-40ad-b080-a49a2804ef9a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a0ee20f6-121a-485e-b3f8-a424d83f31b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a8abe3-b81c-4cfd-8742-4a29c4256de5",
        "cursor": {
          "ref": "b9d74874-e1b0-4471-88f7-e46d236f09f0",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "83f6402f-531b-4bbb-9f7f-1785fcf253af"
        },
        "item": {
          "id": "96a8abe3-b81c-4cfd-8742-4a29c4256de5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3d4970bc-5645-4cae-bba4-451725e03783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a658260-20ec-4462-8aa4-94430913ff98",
        "cursor": {
          "ref": "d656b4db-6c69-4147-99d1-2e3f168f974d",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "10e7cee4-7b17-4f62-9774-0883fc7825ca"
        },
        "item": {
          "id": "6a658260-20ec-4462-8aa4-94430913ff98",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ac377f08-b8f2-4a13-a2ba-45c6e75fabb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23682f24-47d3-4295-96ba-e4b83670ba0d",
        "cursor": {
          "ref": "c14bf9db-53ab-4eff-861c-7a0c826a1dc9",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f3040a16-3486-4dde-92d8-834165c8318b"
        },
        "item": {
          "id": "23682f24-47d3-4295-96ba-e4b83670ba0d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1dc45537-1b2f-4e53-a8b5-72857e7a90f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3687529f-d88c-4c3a-b5ac-8f014615b64b",
        "cursor": {
          "ref": "2460f365-2cfc-4372-91b3-a614da9cb862",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7d6a9802-59af-4d90-92d1-cdf089026806"
        },
        "item": {
          "id": "3687529f-d88c-4c3a-b5ac-8f014615b64b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "51170146-43af-431f-8a3c-dd83bfd2915d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e0676a-b2c5-4785-96ae-c291c5ef45ce",
        "cursor": {
          "ref": "9180f422-ae7b-4e0d-9462-e6d7408da098",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9c7f3a14-885c-48a6-a0ba-576d6c16895d"
        },
        "item": {
          "id": "d1e0676a-b2c5-4785-96ae-c291c5ef45ce",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9b6042bb-9c2c-4dc9-923b-97cdf7f2f42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d00acc-14bb-4470-9133-099425570f44",
        "cursor": {
          "ref": "161e1d83-fc42-45e1-ab57-1d3138bec55a",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ea392304-6ae2-4ecd-8da4-54d696fe5bfc"
        },
        "item": {
          "id": "e7d00acc-14bb-4470-9133-099425570f44",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a55eb06d-e8ea-446e-94f9-944daadfa19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea02569-0995-447c-8f53-55f9d06ab95c",
        "cursor": {
          "ref": "29b21119-deac-4edd-93e2-da8beb9a9f34",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "89c63a47-f38d-4c42-b185-a96525efcc1b"
        },
        "item": {
          "id": "8ea02569-0995-447c-8f53-55f9d06ab95c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d4a89c3e-77e5-44ef-80b0-ffc83a9910e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c393ce3c-8e43-4741-96b1-542096e6ba54",
        "cursor": {
          "ref": "7ab430b7-6216-43c4-848b-cdb11d891c0d",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "91488d52-bf2c-4309-8d90-3dab9b5ba182"
        },
        "item": {
          "id": "c393ce3c-8e43-4741-96b1-542096e6ba54",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d51d0e98-94ab-4bb5-bab2-2f578d5bf479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf95afa9-739a-4aee-b7f5-9364579361df",
        "cursor": {
          "ref": "7f6ad2ac-5aa0-456c-b4f6-9c24d1d52774",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "219e52e1-8d6f-4951-930d-03da95734bc2"
        },
        "item": {
          "id": "bf95afa9-739a-4aee-b7f5-9364579361df",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "40e1c5ba-97a0-4c22-848c-aa121e34badb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26f0ac5-2bf8-40d5-a878-1f2807a83d9e",
        "cursor": {
          "ref": "139f4d75-25d2-4ec9-b69c-9d3243c06fcc",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9108094a-b778-48c0-bda2-35f2746fd42c"
        },
        "item": {
          "id": "f26f0ac5-2bf8-40d5-a878-1f2807a83d9e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "41dc5981-c5c0-44cd-9fd7-bee07c336f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b60115-db16-4434-bbca-c47c21a092c4",
        "cursor": {
          "ref": "3e61ba74-c1b2-4683-a252-d291c6ca3109",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "681fac74-408f-4e6b-b877-bd71ab4fe238"
        },
        "item": {
          "id": "31b60115-db16-4434-bbca-c47c21a092c4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ca3cd3c9-0af1-452f-a66e-7a51f2c184ea",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "c06b85b1-8f91-47ea-9ed0-d129694c7112",
        "cursor": {
          "ref": "1c50d083-d826-47b3-98c7-a19615e19e62",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "14d3400a-3b88-4692-b359-82cfcd7aadc6"
        },
        "item": {
          "id": "c06b85b1-8f91-47ea-9ed0-d129694c7112",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1a8b9e6c-b035-4f53-a420-b007b1f73c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f05b57-74e0-421f-9bda-703d320d1523",
        "cursor": {
          "ref": "555bfe8d-8ea9-44b0-9cb1-bfafa6fc7600",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "33c2dcab-4fac-4efc-bd2c-d187cddffd4a"
        },
        "item": {
          "id": "c6f05b57-74e0-421f-9bda-703d320d1523",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2cda3f3f-d349-425d-8a6a-89badf0a3a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626f0053-8875-4989-9aed-6d85a941c176",
        "cursor": {
          "ref": "188f9e19-cefe-4b44-8ce0-5ab943db600d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6370591f-f4dd-44d3-abd7-d0dc8299fa5b"
        },
        "item": {
          "id": "626f0053-8875-4989-9aed-6d85a941c176",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b3b39e27-9487-40f6-a2be-6348dcc94f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bcafb6-3947-4428-b865-99be2c0d0782",
        "cursor": {
          "ref": "56bf92de-658f-4ea1-949f-78f8ca9e76e9",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "59fb3d10-83e0-4a88-bd4a-d89dba510cf5"
        },
        "item": {
          "id": "b2bcafb6-3947-4428-b865-99be2c0d0782",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "797fff2a-cd2c-48f8-a5f4-2b0f2c020a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351e6aff-9023-4b38-aa9d-81868e6a707a",
        "cursor": {
          "ref": "286b95fc-c9c8-4066-93d7-dbfcd95a4d64",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4912bc2b-0dee-4c04-bdf3-47ef975ca0f4"
        },
        "item": {
          "id": "351e6aff-9023-4b38-aa9d-81868e6a707a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f767a75a-dc8d-4dae-98ae-0049cf5566de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5276ec6b-acb6-48f7-8fa6-afae8a2abd79",
        "cursor": {
          "ref": "1d52c4a9-430d-420f-98ca-7a001309512f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6e7546be-e072-4c32-9815-d71aea4f7d80"
        },
        "item": {
          "id": "5276ec6b-acb6-48f7-8fa6-afae8a2abd79",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "52d7cc46-973e-4d53-9111-03c056ea2983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86300e34-b68b-4ae9-a331-e589a5847a18",
        "cursor": {
          "ref": "e14fbe52-2fd8-4986-9cbd-05b9e59b2d22",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "de2dd845-e13b-4580-92ac-556db0038ead"
        },
        "item": {
          "id": "86300e34-b68b-4ae9-a331-e589a5847a18",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8f4737e9-fc9e-411a-8b67-c7f45865301f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47663199-b64a-4e2e-ab19-1e23c8cda667",
        "cursor": {
          "ref": "076b8ad6-91f1-499a-9deb-15a9bc9d14b2",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "41aabd11-200b-4671-bdfc-85146872f9e5"
        },
        "item": {
          "id": "47663199-b64a-4e2e-ab19-1e23c8cda667",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "20d0a3d5-3341-4395-a2ca-a0dc18d6d06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c817d87d-9104-45e1-8e04-fb7954538d8d",
        "cursor": {
          "ref": "2f0b87b2-1d38-4512-8588-f636b42bb09e",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "72b6c029-3cfb-4038-93f7-197cc8d91966"
        },
        "item": {
          "id": "c817d87d-9104-45e1-8e04-fb7954538d8d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7a00118c-7c72-4678-9685-e2b0d14d98bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20439d7d-7987-42e6-b2a3-5ffef95d90a9",
        "cursor": {
          "ref": "8ae4aa20-b087-48e5-9473-cf3b5c14c0d6",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "14159b99-9f1c-4bed-a9a8-4018d8a420bd"
        },
        "item": {
          "id": "20439d7d-7987-42e6-b2a3-5ffef95d90a9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "74e1fe79-d08d-4797-8f00-2d2ea72b93b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce6bb6d-e040-4f8b-b62e-0f8b136e6a64",
        "cursor": {
          "ref": "132c6612-1bfd-4b17-bfbb-c33398f8a292",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a6713336-e4c2-4eb6-9514-c08aa5591b45"
        },
        "item": {
          "id": "2ce6bb6d-e040-4f8b-b62e-0f8b136e6a64",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "611a27cc-db64-40bf-a0c9-ee5449030896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e467178d-5521-4e9f-a1e2-3f35733f0df1",
        "cursor": {
          "ref": "50e860b8-7cee-4482-b7b2-ece2dfcfd99e",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e3a8cbcc-cafb-4f95-9e70-57398c2eee9e"
        },
        "item": {
          "id": "e467178d-5521-4e9f-a1e2-3f35733f0df1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "82e2ca8e-6520-4278-ae64-c12c972b9414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1aa62b-55de-4ffa-a2ae-be1338b3c88f",
        "cursor": {
          "ref": "3eff6ab8-6b3b-4618-898e-60815be2a081",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2751513b-9746-4011-92b4-fca759bb7317"
        },
        "item": {
          "id": "6c1aa62b-55de-4ffa-a2ae-be1338b3c88f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "90dcf3ed-6932-455a-8d86-dd3e61aa67a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cfe522-a7d4-43b5-aa96-f255e434e20b",
        "cursor": {
          "ref": "c2921621-4c64-48bf-bad5-c4612cfb4d0a",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "834c42f3-09fd-423c-8efb-738fdba12e7e"
        },
        "item": {
          "id": "66cfe522-a7d4-43b5-aa96-f255e434e20b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "320059fe-00d0-42aa-9711-c9eba2c48d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e54d27-7b7c-499b-ac3b-2eb96f8342b3",
        "cursor": {
          "ref": "82ca8ab4-e5e5-44a4-b875-0b9ef1855423",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "eb512d50-2dcb-4086-9ed4-c92c477ee99a"
        },
        "item": {
          "id": "c0e54d27-7b7c-499b-ac3b-2eb96f8342b3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "53486b54-fdec-46c3-8079-57fa6e526142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30903e6-88ee-47c8-93ea-be977cde9bd5",
        "cursor": {
          "ref": "7fa8e133-bcd8-46dc-a8e7-db54b1fb2962",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b8764368-7909-4fd1-bdc2-5c91e3cb1530"
        },
        "item": {
          "id": "d30903e6-88ee-47c8-93ea-be977cde9bd5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bbe38bf6-7899-4c92-99a3-39c8dbe8cfb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff92235-04a7-4e84-9fd6-be2209fc3ffb",
        "cursor": {
          "ref": "a71f3859-e8f3-47c8-b73a-7dcd2b9938db",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "32a9d6c9-a9cd-427e-bf8b-bebad631db3b"
        },
        "item": {
          "id": "fff92235-04a7-4e84-9fd6-be2209fc3ffb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "59c67126-4af1-4cf2-a7d9-40b71d0fdd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18eaa4f0-e24d-4d5b-bf91-707cfddf02ee",
        "cursor": {
          "ref": "6e03e2b9-cf3a-4903-81cd-baf15f7a5e42",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dc735c69-a5eb-4c05-afd5-589c0ca6cee5"
        },
        "item": {
          "id": "18eaa4f0-e24d-4d5b-bf91-707cfddf02ee",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "797fb129-b1c9-4824-bad3-9d528757cd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89537c3-d6d7-495b-8fa1-d3d7ccceb9a6",
        "cursor": {
          "ref": "c8499b7e-10a7-4ac8-a439-665ce72e7fd9",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "36423ac7-2181-417b-9feb-cd6bb3d6c5ad"
        },
        "item": {
          "id": "a89537c3-d6d7-495b-8fa1-d3d7ccceb9a6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a376e146-6813-4a6f-bb44-ff2b8ad1a43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93caa221-8421-4095-88d9-88b68eb62764",
        "cursor": {
          "ref": "ab317ef9-598d-4e1f-b699-6a0047ba7116",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7947fedf-63ee-4810-883e-8b45e12965e9"
        },
        "item": {
          "id": "93caa221-8421-4095-88d9-88b68eb62764",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ae3794a9-507a-4d7c-9ee8-4ab4c8fb12f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ed09de-26d2-41cc-8699-63788c38b8a2",
        "cursor": {
          "ref": "3cd035f2-f32e-4168-b9ec-b866567002f6",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7e676201-c74a-4993-b268-346ac2c8f3a5"
        },
        "item": {
          "id": "d9ed09de-26d2-41cc-8699-63788c38b8a2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "430e8769-115b-4fe7-86b8-eac660308e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f902de-8e2e-4ff2-af22-cba9e4f3f776",
        "cursor": {
          "ref": "82e32c6a-fd76-474b-8d45-33732e1d618e",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "654f55dd-9b0f-4782-9c4d-94fc89a576ef"
        },
        "item": {
          "id": "b0f902de-8e2e-4ff2-af22-cba9e4f3f776",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c2f1b465-ea9c-454c-a999-ad266dbeaec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3beb3023-645c-42a0-84d1-cd48a789e071",
        "cursor": {
          "ref": "bb9679b7-f752-4325-8f13-74546ba0fcea",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4ae1bf87-01b8-42bd-9feb-48d6345cfc92"
        },
        "item": {
          "id": "3beb3023-645c-42a0-84d1-cd48a789e071",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8319a944-bd99-4626-9909-6134c9e8cf3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856a0871-b002-4860-b395-121da1d86414",
        "cursor": {
          "ref": "6d3d7a31-92b1-474d-be01-c0da74706d10",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "86c28474-85b8-49d1-a9c7-62175c89f23f"
        },
        "item": {
          "id": "856a0871-b002-4860-b395-121da1d86414",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fd867f6e-05f8-40f9-aae8-721850c5e7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77419aa1-8726-43e9-ba92-730165db9aab",
        "cursor": {
          "ref": "86bb7b3c-8622-4e74-954f-c6608c6f7e20",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "12386a16-2819-42c8-a254-e39bcd873053"
        },
        "item": {
          "id": "77419aa1-8726-43e9-ba92-730165db9aab",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ca939840-4548-44d4-a83f-5df79617c63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f8a0ce-bb99-44bd-9e92-f6127637af8f",
        "cursor": {
          "ref": "55bfd4b1-93ac-49cd-ac87-cfdad67f65fa",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0b7f9105-0c26-4ebb-bd02-670355672227"
        },
        "item": {
          "id": "84f8a0ce-bb99-44bd-9e92-f6127637af8f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9f49c122-c278-4a0b-a900-e20f23212208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a5396f-eb5d-45eb-b82c-251aa923b7c0",
        "cursor": {
          "ref": "011ded9a-403a-42b7-b0a9-fd1f0e78302e",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7aef7834-d42d-44ab-9619-e388e5e9436a"
        },
        "item": {
          "id": "76a5396f-eb5d-45eb-b82c-251aa923b7c0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3d366490-0f7a-499d-902b-158ce06aa96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c4aa9e-7954-4130-84a2-3402e29bce6b",
        "cursor": {
          "ref": "320c4b6b-e6e8-4db5-9cfe-d14102c7486e",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "85d830f7-57fe-4fc3-82c2-7231f8944256"
        },
        "item": {
          "id": "83c4aa9e-7954-4130-84a2-3402e29bce6b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f8c35ff8-2c07-4a1a-bc6e-b9fce8562eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7628f97b-8044-4e0d-b4dc-eef9c3542062",
        "cursor": {
          "ref": "5dfe5a8a-3f25-4257-99df-ffe98d513e85",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "580cf222-0d56-4ab8-aeab-91d72e7b6229"
        },
        "item": {
          "id": "7628f97b-8044-4e0d-b4dc-eef9c3542062",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4b0d2633-f01f-44ed-82c0-2d869402d58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31950140-f7d9-4e5e-b61b-a12821c93d91",
        "cursor": {
          "ref": "dee7ee54-4dd9-4ea0-9e92-83dc8b525968",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1145c431-e23e-4f58-bae0-dee2d064471b"
        },
        "item": {
          "id": "31950140-f7d9-4e5e-b61b-a12821c93d91",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1180084e-61b4-43c7-8222-f9ac1950fd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d617d8e0-4a60-48a5-ae8e-68da88eb6d3d",
        "cursor": {
          "ref": "9c85e63a-b49c-4089-9f74-0ed7f4ba4afc",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "213e30cf-3327-4b57-8244-7cc2e57b0a84"
        },
        "item": {
          "id": "d617d8e0-4a60-48a5-ae8e-68da88eb6d3d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6d8c2087-98b6-4dd9-a396-4a8b7024aefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223730a6-57b6-4092-a1c4-a6f6f89dbeec",
        "cursor": {
          "ref": "ec41471d-e12d-4129-91d3-08fda0bd8ff9",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "31a29d96-5a89-4edc-b5d8-c1f2af61ae3b"
        },
        "item": {
          "id": "223730a6-57b6-4092-a1c4-a6f6f89dbeec",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7a836b9d-f47a-44ea-aa64-293591779687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce07b62e-9553-4a74-ae18-a02974af4908",
        "cursor": {
          "ref": "48f275cd-0aef-44e5-b17c-680459420a1d",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d2de7f1b-f81c-4aa8-8987-be93786240e7"
        },
        "item": {
          "id": "ce07b62e-9553-4a74-ae18-a02974af4908",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ed699ee3-a62f-425b-8071-7a2acec665cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c7e814-865b-4a3a-aa64-f5f198fa4251",
        "cursor": {
          "ref": "d59a5dae-2359-4448-8e09-c78c2be13bb3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d52961e-f017-42b9-a26f-79227a53cac1"
        },
        "item": {
          "id": "93c7e814-865b-4a3a-aa64-f5f198fa4251",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "78cf5ee4-2693-4b99-b00c-b5854e4d3c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118e321d-e251-4942-a283-fe9958da830e",
        "cursor": {
          "ref": "d3d0a61a-48cc-4093-b9c6-ddeb14bcf7b0",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4210141f-01f4-41bc-9af9-370e0815855a"
        },
        "item": {
          "id": "118e321d-e251-4942-a283-fe9958da830e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9355eaf1-b432-4cab-8e45-db1d48f94fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4706aace-05ab-4afc-9dce-d91b9c89aaa5",
        "cursor": {
          "ref": "aff67679-a0c5-46eb-8e1f-fa25ddf2c53a",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "79998341-8a7c-4ec9-ad5d-fea0d119cab5"
        },
        "item": {
          "id": "4706aace-05ab-4afc-9dce-d91b9c89aaa5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a94e6830-908e-4008-a035-f67ab749dc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc97501-e8d6-43d7-9ad6-dbaed54695f1",
        "cursor": {
          "ref": "74483327-0921-4461-84aa-30d5eb38e409",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f5acc96f-4e79-4052-ad44-2b6183d296c9"
        },
        "item": {
          "id": "ffc97501-e8d6-43d7-9ad6-dbaed54695f1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ff8f2a4b-b52d-4d19-b2d4-cc934ba90dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d933ea-4a4b-4de4-90d0-b552dc455d52",
        "cursor": {
          "ref": "8108e830-ce97-40b4-8fb6-b8947fe4e790",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "02691839-7332-4e90-b3c8-9678ab61242a"
        },
        "item": {
          "id": "94d933ea-4a4b-4de4-90d0-b552dc455d52",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a3bd24bc-b5b3-4dc4-b57d-d2a40bd04c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50966a75-2a39-4356-9606-734e3e8b3a85",
        "cursor": {
          "ref": "60f36697-8f89-42b3-9539-56619e31d7c2",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3568fa34-b316-405c-9f35-168751f9bfab"
        },
        "item": {
          "id": "50966a75-2a39-4356-9606-734e3e8b3a85",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8d90c332-00d6-4b6c-a0ee-ee0502856238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f3bc9e-2582-4e0b-adf6-8235ee8c23f9",
        "cursor": {
          "ref": "43ed6414-f0ef-47d6-ac9e-9150e554867f",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "37051403-2ea0-44ca-a609-7b4d4c260449"
        },
        "item": {
          "id": "f9f3bc9e-2582-4e0b-adf6-8235ee8c23f9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b98b7178-01a2-47b0-9ac6-398956c8db03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff19c35-ccba-40b2-9d87-b85c93423788",
        "cursor": {
          "ref": "7c5faef2-1a77-4dac-b95a-011f9c6b6a92",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "89358d53-cd0d-4620-99f9-8e03172a992d"
        },
        "item": {
          "id": "aff19c35-ccba-40b2-9d87-b85c93423788",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "81345bdc-dbab-4c1f-9523-d00232df71db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b183996-7d5d-461e-afc9-735b6c7c0e94",
        "cursor": {
          "ref": "32f071db-c047-4b98-9e87-8aea9d7b753d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6f79755b-5dfd-4826-bf91-9699456336e4"
        },
        "item": {
          "id": "2b183996-7d5d-461e-afc9-735b6c7c0e94",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f032f38f-2c7f-4a70-8136-b5ab1a715a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e15924-3fd1-41a7-826f-dd8f76b3243c",
        "cursor": {
          "ref": "9dce5f7a-d0c7-4a99-8930-2c37caf62c03",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8b5a975d-bbe6-4bac-981d-432402b8dbe5"
        },
        "item": {
          "id": "e6e15924-3fd1-41a7-826f-dd8f76b3243c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6be8f2b7-d15c-4756-ad1e-3dec3dcf0062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f6372d-56a2-4db6-b8c3-b09ef32bdf3b",
        "cursor": {
          "ref": "f2e32bc4-6e06-4a95-9919-ca72519c1ad8",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "47d44bed-34ee-47bd-97be-c0582ec45ba7"
        },
        "item": {
          "id": "67f6372d-56a2-4db6-b8c3-b09ef32bdf3b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "823c6cdc-38e6-49b1-841c-92fd0f9fe351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa6426e-5463-453e-ba9c-0ed88a8e4046",
        "cursor": {
          "ref": "3717d78e-02d9-4150-ae44-5c481a118bc7",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ca197c99-0a50-4456-986b-c6e5e7c9e5d6"
        },
        "item": {
          "id": "caa6426e-5463-453e-ba9c-0ed88a8e4046",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3bb271f4-5d36-4a1f-983e-ae4ddb952437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9be3ac0-87d0-4c0a-8d64-1830152d79e9",
        "cursor": {
          "ref": "a4544196-2edf-4c4c-8470-7946abd7fc68",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e022e18b-acbf-402c-b052-56cda9b64885"
        },
        "item": {
          "id": "b9be3ac0-87d0-4c0a-8d64-1830152d79e9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0b1dbd3d-cb3c-454a-92c4-df457ee5882f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5593a366-d3d8-455e-8242-6f820a473294",
        "cursor": {
          "ref": "965d4420-8ecf-4f28-b5dc-8721d95f0377",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dc70d724-1a14-4699-9063-1c9191d17abc"
        },
        "item": {
          "id": "5593a366-d3d8-455e-8242-6f820a473294",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "410d3dcc-95ff-48e2-9623-665098644b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fae3ba-46e7-42c5-adb6-ba5bcfd305fc",
        "cursor": {
          "ref": "450fe731-4234-4b36-a89d-a2694375a574",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5bb20ca5-baee-40d8-93d1-72edf6804eeb"
        },
        "item": {
          "id": "40fae3ba-46e7-42c5-adb6-ba5bcfd305fc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "67b8a9db-9f7a-49fe-be5d-5e363e84047a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c63abdf-4337-4fab-bc58-ccdbb480be6f",
        "cursor": {
          "ref": "91d762ed-c9c4-4c93-88ba-8d34a5d7c9ea",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5d489439-8774-4b3c-bbd5-635f540bc13f"
        },
        "item": {
          "id": "4c63abdf-4337-4fab-bc58-ccdbb480be6f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "05370e18-2219-490d-8745-33d1e6ee4eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f8a7e3-a41c-4c51-9bcc-22a94ea904d6",
        "cursor": {
          "ref": "1758df88-2776-4fd9-98b3-6ecbc35d561b",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9d819c06-c480-4170-9b3b-c31c6081e551"
        },
        "item": {
          "id": "31f8a7e3-a41c-4c51-9bcc-22a94ea904d6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "415cca5c-ffe5-40d1-a3eb-cd37b1da5397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f087be9a-3d75-47cb-8938-1757289bbda6",
        "cursor": {
          "ref": "51c69d56-0d8b-4c0e-91f5-7c9df38c9aa8",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "60fb45b8-68fb-4f29-a70b-caeb76559a06"
        },
        "item": {
          "id": "f087be9a-3d75-47cb-8938-1757289bbda6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "197b70d0-7eaf-4d23-9afe-e3b9690ada98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3270a259-dac4-4e17-860c-43e9bb859d12",
        "cursor": {
          "ref": "3babe903-a7ff-4769-9dfd-38e909875de4",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2bcdb16b-803c-4950-94ad-205a917eeb33"
        },
        "item": {
          "id": "3270a259-dac4-4e17-860c-43e9bb859d12",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c64c2675-a67f-46f0-bac8-81acb1f2615e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f63d47-7ea6-4fda-9efc-fe09fea006a8",
        "cursor": {
          "ref": "6ece8e94-4bc8-471a-9c9c-3177d56c6db2",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b4e78bbd-7bed-4db5-80d6-4aea3d1f9b70"
        },
        "item": {
          "id": "00f63d47-7ea6-4fda-9efc-fe09fea006a8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "54f7e8d2-22d3-45d5-bed5-e9e16ffda130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8c358d-c3b9-4a56-b68c-6fb1e73bf9d6",
        "cursor": {
          "ref": "262798f5-7ce1-4594-acf4-9b85565252cf",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0707993a-2b40-4fcc-b5f3-25777c4b25c3"
        },
        "item": {
          "id": "be8c358d-c3b9-4a56-b68c-6fb1e73bf9d6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "faaca3f7-bf80-492c-98e4-d141b50a6917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef10f290-7fdf-486d-a334-5095019ccc8f",
        "cursor": {
          "ref": "44d248e7-85a4-4ef3-9bc5-c4b1585f59f9",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "36ee8d89-2304-463c-9895-d1b748e1663c"
        },
        "item": {
          "id": "ef10f290-7fdf-486d-a334-5095019ccc8f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f4a0a369-d801-4d2b-b165-248c4f5902a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f2a4d7-2af1-4625-93b8-94e2eca099ee",
        "cursor": {
          "ref": "165798de-779e-4db1-9627-6f560b9a2d27",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "baf2caaa-5cef-4113-9cdd-3808394659e8"
        },
        "item": {
          "id": "13f2a4d7-2af1-4625-93b8-94e2eca099ee",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e50cb03d-0ae6-42e5-8331-cecdb76e54c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb24246e-8c8e-4839-94c5-2062e7d3f67d",
        "cursor": {
          "ref": "9e6cc477-a5ce-4678-9ba5-8aab67e56a21",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1c4c37ce-9d6b-4dd9-802a-126c88c58ab8"
        },
        "item": {
          "id": "fb24246e-8c8e-4839-94c5-2062e7d3f67d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f8579803-070e-4be8-a564-fbd61a6a410d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c9b035-0ce4-4b9b-9f79-90cb2632df75",
        "cursor": {
          "ref": "36abdd9e-9912-4232-b675-209af8406785",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5309213d-1c96-4361-b002-0cbc208d72e5"
        },
        "item": {
          "id": "35c9b035-0ce4-4b9b-9f79-90cb2632df75",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "add24f22-5f4e-4c05-88d8-13a507568377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcef5852-6977-4134-bfc6-6701443487d2",
        "cursor": {
          "ref": "16f5168d-a4ac-461b-98a0-f6189cc7fa47",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "23d0c08a-94f9-4580-96ac-7fe11103b175"
        },
        "item": {
          "id": "bcef5852-6977-4134-bfc6-6701443487d2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "22b2d5b8-9a27-4bfc-b49a-aa4d24f8adc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7216b5-0be9-429d-b024-bed4458c7d3a",
        "cursor": {
          "ref": "aea848d2-6f2a-4237-b9de-e393e8e34e8e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ff70dce6-c2ed-4ec5-a5f1-bfd81bca3e95"
        },
        "item": {
          "id": "8c7216b5-0be9-429d-b024-bed4458c7d3a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a586bd0b-31fa-437e-81b2-c8b84839ef8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6310ef-1f19-4b85-9643-77c322195e4a",
        "cursor": {
          "ref": "da4453e1-16fc-4b5e-b044-0bb0a3adb2aa",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8eb374e2-c1c4-4b1f-8f73-4ad8fbdc2018"
        },
        "item": {
          "id": "3c6310ef-1f19-4b85-9643-77c322195e4a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "42785a04-e8b6-469d-b9cf-73426a09626d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5336aec2-cf69-4ca6-9896-4e507b8756f6",
        "cursor": {
          "ref": "9ee24925-1854-4baf-84d6-276c3942c443",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "42370af1-33b2-4ccd-a5aa-39298a2b54a2"
        },
        "item": {
          "id": "5336aec2-cf69-4ca6-9896-4e507b8756f6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1bdfb8d5-c8ae-439f-9383-c9673eab6255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0f6d54-24c8-4671-b9a5-6601872a374b",
        "cursor": {
          "ref": "8e06b242-5c5e-40f2-a712-acbf47211e4d",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a3e7ffeb-9303-4602-bcac-76d31bf8b9fe"
        },
        "item": {
          "id": "dd0f6d54-24c8-4671-b9a5-6601872a374b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "961efd89-2097-4633-951f-d7196fd9a141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e17855f-64ad-47e0-927e-614ba3217054",
        "cursor": {
          "ref": "4b62ae93-127f-42c0-acff-2b84d15e2222",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3d437613-e4df-42cb-9633-ca371eeb6d62"
        },
        "item": {
          "id": "4e17855f-64ad-47e0-927e-614ba3217054",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a0f7f042-17bd-49a1-8b9d-1b0f5c6e8918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98fa7b4-2d3f-41e4-9986-3bda0a200c0a",
        "cursor": {
          "ref": "99529a2e-f62a-4c85-9078-97089bc64006",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "944e21a8-c8a1-44d1-83d0-7a6d32d3c002"
        },
        "item": {
          "id": "a98fa7b4-2d3f-41e4-9986-3bda0a200c0a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "00ebef8f-60da-4c0e-9cdb-e6bb09f66c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9767e99a-98b5-4cac-891a-5234949a6be9",
        "cursor": {
          "ref": "32c8fdec-180e-4206-b8dc-d38aa672acce",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b4032198-d1e8-4177-9a1b-afbad8280319"
        },
        "item": {
          "id": "9767e99a-98b5-4cac-891a-5234949a6be9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ee85778d-ad44-4f79-b65b-1328e3759912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f7a73b-e258-474d-be89-354fd1072912",
        "cursor": {
          "ref": "9d12dff6-831c-425f-8efe-286fccd304aa",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "79f47a98-f036-4b6e-a593-adb47d7b9aac"
        },
        "item": {
          "id": "86f7a73b-e258-474d-be89-354fd1072912",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9de621a8-412a-43b0-9f27-48ead8e124df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bfbc30-a949-46ea-87d0-3358d6efc3a6",
        "cursor": {
          "ref": "36ba5d20-ede8-4073-9c4c-3cba3c0feb43",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "04d8fabc-3112-4253-81f5-7a1205917ec1"
        },
        "item": {
          "id": "73bfbc30-a949-46ea-87d0-3358d6efc3a6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5aac42e3-8429-4ab0-9063-acd7c93a1862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5128878-7285-4625-8af4-58f3b62f27bb",
        "cursor": {
          "ref": "8df0d6cb-fd49-4f9e-b31f-14e392c2d661",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4cf50c52-3511-4907-9d71-db7c71fdd4eb"
        },
        "item": {
          "id": "c5128878-7285-4625-8af4-58f3b62f27bb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6014185c-05d2-4371-ae87-b8067cdecbcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23845acc-648f-496c-bd82-721424c662f5",
        "cursor": {
          "ref": "aa6a883d-1bdb-434c-845a-32caf34f1b21",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f0ad3d6f-58b5-4cc2-ade2-c32df1957abd"
        },
        "item": {
          "id": "23845acc-648f-496c-bd82-721424c662f5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0d95377c-83cd-47fd-b470-c11be2449484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64396024-b74c-437c-ad36-84c90b42c178",
        "cursor": {
          "ref": "7ccd09c1-c4d1-4c2c-afaf-c17e85324136",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3696de26-4b66-4c17-a9fa-745cb2b63a44"
        },
        "item": {
          "id": "64396024-b74c-437c-ad36-84c90b42c178",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "524aa276-81b0-4584-bb4a-7a11bb55908a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c671eb-8e08-42d2-9e59-538f4f6ce9e9",
        "cursor": {
          "ref": "3a00e29a-8632-46d6-a859-68f3adf2599e",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d6e1ff3c-48c3-46a2-8046-0d0935752bbb"
        },
        "item": {
          "id": "89c671eb-8e08-42d2-9e59-538f4f6ce9e9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0eadbb8d-b38f-4ba7-9e7b-fd167d7615a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b91f494-141a-45a7-a0c8-3c4d9e59281e",
        "cursor": {
          "ref": "cab752a3-e623-498f-a7f9-36c61fe76581",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e0cd17eb-79ae-47ad-bfc5-46e01b4b703a"
        },
        "item": {
          "id": "4b91f494-141a-45a7-a0c8-3c4d9e59281e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c6c7cf9f-4ec4-4c03-92e6-7414768381bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cacd6f-931c-414a-87f4-1585ddb11839",
        "cursor": {
          "ref": "dee9f072-b22a-4fbc-91af-877a77bc0036",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c14dad78-dab0-40a6-a113-2b2dc201622e"
        },
        "item": {
          "id": "80cacd6f-931c-414a-87f4-1585ddb11839",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c66c083b-5e95-4b71-9ad0-b25b9833f944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e0ea39-5956-4b7a-a14b-7bd2dce33e75",
        "cursor": {
          "ref": "24068d63-c8ee-46a4-b900-299feb889467",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "24924e6b-55bf-42f8-8693-f967e62015de"
        },
        "item": {
          "id": "c1e0ea39-5956-4b7a-a14b-7bd2dce33e75",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a7865da0-a45c-43ff-80fe-4f37ca61a2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3714d04c-b37a-4ef2-a5c0-17ec67632bec",
        "cursor": {
          "ref": "8ad6a50d-cfde-43ba-a0c0-a9b5be0a1cc7",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5c89f3d0-a5d7-4c98-9eed-57cae1419c70"
        },
        "item": {
          "id": "3714d04c-b37a-4ef2-a5c0-17ec67632bec",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3f7f2d5f-232c-4413-bbb7-86bb41bc9435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11917eb1-403d-4c81-9ff6-441e4b895a8d",
        "cursor": {
          "ref": "98601d88-327e-4c58-b131-5081e9a283fd",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7b62f68f-d24a-486c-9598-4f489f804613"
        },
        "item": {
          "id": "11917eb1-403d-4c81-9ff6-441e4b895a8d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c5e7df00-47e9-42f7-bfbb-d59ee87a070a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfc678b-f02f-4f3f-973e-1d8fa2937ac4",
        "cursor": {
          "ref": "e827b3cb-1381-466b-80e2-fd22de4d054f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e1e7521d-c487-498f-9559-5cf38141ffc9"
        },
        "item": {
          "id": "0cfc678b-f02f-4f3f-973e-1d8fa2937ac4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5cf9e443-1bc5-4469-bbc4-d89ad6417bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe6acc2-9867-4ffc-a747-e8f044d65c62",
        "cursor": {
          "ref": "52dac9d0-43ed-4d23-8d9e-207e551c400a",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f88c078a-24f7-469a-b929-e9936e301552"
        },
        "item": {
          "id": "dbe6acc2-9867-4ffc-a747-e8f044d65c62",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "78649684-e066-4d32-92d8-915c8292ed49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c28b59-b64c-4ada-a644-ec8ce64cba90",
        "cursor": {
          "ref": "7e47aa2b-883a-491d-a788-02835850e742",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "805f6d04-25e3-436b-a917-80be8e4e82b1"
        },
        "item": {
          "id": "99c28b59-b64c-4ada-a644-ec8ce64cba90",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "91c7293e-0738-482c-addd-ab53a2ac2534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f0aba3-f60c-4ad9-bb24-dcc6aa4cc584",
        "cursor": {
          "ref": "bd7a32fb-4bd7-4061-988d-c4b39b1f1cd1",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f2eb0dab-68ec-4e36-846a-cceb669b331b"
        },
        "item": {
          "id": "e8f0aba3-f60c-4ad9-bb24-dcc6aa4cc584",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "47fd3027-128c-4564-937f-66202c88c557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9cdfc32f-7402-4609-9770-ee67bb2d32a9",
        "cursor": {
          "ref": "e9f24eaa-94c8-4a3c-b9fc-d49d94d49814",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cd9bf122-dca2-4ce8-b233-ac1cd452a6e8"
        },
        "item": {
          "id": "9cdfc32f-7402-4609-9770-ee67bb2d32a9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "57c434e8-3df2-4ed5-b414-2cec55ea5bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4a215df9-4bce-42a6-b754-28a750c856f5",
        "cursor": {
          "ref": "076ac405-9c4d-4230-8c6d-15ab71b1ca3c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4d33c652-cfb2-42fc-8ba7-bb4fb6a1a825"
        },
        "item": {
          "id": "4a215df9-4bce-42a6-b754-28a750c856f5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b1cb355a-cc95-4a02-ab0d-af49da572015",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5ab7a8-19c9-4a76-914f-0e4b84f701b5",
        "cursor": {
          "ref": "e7b29f7d-90d5-40ad-b82b-baa8c68d7b0e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c245da1c-61e4-421e-85fd-f593c46e57fc"
        },
        "item": {
          "id": "1a5ab7a8-19c9-4a76-914f-0e4b84f701b5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4c293a3d-6501-4d6d-94ec-cdbe3efa28b3",
          "status": "OK",
          "code": 200,
          "responseTime": 1853,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7741abc3-5c7b-4885-bc9c-7ca4e3263bde",
        "cursor": {
          "ref": "6794555b-83c2-440f-ab44-7301bc8be329",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e96b3c6c-d136-40d6-b060-5a4cc5d0fc1c"
        },
        "item": {
          "id": "7741abc3-5c7b-4885-bc9c-7ca4e3263bde",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "da26b71e-0c5e-473c-b33b-64d4e37cdfd7",
          "status": "OK",
          "code": 200,
          "responseTime": 2535,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "caad7db0-01b4-4f76-b37b-38dea0dc83e5",
        "cursor": {
          "ref": "a7957d19-478e-465f-8761-71429b15f368",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "27107b1e-c313-4402-89ab-3e3741c7b185"
        },
        "item": {
          "id": "caad7db0-01b4-4f76-b37b-38dea0dc83e5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7e2f9dd3-85bf-4be7-950a-16a84ed2de21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "caad7db0-01b4-4f76-b37b-38dea0dc83e5",
        "cursor": {
          "ref": "a7957d19-478e-465f-8761-71429b15f368",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "27107b1e-c313-4402-89ab-3e3741c7b185"
        },
        "item": {
          "id": "caad7db0-01b4-4f76-b37b-38dea0dc83e5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7e2f9dd3-85bf-4be7-950a-16a84ed2de21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "caad7db0-01b4-4f76-b37b-38dea0dc83e5",
        "cursor": {
          "ref": "a7957d19-478e-465f-8761-71429b15f368",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "27107b1e-c313-4402-89ab-3e3741c7b185"
        },
        "item": {
          "id": "caad7db0-01b4-4f76-b37b-38dea0dc83e5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7e2f9dd3-85bf-4be7-950a-16a84ed2de21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f9e67a0e-1540-4388-8ae8-4ebe791c81a3",
        "cursor": {
          "ref": "a5d27fcb-f393-4f08-8bdd-a79929385c5a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "68e0b2ab-5d8f-435d-8190-a8bb02742010"
        },
        "item": {
          "id": "f9e67a0e-1540-4388-8ae8-4ebe791c81a3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7c1175f2-d1c1-448d-a172-a6733e90ebb3",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ef91717f-b45b-4686-936a-1a8f92dcdb3f",
        "cursor": {
          "ref": "494a7ace-b252-4b43-82c9-0008d9edf3c7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "86b23631-8aeb-4166-ae99-4b4d332fc052"
        },
        "item": {
          "id": "ef91717f-b45b-4686-936a-1a8f92dcdb3f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f1afdb07-298b-47c6-a36f-c529522d4908",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ef91717f-b45b-4686-936a-1a8f92dcdb3f",
        "cursor": {
          "ref": "494a7ace-b252-4b43-82c9-0008d9edf3c7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "86b23631-8aeb-4166-ae99-4b4d332fc052"
        },
        "item": {
          "id": "ef91717f-b45b-4686-936a-1a8f92dcdb3f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f1afdb07-298b-47c6-a36f-c529522d4908",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5c7e7ef6-0170-4c8d-9946-7655b3cafb79",
        "cursor": {
          "ref": "0f70dcb8-d0a2-4706-84ba-e11f261c89f4",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8689f83d-d164-49e3-99de-5924aa58a6f0"
        },
        "item": {
          "id": "5c7e7ef6-0170-4c8d-9946-7655b3cafb79",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f7b70d90-923a-4837-a7aa-801833e03125",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 145,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2c5d33b5-1a3c-4293-8aa6-37ae92fb82c4",
        "cursor": {
          "ref": "2b78755c-3b94-436f-8c41-d1dac042ea40",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b3c27823-959b-40ed-9c58-02f0eae3d1ae"
        },
        "item": {
          "id": "2c5d33b5-1a3c-4293-8aa6-37ae92fb82c4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c81b4ca0-aa45-4ca4-8487-c929233bbd80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2c5d33b5-1a3c-4293-8aa6-37ae92fb82c4",
        "cursor": {
          "ref": "2b78755c-3b94-436f-8c41-d1dac042ea40",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b3c27823-959b-40ed-9c58-02f0eae3d1ae"
        },
        "item": {
          "id": "2c5d33b5-1a3c-4293-8aa6-37ae92fb82c4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c81b4ca0-aa45-4ca4-8487-c929233bbd80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4429c221-c468-4397-ae2c-445d42c1e82b",
        "cursor": {
          "ref": "f0f83081-e6ce-42e1-8c74-2b57055ebc95",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e776254f-c443-456f-9f44-75ff32c033bb"
        },
        "item": {
          "id": "4429c221-c468-4397-ae2c-445d42c1e82b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d2e0eec5-5489-4bcf-872d-9c976c9bacdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}