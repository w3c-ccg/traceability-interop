{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "134aeb08-15ec-4dad-8207-c6a8edf826ec",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9f96e86c-08a5-4fa6-845e-db8b14bac387",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5f91adc-5a0c-4dd0-b7c8-ff1409373d8e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7700dd7e-dead-49a5-9d62-d5ac723c0528"
                }
              }
            ]
          },
          {
            "id": "538f9fd5-29f3-4b4d-bf5c-027ef21c1e91",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "896cc67d-2497-493f-a53c-feee24f7b802",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b7956aa7-8356-46ed-a0a9-bab219afcafd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "776fb96a-4cb3-41e7-96d6-a2f47d6fe1c4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cec451d2-3bc0-4f9f-a4c1-363a88e6aa4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8380d716-7b21-4fa1-bcc2-ee1de79cacb9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8218bfb4-e58f-4610-ae4f-b1f79c14ce6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "340a5d9d-60fe-4356-96ee-1b64259ac6c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf2cbac2-818a-417b-935b-d742f53de8c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8f88ad1d-00eb-474d-9697-4bf6b27dc8df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "376ace5d-f188-4ce0-bbc7-872c35f5f97c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "149f2513-b946-4d78-afeb-5ad5c43a5fc4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52d9cb0e-703b-4afa-a679-a5fcfead3fdc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b5a0298c-54a0-42a9-977e-87b5aecec038"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "289a3d43-3766-4f46-9fa3-a29965cd5fe7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "224c0daf-7882-4bae-8d01-a16489cc91f0"
            }
          }
        ]
      },
      {
        "id": "acd3d9df-c63b-4968-ac62-1ab0244968ff",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ac79018b-936f-4b64-b903-92913767508f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d60590b-e337-4257-91fb-9979a7a40c41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "64ccb9c8-a73b-4cff-ad57-8443d8728604",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3908faee-7d15-4baa-bd0c-65d587fa5cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40cd3e4b-a1f4-4fe2-9ee8-01a5bbcc236d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae03529-a61e-4488-ac24-b2ead904c8bc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c908ea4-1e6f-4c92-a5a2-d32648357ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8853a527-2441-4b9b-8d7e-71107b98f8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0020641-8bc6-472b-8936-e47e75f3f703",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ce3fd1-7aeb-4088-882d-127e98fd41f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a812dfa3-80a3-4f83-bf3b-83b0b5ae29de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e40c35d0-52c9-4800-a298-52a96a7a679d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a942fa3b-9fbf-4a37-9510-ee0f24204b99",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47d75dc-0158-41e2-8e10-4af3a1f42da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "810e6384-23da-4988-8f4f-7e7d5ff3e6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4ae067-142b-46fa-b1b4-deffb1bf806b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2622804e-694a-47c0-afd2-cb2a33ffc9e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fec8f9c9-6930-48cd-8bc0-a4fb927960d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "784cf4c7-3bf9-40ad-b5b4-e1f5db8d19cc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa6f7f99-2ce5-4471-ba19-e193c272de8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "610576e2-bb9c-4664-ade6-7c734bd308f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "543b70b0-faf8-4555-bfed-a74734eef2e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bd037b12-750f-4a65-beea-7bcb748b9bd9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3ce55de-2564-47d0-84f0-87e8e51518be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2761d9c7-30f2-40f5-afbc-7c0ba2bb5b7a"
            }
          }
        ]
      },
      {
        "id": "9a7b42e5-43a0-4ca6-9676-71a6510cd872",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "24c88485-466b-45a8-b257-ed9853c413ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78184326-b8e1-4349-8968-b453f7ed8d00",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "32748396-c4b4-4815-8a81-844f4fca5904",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be23444e-1be6-4165-8246-a04704cd952b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9565a5-36c1-426f-a4b8-225d74963bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a747106c-3029-4573-b3ec-a31bac45bafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8ca8e54-e5d1-4f0e-bfca-8af0cdcfe7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ef1cbf-1c28-4aad-96d0-ad5d5ab30477",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532d220d-779d-49f4-b440-eb81a9bf0691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a02bf0dc-b3f0-4972-a36e-ff8e4b3c248a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773650a2-68c7-4c17-a317-dafeaa253d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c189f305-6e2c-4f76-bcb7-4a89fa7e7765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cebec3e-a37f-44a7-a674-513f0bd92d0f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b2ca10-4b79-43e0-973c-bf12a8f4780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a17c3e-a51f-4bb9-b0e3-44be4e278f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dada8d1e-09de-4a01-bbc8-738317ba84e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49237843-bd6e-4f44-ad45-84bb8c3afbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6815ac6b-666e-46a2-a640-75c310062ceb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d4ec79-6bb2-4c0c-ad9a-bb11f5e4f473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ac08de-c159-4bea-87d7-c26ac5cfb3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191a132f-55b2-4e1b-b80b-c4a32f41fd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dd5c3f9-5f37-4bfd-aa87-12c1a1390773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f5ec8d-b5b5-4c01-9495-9f3efc0dfaa8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9f1d43-9ba2-4572-8eb0-a0b30300485d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3483bcd0-eebe-4635-83fc-747e350d7361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec17bd7f-bb61-43a2-9b04-09a263b0f91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dff92017-51e9-4cdb-b006-dd0cc5d78ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4a7ca9-bf18-4b98-993c-002e219547d2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e256c31b-1418-408d-8e9e-131130875e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bbc8c0-fe0d-4d55-952e-086a6b501976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e6602b-c8f8-48d2-9648-44fd06c0741b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be9778d4-7aaf-49df-9b8b-0787c43eedba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47305bf9-9d2d-4b06-9e5e-446dccc65003",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871c7af9-e341-477f-b1a9-ef0d6ba5369c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78694fee-8b82-4f19-a4c6-c49dff938b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25269aed-a884-4646-9b9f-80adb8d937e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "666e1705-349e-4e9b-847b-7c5972a677f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cab3fa-3a07-4d22-86bd-e83d24dcd830",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dc4769-86c6-4a20-8325-a1a43459116f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53bfde1-d668-463e-aac3-20a878bed3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d742c54-6487-4ee3-980a-b28a5e5afa1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eacb905f-f67a-4a85-876e-c1f15ea94daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260ca4b9-145a-431b-bc66-adf6a01abd03",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afcdcf1-f050-4c7c-990c-30e7fefcb92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6e5541-cdf5-4ec5-8951-f23df42aac7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d631db3b-b08f-48bf-8972-7cd7d75ea212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6b6c90e-cfb5-41ef-9ba4-c66b4702afda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e053db8f-51f7-43ff-9e36-e6afdfa3ee08",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6f0b69-5291-4db8-a84c-0c19ab8152b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324ed3b5-b310-4bff-bbb9-c44e6c44e939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fe0fb2-5c2e-4790-a93d-ad8e9053ec09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3f5a63f-7031-4d4a-b1f6-530186972b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea184d57-1091-4e3a-a583-ddfd78f50ec1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cda990-5a8e-4985-820c-c2208a7fc189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48173ba-5267-46ff-9db8-84643b32e1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331291a0-0414-4687-8964-b79c88bd0d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2167450-8e18-4423-8156-cef647813bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2e1468-25e1-4c0d-9765-828068356570",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a140d3fa-7456-4e07-a98e-277c448fe840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c876374-ceca-4892-9c8e-6106d9ec9108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b764bf12-dfa9-4fa4-a6d4-b114fa4fa5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d76dddc4-9b95-4e24-b1b7-38d4d8bdee94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fcffbd-9182-4580-a16b-b51527c68f15",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffd7bcf-b485-47a3-8818-4d3132daf33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c78f1f7-c703-4f90-a4dd-f6d0567e9ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4d62f8-0e35-4117-86bb-1c2902d715f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31f65ac0-0b03-43a4-96bd-9f0ecfc5ab0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e4ca13-da84-4630-9093-d551e0d41052",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d69f39-48ce-4b2a-bf31-80dd341ada32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a159a3bc-0564-4403-a9d5-47f5048eea68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138438cd-006e-4c07-82f8-210ca13a17f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b522f58-ac48-46ca-bb15-3d08b3a49e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fb0a57-28f3-4070-b30f-4ebdd7de4704",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e76dbfb-25ed-4c10-b85b-ac10f618287c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4197dc4f-f791-4c61-aa56-10c0eeb52399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0f3797-94f4-45a0-883f-8979b4600ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebce9b52-f741-47b8-83a3-3033aa3a5760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f54184-d004-4885-89df-82f28fd2deda",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9119fa62-729e-4fbc-8a95-50cb74c4a7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed84998-f489-423d-a0a7-a450ff4e82d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4065584d-63d4-4399-8146-7e398d8018e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea232e5b-a7a1-474e-bc6c-7882cd4f5dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a1125f-88d4-4552-91e4-7ce3b45ef154",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3eaf4c-003b-41d4-939b-a1e731622ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441de7c8-275f-480c-972d-7c214ef7b0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf0ca15-e722-4680-97e2-5459cb1ecd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52186d13-7d02-4181-a223-7ace22219f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bd4cb1-418e-4278-8ed1-59629bc1bdd0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086a12db-97cb-43f0-9f3f-834f40dd33ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88d8775-8d65-4c4f-8b7a-21894c00e848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dafc318-34cd-4f54-aa13-54d7ed705d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b84682-5288-4e17-ae71-f2578a8400ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1e84ba-1a45-44e3-90b4-05ec6249557d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "541e6a66-1414-43ff-96c9-e4d1a21879df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4910a6b6-e830-4c70-b4c4-d51642975ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de79424-8dee-428f-ace8-07075646eed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30ffa038-b953-4cd5-85b2-a228d6d9586b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f90d0e-4a65-441b-a92f-57de25967557",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43094fe6-232c-4b22-a67b-4f75d66bbc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65df262-6d6e-4b9d-a13a-b2d8bee1f89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0aa08e-3f33-4c70-8ed2-4c52bc14b064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da4d6b72-b9c1-4355-a608-3aa4d3414dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1773ffd-ba82-464b-bb2e-1c2d3dc503eb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8f62db-7be3-462e-baf5-6c4a5bf8e749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c030a6e6-ad1e-49fe-89cd-b041e23f1f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9bf031-3756-480b-9ccc-93efe6da9d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "513ab98e-a4bf-4c37-89f5-c42ec08e9bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad384afa-eee6-4bbd-8c37-4f1758d9cd83",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b200701a-8533-4a36-a207-473a1a0d4070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31067cbe-eac0-4422-a07b-6ebaccc3ac2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7efd7ae-ccf2-4839-bdb8-d94cc0edbaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f56291-9dd2-4199-9e53-5f82e15b5c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca6c20c-e571-4c3f-a11f-d1b9e7bc72e4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbc664e-52b7-452f-809e-e6ae0406177d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f82807-d1d1-4c2e-a091-e572a0c87040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d35f80-0078-41b1-88b2-99d7db3e5b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "249a2f9e-175d-4258-aea7-89914c9f1125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ecb61d-d994-4855-9d8c-267e89764fc8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6787c7-1aae-441a-bdb8-0cf5e90287a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6a822f-34b1-45b5-a24a-72f8347ffd06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c6f2ac-0b1b-475c-9f13-950b8fe2a0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "232ff8ec-9302-401a-9939-3f93340cb05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccc18d5-2551-40d6-940a-b4aaaa03fb63",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b4db63-4070-45c0-9c2f-ef5ddc092751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2ca5c4-7ada-4fe9-aa3c-ae857612b9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb44762-fd08-4509-bbc0-a001f8b5ec90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b3dfbf-6271-4022-8c04-7aa3dc5e369f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b8b9ff-d17c-4f4c-bd61-35d761b3caa9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef83da42-7ab3-4a38-8e75-366704932620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a3d3c8-d78b-4d41-be8d-242b17f4b72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1359823-0b57-4f92-9871-388cfe30f611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d36a5b0-7a9e-457b-9d82-d9f4ca705f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a546481b-d39f-4fbf-8dbb-8a8e7a2bd235",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5c7bc2-1bf6-4399-96da-c8699c61c260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b60f6d-5abf-45ce-a6c8-d7b4bf8e35de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b633b7-dce1-4eb6-8e91-5025837550ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8155879-aac4-490c-8d09-81ad1f016d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387a1690-30ee-41e1-a101-8c2f244997bc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae21282-89cd-4c06-8804-a2e2bbbb25db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06121ea9-453e-4e49-b453-95d4d356c33a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4207883d-8b5f-43f6-bfee-69e8a2eabddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b988328b-4028-4bc4-ac45-51398288a7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c848101-2668-4d2e-9c8c-640c9de0c382",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a9b212-8885-4abb-9f91-fbf64c37ac7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839d4268-afe0-4e2c-a10a-674574358782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f50c9f1-4c7d-41d4-88a6-7269cfc9f593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec02f83-88e7-4f6a-8027-63b254aa8f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c3f263-eea3-47f2-ae6d-d4b8c2333abb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f199b1-7cc5-43c1-a699-ecd682241a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930ec94b-541a-4894-bb77-a02955cba22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd2d4ce-e7a7-4c23-af7f-7c73e0f697e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "76622229-5e47-4b0c-8ac0-9aa6ed230f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8edc9ae-74c6-4f71-a41a-10ad48d1f7d0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe4f52e-d5ad-4ae9-b7fb-4d24ec1727f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a29fe3-4f4b-4c1e-aa61-9fe6d687b72f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2fa462-14fc-43f2-9250-98a426dd65e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78163c20-06fc-434c-b3ee-cdc171a1fe66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86dff390-cb7b-44e4-ad94-eef89bcf99fa",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f233c334-83f3-4d5e-9a6a-80c592211731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7557134-c3b1-4835-9f68-7d748f3488f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60b8b53-df6a-49be-894b-f2a580d3e053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fce7d1d6-3cfc-4ca2-b91d-2cab641679dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a9fa13-0af0-4896-af3e-13dc236caf1c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08d3bf1-5bbe-4d85-8859-b66f33bf56d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aab8aab-9a5d-4789-bc90-a5608b97dfe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0123735f-37ba-4632-86c2-7548bed98e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbde3d5e-89c5-4d62-b262-7b54f373c3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6d4bc1-7686-4adb-9706-2d7dffabd293",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b9be1f-812f-4eff-9427-67fa2ef4d6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc23eddb-306c-49b9-9773-68c8d84eecca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f409eb-5a29-442b-abc8-d741ad993915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e118082a-b214-4421-9a8a-fe9f75c31e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946749a7-2b73-46d3-bfde-9239a8d67d32",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00de8106-7e1d-41b0-a44e-8f9dec7e295d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17741988-277b-495a-9871-55085095428d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f233e9f6-0a4d-48ed-bc53-104cdd22b73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6ba81e-1aa4-48f0-afcc-17fb4366d723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec77c67-1fcc-4da5-aea4-3e0b48117d5d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808d94c4-3cd8-497d-af5f-c66c8b827a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e521728-09b3-4e10-a993-623b7944c366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152c6cbe-bedd-4c8d-a1d1-c2afd05cf5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "254fd470-6ee2-4e4f-8f2f-cfa78934f877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5f6edc-6613-4c0b-9329-e1bc704f75f3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae9655d-d0f8-43b6-baf8-d3b1d5e73e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084faf42-92a8-4d73-a1b6-d58551204513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bae7a1-fea8-422d-ae96-44655ff9ccdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80b8f828-3afe-4746-907d-b8ee77453556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdbffa3-b68d-48c0-8cc5-228bfb8e995b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25462f71-b7ca-426a-a850-ac9214b38b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab196376-d992-4433-8cf0-99309926ec8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04e0064-ade0-46ad-9a6a-02efcede13fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "289c412e-dfb1-4227-883d-c7dc10024abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2ec65e-34d6-4f9e-a217-6b754b1a1a6a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e62c58-2ea1-4609-bf02-48f8fc1664b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108fd021-a9cc-4a84-a542-327c8a98e1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9675410d-c274-430a-b465-e82ccb2e062f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21ebd247-6525-490f-ad2f-a8e0382327ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34032089-0dd2-4024-af3f-bd6bc9893f59",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c67c76-d314-4608-94e3-831ebfc975aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcc5f08-e0ab-481c-861b-d559b927af86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e769091-a4df-4e60-b00e-88b9c2e4c028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7f3e7a-ad3a-47ba-8f65-d6375e711c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25871834-34bf-4060-bbb6-9f60733d184c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ad36d0-f2e1-4741-9d5e-bff021e57929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e55cbb-87b1-4dce-aa6b-8e143736740d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a38fac-8cd1-407f-b33c-173b9355ad55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "20e9ad2c-c007-4140-8ba4-ac5d578cad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e587c1-ca0a-4cbc-9486-5c64f1e3b4b1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2922cd9e-cfa9-45f8-adc2-74126545be43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14034442-7a0d-4800-9cdd-4c87a54d5684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600e5224-cd94-4938-bb09-17fafed19e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "248a0c86-73b0-486c-964f-55a0c354f5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0332e4a-1f04-4682-9426-39a62e5f1ef2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d169cfb-621a-4e2a-bdc6-fee793fcddce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eccc31b7-bffe-4a24-b5fb-92e31316a0f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc2f8bf-8a24-4768-a296-1c78bcded3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "26e250fa-a926-42e3-8894-05f1a551ba38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81530d0-55bc-4e61-89c6-cbb72e64d454",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9a9e8b-221c-4080-b7a7-b44a0b0b6fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d02836-b7f1-4a52-8cb5-e62dc0b8fb44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578a9bf6-7e45-4334-8904-27efb31cbf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fadda434-c931-40fb-b47f-519628d68185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed24391b-5c5e-4775-b5a1-84139d668392",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc727ef-a0e2-4f9a-83eb-a9a251d13963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae378600-eb6f-434c-9e08-89ff16401d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1900a1b4-0d0b-4862-a553-e68356390e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8407e3b3-3f63-40d2-8ca6-1b4d022e1f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39c8392-d2c6-4333-93d9-647c5ae0b9f3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1458fc9-d4e9-4d40-b628-43cbc30249b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171f0167-b557-46fb-aa37-192fd3772e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47855278-d261-4661-ae0c-490621ee8e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de116cfe-c5d7-4c6f-a66a-24bf7dc7cec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8832f176-85b6-438c-90fb-815291713963",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104f6b0e-6a80-4466-b8ff-2fd309c4d1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11928e7-64c7-4588-8ad1-90f648f5ea76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f83b3d-dcae-4a5f-81e0-c0a71dd7abe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae055b8-e72d-4db5-a7fb-aa15565d2fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138fe6ea-cb92-4b7d-a08d-d4eeac3d40f8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e42b1e-471b-469d-9d11-f1bb6cdd71ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31714f9-baf7-4190-a734-676a6ada9888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b60c04-7aed-4ea6-990d-e1e698630dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b81f52-fbfe-400f-af62-81549862623c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b31e717-86da-4340-bbee-c36fbaaffa59",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8f4540-8b25-43bf-a9d4-c55811a49629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f18bba4-a278-424a-a7c4-163aea96c8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b092640f-dc0b-48e2-9629-9395c711887d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9447e488-8497-4f15-8872-e3cabe5b5bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c959dd1-2806-4e33-a93d-7732c2256cf4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac03d793-ee75-4c11-ab68-627bf58bbd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a14a361-0273-4437-9658-f156991086a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1276d138-29df-4c54-ade4-bdb3e21e063b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db673f2c-7cfa-4d33-ba1f-109b50513d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3543eeb3-ae50-4b30-844a-7e3bae65a7e1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5108bc-58cf-43e1-8144-735617be9568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34f6de2-e388-46cf-9747-13b4e8d3c6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915059db-09aa-45d5-846b-185438e50218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b82efc2-5930-462f-8dc4-61c281bf1cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4258b08-48d7-41c8-ad0d-ffe919535b17",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4383d170-ae83-4de7-9642-2e0dea6bc2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68c113b-ce90-4d44-83ea-f440b9fc7772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7b2937-7ad4-4fa4-95f9-5c8b6613f702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f14bd0bc-7a72-430e-95a1-edf6c84a52f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b92753a-a61b-4e57-b06e-6b72c43cf9a2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f46758-52eb-468a-9d8c-57baafb6f794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8ae889-4133-4525-bde7-b0ec7058722c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a81fd6-0ae1-4bd8-8140-684d9c932976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3edf636-9125-471f-8523-d5535fcde3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6e19d2-0c93-4b2c-9be9-7d316b6cabcd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23725898-919f-4105-8b6f-79502cf7ffca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355a3cb7-36bc-4f43-ac3f-c471fd36d55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87db791b-3204-4b35-b544-df6d159b8503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34df2cb6-a090-4827-9a05-689d0dc75013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42625d1-205d-4975-8552-aee2b4a9407c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3b2eee-33f2-4307-a3e6-c5c8d0806311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075b2302-1d32-4f0f-a75c-d841787d1a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9092216-9320-4dc4-b895-f9f03d208826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "408249a2-b4f1-403d-b905-eac92c5caea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce59d0a4-cf7e-469b-b294-eaabc0335619",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12b9c4e-343b-4bb0-917f-a9f13862cf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d266cec3-efb5-4c07-b963-7e280349b0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586fc1c4-ef05-4551-a2a1-11151d799e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "90323ab9-a111-4461-997c-51cd6011238e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea64c28-9ae9-49ab-865d-d812028d50f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b0305e-db06-4513-8497-82098e825b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4b8b5b-01a5-4971-9e4d-5e3a91ef5c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f60d586-d284-41f1-b68d-557d9e468eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "54e7a0ca-3e70-46ac-bcf8-38c077a84ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c2fce4-6ae1-42e6-99d2-9bd5d233e6d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbf0705-03f2-48d9-af18-6d7d82203957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fcf029a-edd0-4b33-9e46-58aab3f5632c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03d555b-8104-47b8-96d5-a66e1c1b507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6d6ea4-98ed-4fa9-93ab-6bf8bf41e0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362dc399-645d-43db-b482-fff2270f285c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2144a697-197e-4fdf-9873-6ee1153ef527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d42c996-e1d0-4963-bcf3-4273169fb9b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41df2a89-2ee2-4948-be90-c9afab5fa8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "becdae2b-3e44-4b68-a116-e93562484d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51107f5-b749-4087-8ed6-fb2cd677cb25",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c618dd9-bd36-4266-a4ed-6cfb5389627f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552c4a76-78f8-424f-8917-64abab0a1f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990d3ebd-5053-4966-9f4c-44a123d076d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d131a29-c9c3-469c-9121-907601c0dc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07389513-1709-42be-8488-a1105770fc77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e139f76-041a-41bd-9490-1e84a889196b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69f157b-0b4b-4042-9e24-e282b099e246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2184cd03-e555-4933-b3e1-fd26aec5ba00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2a65e0-7c5d-4a85-8390-06024f9ca505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8917b309-77c2-4a3a-ac0f-a42565baf088",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1236a7a3-a632-48cb-b0a5-39aef4504090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bda812b-7784-40b7-b847-eee23ddb3223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878beb74-9455-4674-8893-a1c176126aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bda7b0e-4d5f-4ab2-aab2-f54da39451bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfccbcfb-1478-4065-896c-db168fd952c6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f718b9-f40a-4f6f-a398-31cea247cdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae4f58c-713f-41a6-b681-1b4b0962cdb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a98a41-044c-4042-8075-bb3bd7a04967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce526e6-e065-49c5-9fd2-0cfa4dc962b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40615f41-106e-43c4-ab72-a60d574bd099",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5defd5c6-7303-449c-984c-4d1261fcd170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be03ed9d-28a7-4832-84b2-1c867a581bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b8021f-a095-4c02-af78-6747216a2331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfe75d1-9ad8-4c32-9e14-e7885d6555f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538e7041-0040-49e0-80b6-b754defc2140",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01e21b2-3ce4-4cf2-8cfe-c29c04a2babf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc75cd5-a35d-4221-ab61-e5b84ea72d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc77460f-116a-4a24-a746-5ec27c3cd319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c447d2e-e0b9-4817-b275-e54852170c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cd8f80-973d-4769-844f-e4c0e1c166ed",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3feeac-8eca-4cb5-bf7c-d1eaf7f17f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a698a3d-7a7b-4604-8c4b-4a7698240e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dab9fec-3a5c-4ede-b3e5-03a0089c44c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef3ab57-1432-470a-8e6c-15e1e5e163b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc4b1ad-3c62-41d1-8db5-08efa032840d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1190c884-a15c-4ec6-85a6-90ebc5ce8ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f60e34-d279-4129-89c5-e4dc3d8dc936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b873b6b6-c360-4317-80f8-2030081d181c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2bc687-a4f4-4cc1-8bea-7d849a6523a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8175cb-21e5-4b9b-a3c4-0f7231140020",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f3338b-5ec0-4f7e-8c1b-9e20790c6939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bd4415-f40c-4d28-9799-f0470f24bda8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff065b5-fef9-4cc1-af88-a29a33044833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9049cd3b-134e-405e-a06b-6ad8b15f95fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af3b2aa-9962-4250-96cc-563fec08e305",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bcc721-676f-4203-830c-a9b81843267f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a90e4e2-4dfd-409c-b6f3-65ef0f9d161d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df7a8e2-c0f6-4eee-a38f-d6b2e757b5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc20a80-84ef-4101-b60b-3eaffa38bd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ec6c6a-a9fe-48fd-9b45-ede959bdadc7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6804fde-81a5-4123-b452-6cc54eccce64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0931749-eace-4776-8704-d62c31144232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f5f638-df00-4dd4-86ba-9b73dce0de0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f8af87-13c2-4ec9-a614-e78bd6b461a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8c4c3a-62ef-40ea-a82c-2be91bd11ee1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6d8dac-7ddb-408e-8597-18a9f8f7f6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8a2272-abae-44b1-8150-d3146d9971b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158ba23f-13fb-46c6-8005-476f1b02c49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a86bdc3-6356-42a1-930d-40f34b2ab5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa052f0-44f9-4bdf-921d-fde0091e83b8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534ada67-a428-45c2-9601-b0fc84c66592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc20761-5f27-4ed9-b780-b5d6050ab47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1df7a34-d360-4fe4-b52f-cf3e8c3f10e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c6ab7c-3ef4-42ac-a8e1-55364f4757f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02da581a-9285-4bc8-9866-253dac9ea880",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72eaef08-c6d4-40d4-bc9b-6ad88527d29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742f9dc1-1ad4-48bf-994e-f7e32a10086c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076df786-3b25-4119-90bf-84540df52966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "431d6850-de4a-491d-b414-be13b0d258f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ba58d1-884e-429c-81b2-5f514e566d05",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1539bbce-6cac-41c4-9686-7c0c360a9ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda4d6b3-a76a-439b-87b2-6f98b96df405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7fcce5-d144-4254-ba41-d00b5869ecd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6eba93c5-198f-4bd4-bf18-e0b6bf7be174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6989d7b-0d25-4c10-b34f-55f99bc11dfe",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d03383-222a-4e91-aa2b-8c242c4739dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61908390-bf4b-44b7-b5cd-d42f32e70d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b604c984-a0d2-461b-80ae-442b3a36bab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e87d0e6e-4364-4ba4-a0c0-d8863274ca4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1360a1-32fa-4703-89cf-14a34592fb50",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe2d115-cccf-4441-bde3-d41829bcaf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8230e2c0-95c7-488a-9fd0-de099b4375ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2155b1fb-de67-4fda-b0a7-f289b9c900da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6423c48-91b5-4f46-b157-3efd25f9b217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48218966-5e4e-44e0-91e3-0264a12c1aa3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9118ba-bd13-42ba-9e60-944f09dba20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2055cb96-18aa-4789-86e5-60e8b1c818fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf592ee-044a-44cd-8ccc-f56bd2df69f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6bed412-cc6c-4d41-9559-e3b2b3861c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4b39ba-056d-4285-a663-88b14c0c5ee3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c7248a-62f3-4263-b768-bd39993b9aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda88317-af39-4637-a4d4-bd619e540db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c9a47d-5c77-4e64-aeab-047b70132902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "caecba96-0c2e-4bab-b72a-306851ddc004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b559aad-c355-4a99-ad7d-cfba1e67da25",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbf8553-dff9-4f51-97a7-c2b0328196eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0487a571-8ab4-416a-b22c-148c44e6d899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9717c155-b0e9-4427-b620-6e40f4b69e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69775bbf-705f-4e51-9886-640fb2ea7c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305a7eb5-588f-4675-ac8e-d06d24610658",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494fd7bc-65d6-489b-9203-ecab65688fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a65bf7-a083-4b6a-ae06-79245f674a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3165ec-738f-4061-a564-c56393c07cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "545f41e4-a656-4cfc-ae50-a47a5524e302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac8ec14-110a-4596-a653-098504b9c580",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35a9ace-73ba-4c7c-a8cc-e3d442e983ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ddcc404-1942-4576-add6-bc49895be424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11baaeb-f922-4e31-b601-3a9658093650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "874b10eb-30b9-4b63-82fa-7794bc6ff45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271ef956-42a5-44c0-87c3-6da22e678771",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f20300-c825-4d9d-8437-5a0369defdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84bf803-5861-483c-8536-5608d6cd338c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96534d4c-c31e-40e2-8b69-d122b4cd5fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfcef38-bfe7-42a6-86b5-4bf5ff8ccda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9e3d65-03a3-49f5-9383-f443c0808558",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699718c3-d6c7-4957-ade3-d99ca77d1f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5617d7d9-5798-4c8f-9fe5-05811aef60bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a01ee3-964c-466e-b895-ce210e977dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5c6967-b427-4592-92fb-925311f6ebd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364d397d-878b-4ab5-9af4-24c35375fbb3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2c8734-b372-4dd9-8142-b63ef9fa55d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210193ac-6e15-4c45-bb6b-3dbad90ed572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8548d6-6a83-4ec2-80dd-f4e9f1f048a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5419d1f3-c0a8-43ad-9d44-13b19a1c032a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06ad104-ca15-41ec-8049-eb2e0ae8c875",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e761514-3643-4f0f-9b87-c0649b402233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86cbd76-c1b2-47b6-b3ea-551a3a8e0579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200dcef6-6e25-40f2-a909-bf8339042697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bcf1380-f80b-4b51-9f31-390e6e68ea20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e7410b-f9ca-48f8-95b4-472ed6eed424",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13f764d-3229-4db3-bb08-4c0213fa72f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac731f3-3a3d-4283-a3e2-bded3f8976b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4526a943-696b-4b63-aaf0-afac2df95e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b79c168a-74dc-4fc8-b440-0003acd4b5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f140085-61b0-4811-930f-d3a4512fc7c7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8010d511-eca8-49c7-8349-693ee0756835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af9c92c-d571-41e8-82ea-de0e32c9eb68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126bae88-ba9e-42f9-8316-038ada396be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0837d50-2cdb-4dea-8278-753bbd286347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1ceea7-7416-480a-8e6c-57bf42ba42c5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2dec84-d301-42ec-ad19-c0daa1da5218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f6a932-7ec2-4cc5-90d8-5ee5da9341b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13063ef-9fde-4a6d-9340-88412ecfc9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2253103a-a1c0-459e-8d2e-9a3fac3281c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600b1d46-83dd-4062-8f39-b1a035221795",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3da2dcb-fe55-4814-b762-ac9ebb1cc750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae57d5f-d102-40e2-9998-c2eb2f28165d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0853a4d3-8806-4638-9b17-3d3b296bf582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "322f1e3d-0bf2-474e-b163-464e2082124f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7023ca83-0bbd-4a4b-99be-4a1417e70312",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ece2945-d00e-4036-b11a-0c6eb67be58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dd82dc-6e1e-4a83-ace3-f3fc6aea7dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b3d771-a61e-4dd9-aefd-c459766b6553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "81fff7fd-dae4-4b1a-a348-fdb3a48b517f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575b8d0e-0092-4ec5-8e95-1c3e336ccf66",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2a1934-3b81-4b38-80a4-9f05269959ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c607ab2d-21cf-4068-ae1d-e31c9607a365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5411f68d-ee39-4057-981e-650136cac520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb83dd6-10cf-464a-b936-f06e7c7fc50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e841de5-6d38-4b20-ae96-bcbdbb3161de",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d3875a-19d0-49be-98d9-80aa33b4c76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ed7aa02b-3675-448c-a5bc-d68da4c4e99d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c93e539-bbe9-468d-ab7a-88a647a8f65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "78888025-94db-4429-a35a-389070f9d7a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61c5db6c-708b-498b-ab7c-4bb3db537c30",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39595b82-06a1-4e88-a7ef-4ecb26d4e748",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b169f6ac-b266-4048-a8a1-0100af8f90a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53476d8b-c61a-4bc5-98b0-01f22595a7d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353eae31-444f-4d34-9993-29bc369c58f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa7b96f9-9127-4ec0-b0a3-19ca526786bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44f27a46-d8f7-4db8-b00b-61a4afb936ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13f8e426-8bb6-41ab-9ffd-d57a554ac758"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ed2d97-291f-488b-b6ab-ea04d0f191f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4645d407-644b-4874-86e5-f495aee34514"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec54aacd-d1fe-4759-89bc-eed0479fd4c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adca28aa-cf52-4a4b-b81f-9086c3062f5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0c3bacac-b963-495b-92c0-1ca2c2cef1eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "105018d2-5116-4abc-9b26-9da147431bf4"
                }
              }
            ]
          },
          {
            "id": "51abaea9-3893-4c27-aa8e-388d5c99b3c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d551a7f-ae50-4dd5-86ef-03ca1629585e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "dee25cc9-0fd2-4853-b27a-f1b379f20549",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6961118-94eb-4709-b0fe-b8c70bb4947c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8db49ff9-fa11-4f49-80cc-af4ca23c3a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ac5da7-4caa-4e9b-a8b1-fab76bce8d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f9d1a5-950c-4a72-a349-dba3102da6fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf91040d-2001-45a2-a08d-ba4e11c22d33",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f28298de-e70a-4d7e-a34f-d615efc74aa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "145a3220-ed91-4e78-9604-f28daa9e1d6f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15216c72-0984-456d-8603-74abff462fcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "58f8ef4b-b816-4f5c-9cdf-e8ba84260a41"
                    }
                  }
                ]
              },
              {
                "id": "c36629eb-b185-4e4d-8fb6-d2b32b5b354c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bd24623-0296-49bd-a8c9-58331f895071",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cdab4d0-857f-4334-92d2-a0ef9eebfe10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4052b66-ae57-407b-aeb0-7b6765f618bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3527804f-5069-4937-94e1-f137a7d8ba58"
                    }
                  }
                ]
              },
              {
                "id": "dd2830cf-7408-4050-95d2-bf257bb33473",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d9c34ef-56d6-43ea-a554-3461df2930bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "805b5483-0b77-438b-9d82-f944d1df7e21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d65b71b-41a8-448a-abf8-c85f8ffcc0c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3930f2bd-fa8e-4fde-a992-51d4435ddb3c"
                    }
                  }
                ]
              },
              {
                "id": "32330d5e-2bca-435c-9226-c0b340945f08",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7ffa39f-75c5-4489-8e00-95b385ff371b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48de4a78-d2c2-42d1-93db-cb2b6282bd2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39f73a42-f8f9-430b-b502-d6b4353d52ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7a07e17f-82fd-4b0a-b76d-efdb95032c5d"
                    }
                  }
                ]
              },
              {
                "id": "7688a617-c985-4e16-9f0d-79778744e7a6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6093c166-ae7d-4792-98d0-b3c97d35b548",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eef4853b-6a65-4b85-8de9-970250fb86f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85163c31-71e5-47e9-8828-1d1e24060bfa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5708653d-9f97-4ffa-8fdc-73f907c749ed"
                    }
                  }
                ]
              },
              {
                "id": "8a4c49ff-c41d-434d-a9a8-c94b096d334c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae245b8e-cd4b-45ed-82f5-53b0cbabadae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df2dafb9-39e8-4d40-8bbe-4eb8760154c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bd3881c-195c-4417-bd90-fec062df64e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e81a6efc-fd4d-426e-a3d2-2731ea10d751"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2905e6a2-724f-4083-8c81-46192e229c56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84504a08-132a-4c16-aa90-ee2ec9bbfbdc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3eb1dae2-d8e6-496b-b478-c822b9f9914a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5feea907-55dd-4c55-89d7-62825f13f7b6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "def2ac8d-3805-466f-ac32-a8d21147f6f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5ca7bf06-110f-427a-9870-a46143b2e42b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b53af07c-11ee-40e9-97c1-8a69fb12e7d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da55cadd-f7b7-44c5-b643-ece7d4758670"
            }
          }
        ]
      },
      {
        "id": "1258928d-dec3-401b-837f-60d5dbc35857",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5a68498b-d419-4019-a9f8-0635da99a1b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8edcf31-9ff7-400d-933a-bda4d26ad209",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "001f2704-6b01-4963-bf86-bccb144ed645",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e488423d-7858-4251-9916-676aed8067ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21da43ba-ca89-4cea-9760-3b49a5f72d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fcddc5-7301-400c-9da2-a0ab771ed6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa16a41-0d99-4eac-9967-1e1c156f1198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df6b7f4-44d0-4859-9134-a609ab44bf50",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08202bc5-0450-4daf-9d52-b9734ace4bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6798ebba-2654-48da-9d17-def2e368d56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cbbdc1-d88a-4015-bfdc-225b89c74831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e92bd81e-60f0-47a1-b694-0fbff9f7738d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d89ac3-e078-456f-a7e2-b6c86f37c546",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e803062a-668b-4ac9-ae30-f625050767c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742a40ea-5ff0-462f-96da-71fb8d19f756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856f5f35-7b24-4cf5-a734-e10e245813e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd999aa-ceb5-4dab-9301-3ae91bf15669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc8d3cf-f064-442c-8a6d-84c46ed785a9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a933000c-67c1-4ae0-a57f-dfdd2f9499d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4257641-4b38-4c6e-ac3a-f632028d7ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cd392d-c430-4194-a994-f657ea9c5f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3982f50d-0886-419d-b6a5-76873d49c60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfc2ce5-5d34-416d-8bca-f2f6d6a651ac",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa75701f-ee2b-4172-9a24-c612e17b62de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184e82d7-d029-4775-88d7-38d24788d8ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecdf608-ba72-45f4-80fe-7f124b6780bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5f79c3-806a-4203-a075-eef978121cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ea371b-9b69-4a5d-ae63-0cada3091a80",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af16aed7-f0e6-425a-9ac1-0636e6178c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02eb310d-ab8b-4ff0-847c-57551f7c062e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33849a1a-bab9-4185-97c3-111fc826f02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56fa5c50-8d50-4ff8-93ad-da9f7a8c00f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2be114-0a6e-4a2e-96de-88cd9a1f8030",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bd5b12-98b9-401f-998b-ac025fae0799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43dfaffa-53d9-4b45-9db5-a323bf9a5a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c17e59-6ca9-4772-a889-857221053578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e498ea08-731f-4e45-be79-717034b9fcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05e998b-10ce-4554-91ce-c0a64532a70c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17df9776-03e2-433c-8cd8-f133163a18a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25536f5-1076-40e5-bac3-a2d18f9e8090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f55c77-b62c-45d4-ab3b-8068c8fd25dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "735473a0-4365-41f3-b682-c102668e8d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a769d75-ba02-48c4-8670-8e1824ce2018",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7743f1-1b09-430a-ab4e-0649eea9372d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a67405-db1b-465b-bd9c-f73793aa1246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67add695-6f24-4e5e-befe-2b5c845f068d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c83b1185-99ac-49ff-9b22-e44ec184d979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711972fd-d46f-41d1-b1c4-5d290c934b3a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdbc804-3eb2-416c-8dd0-b3de893b67fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6611e147-6b8c-44e0-83f9-3be8be04d458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31d619a-bb5b-496b-b6db-1a2362acb7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a955bf79-dbff-4ea2-90f6-2dd955c1048f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df06dd6-db81-4984-8cae-5dac5d4c7cd7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c2d183-4c62-4a63-9c4f-dcc5d729d818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462b621c-24e6-48a6-b35b-eb709f04ce97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2058040d-75a8-4bc5-b376-e18809e18115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "902cc199-f607-4a13-b895-6dd2ece8044e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50582edc-d4b3-4ca7-9854-320beb3a4560",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a21b69-3bf7-4ad6-86c2-930222a55f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a3bc35-86d4-4ba0-884c-cb1e9f9880b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c43a260-439e-4d60-bb84-b3cafc311865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c353162e-254e-4eef-bcc1-bc495f927dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c993c8ce-a8fd-47a8-b3a2-c94a93864dd6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3bf83c-5ddd-4695-a0f4-f3d45724a118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d82d079-94e8-447d-bd83-4afa6251c1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00b2aa1-c3aa-4f62-bd5c-3c86ceb05a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50d4fb28-a83d-449b-84c7-d2ee8eed49fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2697517-caf6-4894-adce-8231c5fe354b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfbde2b-8d29-4d9f-8e56-3122c1888f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a3d278-2c17-4bd8-bfbc-65c6bc5e1bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ea3e20-d108-4bc6-8b17-58c76f33d308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "64c54ace-d17e-4b60-b88c-93bca447d02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb407e1-13b6-4410-ace9-ba4d7cc31e5a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6a65ee-e4da-43d3-a9e0-606815d775dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db19d1f3-84cb-4bdd-a713-3f36fe041f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d0e1f4-6b60-4453-b599-6add72274013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0540fd41-afd5-4458-90f3-bbbae766ac07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63577317-304c-4ec6-a46a-965e60f70b25",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dbb1d6-3791-45d1-b4ba-5b63711d064c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f2512f-b456-4b3a-9d4e-d5c9f26e7872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500d5ed0-25b1-4c84-afc8-755bda3f0969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "35041582-0f39-42a0-af3a-183632ba46d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816fbea4-f8c8-4eb5-82ca-796385b7c12d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66ebf6b-7e63-472e-844e-570711c5ae1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677d8b95-4960-4595-b326-82a75ef2117c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a90ae4-b600-4096-8200-fe759c71db03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e763d260-bad9-4338-86f7-df9287b5cd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33696c9-f1fb-4706-a537-b8761a2c7aec",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063067aa-027c-422e-ae27-5fd43ee3e956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d22c7a-b175-44ca-8094-c98067ec96cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48366aa7-2415-44cd-b0b6-2a2e46860bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd01d0f-ce97-4aee-a68e-d1e28d0d0f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdc5f5e-8029-4cf3-8e2e-101e039119ce",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d7c115-beac-4597-9d7d-318416801170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ce0aba-0279-4b05-bb40-d103b0c43be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09eac337-44cc-487d-bc01-c57a729ff984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa680bc-68e7-453d-9b14-3b65bbcd051c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ed18c6-fcd9-4382-8ba0-ade7c1e31b82",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0795163c-7eac-471c-993c-99aff21a22e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5eb398-7e96-4a7a-b4fc-b8f874ab45c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056ef575-5191-4496-bdc5-435c4d5bafdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f56d09a-3c9f-4850-af11-c67ac842d0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8b4e36-4a1d-4bf9-8d56-cd91082e27c0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9327b7bb-74d3-4244-b3ac-f3b4778d7ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66375daa-78c8-421b-939a-f17b9bcfac28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6628ba8d-efc4-4750-a6f5-8284f74d3816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beda04e7-96c7-46df-bf4a-6e0a61825cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e5d06d-95f1-4740-af5a-cdd09f81b326",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07c6eb6-fe6d-439b-b592-7c90543093eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3260b1bf-284c-46dd-9458-7cda89de7c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4212b51-7a6b-40b7-bec8-11d4c6f84a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e12d3923-642b-4f7b-8ec8-30eca833692b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7fab85-35ac-4cf2-bc54-a39dcfc72316",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b9b51a-d69c-4d2a-8f05-c85693f86ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e434dc1b-e8cd-4e43-9354-cbdf013cb13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e213852-9a58-408a-a91e-165e4c86296b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "026abbe9-1830-4fab-838a-0c5c20667153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2202ce20-21df-40fc-b24d-b0d9e9ab7486",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4722f59d-1b38-4182-926d-0be02aac616d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a4c84e-97bc-4b90-be2e-ccca2f5d1e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246ea28f-3f2a-4843-9bd3-6664d27a1f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9e0318-24f3-4817-8fae-dff5de0a94b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e042519c-13cc-40bc-92a0-04ffb98327c8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d08bf7-a81c-4e49-ab06-01a01978d02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695beec8-5fab-4fb2-a120-eb938e7c3555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12a5211-b3a1-41e6-9ab1-e3bceb6cb72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62f6cc24-c53e-4161-b322-a660c150c01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5022119f-9f73-4937-abf3-2ce3aace17ca",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78f75c9-6fe1-4959-81c3-fdf810308e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea38463-a332-40e4-9377-256864a35ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f985e22-cae7-468e-a8c7-6e23c8218776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "964c929e-18ff-4946-abe2-ed69b6f67d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4541bd5c-2b1f-4555-a76b-02d5cd2b778b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1a9ebb-9f0a-435f-8647-32562f34432d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196bb2e8-7ed8-4086-b567-d696e5e2a477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18753a9-eaff-42c5-b5c6-586353824293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fbbe2d-aa8f-4713-b9a8-2ccf660c67b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eecfa5b-b031-4f05-b88c-7ab6f697b848",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfcb64c-1b22-45b3-84ae-eef46dc723a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8659a84a-f8dd-42d1-8b14-0d0c0ba73a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4fd1a1-d8bf-43c1-8c27-fbdf78293819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ced8f4f-e8f6-46f7-8b42-10f22d00e192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77337fd9-3f3e-4c9b-abe9-804a44809a0b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4e4118-5ad6-43d2-a361-58cd9683e675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f90812-f30f-4fbb-8252-66da56c34cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9448023e-0df2-468b-bc3c-5952b6b9e67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98403797-867e-4b15-9a79-724e4bae8379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9995543c-db0a-41c0-91cb-6b10cb9b45ac",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586248cc-ea71-4706-a317-07d10e551926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74e754d-87c1-4bbf-8e2f-93fc0eff831c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45ebd05-68f2-44b6-a617-8bf82d26e9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6201d7-40dc-4cf8-8bd1-85c39ed7940d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ea12ff-3014-46cd-a8a4-8b3bade74b9c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6922bf88-586a-4c52-af0c-b75ea04f0da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be40cf4f-8532-42ce-afbb-a1cbcd0836fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64023f8-2526-4122-bbc2-24a850159f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8b7956-bca5-46ff-b13f-bde9c56c9530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17687d87-7829-449e-a49d-e2effc6accab",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13660c64-fcdb-40d9-8ab9-aa317ca82ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ab97b9-13b5-4033-8d2e-cfacb6ff32c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef68159-9756-474c-a055-5daa36b15281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23d7be06-46e2-45ef-8fde-4a40c1628878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8d268f-7e39-48ed-b6ee-c646ef23f271",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e298b21a-00f2-473a-b948-d50f752a75c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646bf954-54f0-4ba1-9891-b9d46dfb85fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b00c08a-9beb-4be9-8fd5-1330ea688026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e5e345-27ca-41bd-8711-56e572d44753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a55a1d3-d166-4ee9-abca-7194e5321b8d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb342b6-0b9b-4472-89d0-5d919fed4853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfefd1cb-07ce-4098-b89c-23a9e58f33f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03460179-7006-4a40-8bea-bff9fe8ed6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7929ef7b-fc87-4694-8e39-24bf0608d1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb394cf-274d-4ee0-9f46-67e385d06645",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa2eef2-3b99-4bf8-b139-453d543732bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d1cc82-a935-441e-b602-55c63a37d5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc25bb01-063b-4b07-89cd-9bba3c4c39f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1840c69-2874-4406-a5e7-b5b963f0d734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee2dda7-c2ad-47ec-993d-71591c524061",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd466639-dea6-4a5a-9fdc-3325ec4e4a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62d2d97-434a-4d17-9458-f6c43b80ed3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb0b0b4-c114-448f-9a24-0cc939a537fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef40884e-a0c5-4d4b-a50d-8db17fe697cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8841142d-318b-4826-b80b-af981357fd55",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5991de2-0195-4fd8-bca5-cf81b594b706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98353531-306c-4ca1-ac97-43bfb99ad52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7e33e9-ddc3-408b-b219-c978550552be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29c7186-f1d9-40b5-b965-c95a5e27cba8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee983202-8ffe-411f-823b-4c4b1ce9dec9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bf62390-bf62-493f-8f52-e62469ed0e39",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9973bdb2-927c-4d8b-a04d-ace7445c2784",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2c006e85-0357-4248-8b49-7c73a1e28e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b061b9-216e-4709-ac3f-3f5ad91b1c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1d4bfec-475f-409a-8db3-471d47d120c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a56c6cf-1afb-4e42-b5e6-c333e7a4d8d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b68cbea8-0abe-41ee-91ad-9c7d901387fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0ef5c45-87b8-414a-ae00-93a460e317be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccbe84e3-47ad-45dc-b3b9-1865fd651d00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc33a698-07c4-4f55-b9f2-cd006812406d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "afb11837-9ebe-4649-9011-b0e3858115e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a194353a-8eb1-4f7d-a307-a3e92ac01acf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7432ba50-e6ed-4ec6-89ea-8b175e36c7b4"
            }
          }
        ]
      },
      {
        "id": "3c55576b-5a8d-4d71-bbaf-50cd9bf4a58d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dd65b4a3-7755-42fe-ac1b-f736aaf42dc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a80d2a3-20d1-438a-b532-8dfeb5cd9f1f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bbde2675-e34a-4024-8e87-3e8837b136e9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58f80d7-7d58-48e6-a1e3-ae3906f7f9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1185f20b-b036-45f8-8d1b-c17426bdc96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4feb57-5b73-4cde-a607-09bf3c2d6514",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c880f8-602d-437d-a5c6-49aa70966122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111a55b2-24c5-4d12-ad7a-50a449d5bfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe35233f-43e4-4cdf-b828-0cd2b9bf6f22",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bcc445-8cc7-4951-9244-4d69bc00adb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92215d9b-41d8-4213-8b0f-070a1d25865a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1502721f-6cf5-41d8-8bbc-59a36657a487",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355f4252-e946-4b2c-b2a1-0d87e4417ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c7115d-4b5b-4c75-8f9a-0fce7a4ba6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cd6766-971d-48e4-a2d9-8bac754d07ec",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad49264-a1ac-4f2f-8eeb-398b3afb6b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1043edaf-7cf9-4e8b-9ddf-fc06c6518117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ef5c78-f851-4973-93c7-0be407f0c8ec",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd74893-d51a-4639-b32a-4f19ba5807cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e988ff-21aa-4761-9492-a01b0e7479e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131c9707-2e4b-4ade-a343-28f7c8c3654a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18d8221-04c6-48c3-bd7d-88a48e312f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "665d77c9-5457-40a3-a401-ee4c423ef4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864a3f5f-4a49-46f4-a2a5-52dbfe6560dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7293206f-f5d8-43cd-8654-1b3383691645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c09d0d7-477e-4170-91f8-46291e8e0427",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0aff71a-456f-48f9-b40c-ce468e18cec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "377b96a7-3ed2-4417-9df5-c2834dad4baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68234ac6-d0fb-4c3d-ac8f-1c0359e91371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5c6072-ec7c-45cf-b2e1-4938034d29d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762c871e-f89f-4564-8548-841ad37e1456",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74501fbb-02ee-46cd-8547-1164685b3705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbfc8df0-3a0c-42e3-ba15-717da997265e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90543e4c-fc8b-4091-8381-685b2806cc57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5752764f-ceae-4417-81ac-0b8f3fc47015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2669f23-fe09-4180-90ae-10413e260fa8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281c4be1-5dae-4c47-811e-1963585ea13a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c472b8e-33c5-4b27-96c7-586b8e6400c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e1264d-3074-4d94-8a88-b3b8c980980c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb630a6b-7245-4c72-9069-4bb837d08b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272b210f-772b-46c0-801e-c7df6d358743",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab02834-12af-4632-994d-56e3b0e74973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a00c1b8-e352-499e-a712-301a45b6b155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d170816a-b3fa-4963-af40-f12836fb920d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf6f0d3-a02c-482f-8001-410b1d818c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422f1466-6786-40b6-8a72-11a5615ac7e3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1548987-77ea-4fc0-af03-89b3bc20f9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12670a6f-5c77-4fa3-adc3-1ced584e3939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a90f00a-d85f-420e-9d87-9bf40381684d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae4f6c2-e30b-4f4d-8f0e-ae91795f14cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f0683d-3746-4069-ab73-f9980b0d900c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d517f23e-d221-49fd-b3be-215be9a6cecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d13a62-b529-49f5-bd8a-6175ee3f03d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09963eb-c870-435b-a685-dd06e2686610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b810498c-af31-41cd-80f9-6be2ac53f2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a06cae7-660a-47a4-a24d-837e93932bc7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a84849-f677-4f7c-9d07-9243c8aa952b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae591a5-3bd3-481f-a7b2-f65d3156c016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8f290c-47c2-4f3b-ae62-852ac38620ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a8d3fc-3d84-49f5-b572-f530ec7f3d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cbe21c-242d-47a4-966b-7d977fe950ca",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daff9f6-25e4-4d6b-a4a1-b711bc878a63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c518ee-3aa3-4745-bcf5-524eda5b2ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040f724d-f119-4be3-bb6a-f688cc67dcab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60d3b59-d22e-403b-960e-a8e3ce00f9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab1b43b-8019-4ba0-86cd-959f30ee543a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10651d35-1f53-4d18-8cd2-963ad5a793eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d6c908-0b9e-4bc3-a726-bcc900e0ee26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb53d7aa-be26-4b6f-9efc-67d91df716ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e040da-c36f-4a56-9940-549db26366f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e8ccfb-7fb9-49d3-ac5a-a2df8fbcd577",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7736cad6-f800-4c22-ac4b-4c2ab1f0854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15032026-d230-4b68-a618-ab8aaf6cb141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf2d990-f254-4e89-b4db-f69053efaf1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ed8a57-c348-4217-aea6-9b2067cf7a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d9487b-a77e-4ee7-ae2b-1acaddf861a2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518b3b84-f518-4aee-8172-c95eb3fb2282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eb2eb5-daa9-432f-a286-12fdd28b6cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d040f4-c3c9-4696-b91d-02b93fef38cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a45202-6659-418f-bdfd-e5ab67f27079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3860386-94ac-4afa-9f42-37b3743ae75d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2595b24-66ad-499d-9ebb-0344abb38a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8431db-061f-413c-afa9-9ae3b8138546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de80b415-e6a2-4df8-93fc-878ab8b0c558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af165ba5-9b16-4722-a04d-06b4a7dd1257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f64e4c3-e553-4ed8-8ba4-d1c434c05623",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fb8e47-ceea-48b3-9c1c-04bc4429b3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17a932e-7d1c-44b1-bb0d-c83009ec91ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e66a648-a94c-4dc4-a044-abe479ee1bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44eb8f7-e0e0-4a33-aff4-5bbf7bb26dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e1fd8e-e965-476b-88d7-d77722e8bb25",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc56a00e-65f8-4872-8a46-60faaecda76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509ab63f-c5df-4691-b602-458ce9c9534e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f68ad9-74d2-4247-8eb2-5b8714058c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7f7a23-7859-4881-a3d0-6f816189aef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402bd176-92a6-4502-bf82-e494061af632",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ef2670-6e87-47ee-b239-c2ba20dd58f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468ce0c9-dacd-4234-801f-47c92cf1e370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31b2d0e-6d38-4f25-a04d-459522c197d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864809e1-b15e-40ca-87e5-dc253bbee350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45214c1-552f-4ba4-910e-3fc4a0bf3979",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44518b06-467f-4f36-94e9-6971a455f9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172ce0c6-4143-4364-821d-4d1d999546db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3491d971-eafa-4cd2-a2e0-a6594d903efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a968c39-eb62-43b4-96c7-7865d8193ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd0a3e9-588b-45da-88bd-1d337b5bcd7d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb54a4ef-8b34-4f44-bfcf-b7c8228f6b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22b964a9-7be7-428b-ad79-16d97ddd69b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32937bf6-c2e7-40f5-b788-a1abd9da84d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfeefe3-e01d-4945-96f4-a40728f6b8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9574bd6-ced3-45b8-a5a5-9b289d272e09",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00676352-bddb-4c59-9ba3-0b440e9ce502",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e984a37-e5a6-4f8e-a00b-924424b0573e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772ddce0-fde4-4869-a8e0-265d32141558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be1b1cd-7f95-4754-bbc8-520f3944daa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64d8a77-c4dd-4f70-b4ed-b3ba1305099c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5ae9fd-82f9-43dc-a5a4-f20c853b71e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba761e00-c9ce-497f-99e3-f9d8af22c6a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15a1e53-5991-4054-8e1a-f73c89c874a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0434cd6-4aa3-4d09-bdc7-2e51b5bf55d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cf2c4c-efdc-4ad7-b481-523c42abf18d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f156d92-bae7-44ab-94d5-66340cc83784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5427c25e-fba1-4add-83ac-8f74c77cfee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86a1871-bc1f-4b9c-b581-60647ff58f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bce62b-0b8d-4490-9942-e02cbc413eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73aac11b-ff6b-4285-a403-227d3af562c0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e987dee-e598-4697-ad9f-f4d4da7a0653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773e4281-f558-4550-acf2-7b6752e9fe60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733abefb-9220-427b-a200-daab95b94bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f950d40b-4cd8-4b82-8fd9-a39c69fa6f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf00bf1-f952-46b5-b9cc-588de4f43240",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce897f9b-d4a0-472a-ad2f-3705b7857e73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bea6269-fb51-4ea6-b68e-3cdd90c15e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "076eddd7-3087-485d-8af5-5d4b196e1e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d4cf1e-ecd3-4e37-8f7a-27af08323d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6595ed55-5dec-4960-b11e-127d030848f6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672e6454-b749-461e-9d6e-e0269316e479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b699ee-0078-4d8d-98d1-71d4f78de40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b401d7e5-5dbb-451c-afa6-beef448bbdca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e350bff-4a7a-49fa-a91f-ed6e408c7567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cc0e0d-a33e-4b3f-84ed-ee3e88459509",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fdfed4-f0e2-454a-a0b8-d74b2da1427c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03d5eb71-6874-4192-8f04-c27a9861bf9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913970c8-006f-4d30-89dc-c688aa58668b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af70dae2-fc7f-4090-9be9-dfef5bb2c20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02aab1e2-ba87-4376-a766-6cf24f5f062e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a061fc8e-0314-404b-9811-157fd2f0519b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0711b299-060a-41b1-8a22-6eb13817075f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c264561c-3400-4525-8c3c-148bd062b942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ea2257-57cb-4c8e-84f4-a9536accb662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183013bf-d872-4bcb-ad4a-3233f8330641",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a66a02b-e802-4956-8fa8-691c9fdbb945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbd6fc0a-aad7-4fb7-a0c5-955a396ba7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7873c3-53e9-4331-bb22-2a2b87aa72c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268545c8-47a1-497e-8583-21f37a3ef114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ecd174-b0a6-4546-8f80-8e8b2d8cde21",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d077347f-fb24-441e-8bca-eeac410a8af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c81529-e13c-4b99-80eb-faa5d8b18cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976e7a23-b95c-4c5b-b3e7-d06c527f7bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef544c4e-ceb0-469c-9f9f-cda800dc2042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be49ce7f-7fcd-4994-b92b-e43705a070da",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6c5f33-dd21-458b-b718-a54b46c54725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f75b372-cd38-4b54-b28e-568c95adb7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c8ddf9-0dfa-4c84-9a5e-77d5833c37e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9868ff-c981-46d8-8765-db491d192e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0beed07-02d9-452e-8579-77095f6cc1de",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5397ce-a233-4b2d-b38d-a6d0e94a0f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7f7ce8-5e15-484e-893c-fd1e7ff1c483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37237753-3792-40e2-955e-7d36997c511e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7edc5ca2-2037-4abd-8649-e2f1a1767edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9af9a4b-a7e9-40db-929d-1961f5d73b8a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b431bc7c-2976-460c-9b25-8f1dbffd0ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca9dbc1a-18ec-43a5-9344-0b41140fbbda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1fe393-6da1-4d33-b150-5e8c083fde2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9afde6c-77f2-4781-b1e6-0e789c0aa16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe86b09-d37c-4ec8-a57a-0495cd4e2e0b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1531a00a-594f-4e67-b551-b37fa37b743c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df061224-6c35-4a5d-884d-73648eb31fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43015a32-8a5e-4295-99a6-1aabdc80a69d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a223fe3d-5f83-4dda-a1c5-6788ec9007d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82641c07-8e46-4841-990d-d799f8571784",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c52fa4-b6c4-46d5-a421-a215f6661907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a15906-3e6e-409d-ad72-008fa183ddcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72262de0-6f60-4d2d-bc4a-46e4b79cff50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ef6c5b-506e-455e-a772-e997910fead5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2064b4-1352-4286-afe7-af9d6b026684",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f2c4be-6b3a-4186-8a6b-86677d70d43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e22b9a5-875a-4363-8930-9ca274e2f0fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8a3044-0511-4659-94ef-0a9a695a0df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503ebbe2-83ca-4b73-8acf-93b6a63ac00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2ab24a-230d-4b47-978f-113745ba148b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5fa0b4-7907-42f9-b503-5a60be2ac670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ad50a6-e4cc-466c-8a9c-73765729d2a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e3ed0d-8265-440f-b197-5fa11d1f5500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb7e125-bb3c-408f-8da6-717fb411e430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5d241e-5892-422c-9de6-dc87267d1f81",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9e700a-9be6-44e8-9bdb-72b0c48ccd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1504af7c-5a25-4f8e-acc9-48bba8335b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69105964-80ad-49a8-85b4-aadeb04341fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f519de-361c-4e33-8b5d-507526d2dfd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ded9e1-e332-41b7-94b0-918adde7c9da",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba4394d-71ad-4fd5-a9cf-27533c3e1180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f39f3a9-8a08-47ec-a4b3-c81298509129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234ff58a-4871-4fd9-a73d-b2101c33e0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca436b14-f14b-4cba-9e35-53b140275f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a1d640-0e03-44a4-8b48-66e8c47c52e8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf8ac1b-7255-423f-9446-07a2d6868db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e54234-f9e8-47d6-974f-9938f85b9363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888d99f8-61a1-4321-9b02-810874708708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72b856b-aa22-4073-a09c-1db3bac263ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54238cb2-7895-47bb-934e-8b73cf4159df",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5860d234-d3b7-4451-b273-424171930a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7efb94d5-c7cf-48e3-8aba-90b3501b1913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a643a5-d896-4067-b2fe-2daeb3f59374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06110193-c7e0-45a7-b508-98a9e24b43f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1603c28c-0e1d-4724-a718-32a07d7ae66d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb354f6b-e975-4cb0-affe-f05ce48d5c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13733872-8e91-4ff2-a290-753d99c3b161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b68edd-b6a3-4ce7-8313-77c06839f2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf86365-f05e-4023-a01b-361d1dbf5bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93cf7cc-c111-499e-8cd2-30c4d8abfcd8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee55b20-9897-48da-95da-dd2aaf1f80e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef827739-4a46-4fe5-ace5-fab0d2df728c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e89f73-82fb-4ad4-b96c-eeaf97747254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5480c46-57b4-4c57-b1de-5def64b3f248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2532046a-00ec-45ba-8a39-f1234cec8d97",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf0e7d7-21e6-4707-be60-9eac244e707a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0703208-d1f6-4f2a-8926-a94fa4390c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44a942f-192e-4991-8274-3aa990b2e58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a281490d-c6f0-40f9-9fa6-aee5b970d5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50c8ef0-51fd-4f54-8d87-2e872788dfc6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e43f25e-23b1-4dc4-977c-c91d0bc2ce45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d980882-4e09-466e-9e8f-3dfe167b1f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab151ce6-5bf1-4da2-9f1c-4cd1b0da8639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6946cacc-085f-4535-af83-3e90265be360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b0a286-3545-4c2c-9e91-47f212b41d7e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b729ca19-e67f-4028-9685-8cc3c2dc1f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047bd4e1-66e4-42c6-b2fa-f7876af8212c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3691a9fc-2afe-4fc4-baf4-202c239bd694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeaa789c-d2a7-4fec-aecc-9c8d626ce5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470502e5-e6fc-4bb2-af65-9fcc0ceae5bc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0d6af7-3900-4f2b-9e72-8b9748f7f9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b781c23e-1b22-435d-8175-ae88a1af322f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7691565a-9157-4713-a713-dbe9c7f71cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bd2acf-e60e-47ba-bd85-a81219778d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681ad4c8-d1ae-4957-8590-7b65152eae19",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf05d6f9-afcf-43d0-ba72-3e3293e04521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545e02da-312e-4eb7-bb19-612103685d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0092b66c-de5a-4329-afaa-634ae6a329ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd564535-b7cd-4a32-b5a6-f1a3aa23fe27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0bf404-fc98-44da-841a-f67d1b38952d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743e9927-875d-4a5d-8e89-daf62fbdb33b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c759cd-0db3-41a1-8d07-965b69155ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c7fd5d-710d-4b27-ac63-30ccfdf205fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ca4b53-407f-4c09-aa29-e6c08d33f379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a39882-25b8-406e-83eb-737f5ba94173",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbe082c-a3bc-485a-9abb-1eaaa2eff752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "025fea5e-20fd-4fb3-94b8-c46ee69c8bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da817814-18d2-4878-a5be-22e94dd2d701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ffaecc-28b2-434a-8a04-da826626b45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72598470-8db9-41d4-87b5-2e5f055c1563",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd707bc3-adbb-4763-9b53-10a81d77fe04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a3514f-1313-4896-b2e5-8ff2f78f76d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e0ccf2-4dca-40d7-a880-ca33d38ec4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cca809b-bc56-45fb-8e58-b67a5d73f9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d48fca-8b76-4393-b516-d47f9eef03c1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eefd6886-ccd9-4a17-846e-b903847ddc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01dd12fe-94a1-4635-9e24-f9ea3dc52533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f04bd44-a642-430d-a60d-be4277b53bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8f2268-101f-4d7b-9443-c60598eca0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a5e8e9-a29b-42f1-88fa-1f2a60220c65",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0035abf-7a97-40b0-a849-c125d28db945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145000e4-7197-45af-8409-aa359c29afa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95c4f96-808b-4ce6-9ede-984b79661c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac450f24-89a8-49aa-8e7c-9b30bb5a3485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118d7c1e-2601-45f6-9a93-3e28ec91cfa6",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f558ec6-47de-458f-ab06-2ca5368b18df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e4054a-8f91-4109-a1d2-75f2d84081c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb8870e-acc0-4200-a4c3-3471a8f83400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90261c9-9cbc-4cdc-8b2b-6cd8f5d8021e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbd73fd-4a99-401d-af7e-4eefbf5373b5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea58f65-4719-49d6-b8af-65fcd61dad27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5361ce9f-d23f-4a22-9668-f638a46c353e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c2be63-7277-48c0-acff-026c882a3fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20c679c-2ead-418b-9cb8-db49f8433f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8361e84-86f9-4750-8daf-39307fffe0ca",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57802f39-de11-4881-a2b8-b5b36fde976f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8dc0fc-1b7b-4cdb-95e9-efb8263a681c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352a8a3a-9e9e-433c-a384-45b2a3aa0711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573e4550-f6da-47f4-a9ed-dc51abadcdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7da576-43d6-45df-8975-7e1d5375e49e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e671146a-87dd-45db-b110-5b880a137f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e0455a-4ff6-4331-a2cb-c32a3aea3cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4628781c-3f3e-468e-8578-3852c5f44152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077aa22e-93ab-4d9a-9c1e-27983c195674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c81153-36af-4776-bf77-54b3784458c4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b478daae-5e4b-42a2-878f-28042d4eb301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186ecb94-5d83-48e4-a8e2-f1ce2f2674df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c3ae16-8ba8-4a16-8f13-f0e759b2e0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a450989-94d9-4055-b3fe-a9b80be808bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345b867a-460f-44ad-9d28-ab1dcbbf055a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7338a434-9b59-4378-927a-d4d465d36113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef7411f-36f7-4e50-8d7f-520c87e5ea63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "552ba79d-b18a-4223-81ab-9e8d8628e6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0700fe45-0e7e-484b-971b-b78b6ba80c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c5e791-49bb-4151-a99f-1f38256f6fda",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b9645c-a385-4023-91be-90e6bc75e806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "055575fe-b65d-4186-bfb7-2771b21fdd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c34970-7a7f-47ef-a52e-df1dcd0e77c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27892264-724c-43d7-b635-3ee1888dd16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e7b8a9-d4c2-4579-8196-cecb2e6dc323",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eeb304f-48dd-4d81-9dbe-82609810e255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "286e09ce-d904-4eb4-b995-a93cae5ea854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e644a6b-0c5a-4b75-aecb-f10787c9105e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bef5bf-acdc-444a-826a-6878395c1ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e1e391-61e1-4c00-9851-a5ddd8eecd64",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d37d2f-542a-4c22-a289-e1834f310d0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ec9b81-0d69-41ef-84a9-8376bb24ed2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1e83b1-d498-48ee-9ba1-e6777b2433ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a55629d-fecf-4733-bb1d-43b1d7f30e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557fd1e6-e413-4064-8bde-81f64614f4f4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff189ac2-2d2e-4928-b48c-e9a294ff37e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "744feff0-ac21-4a81-a55d-143fe9787191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d67b7ae-1647-4211-8675-0e3f7fa71f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27248b1-c109-490b-ae35-f959f93f0e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3bf53e-1bb1-410c-8dbe-dddb63a87109",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b8ebc1-cde3-4e6e-b8f3-94567743da7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba192d56-c163-42ae-b6b7-c09560e0e508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59002680-0bca-4335-8c6d-8b65f799fb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c43ada-1474-45a3-bd06-c6f89dff5764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05f39e4-d5d6-43fe-8e8c-2e07d4dbda63",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf9cc88-d8f1-400a-9fa0-061670cde8af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73abd961-c179-477d-856a-f6083ce6f7c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170f1124-3b21-45f3-9b1f-e87f641b6b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc9a0fd-1333-472e-aba3-0942a919aeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef04e1f5-3357-4fe5-b860-a8c61945af28",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772902f8-94a9-407a-9e1d-75f05b21200d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1606f5b6-0b21-4891-93e2-78fa365da5c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe80e83-e86e-4ffd-8558-4d2b643eaae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d802b65a-721a-454b-9736-a5a6ff909d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd053055-07fc-4d42-8b7e-07fc1af1eaf0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef202abe-15a3-4dad-beec-1413da377e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e80498d-3e0c-4f18-96cf-523e03fb6fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bbe912-8d11-4f9a-ada8-985ba86ccc4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd065505-1edd-488e-877a-4ca96418b426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31379c5c-832a-4003-bafe-c51926b487a8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a7ba02-9205-4cb2-a916-af134915e577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d37a32d6-e33e-4094-b3a5-54e05f7ad5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6982fa-b8bb-4f77-b565-b72731acaec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45688343-734c-4def-86c0-9f82c8368c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3baa01-1b57-4823-827c-9d0a10f3fca7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f109bb4-d584-4a81-910f-55f31f1fde2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f7d3bfe-a61e-4ea3-815e-f45a08855586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956d98b5-d88b-48c2-83dd-27b99486d42b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c8427a-a1de-4505-8d62-7b42beabf099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97a9e38-ba6b-420a-9606-6385094160e9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26cc15e-d82d-43af-a0e9-fa08c942a38b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "904c5ea3-3a64-41b6-960e-c391694c5a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590708af-dd89-47ee-a6e0-9e231b26eefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc67fbe3-6b71-472c-8a53-fa5c62055830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f494d7d2-2615-4401-829e-2b2aad2adc4e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625c3042-9c29-4620-9ccf-7f175a162e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a6a6756-e66e-4a29-8b3e-55e69ba45e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165c3d48-d27c-40e9-891d-f38bfbf70d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91fc9a67-e59f-4e5d-8a1f-2fd0b7692106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8758dee6-90ff-430d-82f8-14c6df7ab953",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd2df34-d090-482c-a033-33d14c0ef59e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d15727c-84a0-4fa2-b424-28ceaa00bbf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d683aa-dc89-4f94-bda4-7b1c70c9e845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933059bd-e92e-45c6-816e-25f5142611af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca6b908-95ac-4552-9858-30ec26c3af0d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aab756-4c98-48a9-b09c-848376ef064f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ef4898-58b3-4627-afbc-0c598ae8e204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbb204d-b473-4ca7-8f46-58045dfa9c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a61d7077-1952-49f8-90a0-6899f9429b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493a53df-0b91-4c7e-acba-37e776df5ae8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac3b912-483b-4f6f-b00e-cd36be26981d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "320f2d74-9d39-493f-8441-3763fd6b0fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e950774c-6fd0-4cb4-b69a-34e6beeef3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd6a08b-c506-4952-9ba7-ad0bbca6aa02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12552f29-254d-405c-aa3a-243755370965",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef68fc63-d6b8-4428-a0e0-ef657011e0c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffed0d8c-2a91-49f0-8eac-11e103b8e61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7756101d-0cf3-4095-9735-be3c5bd326cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d10d58e-0752-4d33-9d99-7d303741e03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7863b6-f2f6-443f-8b32-689068b22c29",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ce6e2b-d7c0-4223-8b23-2b83a92e44f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a7e654-6415-4447-b75c-fb562fbb0c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647e43a0-c76c-4603-8f33-d38dca677b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409264f9-3667-4836-a843-0c99ee24dded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dc90d7-f7af-4dc5-a927-b95633c05bad",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e488c5-6f84-4c8f-a517-af0c93a9e333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcf15f03-f5db-42b1-9012-4d6db8c5cad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdde89a3-af9e-4de1-a7bf-7af2ea907e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b92ad9-a314-4078-abd3-f502c0f1987b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1a35c9-57b7-447f-bb23-fe5d73911637",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7467d422-ea24-4858-b5d3-8be7bc4b8d53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "884b42f6-bcfa-40a9-9ccc-00cc2677f975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a8c035-e699-44f6-b2fa-a439de0c0e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce4f0e6-fabf-4e0b-921e-13700b9b608c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89aa612-fc75-4cb4-b9d1-2599da57d647",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4c678d-b0aa-49e0-adff-11bda49dd390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03137ae4-eb05-4c1b-a9d4-35a4ac4a38c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c98740e-f3a0-4261-bea9-51aa30b43394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4ed957-8c3d-443f-8ca7-79cad8598d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6274b204-309c-4836-8d24-52e763322aa7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704e5adb-3cbe-4a50-90a1-a5285f9974cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61a20ac6-ba18-4c28-9a11-5995fb642a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4524b2-3f2e-4b83-8aa8-bef1be0065fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467d8b7a-3d43-48d5-a441-6c8912351eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bedb031-2096-4fb4-b026-d150fdaf6c16",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf892a4-98e8-4265-bee1-b9184d82b0d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57aebdae-76e4-457a-beb5-ce9d67f20175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7d7b94-1f4f-47ff-89c3-d8076341205f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86c47be-4fbb-447e-a86b-ff8a79cdddb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab14dbc-448a-4e33-b347-247a789fff2f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e513243d-639d-4e91-b991-975fd57fbcaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c59181-7ef8-4803-92ba-fe18fc99653f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d79f9a-7b2c-4f65-aa82-2046fa2e9002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a73214-eb48-4bff-adc1-af51cb91feef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872ccad5-48ab-49e6-bf5d-dd2faaaf242f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8c1d39-f766-4297-8688-61e807212c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89d22ab5-c9d9-4972-b4e3-aef141811b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9c32e7-2808-4743-beaf-d66056579ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4116af-85d0-475c-9216-bd7fb7e0d223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbb1c71-f88d-417b-ae7e-da2111170f11",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda79413-4695-455b-865b-ca8ba7c092b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d318a10f-384c-4d71-b2d2-4a4facd4eb8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8523d30-29b0-4ccf-8c6c-3a4f97dc2fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fc4265-d5e2-46d3-b190-07dddd6e4baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d3a745-db8f-48cf-a2b8-37a7b27e78d7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c5659a-0934-401d-ab89-ff42383cdf45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c7f3d70-abe7-4ddd-bfd3-01994808e77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f451739c-293b-413c-adc4-6e2f534b96d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334a2d45-cb35-481b-be0a-c698233c208e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ac87ca-d597-441d-9acd-c1c9bbff53c1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a73f33-14af-4472-b077-4caf7e905aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c77da00-d616-406b-a76b-1097971e2526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eacfde-31eb-46e0-b4da-62a5f350fcac",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b6e17e-59a1-424e-8006-3e841a9b0401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14f4811-4451-4baa-bd78-88b05b3d84a1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e1a6f6-766a-46f9-9ace-80548dc507ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "695b284b-37b2-4a14-b54b-cbdd92fcdaee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c52939b-7c28-46a0-97f5-35ffccdeadc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92b0e62-b6c2-4e9c-82e9-91278d5c729e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b817b8e-78f1-433f-abc1-6aae803c8e5a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4fb87a-f271-47d1-9611-e36f4cd5343a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ebad5ab-a9c2-4dc8-8f5b-eb03b5cb6aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a693079-045e-4481-a5b2-bdd6c413d492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4b01a6-40b4-4697-ad59-429f166a05d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301a4b46-35a7-4c36-921f-120c01a7ffed",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d37b7ca-4dbe-48aa-a00e-e805b6e54497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42fa687b-3597-46cd-bd61-5869ae6106d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa6211e-1c0c-4664-af87-63ee5d0e122f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78541ea8-e39c-4b4b-8d4e-4eac31e36d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc75dbb6-b8e8-49a1-a94d-0d19090bbad7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13758d4-03df-432e-bb9f-80e418ee4c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "467f1c55-9436-4d34-8ace-dc6b6c290067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e142099-b4ef-4295-a153-e09562823d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6570ac9d-570c-4a5f-972e-190d799fc10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d76496-0f06-4a4d-a616-d8caba770832",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcc13ad-d7ba-42bc-88e7-15dbd0a07903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67792fa5-8778-4f3e-8fac-c975870099fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a13a8b-dc2d-4015-97a2-0e18f55cfaaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6455b81c-71c3-4dfa-8b31-c63173a1ca51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488da1a2-9406-47b6-97fd-dae1d6b5733f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0316ca-3845-474f-8405-9c819f73735d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d862514-18db-463a-a1e5-62250f181728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58578ec7-7798-47e6-8f2a-e748bc1ba5b9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45e4a21-f922-4fca-b54c-66c85d5105fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edcc5182-04ae-4061-bf32-752ce4e010a4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cbade9-f2f4-4ed0-b6fa-0c0396aabd51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b68f59bf-dbce-4758-b2ab-e4725d250a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1bfdf2-15ff-4e63-a2cb-41653ba43373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11de7c1-5b84-4ea0-8cdd-249d1dc07c17"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5a18a49-fc47-417b-8ebc-77d48e50d312",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26d11fbc-4990-45c8-986b-e9f20259a822"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "878d1081-710f-4324-9a6a-c25b125316ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9d43ca1-7a36-4351-a721-196a0007045d"
                    }
                  }
                ]
              },
              {
                "id": "eef172cb-4827-4c28-bdd9-7e892961900e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b3f9978-198c-4384-a41f-f3b64b441d85",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a7cc8b-febb-4f82-814b-c90adec1860b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b631aac7-af0c-4f4e-8b6e-422d2a58c87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46d5c0c-e37d-412d-99a8-d4316309ef2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9cbd753-e059-42da-a460-d6c2cf7047fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7aac9c5-7e14-4e70-aa45-284196fca23b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f03916d-72af-4738-bf0e-c29327130d3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01f4dead-f30e-4910-8b5e-50c5afcd371d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9983c4af-d8f2-446e-935e-68c0336e00b5"
                    }
                  }
                ]
              },
              {
                "id": "64336fcc-e0a9-48b9-967a-8846cadee1eb",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c071453f-786a-43df-a288-a99cae843373",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16014ee2-0513-413a-919d-319c6709546f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d05fcc9b-d21d-4de1-b412-5bde61241893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd9c3db-3c66-41a4-a268-e0f142bae006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069d599f-3462-4ea9-bc9e-3784325c3967"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6368da0e-bbb0-4ee3-87c3-e40e0059e0c2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51e4f8ed-095b-4839-9514-f158a962fb80",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8991bf0-d7cc-4e08-a988-2694c5679361",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ddf239aa-9da9-4395-b10a-e4989216660c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "075985af-6b54-4d78-bf6d-58cc0a49d309",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "012bfbee-2f33-4450-996a-f8ab59ca8a39"
                    }
                  }
                ]
              },
              {
                "id": "eb53f377-bfe9-4638-a24b-50f57a0463fc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5b850e3-f0e0-4332-8f57-a8698285e4ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0aff724b-64b8-466a-b731-f3adce7821df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a949c283-fa42-4bfe-925f-86217d1b8edd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bf13e22-119d-4f60-bb90-dd7dcdc337ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "044ec8b6-9a13-4d51-870c-de7234effdd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "38a4f62d-faf5-4a1e-b62c-b025954fc81d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "482ef9cc-744a-47fb-bc81-fd975608a317",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a28f92f2-c30d-4dbb-963e-2f2dbf35b6ec"
            }
          }
        ]
      },
      {
        "id": "88c409f9-4826-4bdb-bf50-4bc52391c7a5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e812094e-ecbf-4626-83ab-26b1359ecf8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "619ec7a9-4a59-4957-9e53-c015afe55763",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c655d2f2-1d33-4dfb-978b-4d3b9b325356",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c098e193-f0c9-4aff-9ffe-4de5bcaa5fe7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f0048a00-0a6b-4758-b8ab-30e0c20c14c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86520264-84f6-4fd9-997b-c904e4520f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59a4633b-1de0-4324-b1d9-39272d9a00dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3af1d9b-8221-495d-bb80-31cfe49efb8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f45d6f16-bc5d-4eab-8976-809e576dae82"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e80ca575-4802-48e5-b1d4-9c6f66274426",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4f92b03-2f29-4b81-828c-3724e8c85e64"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "587b13b1-3fc9-4f54-bf7d-2c101dd09275",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bbb559bc-ab65-49b6-bae6-9c81ec57230d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8985d05-41f3-4c61-83ae-9bafa5ad10a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a606f07b-6ec8-4ef1-83cb-ddcfde21de3d"
            }
          }
        ]
      },
      {
        "id": "43c413c9-b80b-4dfa-8e78-9c72a85276e2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4838fb58-05f1-4c46-a618-bfb8505e6c03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acdaddc5-a7f5-4a12-ab50-7ae1e2f992f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1cb8b6ed-4d9e-4d66-9c64-0153735f0110",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9733bb-6d5d-4648-a2a6-1a17d9bdfbbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81d5d5da-72e2-4e4a-a523-19e96b72db30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b49a9d-1266-4612-adb4-c104e6aa933c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63973cef-8b66-4ec8-b927-fe203e0f746a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b3a0ab8-1bad-4a81-b69b-2c5eac7f6d4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6acb88d-5b8d-4725-aff6-e2756a5f7f07"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cba63610-dc13-415b-ae24-5a63aa75bf73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4926f662-e27c-47c7-8108-f9e38d9046ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31ccfe49-7f2c-4a34-be24-21f8bd440ef1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "29e80781-c800-4021-a25a-c1cded59053e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4cf69ec2-5c3a-44e9-aad1-54d1bca3cf71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aeefe062-76bd-47ab-b529-8d0852941804"
            }
          }
        ]
      },
      {
        "id": "4a455819-d585-4595-9838-23468f7c4400",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "01326298-7f53-4523-8884-2b4ec1ee8b6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "440f3cfa-1764-4bed-b680-50254e197ded",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cdc5139-fd29-4b8c-9c5c-b877353bd38b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ea0707-11b5-470c-b2a8-d13db3061efe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1be2c376-815d-482e-ac96-4261559ed8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32421b29-e64f-4a8a-ac07-dab3b77eb0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc1a6619-5992-46f6-a251-a728d0a33f0c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "067c6193-24a5-4342-90b6-11db4f0fb60c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33baba94-1a26-4ff5-8807-bae1f17ef992"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d961fbd-e2f5-433f-b651-cfe449e86c4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6200dfb-677f-4fc8-8d4d-09294d52805d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1b0265a-dae5-4c17-b6fd-efb4e8cd6edf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8cbdbe8c-38d5-4f39-908d-58dbda65d743"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd245ba6-3655-4ac7-a2f4-2f58ff98ea69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a298933-fbc9-4044-b70b-87ad02005d8e"
            }
          }
        ]
      },
      {
        "id": "62dae7b8-19ff-4737-aab1-efc6b5fc2343",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb419313-653d-44c1-bdc3-7671d48e73b7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a64f68d-9959-4b6d-adc2-5b76b6601c47",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "55093db8-e288-4f52-8eae-667dc6cd7c1c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e84e7fe-12b7-4dc8-bcfe-53cffdbd77ed",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f3133a7-9dcb-4181-9cec-986fe8905dad",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 121.32142857142858,
      "responseMin": 22,
      "responseMax": 821,
      "responseSd": 89.15611785144158,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717202402183,
      "completed": 1717202441214
    },
    "executions": [
      {
        "id": "9f96e86c-08a5-4fa6-845e-db8b14bac387",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "847346c0-0ba7-467b-8fec-5e9a1a949fb5",
          "httpRequestId": "f2a93b97-96a6-4019-9294-cc1ed9b7b065"
        },
        "item": {
          "id": "9f96e86c-08a5-4fa6-845e-db8b14bac387",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "715067c3-3f7d-4ab0-ac0a-dfe715fe66e1",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "538f9fd5-29f3-4b4d-bf5c-027ef21c1e91",
        "cursor": {
          "ref": "6ec1209d-dc0f-4883-89ae-59f2cef3d37e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "77c2e17e-17e8-450d-9348-f2689d9cd3e5"
        },
        "item": {
          "id": "538f9fd5-29f3-4b4d-bf5c-027ef21c1e91",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6f108e58-6b38-4945-aade-d413f33a36df",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "8380d716-7b21-4fa1-bcc2-ee1de79cacb9",
        "cursor": {
          "ref": "b071305a-d383-4699-826d-59ff73354ce2",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0e26b61b-44a9-40f7-bb49-1e9170efe423"
        },
        "item": {
          "id": "8380d716-7b21-4fa1-bcc2-ee1de79cacb9",
          "name": "did_json"
        },
        "response": {
          "id": "898af109-7171-4bf6-943f-9e60b5298729",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ccb9c8-a73b-4cff-ad57-8443d8728604",
        "cursor": {
          "ref": "a8df4de5-7d0c-4cf8-8adf-4a160c5fe6b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c7b8af47-d61f-4b3a-bda7-6f2f31ae10e1"
        },
        "item": {
          "id": "64ccb9c8-a73b-4cff-ad57-8443d8728604",
          "name": "did:invalid"
        },
        "response": {
          "id": "41ac2edd-e65e-4f6a-b460-c3f6e01d88ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ccb9c8-a73b-4cff-ad57-8443d8728604",
        "cursor": {
          "ref": "a8df4de5-7d0c-4cf8-8adf-4a160c5fe6b1",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c7b8af47-d61f-4b3a-bda7-6f2f31ae10e1"
        },
        "item": {
          "id": "64ccb9c8-a73b-4cff-ad57-8443d8728604",
          "name": "did:invalid"
        },
        "response": {
          "id": "41ac2edd-e65e-4f6a-b460-c3f6e01d88ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae03529-a61e-4488-ac24-b2ead904c8bc",
        "cursor": {
          "ref": "374a660f-cc8a-4031-9f88-e8fdb1f8360a",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2f08ba67-3184-47d0-86bb-7a9458fd7812"
        },
        "item": {
          "id": "cae03529-a61e-4488-ac24-b2ead904c8bc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dbce09e8-f3d9-40c1-9198-eae19822c214",
          "status": "Not Found",
          "code": 404,
          "responseTime": 442,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0020641-8bc6-472b-8936-e47e75f3f703",
        "cursor": {
          "ref": "8b20a456-9698-4dfa-a647-68f54a5dc8f6",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd8039b9-4356-4df1-ad1c-68aafed7ac59"
        },
        "item": {
          "id": "b0020641-8bc6-472b-8936-e47e75f3f703",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cd605311-3a29-4f38-8f24-5e9423bd3424",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a942fa3b-9fbf-4a37-9510-ee0f24204b99",
        "cursor": {
          "ref": "0e5535e5-a626-4227-8070-52c533f2ecd9",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "51f6dc76-c23d-4f74-b98a-f4529da93887"
        },
        "item": {
          "id": "a942fa3b-9fbf-4a37-9510-ee0f24204b99",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d9c74b13-31d2-4d82-90e6-b6652b455d6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784cf4c7-3bf9-40ad-b5b4-e1f5db8d19cc",
        "cursor": {
          "ref": "54e36b9a-b6bc-44e8-a940-022730d35af9",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8ce6860c-21f1-4b9b-8e9d-459c8d5eb969"
        },
        "item": {
          "id": "784cf4c7-3bf9-40ad-b5b4-e1f5db8d19cc",
          "name": "identifiers"
        },
        "response": {
          "id": "17b2f71e-67cc-4e6a-aa3a-94e4c23f999b",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32748396-c4b4-4815-8a81-844f4fca5904",
        "cursor": {
          "ref": "7a765b84-a696-4afb-bba3-b9b7f30eb042",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "890f5439-0243-428b-b8e8-d2ebcd3aa817"
        },
        "item": {
          "id": "32748396-c4b4-4815-8a81-844f4fca5904",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39c01349-4026-4396-8877-67d8fa6e7900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ef1cbf-1c28-4aad-96d0-ad5d5ab30477",
        "cursor": {
          "ref": "90e2ea03-b819-43b4-801b-c8798f8510c2",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "54e3f732-41e5-4d5c-829e-a04654a5a951"
        },
        "item": {
          "id": "39ef1cbf-1c28-4aad-96d0-ad5d5ab30477",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9c33cb17-1b82-46fe-8917-a90512971e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cebec3e-a37f-44a7-a674-513f0bd92d0f",
        "cursor": {
          "ref": "be695ae2-69f5-4caa-a7d0-0e62e6ed55c4",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9954f0c7-331f-4520-897d-f3ebf2b1b568"
        },
        "item": {
          "id": "4cebec3e-a37f-44a7-a674-513f0bd92d0f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e8231833-00a8-4d2f-99f9-d3144c5c44bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6815ac6b-666e-46a2-a640-75c310062ceb",
        "cursor": {
          "ref": "73d5a858-3713-4ed9-8b2b-901bc8749d21",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0c130ef3-4dbf-485c-b27a-a14c06b8b3a6"
        },
        "item": {
          "id": "6815ac6b-666e-46a2-a640-75c310062ceb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3d18cd20-69db-480b-b5ce-fd502e54800c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f5ec8d-b5b5-4c01-9495-9f3efc0dfaa8",
        "cursor": {
          "ref": "7edcfc65-8d99-4cd0-85a8-219655790e7b",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "aa9321fb-8556-49b0-b793-df53c338c856"
        },
        "item": {
          "id": "a6f5ec8d-b5b5-4c01-9495-9f3efc0dfaa8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "28288a37-edae-41c2-b4e5-b27fa5a07e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4a7ca9-bf18-4b98-993c-002e219547d2",
        "cursor": {
          "ref": "15c39876-59a2-44e5-867c-40cc895c4b20",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bb59616a-81a6-4b6b-882c-bb869564c0bf"
        },
        "item": {
          "id": "cb4a7ca9-bf18-4b98-993c-002e219547d2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ebd30415-5bb8-42bb-be09-c3fac0b184e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47305bf9-9d2d-4b06-9e5e-446dccc65003",
        "cursor": {
          "ref": "6eb1cd5a-e150-496f-a14e-0663ea5c676c",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7f5ca7b6-603d-492f-9a39-41bfa167a32c"
        },
        "item": {
          "id": "47305bf9-9d2d-4b06-9e5e-446dccc65003",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5962f34a-6430-44d3-8205-28181abc75ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cab3fa-3a07-4d22-86bd-e83d24dcd830",
        "cursor": {
          "ref": "d9a62ed3-de2e-452c-b10b-de0ccd4c97bf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "33a2f535-1513-42c7-9f58-92708ce2f3af"
        },
        "item": {
          "id": "a9cab3fa-3a07-4d22-86bd-e83d24dcd830",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bfcb7aa8-c5be-4d9c-b3bb-8868fc5d3d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260ca4b9-145a-431b-bc66-adf6a01abd03",
        "cursor": {
          "ref": "324482a5-6e97-46ef-90b7-a7800c13740f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9e952813-e1b5-4700-8ccf-bdf50043a238"
        },
        "item": {
          "id": "260ca4b9-145a-431b-bc66-adf6a01abd03",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1c2e3a89-45cd-4cd4-b8e3-19bae2c233b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e053db8f-51f7-43ff-9e36-e6afdfa3ee08",
        "cursor": {
          "ref": "a7f973bd-ec73-4c97-b049-e315058aceb1",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9d815c96-07b8-4f7f-86c4-53de529f1ede"
        },
        "item": {
          "id": "e053db8f-51f7-43ff-9e36-e6afdfa3ee08",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d3c334ed-0691-431b-aaa7-cc91db255652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea184d57-1091-4e3a-a583-ddfd78f50ec1",
        "cursor": {
          "ref": "242c2046-b7c9-4559-93d6-b76a823f3431",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b156cbf8-ccde-4f17-91aa-79f1f4f39862"
        },
        "item": {
          "id": "ea184d57-1091-4e3a-a583-ddfd78f50ec1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b2001560-9e22-4278-ab6a-3074c3a6e1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2e1468-25e1-4c0d-9765-828068356570",
        "cursor": {
          "ref": "150cae3e-280d-436e-8de7-9ad46cba0605",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4093da62-6e95-42e3-86e3-55649c0e81a7"
        },
        "item": {
          "id": "8e2e1468-25e1-4c0d-9765-828068356570",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "45aa9b64-1683-438c-9980-926d49073167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fcffbd-9182-4580-a16b-b51527c68f15",
        "cursor": {
          "ref": "f930a464-988b-42a0-a45b-951731cd4aa4",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3f6434f0-b03c-4e4a-aa7e-c4db080daddd"
        },
        "item": {
          "id": "27fcffbd-9182-4580-a16b-b51527c68f15",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a753edd2-9193-4821-bbd0-efa4edc7d04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e4ca13-da84-4630-9093-d551e0d41052",
        "cursor": {
          "ref": "598eb268-ed87-488e-83ce-a2cda0717434",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1bc95f4f-9347-4bce-9286-4c1b084170cf"
        },
        "item": {
          "id": "50e4ca13-da84-4630-9093-d551e0d41052",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "14fbf000-df91-4d72-8cd7-e5fa556b0670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fb0a57-28f3-4070-b30f-4ebdd7de4704",
        "cursor": {
          "ref": "0d4fbf9a-bbfb-4d4b-99e4-8654ffe9c724",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "45a0ff59-ad36-4bf6-b0e3-5cfd99563a0e"
        },
        "item": {
          "id": "d5fb0a57-28f3-4070-b30f-4ebdd7de4704",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4ffcab29-d595-4e45-8e5f-2f9adb000c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f54184-d004-4885-89df-82f28fd2deda",
        "cursor": {
          "ref": "697a5bd2-9a4e-4a63-8c67-36d0f46867ee",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7ee6cd42-fcbb-446b-9e00-8e21bf2529b4"
        },
        "item": {
          "id": "f9f54184-d004-4885-89df-82f28fd2deda",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fc68f014-d5c2-40f4-a9fe-1fa8e78da23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a1125f-88d4-4552-91e4-7ce3b45ef154",
        "cursor": {
          "ref": "bdc5621d-d1dd-4f1a-8ec6-e55f8d86fcef",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "620b8c04-c0d5-4261-ab61-393b7c3c76be"
        },
        "item": {
          "id": "29a1125f-88d4-4552-91e4-7ce3b45ef154",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cbade7f0-e7b7-411a-b50d-a6d2358487e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bd4cb1-418e-4278-8ed1-59629bc1bdd0",
        "cursor": {
          "ref": "db951311-b513-4af3-a9f8-727ca6ee0f78",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3a86fc63-23f6-4dad-ab59-fd36ad7fe331"
        },
        "item": {
          "id": "c8bd4cb1-418e-4278-8ed1-59629bc1bdd0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b4407310-bdaa-41b6-ba03-d9486e2d88a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1e84ba-1a45-44e3-90b4-05ec6249557d",
        "cursor": {
          "ref": "916c222a-6c41-459f-a9a7-23cc1289a877",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ec20071b-e8e2-4fe3-b45e-1c2b92b1147b"
        },
        "item": {
          "id": "7c1e84ba-1a45-44e3-90b4-05ec6249557d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5dd2d6bc-fa99-4e58-b941-6cc5c6b867e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f90d0e-4a65-441b-a92f-57de25967557",
        "cursor": {
          "ref": "3589950a-f454-4399-b6d3-e900d57aad86",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "97940d8a-728c-406d-a733-8f0500dd3197"
        },
        "item": {
          "id": "b8f90d0e-4a65-441b-a92f-57de25967557",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4c297e94-3d55-4eb3-ba58-49314593d37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1773ffd-ba82-464b-bb2e-1c2d3dc503eb",
        "cursor": {
          "ref": "cc610f10-39f8-4ec6-8d80-3f5d02cce2ff",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "125c9add-7d30-4d1f-a72f-a9607ee6b624"
        },
        "item": {
          "id": "c1773ffd-ba82-464b-bb2e-1c2d3dc503eb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dd425b84-592d-4e2c-a83f-78685a0c422e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad384afa-eee6-4bbd-8c37-4f1758d9cd83",
        "cursor": {
          "ref": "46149dd3-fa2b-4355-869d-4b67f02e1107",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "98995c34-b4de-4e35-9599-6918616fa4fd"
        },
        "item": {
          "id": "ad384afa-eee6-4bbd-8c37-4f1758d9cd83",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d1b4fe4b-71c6-4d01-891b-f11089aff771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca6c20c-e571-4c3f-a11f-d1b9e7bc72e4",
        "cursor": {
          "ref": "6ac62c3f-f5ea-4f24-9d28-9b8350bb548d",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0100d487-a3d2-45e8-b262-0dc881b016ab"
        },
        "item": {
          "id": "5ca6c20c-e571-4c3f-a11f-d1b9e7bc72e4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6d1a1658-9c36-4331-8d7c-7cec21fd61ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ecb61d-d994-4855-9d8c-267e89764fc8",
        "cursor": {
          "ref": "c9fe40af-0813-4b94-8053-02ea672c0c76",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f0517974-a3f3-488c-b5d9-6ee37f5762a7"
        },
        "item": {
          "id": "b7ecb61d-d994-4855-9d8c-267e89764fc8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cc72aa75-3c36-4f39-920b-ccd22c5caaac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccc18d5-2551-40d6-940a-b4aaaa03fb63",
        "cursor": {
          "ref": "2d6ff170-69c8-4b11-b6da-ba42eddf6656",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6999d1f7-ab30-487d-99d8-c850ea4de21e"
        },
        "item": {
          "id": "1ccc18d5-2551-40d6-940a-b4aaaa03fb63",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "062c956f-9d4f-4aeb-a54f-64827c3b1244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b8b9ff-d17c-4f4c-bd61-35d761b3caa9",
        "cursor": {
          "ref": "34fa0c5c-dbd3-4be1-97aa-7de97191c351",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4405a505-694f-4802-8aef-ed40d4cf6466"
        },
        "item": {
          "id": "f2b8b9ff-d17c-4f4c-bd61-35d761b3caa9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "088ac666-4606-4fa8-80a8-16ddb9023a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a546481b-d39f-4fbf-8dbb-8a8e7a2bd235",
        "cursor": {
          "ref": "0e53e40b-6c63-4f77-97ef-25457856aecc",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b392f121-a437-4876-8a77-5b74e53d5bb6"
        },
        "item": {
          "id": "a546481b-d39f-4fbf-8dbb-8a8e7a2bd235",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "787a980e-9eba-4c31-a862-12dda066b224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387a1690-30ee-41e1-a101-8c2f244997bc",
        "cursor": {
          "ref": "9efe9899-eb12-4744-aa53-d7ddb883d4a6",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a89f4183-f37b-4b61-b123-6cec7dc0463d"
        },
        "item": {
          "id": "387a1690-30ee-41e1-a101-8c2f244997bc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "aa1eca8f-5530-42ef-8e51-ae4dcfc646fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c848101-2668-4d2e-9c8c-640c9de0c382",
        "cursor": {
          "ref": "9d67755c-f5c6-4ec1-9b47-8b288405e263",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "96b8408f-0729-4c7f-aaf9-dfc520b2e76f"
        },
        "item": {
          "id": "4c848101-2668-4d2e-9c8c-640c9de0c382",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1b91c68d-3dc0-438b-a20e-1bf280d233ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c3f263-eea3-47f2-ae6d-d4b8c2333abb",
        "cursor": {
          "ref": "06972493-e77c-4ed3-8952-d2a80373e06b",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0f1d0ff0-b59f-4c7d-8d48-b1ead6a1ceca"
        },
        "item": {
          "id": "05c3f263-eea3-47f2-ae6d-d4b8c2333abb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d6d35ac0-0dea-4f29-be7b-7cc622314d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8edc9ae-74c6-4f71-a41a-10ad48d1f7d0",
        "cursor": {
          "ref": "605157c5-e87d-49a1-b965-3f205ba37e8e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "50ec4238-6b5f-4bc8-b51e-70a4af422e23"
        },
        "item": {
          "id": "f8edc9ae-74c6-4f71-a41a-10ad48d1f7d0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "28a164cc-0138-4dbd-90ed-f9d54607e944",
          "status": "Created",
          "code": 201,
          "responseTime": 821,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "86dff390-cb7b-44e4-ad94-eef89bcf99fa",
        "cursor": {
          "ref": "719a99e0-00ef-48e1-b3a1-7673334f1a4a",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "71b127fe-dfc5-4a6c-b674-1e045bb30035"
        },
        "item": {
          "id": "86dff390-cb7b-44e4-ad94-eef89bcf99fa",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f992fb6e-1667-4094-bd23-33b42ae42863",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f0a9fa13-0af0-4896-af3e-13dc236caf1c",
        "cursor": {
          "ref": "2a04e519-c404-4e65-819d-85123a4abff0",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4c87c68b-8899-4833-a581-7e5fa7d13500"
        },
        "item": {
          "id": "f0a9fa13-0af0-4896-af3e-13dc236caf1c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "aaf11c98-b4cd-4066-8e92-ed402349def6",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9b6d4bc1-7686-4adb-9706-2d7dffabd293",
        "cursor": {
          "ref": "9f612e0f-fb19-431c-acdb-672c2eeb6b9b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "324cef61-9eb4-4ec4-87dc-d94816e9e834"
        },
        "item": {
          "id": "9b6d4bc1-7686-4adb-9706-2d7dffabd293",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ea495953-4801-4d53-84cd-bf1b272e1877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946749a7-2b73-46d3-bfde-9239a8d67d32",
        "cursor": {
          "ref": "8943b733-0ee4-4fd9-9d45-1af6aa1c13ad",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "955b591f-b990-449f-a7e4-7770f540ae18"
        },
        "item": {
          "id": "946749a7-2b73-46d3-bfde-9239a8d67d32",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b6dcdd06-5f35-4f65-8608-e096d6c1191c",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3ec77c67-1fcc-4da5-aea4-3e0b48117d5d",
        "cursor": {
          "ref": "64b30819-a2af-4408-97ce-6e8e20107d3d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9e859099-f72d-4348-a33e-6817d83521c0"
        },
        "item": {
          "id": "3ec77c67-1fcc-4da5-aea4-3e0b48117d5d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "efe1a66e-971a-4619-a061-3d4ea06483eb",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0c5f6edc-6613-4c0b-9329-e1bc704f75f3",
        "cursor": {
          "ref": "0c3c0454-0425-440b-b3b9-752ba443d45e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0a782535-49a0-4f0c-b46c-94f637a63ed7"
        },
        "item": {
          "id": "0c5f6edc-6613-4c0b-9329-e1bc704f75f3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "75be9ccb-b49a-4992-ba7a-7bb073fe08d2",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2bdbffa3-b68d-48c0-8cc5-228bfb8e995b",
        "cursor": {
          "ref": "d504db66-1df7-401b-83bd-068c0909c7d3",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c3e6e261-4031-463a-af9c-6f88cb0e1e35"
        },
        "item": {
          "id": "2bdbffa3-b68d-48c0-8cc5-228bfb8e995b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f7408b6b-513f-461a-b581-6ac5b3aa41bf",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2e2ec65e-34d6-4f9e-a217-6b754b1a1a6a",
        "cursor": {
          "ref": "844049fa-2e30-47fe-a902-bcf1bcfd485a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fae24995-a41b-4ab6-82da-75de48e54e99"
        },
        "item": {
          "id": "2e2ec65e-34d6-4f9e-a217-6b754b1a1a6a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b261042b-418c-4b00-af77-27f4ff0e4cbc",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "34032089-0dd2-4024-af3f-bd6bc9893f59",
        "cursor": {
          "ref": "565a051b-84d3-407e-8069-2e98047c5511",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7ec8b146-ebef-4d1c-a327-a352430575df"
        },
        "item": {
          "id": "34032089-0dd2-4024-af3f-bd6bc9893f59",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "82016d08-b50d-45e7-a7ed-8e7587cb7889",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "25871834-34bf-4060-bbb6-9f60733d184c",
        "cursor": {
          "ref": "d0206ecb-72f4-4f08-95dd-de1e30d96436",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ee24d4ce-b29e-49d7-ba96-210a311f3abb"
        },
        "item": {
          "id": "25871834-34bf-4060-bbb6-9f60733d184c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4411d479-36ba-47c3-9b79-8207c79c4765",
          "status": "Created",
          "code": 201,
          "responseTime": 363,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f8e587c1-ca0a-4cbc-9486-5c64f1e3b4b1",
        "cursor": {
          "ref": "b65558f0-99bb-454b-9e14-c50e74d36279",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "86041b83-5c6e-42d2-ba6a-b626c5074b65"
        },
        "item": {
          "id": "f8e587c1-ca0a-4cbc-9486-5c64f1e3b4b1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3a3f5557-8868-4154-9dff-804052025403",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d0332e4a-1f04-4682-9426-39a62e5f1ef2",
        "cursor": {
          "ref": "c0efb5ba-0376-4793-9a53-5dc65a142c37",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f96a6fc9-d3d7-466d-8ee7-71f8c4b75311"
        },
        "item": {
          "id": "d0332e4a-1f04-4682-9426-39a62e5f1ef2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "89639f77-39b8-4bc5-8944-7ef340c2cc12",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a81530d0-55bc-4e61-89c6-cbb72e64d454",
        "cursor": {
          "ref": "06ee6809-aed6-4d4f-8190-fd36ff8266b6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d1f87d74-29e8-4be9-b0e6-720cbc9c480d"
        },
        "item": {
          "id": "a81530d0-55bc-4e61-89c6-cbb72e64d454",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "491dfdee-ce32-45e3-92a4-27297383417c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed24391b-5c5e-4775-b5a1-84139d668392",
        "cursor": {
          "ref": "c1632b5a-c61f-4db0-840d-0eba8f75f9eb",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e8892e91-2fe1-47e1-949c-e7081045cfdc"
        },
        "item": {
          "id": "ed24391b-5c5e-4775-b5a1-84139d668392",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0f7e81e0-2d4c-488e-829f-c5ffac3e4914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39c8392-d2c6-4333-93d9-647c5ae0b9f3",
        "cursor": {
          "ref": "4e06ea22-958b-4571-a39c-9d996a6efac7",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "096a9188-e160-48c3-aa09-28c11c1222e5"
        },
        "item": {
          "id": "a39c8392-d2c6-4333-93d9-647c5ae0b9f3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "336eaf6c-4665-4f44-82f9-640563a7e646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8832f176-85b6-438c-90fb-815291713963",
        "cursor": {
          "ref": "8cef8ea7-f92f-40fa-a97e-179f6f87b2d8",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4de5b5ae-102e-4325-b158-e0df8817bd4e"
        },
        "item": {
          "id": "8832f176-85b6-438c-90fb-815291713963",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9b5adaac-1b24-4366-96a9-4d08462c3657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138fe6ea-cb92-4b7d-a08d-d4eeac3d40f8",
        "cursor": {
          "ref": "7f65cb65-99e7-437d-91f8-7b48f6a0d496",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3f610247-3067-4fb7-a8db-3840a7c28747"
        },
        "item": {
          "id": "138fe6ea-cb92-4b7d-a08d-d4eeac3d40f8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7578e31e-cfd4-4447-b98a-14d045825028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b31e717-86da-4340-bbee-c36fbaaffa59",
        "cursor": {
          "ref": "9bfebb98-b106-4eda-90e3-a9e4c8fc243c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6126c35f-a95b-4a81-b8a1-e58e538e38b2"
        },
        "item": {
          "id": "5b31e717-86da-4340-bbee-c36fbaaffa59",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "69d391fc-43c9-4f5c-8b8d-553046d97e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c959dd1-2806-4e33-a93d-7732c2256cf4",
        "cursor": {
          "ref": "3d776d71-3e48-47c0-ae3b-61e7f2eae101",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bb001e8d-750b-48ad-8b1d-b82a36333166"
        },
        "item": {
          "id": "1c959dd1-2806-4e33-a93d-7732c2256cf4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eff32d04-66d4-41b3-baf1-ba0d8b47f854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3543eeb3-ae50-4b30-844a-7e3bae65a7e1",
        "cursor": {
          "ref": "a1dcc0ae-92fa-4c1b-8956-270a25d630f9",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c12bf172-fc95-47b8-b39c-99dffee05d7b"
        },
        "item": {
          "id": "3543eeb3-ae50-4b30-844a-7e3bae65a7e1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "94a08321-77a0-451d-8810-3009021fa348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4258b08-48d7-41c8-ad0d-ffe919535b17",
        "cursor": {
          "ref": "cf1eba8c-2066-4fe5-9929-9eab8eac7719",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9d9c2d03-f5f4-4006-b2f0-866128d7da90"
        },
        "item": {
          "id": "e4258b08-48d7-41c8-ad0d-ffe919535b17",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d9797300-e31e-455e-a256-ac545cf58303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b92753a-a61b-4e57-b06e-6b72c43cf9a2",
        "cursor": {
          "ref": "d1910888-b53e-4c38-90da-d914598a0b29",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e46d3f50-90e4-4b16-bcb9-cc263cb50620"
        },
        "item": {
          "id": "5b92753a-a61b-4e57-b06e-6b72c43cf9a2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dd8fc6b5-2422-4a95-8072-029dbae714f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6e19d2-0c93-4b2c-9be9-7d316b6cabcd",
        "cursor": {
          "ref": "a9228192-8dda-45ad-afef-5b00cf12a361",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5e339156-3c86-4e13-849b-de0459dd963e"
        },
        "item": {
          "id": "ff6e19d2-0c93-4b2c-9be9-7d316b6cabcd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0d7babc5-46bf-43e9-8602-5e2a25acb8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42625d1-205d-4975-8552-aee2b4a9407c",
        "cursor": {
          "ref": "a577e321-391f-4e0a-b786-f084ca0579e9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7b6cba76-d73a-40f2-9abf-289d3483ec92"
        },
        "item": {
          "id": "e42625d1-205d-4975-8552-aee2b4a9407c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b60e2a2c-fa7d-4d88-9021-5a55cb8eb455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce59d0a4-cf7e-469b-b294-eaabc0335619",
        "cursor": {
          "ref": "b15bc165-1ecf-418f-bec5-ab0788173960",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e1933330-be8c-40dc-bbbb-7d190b3342e7"
        },
        "item": {
          "id": "ce59d0a4-cf7e-469b-b294-eaabc0335619",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "13fa9ce6-2b7c-44f2-af95-c62bbfe99e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea64c28-9ae9-49ab-865d-d812028d50f3",
        "cursor": {
          "ref": "2dd1d929-3b7e-43b7-aade-559092b644ad",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a48b35ff-9975-4f43-a680-352b731f9c23"
        },
        "item": {
          "id": "2ea64c28-9ae9-49ab-865d-d812028d50f3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "75070455-97e0-4c74-8896-427263c15d10",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f6c2fce4-6ae1-42e6-99d2-9bd5d233e6d5",
        "cursor": {
          "ref": "4bd68eef-5f16-4d88-b2c8-ee437e59d4ab",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5990fe40-e300-4969-98dc-25ad11a02579"
        },
        "item": {
          "id": "f6c2fce4-6ae1-42e6-99d2-9bd5d233e6d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ced7c092-b804-49b1-8f05-aa11c0b3f2d4",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "362dc399-645d-43db-b482-fff2270f285c",
        "cursor": {
          "ref": "a856b72f-7e8d-4c07-b135-bb1e45ce2132",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8adc02d0-03ab-4599-8c6e-b7294f8d4564"
        },
        "item": {
          "id": "362dc399-645d-43db-b482-fff2270f285c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "53a95c72-7ff5-47ca-9463-a57a7d9e99e2",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b51107f5-b749-4087-8ed6-fb2cd677cb25",
        "cursor": {
          "ref": "90249553-7a9d-4685-922f-30d0bfeaba55",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4b8047bd-80f2-45ff-8de2-a100a2005358"
        },
        "item": {
          "id": "b51107f5-b749-4087-8ed6-fb2cd677cb25",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "56ffc10c-d100-4aef-bf5f-039b12ed86cd",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "07389513-1709-42be-8488-a1105770fc77",
        "cursor": {
          "ref": "be5ccc70-cdb2-44f7-b549-eb659f8281de",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a70be97f-2a19-4d36-a2da-18f6f88e1793"
        },
        "item": {
          "id": "07389513-1709-42be-8488-a1105770fc77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5bc0ef4a-cd36-4378-bc03-2cb09f3cdd5f",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8917b309-77c2-4a3a-ac0f-a42565baf088",
        "cursor": {
          "ref": "2e40c495-8377-4aa4-b3ec-79cc68f00491",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5b8a8add-42b6-4c84-a222-00c636d24bab"
        },
        "item": {
          "id": "8917b309-77c2-4a3a-ac0f-a42565baf088",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c7fa678a-72d1-4741-893d-c2a29b21a580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfccbcfb-1478-4065-896c-db168fd952c6",
        "cursor": {
          "ref": "6f549bb7-cee1-45fb-9cc9-2d0dadd3b794",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d9d5fb63-7db6-4964-9660-9c04209879b1"
        },
        "item": {
          "id": "dfccbcfb-1478-4065-896c-db168fd952c6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "aaf5bf12-9e2a-497f-97d0-23413f4780f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40615f41-106e-43c4-ab72-a60d574bd099",
        "cursor": {
          "ref": "629da47f-339d-46a9-88f6-2731f7ed150c",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7122e53d-1f8e-4d73-b23a-98f5339cf4a6"
        },
        "item": {
          "id": "40615f41-106e-43c4-ab72-a60d574bd099",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1c635957-35c7-478d-be04-5dd83b65478f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538e7041-0040-49e0-80b6-b754defc2140",
        "cursor": {
          "ref": "1f4159a1-d915-43e6-b635-a063ae3d01ab",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5ccb42b6-6bf9-4f34-b712-1be9a362f288"
        },
        "item": {
          "id": "538e7041-0040-49e0-80b6-b754defc2140",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "09ec5c29-19ca-4c90-92a7-7372a8d42522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cd8f80-973d-4769-844f-e4c0e1c166ed",
        "cursor": {
          "ref": "c1c11f9c-a2f8-4a9a-896f-f54eabeae12a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c728b4ba-68e7-4da1-8955-514367a0961a"
        },
        "item": {
          "id": "68cd8f80-973d-4769-844f-e4c0e1c166ed",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4b909d97-a996-4bb5-9d54-39e8a4444fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc4b1ad-3c62-41d1-8db5-08efa032840d",
        "cursor": {
          "ref": "852b116c-c144-40dc-b7bb-000259364814",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ba0a744d-fc30-40fb-9674-3e0f39aae7bc"
        },
        "item": {
          "id": "9fc4b1ad-3c62-41d1-8db5-08efa032840d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f9d48fc6-7b39-44a1-8e35-83d07d423e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8175cb-21e5-4b9b-a3c4-0f7231140020",
        "cursor": {
          "ref": "4c8b0ed5-d93d-4be3-a0af-1f6b1c7ec3c3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7723bd65-6cab-4a70-a65c-cda194e5c54a"
        },
        "item": {
          "id": "ba8175cb-21e5-4b9b-a3c4-0f7231140020",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4f01993b-d9f1-4de9-af08-45e0b7d9f930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af3b2aa-9962-4250-96cc-563fec08e305",
        "cursor": {
          "ref": "393dc420-150a-42ef-b830-f6dfe5c8869d",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c9aaf87a-7770-4173-8446-530360526ed5"
        },
        "item": {
          "id": "7af3b2aa-9962-4250-96cc-563fec08e305",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ebdc473e-86b2-4073-a732-d8c608b437a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ec6c6a-a9fe-48fd-9b45-ede959bdadc7",
        "cursor": {
          "ref": "6606ede5-a4b6-414d-a9e4-3eba5ba6b196",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7a9eed5c-0699-430d-8e16-ee33575b410b"
        },
        "item": {
          "id": "a8ec6c6a-a9fe-48fd-9b45-ede959bdadc7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8781feb8-f9d9-4eec-ac13-cdf1e4ce5dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8c4c3a-62ef-40ea-a82c-2be91bd11ee1",
        "cursor": {
          "ref": "f6d8a1c1-3b1e-43eb-bd58-d59693cbf2ff",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d419229f-30cf-4253-a693-74864e5d94f0"
        },
        "item": {
          "id": "0f8c4c3a-62ef-40ea-a82c-2be91bd11ee1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dc2129ce-cc55-4a32-b467-d0f264b32df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa052f0-44f9-4bdf-921d-fde0091e83b8",
        "cursor": {
          "ref": "03cdf84e-3fca-48aa-9222-a89ec3262bfe",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "96c50141-fd19-4921-ba9d-d1c48cd8a37b"
        },
        "item": {
          "id": "6fa052f0-44f9-4bdf-921d-fde0091e83b8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5cebf537-e344-4dbf-b61f-6ce82bed888b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02da581a-9285-4bc8-9866-253dac9ea880",
        "cursor": {
          "ref": "53a71de9-4b2c-4e96-9b3d-6270061da471",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6c637dea-de95-44c7-93d6-83c08d8875f2"
        },
        "item": {
          "id": "02da581a-9285-4bc8-9866-253dac9ea880",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8b0c9d53-840a-449d-a1d0-86b6f7d9bed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ba58d1-884e-429c-81b2-5f514e566d05",
        "cursor": {
          "ref": "efe8da6a-a80a-42bf-a102-305edabe6192",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e451fe5d-be2e-4033-a290-6bbf459bcee2"
        },
        "item": {
          "id": "b5ba58d1-884e-429c-81b2-5f514e566d05",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4aaa5a67-e7a6-49dc-b3f4-ab02db2e7056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6989d7b-0d25-4c10-b34f-55f99bc11dfe",
        "cursor": {
          "ref": "b2e5cefd-f580-4c9b-b8c3-9fd8d01cbf0d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fce395b1-662a-41cf-ab16-5a96bfe538a7"
        },
        "item": {
          "id": "b6989d7b-0d25-4c10-b34f-55f99bc11dfe",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "93e4d92c-7768-4927-9b87-d6b6e55796c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1360a1-32fa-4703-89cf-14a34592fb50",
        "cursor": {
          "ref": "248135d5-1f13-4593-aa94-388df1bd8c74",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1de2ca13-d81d-4e79-b6b9-9b384a48916d"
        },
        "item": {
          "id": "bc1360a1-32fa-4703-89cf-14a34592fb50",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cc89eb2c-9ac6-4a89-82e1-3eeeb2e371cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48218966-5e4e-44e0-91e3-0264a12c1aa3",
        "cursor": {
          "ref": "58482628-5eee-4c3f-a41f-cc0704d7e32d",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "18bd7183-c7b1-4bc9-8855-aaf26d1812d0"
        },
        "item": {
          "id": "48218966-5e4e-44e0-91e3-0264a12c1aa3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b891af87-9e1b-4c1a-b648-2018bf0bbda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4b39ba-056d-4285-a663-88b14c0c5ee3",
        "cursor": {
          "ref": "221b6d6d-d5c4-44be-8be4-7fb5edefa44d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ec3a3998-b22b-4d28-8313-6758aff60a43"
        },
        "item": {
          "id": "6b4b39ba-056d-4285-a663-88b14c0c5ee3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d3279fcb-b5ef-44b0-bda6-b1d03e03fcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b559aad-c355-4a99-ad7d-cfba1e67da25",
        "cursor": {
          "ref": "26911965-ed09-4d73-8331-933e622d3552",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b5f336b5-2790-4235-a3bd-d22ed164fb91"
        },
        "item": {
          "id": "7b559aad-c355-4a99-ad7d-cfba1e67da25",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9fcaf9a7-755f-49c4-9322-7d64dbef6570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305a7eb5-588f-4675-ac8e-d06d24610658",
        "cursor": {
          "ref": "88bbe1bb-5020-463e-b649-2792317a76a1",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1e23b8fb-c0dc-4a02-b082-17fe4a70be66"
        },
        "item": {
          "id": "305a7eb5-588f-4675-ac8e-d06d24610658",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "65b8c40f-2668-45f3-a4c8-6d1d24e05010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac8ec14-110a-4596-a653-098504b9c580",
        "cursor": {
          "ref": "0ce2989e-b2ba-44a8-be26-4782e2647c6e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6f7d484c-1337-410c-bd24-4d03fa826c54"
        },
        "item": {
          "id": "9ac8ec14-110a-4596-a653-098504b9c580",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5a916706-d919-4e26-9d71-925505bd6df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271ef956-42a5-44c0-87c3-6da22e678771",
        "cursor": {
          "ref": "b42a55b4-1809-46b2-864f-289a64255abd",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a67a3796-6b21-4aaa-94a3-345476885bdb"
        },
        "item": {
          "id": "271ef956-42a5-44c0-87c3-6da22e678771",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "532bacda-7631-4780-8523-e9ec2cd5d5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9e3d65-03a3-49f5-9383-f443c0808558",
        "cursor": {
          "ref": "0918b3a4-ab1c-4c37-acb6-bc2b34a0f0f2",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7859e2b5-bb6e-4031-811b-00d858a3f4b4"
        },
        "item": {
          "id": "6c9e3d65-03a3-49f5-9383-f443c0808558",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "abb30038-7b72-4048-a8af-aa2b34548c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364d397d-878b-4ab5-9af4-24c35375fbb3",
        "cursor": {
          "ref": "c4f79047-86ee-4afb-a217-f2db50664caa",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "aaec19da-55ce-4b97-b945-4349c7392816"
        },
        "item": {
          "id": "364d397d-878b-4ab5-9af4-24c35375fbb3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f6de2452-8b8e-43f6-9d49-5e7f89b090c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06ad104-ca15-41ec-8049-eb2e0ae8c875",
        "cursor": {
          "ref": "abbf7e9a-bd1c-4d01-a426-f3a4eef4d99a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1895d4b4-83d4-4d39-95c5-e280abc9c160"
        },
        "item": {
          "id": "d06ad104-ca15-41ec-8049-eb2e0ae8c875",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a8b393b7-de9f-491c-a661-f46d6eb4697e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e7410b-f9ca-48f8-95b4-472ed6eed424",
        "cursor": {
          "ref": "3caadb5d-a33a-4426-9e06-5efb4261e7d0",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9c9a4857-f87e-4cbf-ba8d-152d55e66e30"
        },
        "item": {
          "id": "25e7410b-f9ca-48f8-95b4-472ed6eed424",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "82e0d317-a5ad-4f34-a393-1e17edee27ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f140085-61b0-4811-930f-d3a4512fc7c7",
        "cursor": {
          "ref": "bcc808b8-129f-4364-afa3-5fb326c96763",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "75594dac-9111-4108-b0ab-e5bfa540fba5"
        },
        "item": {
          "id": "2f140085-61b0-4811-930f-d3a4512fc7c7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ff80e1a2-96c8-4fa2-8fc0-1c3c41fb9c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1ceea7-7416-480a-8e6c-57bf42ba42c5",
        "cursor": {
          "ref": "97bbbe11-751a-4881-b042-1a82e7bf4bbb",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9fd2c508-1f82-4779-8417-fc5d34cdc049"
        },
        "item": {
          "id": "9c1ceea7-7416-480a-8e6c-57bf42ba42c5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3face5e9-b6f0-4f12-94b0-0efb1a5ff208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600b1d46-83dd-4062-8f39-b1a035221795",
        "cursor": {
          "ref": "582c7af3-730e-4111-a379-8b6303270baf",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bd93e63c-80aa-48af-a0e6-45c61e528a45"
        },
        "item": {
          "id": "600b1d46-83dd-4062-8f39-b1a035221795",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "df454d5d-35d3-4b64-a395-dc97e1f8c1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7023ca83-0bbd-4a4b-99be-4a1417e70312",
        "cursor": {
          "ref": "5355a4fd-02d1-448a-9061-d3fabb3876c4",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b0019c4c-0e97-4a20-a22e-fb944d3ed18c"
        },
        "item": {
          "id": "7023ca83-0bbd-4a4b-99be-4a1417e70312",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "64d651f0-12c6-4cf7-b587-e490424907b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575b8d0e-0092-4ec5-8e95-1c3e336ccf66",
        "cursor": {
          "ref": "f7a9fff5-8b8f-4ec1-a052-fa00b86923e4",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6b23a06f-be70-42de-a423-62bd97f47184"
        },
        "item": {
          "id": "575b8d0e-0092-4ec5-8e95-1c3e336ccf66",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6f43e4aa-bd2e-4b61-a866-1a2df12f0b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e841de5-6d38-4b20-ae96-bcbdbb3161de",
        "cursor": {
          "ref": "f008d83a-ffdd-4a9b-b4d3-ce66c34a985e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "797599c8-ad26-4363-8518-451c8e27edd8"
        },
        "item": {
          "id": "2e841de5-6d38-4b20-ae96-bcbdbb3161de",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ed103437-219a-4f8f-a080-9fa854a8ad8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39595b82-06a1-4e88-a7ef-4ecb26d4e748",
        "cursor": {
          "ref": "6fd336ff-7bba-4f2e-9322-1766bd185a9b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9b7ee352-59b4-40ca-9832-c8f82c4e3a09"
        },
        "item": {
          "id": "39595b82-06a1-4e88-a7ef-4ecb26d4e748",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "44b2def8-32e0-4f98-8be4-44f46ab9c9e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee25cc9-0fd2-4853-b27a-f1b379f20549",
        "cursor": {
          "ref": "b20abab4-8771-40a3-aa63-5ef7ed1fe127",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a37c46e1-f7e7-4d75-9e8d-cf49bab89a2d"
        },
        "item": {
          "id": "dee25cc9-0fd2-4853-b27a-f1b379f20549",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ab00c049-2879-4971-8c54-eb391b320a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cf91040d-2001-45a2-a08d-ba4e11c22d33",
        "cursor": {
          "ref": "e4f47803-61c1-48b8-9d7c-70a78335f929",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "56dcbf35-80e7-44ce-a60b-6cab3edaba19"
        },
        "item": {
          "id": "cf91040d-2001-45a2-a08d-ba4e11c22d33",
          "name": "credentials_issue"
        },
        "response": {
          "id": "df198174-4adb-4d22-a851-59766f381ef5",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36629eb-b185-4e4d-8fb6-d2b32b5b354c",
        "cursor": {
          "ref": "e641f7f8-aca6-4897-97db-544a1653cbbe",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "af25c933-2c78-4660-8875-4e4ac1da3c09"
        },
        "item": {
          "id": "c36629eb-b185-4e4d-8fb6-d2b32b5b354c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f521732d-ac6e-4dfc-87c0-ea8d37fa1128",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2830cf-7408-4050-95d2-bf257bb33473",
        "cursor": {
          "ref": "4a4f4f4c-579b-4573-8564-711703c0ba2f",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f37ef054-9421-484b-8ebd-8ea9cd1b13f1"
        },
        "item": {
          "id": "dd2830cf-7408-4050-95d2-bf257bb33473",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b92bde75-9b7d-4a24-bc43-9ffe5cf15817",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32330d5e-2bca-435c-9226-c0b340945f08",
        "cursor": {
          "ref": "c00be16d-7743-49e3-9f95-2f57dbc97629",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8330bd13-a159-4782-b31d-72a156fd7cb6"
        },
        "item": {
          "id": "32330d5e-2bca-435c-9226-c0b340945f08",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5c5dbb1b-e168-4972-9862-6c45dcd6b43c",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7688a617-c985-4e16-9f0d-79778744e7a6",
        "cursor": {
          "ref": "4d111d91-50f9-4e35-bd2f-aa27bdcdf3d7",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c9498bb7-73a1-4ecc-8761-28b4bf05f0d8"
        },
        "item": {
          "id": "7688a617-c985-4e16-9f0d-79778744e7a6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a1108ae0-a317-4bbd-b3e4-3df26386879c",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-01T00:40:22.448Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-01T00:40:22.448Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8a4c49ff-c41d-434d-a9a8-c94b096d334c",
        "cursor": {
          "ref": "f8493d1e-7022-490f-bb17-c4f04afa2c7b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a40c469a-8c42-4724-9889-5d1345f41971"
        },
        "item": {
          "id": "8a4c49ff-c41d-434d-a9a8-c94b096d334c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4ff97974-841e-42db-90ae-9f003e024dc7",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001f2704-6b01-4963-bf86-bccb144ed645",
        "cursor": {
          "ref": "36bf33ff-9b28-4220-85a0-db8721f6d829",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1b1d80bb-1bb3-4daa-9aec-3ba9ef34f1a6"
        },
        "item": {
          "id": "001f2704-6b01-4963-bf86-bccb144ed645",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "24c1a9fb-8bdc-4fb5-b7c7-18eaddd586fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df6b7f4-44d0-4859-9134-a609ab44bf50",
        "cursor": {
          "ref": "8b383f6e-ab8a-49de-adee-75f376e63f7a",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "de65093e-ef17-49ce-bdff-b2727ad23d5d"
        },
        "item": {
          "id": "6df6b7f4-44d0-4859-9134-a609ab44bf50",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "696c4d83-e59f-4f71-a216-a2ed31a073a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d89ac3-e078-456f-a7e2-b6c86f37c546",
        "cursor": {
          "ref": "0d270d89-6bcd-4afe-a5a5-9336154a66b5",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6a9e9abf-2643-4b90-9175-407e5166bc5e"
        },
        "item": {
          "id": "72d89ac3-e078-456f-a7e2-b6c86f37c546",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "93079dc3-b523-4897-9e5d-9894b8de071b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc8d3cf-f064-442c-8a6d-84c46ed785a9",
        "cursor": {
          "ref": "6d5d23e5-4e6f-423b-8d4d-93cc4905c77c",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5b8d0edf-e62f-416c-a7e4-6b289f42be87"
        },
        "item": {
          "id": "8dc8d3cf-f064-442c-8a6d-84c46ed785a9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7c25555a-5e81-491c-97fc-e31a01154b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfc2ce5-5d34-416d-8bca-f2f6d6a651ac",
        "cursor": {
          "ref": "01b9658e-178d-4f3f-aa2f-8d3a2f41b1a1",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e5c70cdd-ba7a-4764-93fc-528ceea58df4"
        },
        "item": {
          "id": "3bfc2ce5-5d34-416d-8bca-f2f6d6a651ac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "698b1583-00f3-4154-9fb8-cfbe1fedd597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ea371b-9b69-4a5d-ae63-0cada3091a80",
        "cursor": {
          "ref": "e98fddab-cd6f-4c5f-a51f-224d5d8ece62",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "dc2be42c-3584-490f-8a34-3bfec4eb0919"
        },
        "item": {
          "id": "a6ea371b-9b69-4a5d-ae63-0cada3091a80",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "133ee468-a601-44aa-8a7c-ac6ae73a6681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2be114-0a6e-4a2e-96de-88cd9a1f8030",
        "cursor": {
          "ref": "d3f40467-b661-4b05-8e7c-d9437f8459ee",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5f748e7d-9ba0-4f65-9d3a-da767f1a2937"
        },
        "item": {
          "id": "9e2be114-0a6e-4a2e-96de-88cd9a1f8030",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "226f2f30-1e98-428a-b35c-7b581e343f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05e998b-10ce-4554-91ce-c0a64532a70c",
        "cursor": {
          "ref": "2a81eb48-f156-4cf4-a1da-c790f15ae9e5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fdac8b23-fc94-4352-938e-b65c8dab581a"
        },
        "item": {
          "id": "e05e998b-10ce-4554-91ce-c0a64532a70c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "221f8bff-a106-4259-9115-6f926a4d9cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a769d75-ba02-48c4-8670-8e1824ce2018",
        "cursor": {
          "ref": "91ecbd94-d02e-4714-94a3-ddd4b7295efa",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e5633b02-31ca-4eb4-b763-3f73a5a190fb"
        },
        "item": {
          "id": "7a769d75-ba02-48c4-8670-8e1824ce2018",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3e8a3601-7e7c-40d2-b95e-d25ad95f9bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711972fd-d46f-41d1-b1c4-5d290c934b3a",
        "cursor": {
          "ref": "dc411499-b471-4ffd-9801-71f7754daed1",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d9d60789-6bdc-4322-a7c9-d9689b564898"
        },
        "item": {
          "id": "711972fd-d46f-41d1-b1c4-5d290c934b3a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d3e359cb-7849-4c6a-8b7c-50e0c1b6e41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df06dd6-db81-4984-8cae-5dac5d4c7cd7",
        "cursor": {
          "ref": "16e0ea20-0727-4935-b80b-d2882103347a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "272da0a4-00d2-4283-8775-73458f106b1e"
        },
        "item": {
          "id": "3df06dd6-db81-4984-8cae-5dac5d4c7cd7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c99aa370-d9c4-4ca6-bafb-a8b39e7ec5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50582edc-d4b3-4ca7-9854-320beb3a4560",
        "cursor": {
          "ref": "546b3e9c-322d-49da-b7a7-50b9af4071e2",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6db13921-3079-48b1-9bb2-3d98d0b9b4cb"
        },
        "item": {
          "id": "50582edc-d4b3-4ca7-9854-320beb3a4560",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a79f3752-bd1f-440f-959e-3b2b70ae1213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c993c8ce-a8fd-47a8-b3a2-c94a93864dd6",
        "cursor": {
          "ref": "3cdf947a-b296-443a-a8be-d9d12b9dd645",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "90573415-f48c-4515-a99d-ac7e7414bc7e"
        },
        "item": {
          "id": "c993c8ce-a8fd-47a8-b3a2-c94a93864dd6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ce36382d-9dac-458e-8229-dd559adbf266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2697517-caf6-4894-adce-8231c5fe354b",
        "cursor": {
          "ref": "32f06109-19d9-4f9f-8cd4-0cd740a59eea",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "80a695ee-8804-49e3-b575-b30741e34b0f"
        },
        "item": {
          "id": "f2697517-caf6-4894-adce-8231c5fe354b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c69e1521-aca7-413b-96e6-2643d71f5977",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 197,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2eb407e1-13b6-4410-ace9-ba4d7cc31e5a",
        "cursor": {
          "ref": "dbccec1f-b21a-4a9f-81a5-39095c8c2f20",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b632d7b2-91a1-47a7-8b2c-2b5125ddfe40"
        },
        "item": {
          "id": "2eb407e1-13b6-4410-ace9-ba4d7cc31e5a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1b826f0f-a091-4042-be2d-736546b761c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63577317-304c-4ec6-a46a-965e60f70b25",
        "cursor": {
          "ref": "bbc68b9b-d0b0-43a1-8a51-d4e3eda8fd1b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "66cd11ea-9caf-4948-996b-886f40a50dd5"
        },
        "item": {
          "id": "63577317-304c-4ec6-a46a-965e60f70b25",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f3ec06d9-d3c0-4d5f-893b-43be521af7e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816fbea4-f8c8-4eb5-82ca-796385b7c12d",
        "cursor": {
          "ref": "f9902246-f3e0-4d1b-9848-b339b9ba8721",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9362c14b-bdcd-4546-9bc3-0f09ba271016"
        },
        "item": {
          "id": "816fbea4-f8c8-4eb5-82ca-796385b7c12d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d6bf4f32-942b-4dfc-bb2b-278f17e51473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33696c9-f1fb-4706-a537-b8761a2c7aec",
        "cursor": {
          "ref": "c26bda0f-f5c8-4628-bbf2-aca2b866d4d7",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ceae616f-a379-4733-a7c5-17c56e0e5ca2"
        },
        "item": {
          "id": "e33696c9-f1fb-4706-a537-b8761a2c7aec",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "feae9565-c14c-4ac1-897f-a859ff00ac82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdc5f5e-8029-4cf3-8e2e-101e039119ce",
        "cursor": {
          "ref": "1380276b-00e2-46e8-a422-108e44c4fc56",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7c0d0d12-fef7-464b-aa12-117ebf518083"
        },
        "item": {
          "id": "cfdc5f5e-8029-4cf3-8e2e-101e039119ce",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c1b3b9a4-6ed2-416e-a1a3-44dfb96ddbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ed18c6-fcd9-4382-8ba0-ade7c1e31b82",
        "cursor": {
          "ref": "f17a6af4-abcb-477f-ad88-4e97f109a566",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5cefb284-3689-4913-8252-15382d02d8d2"
        },
        "item": {
          "id": "15ed18c6-fcd9-4382-8ba0-ade7c1e31b82",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "538b2a68-987d-4b22-a123-58de7f5155c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8b4e36-4a1d-4bf9-8d56-cd91082e27c0",
        "cursor": {
          "ref": "6107d89d-159b-4b28-808c-ee40c1fcdc50",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c8ac9d00-592b-4923-afa9-961234931d89"
        },
        "item": {
          "id": "ec8b4e36-4a1d-4bf9-8d56-cd91082e27c0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f2df94c9-b775-4c7a-903f-08a57cf7de18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e5d06d-95f1-4740-af5a-cdd09f81b326",
        "cursor": {
          "ref": "e882fe79-d2c6-4c3f-826f-24880ed26381",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4b21b3b8-9a76-4e35-806c-4a6263e8feb7"
        },
        "item": {
          "id": "86e5d06d-95f1-4740-af5a-cdd09f81b326",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "186aeb27-1c40-4602-a0b9-2a661c19b077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7fab85-35ac-4cf2-bc54-a39dcfc72316",
        "cursor": {
          "ref": "f1ae3a99-491e-43d1-84a0-1ab78150de3e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "70c8e928-f8ce-4edc-9b95-b1f9a39e4fb4"
        },
        "item": {
          "id": "5c7fab85-35ac-4cf2-bc54-a39dcfc72316",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6f758715-43e4-4ed0-80b9-73101c781ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2202ce20-21df-40fc-b24d-b0d9e9ab7486",
        "cursor": {
          "ref": "fbfd2d6b-650e-4e14-ba10-28ac3138edd4",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "956aefa0-317f-4603-a5da-e05e6b1e11ef"
        },
        "item": {
          "id": "2202ce20-21df-40fc-b24d-b0d9e9ab7486",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "22e24902-8166-44d3-b5b5-f61934b7731c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e042519c-13cc-40bc-92a0-04ffb98327c8",
        "cursor": {
          "ref": "c633b5d0-4ced-41d6-ad5a-d3c048f92990",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c699f0ce-db64-4a09-a029-cfd458e3cec1"
        },
        "item": {
          "id": "e042519c-13cc-40bc-92a0-04ffb98327c8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d678fc8b-172e-42c6-a36a-666d8eb70f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5022119f-9f73-4937-abf3-2ce3aace17ca",
        "cursor": {
          "ref": "2793cfcc-dd14-4abc-9bc6-cefd1f52a1d7",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1ec94fae-d29a-400c-b345-44266660cfe2"
        },
        "item": {
          "id": "5022119f-9f73-4937-abf3-2ce3aace17ca",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ebcc0415-e27d-49cf-8aa8-a61d3998eb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4541bd5c-2b1f-4555-a76b-02d5cd2b778b",
        "cursor": {
          "ref": "b363f9f8-fc63-46c2-badd-4d9effda4ec3",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fc3bcbd6-ff4e-4bc8-b661-a3dafb2bfb3a"
        },
        "item": {
          "id": "4541bd5c-2b1f-4555-a76b-02d5cd2b778b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fffaa6c3-66fe-4541-8cb9-3d5225b87525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eecfa5b-b031-4f05-b88c-7ab6f697b848",
        "cursor": {
          "ref": "cb6a5e7b-b3e6-4dd1-9842-c764d38a9543",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "67c0ee38-ecf0-48bd-8a71-08829c5988ce"
        },
        "item": {
          "id": "3eecfa5b-b031-4f05-b88c-7ab6f697b848",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "df8b102c-b171-4b95-a2d0-0c414db3e81d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77337fd9-3f3e-4c9b-abe9-804a44809a0b",
        "cursor": {
          "ref": "2be8edbe-437e-400e-8bbd-3787bfc7fed6",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "be2d132e-fbea-49f3-b89b-398ded32b82b"
        },
        "item": {
          "id": "77337fd9-3f3e-4c9b-abe9-804a44809a0b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8d1f0ed5-cad4-4ec5-a398-d67be4a0fe8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9995543c-db0a-41c0-91cb-6b10cb9b45ac",
        "cursor": {
          "ref": "ea93f22c-e6b4-49f7-8d2e-702d2c0f57e2",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "baf992d2-b355-4d23-8ed6-52d63d3d1ba4"
        },
        "item": {
          "id": "9995543c-db0a-41c0-91cb-6b10cb9b45ac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1f577410-6e1c-4373-89bf-240eefaa457c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ea12ff-3014-46cd-a8a4-8b3bade74b9c",
        "cursor": {
          "ref": "f8a23dfa-6f0e-4968-80d5-479362743d3e",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a6bb83ef-f121-43d9-9aa4-ef98e38a5d17"
        },
        "item": {
          "id": "10ea12ff-3014-46cd-a8a4-8b3bade74b9c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ea593b3c-f3e1-4d1b-8303-2527d426de0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17687d87-7829-449e-a49d-e2effc6accab",
        "cursor": {
          "ref": "0e2c7ae2-1251-4a8b-bb65-3ad98b3bb5ad",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a923a822-7985-40cc-89fe-a202698b0b51"
        },
        "item": {
          "id": "17687d87-7829-449e-a49d-e2effc6accab",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "99aa031f-5458-42f5-bca8-b9eb4f4edb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8d268f-7e39-48ed-b6ee-c646ef23f271",
        "cursor": {
          "ref": "a7ce0762-18e7-426d-86bd-4111a592a6e8",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1524c7ba-018e-4169-a1ba-f51c5ed47beb"
        },
        "item": {
          "id": "9c8d268f-7e39-48ed-b6ee-c646ef23f271",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ec30c1ad-85c1-4a6b-b4b5-15d7580f858c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a55a1d3-d166-4ee9-abca-7194e5321b8d",
        "cursor": {
          "ref": "e1175697-6771-4c05-b964-0b66ee06f93c",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a0231cdf-f4c5-46cd-88b3-b8ec7b4d2cf8"
        },
        "item": {
          "id": "4a55a1d3-d166-4ee9-abca-7194e5321b8d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3f56aad7-3cd3-40ed-9932-214e05547ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb394cf-274d-4ee0-9f46-67e385d06645",
        "cursor": {
          "ref": "14fad913-1e33-4a38-9499-201f24a6fc35",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "01424cab-8f27-448d-a252-9d92737989b9"
        },
        "item": {
          "id": "5fb394cf-274d-4ee0-9f46-67e385d06645",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a65aa413-f6de-4be3-926b-7286e854920a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee2dda7-c2ad-47ec-993d-71591c524061",
        "cursor": {
          "ref": "9c57bf29-df84-43b8-a2cc-17c5ec7bfe81",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "99961f2a-f901-4e6f-9eca-24633789a69a"
        },
        "item": {
          "id": "eee2dda7-c2ad-47ec-993d-71591c524061",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cae43167-6a5c-418c-a7b3-890fba675cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8841142d-318b-4826-b80b-af981357fd55",
        "cursor": {
          "ref": "20422155-b167-49b9-bb4d-09074bdeddf7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "65084fb4-c93b-44a8-9971-77552fa7e14b"
        },
        "item": {
          "id": "8841142d-318b-4826-b80b-af981357fd55",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1af78e94-bcc2-4add-86ff-427277e04e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf62390-bf62-493f-8f52-e62469ed0e39",
        "cursor": {
          "ref": "39c71885-658d-4050-8344-6df0c6c9b45b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f777dcc8-f9fc-4315-be59-175b8ddd7a3d"
        },
        "item": {
          "id": "2bf62390-bf62-493f-8f52-e62469ed0e39",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1db1e200-69a2-4635-9f8a-1d4b6a9b3339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbde2675-e34a-4024-8e87-3e8837b136e9",
        "cursor": {
          "ref": "2a34c23b-ee15-49a8-86d2-1dcb02d6a184",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "064aff2e-5ba3-4ad4-8fd8-243d0316c8f0"
        },
        "item": {
          "id": "bbde2675-e34a-4024-8e87-3e8837b136e9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b9273803-8c0a-479e-88ed-70b89e531cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4feb57-5b73-4cde-a607-09bf3c2d6514",
        "cursor": {
          "ref": "d139e0c6-98b5-4e56-bf56-7284fe9abca1",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "47be3f86-b184-4167-9b1d-e2937e6b2d1f"
        },
        "item": {
          "id": "6e4feb57-5b73-4cde-a607-09bf3c2d6514",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bf7b07e2-1571-4122-8f23-9e9d1850aad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe35233f-43e4-4cdf-b828-0cd2b9bf6f22",
        "cursor": {
          "ref": "16180cf5-6ad6-4c75-9b29-21037f91e648",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2cd54cfd-078e-4e7c-b33f-17d036e79125"
        },
        "item": {
          "id": "fe35233f-43e4-4cdf-b828-0cd2b9bf6f22",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2b249df9-9f36-4fde-b1bd-2f473aebea94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1502721f-6cf5-41d8-8bbc-59a36657a487",
        "cursor": {
          "ref": "f400a572-6db6-48f4-a964-c4131c593d24",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7f8c4570-523f-4b73-a9c7-7e46f6b6cfa5"
        },
        "item": {
          "id": "1502721f-6cf5-41d8-8bbc-59a36657a487",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ea39b0f5-97e5-4f96-b3ff-d8ffbe330d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cd6766-971d-48e4-a2d9-8bac754d07ec",
        "cursor": {
          "ref": "259da0f8-db8c-4042-9fda-b1ebbdb6abed",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "14732d9d-e202-4e7a-aa5b-d616a3599bd4"
        },
        "item": {
          "id": "03cd6766-971d-48e4-a2d9-8bac754d07ec",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d57c3bae-e074-4b5c-9fed-2193a1c07101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ef5c78-f851-4973-93c7-0be407f0c8ec",
        "cursor": {
          "ref": "9015bd48-d3fd-427f-94d8-3be98ba119ae",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "89c46bff-4fec-49e7-aae8-f44fbf818ec5"
        },
        "item": {
          "id": "05ef5c78-f851-4973-93c7-0be407f0c8ec",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c1126f7e-6a67-432f-91bc-7d290fa0efa1",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "131c9707-2e4b-4ade-a343-28f7c8c3654a",
        "cursor": {
          "ref": "80888c4b-f182-4ed4-80dd-14ac0faca6cd",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "24660fe8-399e-4bf0-bb42-87454bea61a3"
        },
        "item": {
          "id": "131c9707-2e4b-4ade-a343-28f7c8c3654a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0a83c627-f971-446e-96f0-e599667e4b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c09d0d7-477e-4170-91f8-46291e8e0427",
        "cursor": {
          "ref": "45567fed-5cac-44a8-bb5a-ff696c6ce545",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "650e6bb7-f798-4751-a73e-f75b3c3d5853"
        },
        "item": {
          "id": "5c09d0d7-477e-4170-91f8-46291e8e0427",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "08e3d53a-8f4f-4e11-9d5b-e285004c7781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762c871e-f89f-4564-8548-841ad37e1456",
        "cursor": {
          "ref": "2a729ce9-e7d5-4597-87cf-1c9b0f917d70",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ef050c3e-b7fe-47e6-bf95-05ee2f1ad163"
        },
        "item": {
          "id": "762c871e-f89f-4564-8548-841ad37e1456",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8d085cdc-783b-4806-a82b-fc63c8ad568e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2669f23-fe09-4180-90ae-10413e260fa8",
        "cursor": {
          "ref": "0243ab4c-b0ed-4f12-b5e3-3bfb1c259baf",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4c756bef-75a9-4d82-9e05-6a07cb8ac5b0"
        },
        "item": {
          "id": "a2669f23-fe09-4180-90ae-10413e260fa8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9540ef50-ed7c-426a-b36a-2ec7806e73c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272b210f-772b-46c0-801e-c7df6d358743",
        "cursor": {
          "ref": "d9769aef-3ec8-42ce-8691-5f09497c7f0b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dfe4faa3-e810-46f7-a3a1-6931df698cf8"
        },
        "item": {
          "id": "272b210f-772b-46c0-801e-c7df6d358743",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b7af181e-349a-4de3-8038-e97580b33bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422f1466-6786-40b6-8a72-11a5615ac7e3",
        "cursor": {
          "ref": "fd98e647-a929-48d8-94be-2fd297b8873c",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bdef6ddb-140d-463e-953a-5f3f4eadcf7e"
        },
        "item": {
          "id": "422f1466-6786-40b6-8a72-11a5615ac7e3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5f2aa418-b0aa-48f1-9ab5-838206425608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f0683d-3746-4069-ab73-f9980b0d900c",
        "cursor": {
          "ref": "1519677f-4613-4beb-bb2a-9358543c9795",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f45e7521-9cdb-4c52-ad60-8ee8abc8d148"
        },
        "item": {
          "id": "b4f0683d-3746-4069-ab73-f9980b0d900c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a6bd94ff-d40e-46c8-86d1-cd1e8d739ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a06cae7-660a-47a4-a24d-837e93932bc7",
        "cursor": {
          "ref": "9833fde4-73fa-42a2-a74c-6bada3a6a158",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5c6ef032-0804-44ba-869c-c17583ec506c"
        },
        "item": {
          "id": "7a06cae7-660a-47a4-a24d-837e93932bc7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fc6ebc42-e334-47e8-9152-43e614e43a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cbe21c-242d-47a4-966b-7d977fe950ca",
        "cursor": {
          "ref": "fe636b5d-4b2a-4f92-854a-30ac2f2b3c14",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "01b927a6-6a20-421f-98c0-671b0922608d"
        },
        "item": {
          "id": "80cbe21c-242d-47a4-966b-7d977fe950ca",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "41669d59-2345-4da8-91b2-c6e59cf784e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab1b43b-8019-4ba0-86cd-959f30ee543a",
        "cursor": {
          "ref": "5b267bdc-ea46-4d53-bfe4-21f72666de0c",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0eb89158-d3a5-4227-bc8b-c54422086311"
        },
        "item": {
          "id": "fab1b43b-8019-4ba0-86cd-959f30ee543a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ac728dae-2fad-4145-8716-4f03a8b218a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e8ccfb-7fb9-49d3-ac5a-a2df8fbcd577",
        "cursor": {
          "ref": "d836f080-20a0-4430-a351-03bcb563268a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a4b62593-7f6d-4d76-abf2-9788ca95e5be"
        },
        "item": {
          "id": "94e8ccfb-7fb9-49d3-ac5a-a2df8fbcd577",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4e7861a9-f1cb-4da5-bec0-d20fb01c70d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d9487b-a77e-4ee7-ae2b-1acaddf861a2",
        "cursor": {
          "ref": "2ad1bf06-4046-48d5-ba3e-ee7b9ff16d18",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "35e36529-1347-4705-92e4-feb34f14e2b6"
        },
        "item": {
          "id": "64d9487b-a77e-4ee7-ae2b-1acaddf861a2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "442c0dd1-1fee-4f27-92d7-a9b609cdc634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3860386-94ac-4afa-9f42-37b3743ae75d",
        "cursor": {
          "ref": "f2f0079b-c778-4358-adbe-00dff841d191",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "60a7310d-eaf4-4509-a569-6810e3ba9d3c"
        },
        "item": {
          "id": "c3860386-94ac-4afa-9f42-37b3743ae75d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5c9735a4-dd8b-4fe5-bfe3-0b4c8d8a23d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f64e4c3-e553-4ed8-8ba4-d1c434c05623",
        "cursor": {
          "ref": "46622efe-15e1-4e73-8623-97be55c67efa",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "50b6d6bb-39cd-47e0-a5f7-880777a3439f"
        },
        "item": {
          "id": "8f64e4c3-e553-4ed8-8ba4-d1c434c05623",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0ea15d4e-5e51-4777-bb8e-23d61099e9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e1fd8e-e965-476b-88d7-d77722e8bb25",
        "cursor": {
          "ref": "9d2c9ea7-0a39-4fe0-bf96-1fa9b0594dce",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e5b861d1-9957-4085-af89-4ffe91621a61"
        },
        "item": {
          "id": "78e1fd8e-e965-476b-88d7-d77722e8bb25",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0ba96c77-30a8-460b-bd7c-d0008dac572f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402bd176-92a6-4502-bf82-e494061af632",
        "cursor": {
          "ref": "1bace056-1359-4f92-848e-b77181b5ad7c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c2b06f36-4f55-4dfe-a475-3a41e22166ce"
        },
        "item": {
          "id": "402bd176-92a6-4502-bf82-e494061af632",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a33d4f9b-3d8e-487e-8c3a-bd24d32cc823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45214c1-552f-4ba4-910e-3fc4a0bf3979",
        "cursor": {
          "ref": "1c822e9c-fa54-45b8-902a-690785c0bd6f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "508ac466-fb8a-40e6-9493-a27419d97a25"
        },
        "item": {
          "id": "e45214c1-552f-4ba4-910e-3fc4a0bf3979",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4b7051f0-802f-4e26-91fa-64dea27abfc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd0a3e9-588b-45da-88bd-1d337b5bcd7d",
        "cursor": {
          "ref": "3620adfd-c4c3-4ce7-bc6b-08a06a1d8f98",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2bfafc9e-1b27-4b0b-82a7-6c4df610396a"
        },
        "item": {
          "id": "dfd0a3e9-588b-45da-88bd-1d337b5bcd7d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fe4da218-4494-456b-9024-017edd638ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9574bd6-ced3-45b8-a5a5-9b289d272e09",
        "cursor": {
          "ref": "19e19c62-1f6c-40f6-8b00-62804b4f3b2f",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0b5388fb-3639-40eb-b246-8a400c8ed572"
        },
        "item": {
          "id": "d9574bd6-ced3-45b8-a5a5-9b289d272e09",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7c55be74-d485-4c94-ad2d-4320dc2688b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64d8a77-c4dd-4f70-b4ed-b3ba1305099c",
        "cursor": {
          "ref": "4ca13c20-c868-401e-859d-e40b852f4172",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "773a6f44-d1e3-4d39-851e-b586537d1935"
        },
        "item": {
          "id": "f64d8a77-c4dd-4f70-b4ed-b3ba1305099c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e0696136-7472-45f0-aefc-74c14e81f3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cf2c4c-efdc-4ad7-b481-523c42abf18d",
        "cursor": {
          "ref": "dd792ae3-3f13-4da0-ad54-cd80c3ab9d20",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "518dfb73-4068-42c7-a59f-8bea7615a6e9"
        },
        "item": {
          "id": "21cf2c4c-efdc-4ad7-b481-523c42abf18d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "624e5e0b-72a5-4130-8295-782a015240af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73aac11b-ff6b-4285-a403-227d3af562c0",
        "cursor": {
          "ref": "9700303d-10da-4915-a2cd-b8c39aa5a899",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "72474e02-8aa3-4f1c-8e8f-b4c2747b2f6b"
        },
        "item": {
          "id": "73aac11b-ff6b-4285-a403-227d3af562c0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8cd0f721-4d51-461c-a7b3-9933ebc83af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf00bf1-f952-46b5-b9cc-588de4f43240",
        "cursor": {
          "ref": "b400cf46-590f-42ab-9616-698f6d5e20dc",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "04f2ab37-dbfa-408c-8ae0-5409125c1b97"
        },
        "item": {
          "id": "8cf00bf1-f952-46b5-b9cc-588de4f43240",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d29a1ce3-6b96-409a-9226-3e3595d06e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6595ed55-5dec-4960-b11e-127d030848f6",
        "cursor": {
          "ref": "375d069f-b676-4e00-9050-109e8a9b09dd",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b176424e-5876-437c-9adc-7ef01212d9c5"
        },
        "item": {
          "id": "6595ed55-5dec-4960-b11e-127d030848f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "17b9e8da-2a63-49cd-9cf3-5d2848eaeab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cc0e0d-a33e-4b3f-84ed-ee3e88459509",
        "cursor": {
          "ref": "7aa889d1-e66d-4384-92d2-527cbc583e17",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "61f020dc-baa3-4e0e-a52a-7b3f1a179e72"
        },
        "item": {
          "id": "30cc0e0d-a33e-4b3f-84ed-ee3e88459509",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e707a9a1-111f-47c9-9e1c-a9e83995d72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02aab1e2-ba87-4376-a766-6cf24f5f062e",
        "cursor": {
          "ref": "0534e2a7-45a6-4f91-ad51-af263778238d",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fc187b0b-cba1-486f-9e9d-cbc24da5db05"
        },
        "item": {
          "id": "02aab1e2-ba87-4376-a766-6cf24f5f062e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a6b355c8-00a1-4e88-bb71-92d8070c919c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183013bf-d872-4bcb-ad4a-3233f8330641",
        "cursor": {
          "ref": "e402e00b-eaa4-438a-bc17-3a3bc3510e83",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7959f08f-6a0c-4688-bc30-c3334522800c"
        },
        "item": {
          "id": "183013bf-d872-4bcb-ad4a-3233f8330641",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ad14529d-0cbb-4b0d-92fc-b77317cde9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ecd174-b0a6-4546-8f80-8e8b2d8cde21",
        "cursor": {
          "ref": "9bd54130-ff7c-46df-8d1c-9bb11649f033",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2a186d8f-ab62-4c88-9cfd-729626cfd183"
        },
        "item": {
          "id": "48ecd174-b0a6-4546-8f80-8e8b2d8cde21",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f027fcc4-bb3a-4f2f-88ff-7506ba19fde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be49ce7f-7fcd-4994-b92b-e43705a070da",
        "cursor": {
          "ref": "8600ba00-cd0a-4eea-a93b-512894616de9",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "feee91ae-0a69-43b6-aa30-43fcd9239060"
        },
        "item": {
          "id": "be49ce7f-7fcd-4994-b92b-e43705a070da",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "162359da-0273-4089-9345-c8b9aaeadf55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0beed07-02d9-452e-8579-77095f6cc1de",
        "cursor": {
          "ref": "10705862-4c85-459a-8a37-7dcceafacdfb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "406728e0-8ca8-4adb-ba56-4bb95e470b7a"
        },
        "item": {
          "id": "c0beed07-02d9-452e-8579-77095f6cc1de",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "34556df3-c2a8-4cf1-92a5-d21150760479",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "a9af9a4b-a7e9-40db-929d-1961f5d73b8a",
        "cursor": {
          "ref": "8b89dea2-d64c-4afd-9ac2-9bb77308f56b",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "aa25bea6-0a22-42ac-9729-df7b4b173369"
        },
        "item": {
          "id": "a9af9a4b-a7e9-40db-929d-1961f5d73b8a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cd196fe9-91e9-4937-ab8e-d0f9249936b8",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "abe86b09-d37c-4ec8-a57a-0495cd4e2e0b",
        "cursor": {
          "ref": "05de7d6e-85fe-4d19-8cdf-cd93cb523ae6",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "768f45ec-5b67-4515-8ff4-d146ad81db60"
        },
        "item": {
          "id": "abe86b09-d37c-4ec8-a57a-0495cd4e2e0b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2717aa63-5b39-4bc2-9c27-4a9d30a10277",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "82641c07-8e46-4841-990d-d799f8571784",
        "cursor": {
          "ref": "b8a062b0-2608-4aa5-8baf-ca6fc6e49f34",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7b9e8bf7-76e3-4437-81b3-a0e1a1e5152f"
        },
        "item": {
          "id": "82641c07-8e46-4841-990d-d799f8571784",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "80a11a9d-16bf-439a-8ce8-d6e7573d2ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2064b4-1352-4286-afe7-af9d6b026684",
        "cursor": {
          "ref": "a1f23504-3724-4f4e-8f9b-8d593d99f1c9",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "883ccb25-ddf2-48a8-950d-e22b76485722"
        },
        "item": {
          "id": "fd2064b4-1352-4286-afe7-af9d6b026684",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d94fb2d4-f903-40cf-b183-0e1cc8535972",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "1e2ab24a-230d-4b47-978f-113745ba148b",
        "cursor": {
          "ref": "b8dc952f-a92b-4f5e-af34-abfadd7f3939",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bbed59ea-6a0c-49f4-baee-362cc227aa01"
        },
        "item": {
          "id": "1e2ab24a-230d-4b47-978f-113745ba148b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9892c6bb-553f-4e94-888a-92e55ebc6ee0",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "1b5d241e-5892-422c-9de6-dc87267d1f81",
        "cursor": {
          "ref": "3945d43a-b9e4-47a9-8766-67088b6db4aa",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d31b6f0c-9a83-44d3-b70a-6c3f1afc023b"
        },
        "item": {
          "id": "1b5d241e-5892-422c-9de6-dc87267d1f81",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1e3bed12-2f06-42a9-87a9-eed04c6be32f",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d2ded9e1-e332-41b7-94b0-918adde7c9da",
        "cursor": {
          "ref": "00e79e96-1064-45ba-8d11-02ad7fa02d16",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8cb70a60-f4c7-4506-9d64-09b6d5552029"
        },
        "item": {
          "id": "d2ded9e1-e332-41b7-94b0-918adde7c9da",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "21b97fcc-7e4d-4db2-a218-9435d3045cee",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "00a1d640-0e03-44a4-8b48-66e8c47c52e8",
        "cursor": {
          "ref": "7aac2f6e-ebb1-476d-b311-743873fdc294",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4847e4bb-c388-4642-a0cf-6d45919b6804"
        },
        "item": {
          "id": "00a1d640-0e03-44a4-8b48-66e8c47c52e8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0ec3974f-dfd0-430f-91c9-d8503cde3682",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "54238cb2-7895-47bb-934e-8b73cf4159df",
        "cursor": {
          "ref": "6ae6955a-4e20-4314-94b3-018fd2c0574e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "76a5aa85-1010-487b-be56-d54f4afeb35b"
        },
        "item": {
          "id": "54238cb2-7895-47bb-934e-8b73cf4159df",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f383254c-78e7-4a6f-bde7-125f2d0b218d",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1603c28c-0e1d-4724-a718-32a07d7ae66d",
        "cursor": {
          "ref": "0d6d5bc2-8740-4747-8a32-0dddfbdefd27",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e0b5ae69-b1ca-464b-b985-57df2925c658"
        },
        "item": {
          "id": "1603c28c-0e1d-4724-a718-32a07d7ae66d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cfd6da19-8c7f-4156-8ab6-225e9c8ee71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93cf7cc-c111-499e-8cd2-30c4d8abfcd8",
        "cursor": {
          "ref": "b2336f3b-1f42-4d7d-ba44-3ba45e79f698",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1e818588-2a48-4795-bf5d-8f2d9f773f5c"
        },
        "item": {
          "id": "c93cf7cc-c111-499e-8cd2-30c4d8abfcd8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cce81e7b-0204-47c0-9a91-2941d1e8e275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2532046a-00ec-45ba-8a39-f1234cec8d97",
        "cursor": {
          "ref": "02126d87-90ab-4d97-a550-ffc131f30034",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5b3ff709-be7b-43bb-b129-7e000410e76b"
        },
        "item": {
          "id": "2532046a-00ec-45ba-8a39-f1234cec8d97",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f88338bd-81e6-4031-a990-c28e73ff1f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50c8ef0-51fd-4f54-8d87-2e872788dfc6",
        "cursor": {
          "ref": "c7fb1536-3952-4364-8fea-b1eb812f8e13",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9c821bfc-75ce-45f2-a8ae-83d6fadde07c"
        },
        "item": {
          "id": "b50c8ef0-51fd-4f54-8d87-2e872788dfc6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "24c093e0-d1dd-4da0-bd36-237894baf7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b0a286-3545-4c2c-9e91-47f212b41d7e",
        "cursor": {
          "ref": "597b3fa8-e0d7-4f1f-91e4-abca94079dcb",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c0f57415-4c11-458f-8c11-bb632e3c335d"
        },
        "item": {
          "id": "e8b0a286-3545-4c2c-9e91-47f212b41d7e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d140d496-a993-4def-8cc0-048a6faa023c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470502e5-e6fc-4bb2-af65-9fcc0ceae5bc",
        "cursor": {
          "ref": "1e2cc7a1-e81e-4ece-84b0-7d95cf8779a8",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fe4e300f-ea71-4144-a96a-d9d5ff50f610"
        },
        "item": {
          "id": "470502e5-e6fc-4bb2-af65-9fcc0ceae5bc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d45bda32-ec84-4c2d-88e0-bef25027b90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681ad4c8-d1ae-4957-8590-7b65152eae19",
        "cursor": {
          "ref": "4d8cdf77-c7c9-4100-afb8-a191b7e9e808",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d1ac1301-4a48-43af-9d54-5bded7ba5b58"
        },
        "item": {
          "id": "681ad4c8-d1ae-4957-8590-7b65152eae19",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4e2eaf76-b495-4095-9e26-ab1366a179ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0bf404-fc98-44da-841a-f67d1b38952d",
        "cursor": {
          "ref": "e1fb86d7-310f-48a9-a568-44fdd4c8a7b6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "121a3466-ccc4-4cba-9f9b-7f39cc8efbaf"
        },
        "item": {
          "id": "8c0bf404-fc98-44da-841a-f67d1b38952d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "796b0e2d-e806-4c31-9d56-4dff8f992e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a39882-25b8-406e-83eb-737f5ba94173",
        "cursor": {
          "ref": "a0098a4d-3f83-4ece-a25b-e0ac1e6b5f65",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "288c84e7-dc46-41c0-846e-248c24ff6c94"
        },
        "item": {
          "id": "63a39882-25b8-406e-83eb-737f5ba94173",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ea2e20ac-c6c5-4333-8058-ffa85c49672b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72598470-8db9-41d4-87b5-2e5f055c1563",
        "cursor": {
          "ref": "f6b6412f-3b75-4ea2-8b14-3da927353f7e",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0c41f9d6-8f7f-414a-92b1-8b14af524b7b"
        },
        "item": {
          "id": "72598470-8db9-41d4-87b5-2e5f055c1563",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fd010a87-e63a-48bc-b78b-598ac573998e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d48fca-8b76-4393-b516-d47f9eef03c1",
        "cursor": {
          "ref": "350eeb07-359c-4ff7-aa49-4f3a85cd1c00",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8e54fb1e-6b79-489f-81d1-58160550cd0b"
        },
        "item": {
          "id": "e8d48fca-8b76-4393-b516-d47f9eef03c1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c3760fab-6e9b-4c4a-9359-424d4d7f7da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a5e8e9-a29b-42f1-88fa-1f2a60220c65",
        "cursor": {
          "ref": "a945a473-8829-476f-ab1f-b7dff3e4f25d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8f03ab4e-978b-42ab-b821-0ccb01b50d5a"
        },
        "item": {
          "id": "c5a5e8e9-a29b-42f1-88fa-1f2a60220c65",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "694b6b77-9d1e-4fb2-83d7-42ebe9120078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118d7c1e-2601-45f6-9a93-3e28ec91cfa6",
        "cursor": {
          "ref": "344ca98e-9221-4e85-91ba-e3ca1dad7f75",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8ef8454d-331a-4eea-90d8-097b990d532d"
        },
        "item": {
          "id": "118d7c1e-2601-45f6-9a93-3e28ec91cfa6",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b30ae43a-d9dd-4676-9643-4a68caadf189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fbd73fd-4a99-401d-af7e-4eefbf5373b5",
        "cursor": {
          "ref": "96031c04-41e0-4d6f-9ecd-0fd8dc62b601",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "91fe88af-5825-410d-a1c9-509fbc76a05a"
        },
        "item": {
          "id": "4fbd73fd-4a99-401d-af7e-4eefbf5373b5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6bfcb1df-a28e-4fd7-b053-f037c4508341",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d8361e84-86f9-4750-8daf-39307fffe0ca",
        "cursor": {
          "ref": "2e53bcf8-0124-40fa-b69a-0e8f813e148e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "77455f63-ec85-4242-af7c-b2bb033abd81"
        },
        "item": {
          "id": "d8361e84-86f9-4750-8daf-39307fffe0ca",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "97d2258e-c63f-4090-823d-e1016f30908d",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ad7da576-43d6-45df-8975-7e1d5375e49e",
        "cursor": {
          "ref": "7f61f483-4bed-4671-a40b-ce97fc173fe0",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "47567ffd-2e45-4518-9c7e-0b6eef0785fe"
        },
        "item": {
          "id": "ad7da576-43d6-45df-8975-7e1d5375e49e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fefbd988-2eba-489a-8b80-6974f4cfaf53",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "13c81153-36af-4776-bf77-54b3784458c4",
        "cursor": {
          "ref": "4e4348e4-6d73-49b4-96ab-8a3679840f9f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b6d8d5bd-7916-4734-aee2-7088b2d2b37d"
        },
        "item": {
          "id": "13c81153-36af-4776-bf77-54b3784458c4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "77677938-a0cf-4b7b-a2b0-9793ce907174",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "345b867a-460f-44ad-9d28-ab1dcbbf055a",
        "cursor": {
          "ref": "3ed0189d-27c4-40f8-823a-ecbc7742f4f7",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "53ea2319-594a-4d87-84fd-5661b22c9239"
        },
        "item": {
          "id": "345b867a-460f-44ad-9d28-ab1dcbbf055a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "78c95c6b-8a04-42b3-bd0a-596b89ad1a2a",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a9c5e791-49bb-4151-a99f-1f38256f6fda",
        "cursor": {
          "ref": "7cdcfcab-a52e-4d24-842f-d794973c36a6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a6423939-0ddd-408e-9ed6-96c5ab722a28"
        },
        "item": {
          "id": "a9c5e791-49bb-4151-a99f-1f38256f6fda",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8b25d7dc-e036-4673-89d5-74025f42982a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e7b8a9-d4c2-4579-8196-cecb2e6dc323",
        "cursor": {
          "ref": "99505e3a-08f3-4ecc-9b18-75bb9a4943f7",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "817b27d2-9af3-4d45-bde7-65549bc37053"
        },
        "item": {
          "id": "75e7b8a9-d4c2-4579-8196-cecb2e6dc323",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1850aab1-99a8-41d0-a857-cc84b818651b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e1e391-61e1-4c00-9851-a5ddd8eecd64",
        "cursor": {
          "ref": "e250c8ed-a1f6-4e7f-bb6d-368de3b39151",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6190ad73-269f-4740-9c3c-df070614b3e4"
        },
        "item": {
          "id": "31e1e391-61e1-4c00-9851-a5ddd8eecd64",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b52d87e7-8256-4ce6-ace0-dd197170059b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557fd1e6-e413-4064-8bde-81f64614f4f4",
        "cursor": {
          "ref": "f76e8165-a541-4568-a499-6170eb7925dd",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "606d1866-15a7-4533-b803-863de90a8433"
        },
        "item": {
          "id": "557fd1e6-e413-4064-8bde-81f64614f4f4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2ae7910f-3719-4b8f-af92-405aaa26ec05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3bf53e-1bb1-410c-8dbe-dddb63a87109",
        "cursor": {
          "ref": "a20ab942-44cd-48de-b0d8-69d6b907c01c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "72e036e9-ca5d-4c8b-b22f-f1f9584c4ab9"
        },
        "item": {
          "id": "fd3bf53e-1bb1-410c-8dbe-dddb63a87109",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dcf35eb6-bb22-4413-acfc-fb29d3ec8783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05f39e4-d5d6-43fe-8e8c-2e07d4dbda63",
        "cursor": {
          "ref": "503eff3c-8d5b-4bcf-b601-f2a4169e5ebb",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2db3ad31-514b-4af5-b425-499fa0e8a05a"
        },
        "item": {
          "id": "a05f39e4-d5d6-43fe-8e8c-2e07d4dbda63",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ec65fa2c-5d57-4226-abe9-d07be462cd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef04e1f5-3357-4fe5-b860-a8c61945af28",
        "cursor": {
          "ref": "ace0e7e9-08a0-4878-9ab1-817571e8295d",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "317bdaeb-f9ca-403f-a596-86dd3156f24e"
        },
        "item": {
          "id": "ef04e1f5-3357-4fe5-b860-a8c61945af28",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1e933d0f-799e-461c-8520-d5e4e0260437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd053055-07fc-4d42-8b7e-07fc1af1eaf0",
        "cursor": {
          "ref": "08daf399-b8e8-47b7-92dd-b15d9bf44165",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f3f2c6c0-0c39-4891-a13b-08f3cab53fe7"
        },
        "item": {
          "id": "dd053055-07fc-4d42-8b7e-07fc1af1eaf0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "67afcf04-9227-48e5-8179-9aaa0492c73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31379c5c-832a-4003-bafe-c51926b487a8",
        "cursor": {
          "ref": "6d101f11-b239-48ad-90ed-430eba29da54",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a8961c59-2696-4f63-91ed-80fc51b454da"
        },
        "item": {
          "id": "31379c5c-832a-4003-bafe-c51926b487a8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7ee4037f-db67-4e84-b454-158aad0cb23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3baa01-1b57-4823-827c-9d0a10f3fca7",
        "cursor": {
          "ref": "729e63d0-5db6-49d9-9efc-24c36a0d4952",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "389d43b0-49b0-407f-aeb7-b5a9b489367d"
        },
        "item": {
          "id": "0b3baa01-1b57-4823-827c-9d0a10f3fca7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e0d55ae8-6ec3-4544-b048-698228456b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97a9e38-ba6b-420a-9606-6385094160e9",
        "cursor": {
          "ref": "eb4b64ea-dd92-4ff2-adfb-8168330a871b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fac032b8-88c6-421e-a58b-3a6735c383c9"
        },
        "item": {
          "id": "a97a9e38-ba6b-420a-9606-6385094160e9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ce75238d-436b-4a6c-9448-6bad698bec64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f494d7d2-2615-4401-829e-2b2aad2adc4e",
        "cursor": {
          "ref": "372bc07a-abf7-4f6a-9257-3782661f60fd",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cb8effac-be76-456c-81fd-9bd4142ed101"
        },
        "item": {
          "id": "f494d7d2-2615-4401-829e-2b2aad2adc4e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a374cfa6-d72f-479f-b6f7-ef22a2161087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8758dee6-90ff-430d-82f8-14c6df7ab953",
        "cursor": {
          "ref": "74ab7585-3a64-4963-884a-f48db9e0591b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c10d00da-f3ad-4bea-bc28-04cf3194fe55"
        },
        "item": {
          "id": "8758dee6-90ff-430d-82f8-14c6df7ab953",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a4d99a9f-ddd8-4a77-bdb1-d54fda5cc35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca6b908-95ac-4552-9858-30ec26c3af0d",
        "cursor": {
          "ref": "82d4d481-6df1-4cc5-a2e3-091d2607e391",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "989601a9-7c47-41fc-b0fe-4f46fd016571"
        },
        "item": {
          "id": "8ca6b908-95ac-4552-9858-30ec26c3af0d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "eaee21f6-1008-4430-b7ea-dfa9fdec9cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493a53df-0b91-4c7e-acba-37e776df5ae8",
        "cursor": {
          "ref": "8eb53556-7761-4aa3-97fd-a16b6aae33aa",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c3fddab6-601c-4df3-b765-aae14e592aac"
        },
        "item": {
          "id": "493a53df-0b91-4c7e-acba-37e776df5ae8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "faeceb36-dbb7-42fe-b6b8-d8b29fbc1036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12552f29-254d-405c-aa3a-243755370965",
        "cursor": {
          "ref": "523aabbe-4c30-429f-9ad6-4c015183a0b1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e8890efd-f32e-4eb6-a962-377e0de5fa59"
        },
        "item": {
          "id": "12552f29-254d-405c-aa3a-243755370965",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2a06b4fa-3fe3-41f0-a136-46442c2412dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7863b6-f2f6-443f-8b32-689068b22c29",
        "cursor": {
          "ref": "260e244d-54f6-4dbf-b199-8c9396e013cc",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "853d8fbe-7105-46cf-a0bf-c5c98eb09c99"
        },
        "item": {
          "id": "8b7863b6-f2f6-443f-8b32-689068b22c29",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6b36f12c-e2fd-4773-9ad2-10e419d7cdcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dc90d7-f7af-4dc5-a927-b95633c05bad",
        "cursor": {
          "ref": "6ec57ef7-f436-45d9-a6a5-8e7a4f4016d4",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f6245120-1bee-4c5e-b754-2509f2da4b3e"
        },
        "item": {
          "id": "69dc90d7-f7af-4dc5-a927-b95633c05bad",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2fa8b006-e9a5-4177-97d6-d34af389b337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1a35c9-57b7-447f-bb23-fe5d73911637",
        "cursor": {
          "ref": "dd60fbce-d18c-45ef-bac5-e5546216e167",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "20cf7d67-416c-4aad-9cdc-d4682c46b2e9"
        },
        "item": {
          "id": "8c1a35c9-57b7-447f-bb23-fe5d73911637",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c5734760-a357-41cf-b6e8-dbde0f2a2b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89aa612-fc75-4cb4-b9d1-2599da57d647",
        "cursor": {
          "ref": "e6895f81-b9dc-4063-9520-52bc3c161a5c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5f0d66a0-0ec6-42c8-ac42-e6a2f32c6bdc"
        },
        "item": {
          "id": "c89aa612-fc75-4cb4-b9d1-2599da57d647",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "52fee464-53c8-4997-976e-b9311f8b6446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6274b204-309c-4836-8d24-52e763322aa7",
        "cursor": {
          "ref": "72574545-85d0-4328-97c1-8d3cfcca41c6",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "89245277-17f2-4061-b587-5d3c78306328"
        },
        "item": {
          "id": "6274b204-309c-4836-8d24-52e763322aa7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5d101d28-59c3-4340-9c3d-50635a9ef3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bedb031-2096-4fb4-b026-d150fdaf6c16",
        "cursor": {
          "ref": "026cc5af-5b08-4033-a9f0-4e1a5c38118f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "30e9105d-9fa6-475c-85b7-918db515177e"
        },
        "item": {
          "id": "7bedb031-2096-4fb4-b026-d150fdaf6c16",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "20f55576-878d-4849-9a1a-620365926044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab14dbc-448a-4e33-b347-247a789fff2f",
        "cursor": {
          "ref": "ad784ade-542b-47ce-b9cf-24766b2282b9",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0ff08877-44cc-4401-8369-85fe18909b6c"
        },
        "item": {
          "id": "eab14dbc-448a-4e33-b347-247a789fff2f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fb2af832-4b77-4e19-aabb-8f65c68dfc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872ccad5-48ab-49e6-bf5d-dd2faaaf242f",
        "cursor": {
          "ref": "b3dbeb4d-fbe5-42ad-ab76-bc74a6f5a7f3",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "61406c27-20b0-414d-9d17-737c187c5242"
        },
        "item": {
          "id": "872ccad5-48ab-49e6-bf5d-dd2faaaf242f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ccccef4c-9774-40a0-a71e-e6c3921cbf36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbb1c71-f88d-417b-ae7e-da2111170f11",
        "cursor": {
          "ref": "490dcd72-a220-4ed1-8f0d-8c0e3ab42d7a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1eae8dea-54d0-458a-bac1-95ab93e62060"
        },
        "item": {
          "id": "adbb1c71-f88d-417b-ae7e-da2111170f11",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "58cade5a-10ce-44b8-9206-d830e433d2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d3a745-db8f-48cf-a2b8-37a7b27e78d7",
        "cursor": {
          "ref": "14640c6b-ab18-49c1-b34f-6e1703c59441",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c2b23b3d-3a0c-4914-a995-90072d480d95"
        },
        "item": {
          "id": "d4d3a745-db8f-48cf-a2b8-37a7b27e78d7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "946ee59e-9bce-4c68-ad80-7d20605e64b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ac87ca-d597-441d-9acd-c1c9bbff53c1",
        "cursor": {
          "ref": "8d0dcf63-ded2-4f50-b891-9bf62df84de0",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7e199d67-71cd-4226-9c53-9245bfae3f40"
        },
        "item": {
          "id": "44ac87ca-d597-441d-9acd-c1c9bbff53c1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b7203905-3496-456f-ac6b-e2db477801aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14f4811-4451-4baa-bd78-88b05b3d84a1",
        "cursor": {
          "ref": "1b98e236-0906-4fc7-b9bb-b9dbfe79a579",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "49e6d713-420f-4b89-8efe-4852384f78dc"
        },
        "item": {
          "id": "f14f4811-4451-4baa-bd78-88b05b3d84a1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ce6d2358-8624-44b3-beca-a8759e18be73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b817b8e-78f1-433f-abc1-6aae803c8e5a",
        "cursor": {
          "ref": "96b77fec-fd85-46ee-9ea6-7e295749f946",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c16bf411-0e9c-4799-9531-f248e5a7ecb2"
        },
        "item": {
          "id": "3b817b8e-78f1-433f-abc1-6aae803c8e5a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c477e8de-116f-4e17-9dfc-23b25e9c5a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301a4b46-35a7-4c36-921f-120c01a7ffed",
        "cursor": {
          "ref": "e1ffb68c-e560-4932-920b-6a81f6d3306f",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a51f001f-dd9f-45cf-8364-9102f8d08212"
        },
        "item": {
          "id": "301a4b46-35a7-4c36-921f-120c01a7ffed",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b14e029a-4a50-4053-a693-58d40e43bddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc75dbb6-b8e8-49a1-a94d-0d19090bbad7",
        "cursor": {
          "ref": "4843e555-579f-4321-b723-02b5389d6e9e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b647f7b7-2fc9-48ed-a7b2-5286344684ad"
        },
        "item": {
          "id": "fc75dbb6-b8e8-49a1-a94d-0d19090bbad7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5fcee3dc-d519-4365-b691-a678a3f2497d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d76496-0f06-4a4d-a616-d8caba770832",
        "cursor": {
          "ref": "ea5a22a4-60d4-41bc-91dd-bc106e9f97ca",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "10b58a36-5d15-4c13-88e5-b70a35d9085d"
        },
        "item": {
          "id": "e7d76496-0f06-4a4d-a616-d8caba770832",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a5234e32-f848-4652-a6e1-898a743ab83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488da1a2-9406-47b6-97fd-dae1d6b5733f",
        "cursor": {
          "ref": "ef4b83e4-0140-4bfe-bef7-8bb0b7323234",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4585abad-3a68-4267-b78b-0362d5e725b2"
        },
        "item": {
          "id": "488da1a2-9406-47b6-97fd-dae1d6b5733f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0fe5a2ac-b9aa-4932-8814-5810d90d9c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcc5182-04ae-4061-bf32-752ce4e010a4",
        "cursor": {
          "ref": "506ed435-0d33-49a8-a675-4072ce2ebf54",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1887feaf-82f5-4bfe-ae4e-cec7d25cce69"
        },
        "item": {
          "id": "edcc5182-04ae-4061-bf32-752ce4e010a4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de66d75a-dabb-41d8-aff5-e07f0dbfeee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3f9978-198c-4384-a41f-f3b64b441d85",
        "cursor": {
          "ref": "6e340c6f-ccd1-4911-8e86-bbeb137c2629",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "873e14e0-d1d7-45ae-a7df-e23dcd1329b2"
        },
        "item": {
          "id": "8b3f9978-198c-4384-a41f-f3b64b441d85",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "41e2d3f7-88f1-42e4-84d9-86028e9e4f58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c071453f-786a-43df-a288-a99cae843373",
        "cursor": {
          "ref": "69608e75-0008-4813-8a48-c3efc399d556",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "92012a51-6bb6-4a27-91a9-6905d35046af"
        },
        "item": {
          "id": "c071453f-786a-43df-a288-a99cae843373",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f2a3cc30-c2f6-4fb4-b0c3-b9bc2997d8ed",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "51e4f8ed-095b-4839-9514-f158a962fb80",
        "cursor": {
          "ref": "ac14e379-65d2-4244-b25b-d1aa8ef6ff68",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "50fe3c4b-170c-4d71-948c-bc57ff506a9c"
        },
        "item": {
          "id": "51e4f8ed-095b-4839-9514-f158a962fb80",
          "name": "credentials_verify"
        },
        "response": {
          "id": "92f5397e-3b9f-464b-9a74-623a41e01419",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb53f377-bfe9-4638-a24b-50f57a0463fc",
        "cursor": {
          "ref": "056bb721-5c9c-46a4-a6d3-e3e70b45629b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "73477693-5242-452f-a425-dcbd0de2f2f5"
        },
        "item": {
          "id": "eb53f377-bfe9-4638-a24b-50f57a0463fc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3fa8764f-c2d3-4825-8507-561cd08eef31",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c655d2f2-1d33-4dfb-978b-4d3b9b325356",
        "cursor": {
          "ref": "635f86e1-80f3-49ba-9c69-cf5928004af5",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4a453840-f411-430f-a04b-fd50d6a13ce6"
        },
        "item": {
          "id": "c655d2f2-1d33-4dfb-978b-4d3b9b325356",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88b27b57-c2dd-4d3e-8a5f-4115160ab266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c655d2f2-1d33-4dfb-978b-4d3b9b325356",
        "cursor": {
          "ref": "635f86e1-80f3-49ba-9c69-cf5928004af5",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4a453840-f411-430f-a04b-fd50d6a13ce6"
        },
        "item": {
          "id": "c655d2f2-1d33-4dfb-978b-4d3b9b325356",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88b27b57-c2dd-4d3e-8a5f-4115160ab266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb8b6ed-4d9e-4d66-9c64-0153735f0110",
        "cursor": {
          "ref": "d996488b-9275-4ed5-a66a-c9e87f0738f3",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8b5b8cff-e58d-4186-b7c1-45129bd5e67b"
        },
        "item": {
          "id": "1cb8b6ed-4d9e-4d66-9c64-0153735f0110",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ad7b7aec-9fcd-4fb2-97f9-4c82c61bb569",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdc5139-fd29-4b8c-9c5c-b877353bd38b",
        "cursor": {
          "ref": "322b9e1c-c815-4b2d-84a8-7c637b19a298",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e97de6d9-fcac-446b-b32f-3101b08321ae"
        },
        "item": {
          "id": "9cdc5139-fd29-4b8c-9c5c-b877353bd38b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9c5ed936-0937-4b1d-ae76-f9d15762fc2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}