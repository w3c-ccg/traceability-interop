{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f3d088a7-ff38-4c83-a598-46c302206e65",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a62eed48-9717-4fb7-9f04-2b2820ab4e27",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a130ecc5-771a-49ff-ae01-2495a90b92c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6c4ccdc8-e6f5-4b9d-a7cb-82ea19a29499"
                }
              }
            ]
          },
          {
            "id": "0c9ff1a8-dcc9-4742-879a-4fe6063896b0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "331bc291-4375-4f48-8c29-4dd215e9869b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "35dbc93f-cdf3-4d51-af83-9916efc10ccf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fa517e69-72f0-44e7-952e-4320352bf918",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d194fc49-bd2d-4fb5-8f0b-2f1ca25129f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9cf74307-83b7-4935-9df8-5a96957daf17",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14af8f7b-f4d7-4ec4-bd69-b692c374e18f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dd65896-0fcd-41d0-b6f4-85f2aa5f0fb5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89481954-8885-4419-bff4-5efb39ec795b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28df5c6f-398a-46bc-ad54-ba3230d8e02d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fb7938f3-7705-4e26-84c8-b9b7ffb99db4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14510c56-775f-4411-903c-444acfecf867"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9791a17a-5440-4ebb-a92c-95c7194cb013",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9f54134e-7f55-4cf0-ad4a-a6c206025233"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2817bf55-a21b-48dc-8dd0-2b5371776a0b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c4889d8-38ec-406a-ab85-3b08596204ca"
            }
          }
        ]
      },
      {
        "id": "80f2914a-32a8-46f0-8515-728ee2b214db",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "24f9c186-867e-4469-9443-b0638b2bdd5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ae418b3-b332-47c5-9650-a8b7965d36fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31cc5478-9c58-4d8d-896b-e7c6ccb0cf98",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05109e58-ab53-44aa-b8bb-29d215b654c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0e46b90-6b35-4c99-a53d-0396c67417a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f45ba9-c578-4663-9501-063ead3b133a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dbf11b-dbb1-4ddb-bb75-6fb8ce6fae37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed312469-631b-40c8-a2c5-87d4304bbbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce77b56b-942e-42a5-8ba8-841095dc88de",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12733a80-3923-42c0-938b-9f5e7c8a882a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fad8023-f49b-4582-97dd-0df6e57377b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fa10171a-a9d8-43ff-ab34-68a90eb97bd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be3c1f2a-907f-45b5-9867-ed44af06bf97",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecfff47-912a-42b0-9fd6-238fc92b9987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0c6ba7f-2d9f-424e-aea0-795626ddf8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de48e8c-bd92-45bb-9a27-ef73a6807c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e2beff-531e-4fc3-95e8-eb4e3567e8eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3a434797-3729-463c-b523-eff240f5f7cf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "36a3f38d-e53b-4f95-9b2f-8161e8e979d1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "091827e4-5350-4918-8892-ea55f3420fcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8d868e0f-47bd-4f41-8b57-8fe7164421ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4399c8d2-61f8-4f39-b9cf-0a544eff2e92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1b556704-5075-49b2-9a40-563323e80fdd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ae6ee16-4456-4034-a9d2-ca3c1c83f1ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8661547f-9495-4bd6-a14e-70b2a644d511"
            }
          }
        ]
      },
      {
        "id": "2bf6587b-cf54-4b9f-acee-936dfe4aae14",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d5b6c3f0-de25-4285-8ae0-5f8d104e548d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "380ae463-aaae-425e-9fce-b6cec849caec",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4c2c724f-94b3-4a04-a1d4-c5b462e168dc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc57a56-e3fa-4174-99e9-911a68eda851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adaded6e-a1bf-4e20-8ef6-5128e0eaa823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71cc44e-82b2-4d37-b394-cbf2282ab5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2fa153c-e66d-444c-89af-ee8a341d8414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e485ba8-b60f-45e4-b037-92fb9cc70596",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76af3b07-9b71-412d-9a99-24d89a4cec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907c4095-cf47-4e15-a975-57b3e254780f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dc79e4-52ac-43ca-860d-4f7b44116562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d6d69f3-0adc-42ac-a4df-76275c1410f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e27bb8f-c3d7-4c34-9687-ab0739c43285",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bda0ac9-b391-4c4c-9800-6fddb54d06bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775314b1-b28b-44a0-a631-4371bd87cd39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac53a86c-6d58-4246-8c8c-a76ae423c389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2da6fa4f-6ae2-4120-a54e-119614017ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07542c52-4420-4572-9212-618dba0c9473",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822e97a1-d969-4cd0-bce7-4d4fca825630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6bcbb3-fe12-47db-b812-aa1e6d97fced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa7f4f9-ae3d-41e1-ad71-a6c41f4e507d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "107fc447-7e7d-4bfb-90ef-7bb488fcebf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a98581-790e-44c0-9361-f05dd777891b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baac5e1-1d95-43cc-bb1e-08e71b609904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75b018d-69e6-4f83-b013-f12aceced9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6cb623-3bec-40da-b88c-6e0ce8ed37d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3da9e778-3b34-4532-b6e1-8f365effe259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5005ce40-e764-4e68-95c8-74fb51d93f93",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae99970-ba65-4127-9123-89e803c328c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90dd5cb5-3959-43fa-a5c1-8a6c323d90fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c3c386-ee4b-4e9b-8f66-3d92e777ad0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaaf3ea0-2008-4efb-afeb-e2b3b4f48452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc39e95-ec19-49ba-b115-fcb3478d7ec8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55120ecd-f91e-4e62-909e-01c57220594a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ec9acf-3bb7-46ee-8032-6168cb08d4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a9c0f4-5d9b-4b46-bcce-6b3b712b6c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12c50aed-5e96-4cf9-a669-487bcebe41da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6d62f4-3029-48e6-a99d-9861deb30ff6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2254d318-bbd0-4858-aea0-604d467ccd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5ad5e3-b127-450f-b104-104a2170ea8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986f4b7e-f3f7-4a4a-9e62-a0303f6da922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed0b1964-5abd-4358-9f5d-7852a304805d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cad5a1-78af-4500-b919-151a383f8793",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8f1de0-fd7b-428e-b0dc-d6d00c90d174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bac97f0-b04c-4d7b-b4a9-41d7a1391bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ccafc0-a8b9-4b82-97bb-a414c479b5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c9a2334-a895-4152-adda-4a70d1d4e18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5334ba-de25-4ec4-96f9-0c0b7aa2a9f1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42effb7-3d01-494b-bdb9-0549799818ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3598ea22-242a-40d7-91d3-296b9dcddbf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e206e9c-1480-4b87-943c-d92b5d773093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49da6fb8-671b-443f-bd2d-efd0d75a3ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4300f3-afc2-4206-b7dc-fc386ba1db55",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ad6313-cdc4-4f6c-b6c6-f2ac48d0aee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7aaa61-62b8-4e3b-9b1c-c7ff11367eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9304f546-3f42-4507-a2ac-7cfbfe5ed566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2722c0a-602b-4da5-b463-bb80f19dce3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d1b6c0-b4e5-4cfb-983e-0666f2e93d43",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d520dd2-1b11-4d6d-8eba-3a53262a8b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4bc8a4-b057-4eef-a49b-550e05ac3c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8674c92a-1dc7-4055-891e-884b3d5c5b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2234446d-9906-4986-a7cc-62536b7ca2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcad391-e57a-48c4-a2df-c2721af02cf5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af01e315-d509-4cb5-9b24-a8134bdbffd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92865895-666c-436a-9d2b-749eeaf43a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bd74d1-25fc-423a-b960-c553d2c6236f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b977afee-2dba-488a-a05c-1c0932546b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff9ebae-1df7-4740-9f53-e2fdaf1971f7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780dbc5e-f9a6-4511-b6ec-9a340bcb3b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35f18f2-0088-474a-b7ae-a8b0efe6c25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be46faa4-98be-4e81-b23b-ca38c7ff0a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed0cbd3f-08fb-452b-b3ac-2d4caea0caa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5babe52-828e-4ade-bdac-fa76d352b14d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6996bcb8-6ade-4789-a411-0ad5c4a0533f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5f7404-12b5-442e-80f0-75847a37a396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4275a6da-4e68-40ef-ac56-4363fb4ecab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "420007b1-a509-4b9e-a117-9ac2a2780741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f320bb8-d4f2-417f-8997-92792932b9d6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2253388d-7546-4acf-aa73-8a1d66b49904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d1b375-74a6-463b-8535-c2b8409f777a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4f8ff7-59e1-4891-a66d-d6fb4b98a6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6ca30eb-3508-4352-88f0-ad5078c4ef64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe718882-dc2b-42de-861e-928a6903ea6e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbd26b6-a7f3-4c9d-bc52-6d8ad4b609f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1defba1d-acba-4ef0-9e4a-6f266006f9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df08059b-00be-4758-af44-acdf7ea7fdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a7295d7-3ecb-455d-8247-a1df4071b86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a45bcc-3ecb-40ce-9feb-079ae85f3014",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158023f8-2fbd-4401-aedc-17072d144628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b4e911-7d58-4fc0-91e5-f76e34709177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef611da2-6162-40f9-b4a8-dcfe81de17c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a807510-f8b5-43ef-b361-fde65603b650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d028a0d-4d4c-4caf-81ae-75da6927d8b6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e194d5-d052-4fd8-b1b1-f45bcf7a40fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3389d413-491c-4246-882a-6f6497a58bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577861b6-5edb-4817-9b64-3963e131820e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "931cf6df-392c-41f8-826e-ea16ac1a61d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc24c364-5001-4a1a-988c-3c5cee15b31f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5210b6b-40b5-4460-9100-cfa1794579ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed999391-1172-48f3-b91f-f35cc11698d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ba840d-38b1-4b94-91d4-aee7bf9a8147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05f7c0d0-37d7-4db4-8377-7a0aa277e060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07f8e24-c959-48c2-8df1-7ee4c04eda74",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2756d2e-2814-4192-bb5c-8d5e5b92b33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4939f8-1cf5-438e-be01-0dd737c01618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a9cac0-bf11-44a7-b2af-c7e3dcf6dd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe09848-fb64-4cd9-bf57-3dfe9559bb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f5283-2028-41ae-9402-329406d8b0aa",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb511b79-d330-426f-8b05-cfa8680c01e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc3b049-0977-45f1-824b-851217c2068e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1778b3-7fc0-4205-aaef-1ea90d6242a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6789568f-6a32-4256-b6e9-c66a2a38f540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeac3d3-8ffa-4d75-adc3-69d85a109f29",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63dbdaf2-3e64-4944-be34-ef3b0e0cb90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1bee7a8-cc58-4eb8-9014-daca6553a03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ab86a7-856d-4629-bdec-db040151c408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "123b37b7-9844-4cc9-822c-d477dc41ce81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da522c93-ee75-4de4-832f-25bc8ce31036",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fc3f2f-2e04-4e9c-9647-96d159ac182c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da95cd25-d71d-408a-b725-2823a81d017d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361162c5-ecd2-4910-b22d-36a49097cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "361be080-d1d3-4599-8d65-2ec23abe47e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7ee0b5-29da-48af-ba99-969e8cc79fd4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648c0516-e6b2-4979-b80a-5bd6c154454e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d8227a-3f4e-4243-9b59-0b0ce7ff9113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55efee7d-2c54-46d9-9b95-4e9f33226437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "866e9521-b3a6-4419-a682-73b4081627ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df728e68-a9c3-4636-bd96-656843fdf421",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67582f63-6c99-48cb-80c3-5effb3b61e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02d64f1-ff55-4cdc-9222-1ff097f92bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19db9f1-2cf8-44a2-8f36-32d30bd30b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd700dc8-066e-479b-96eb-a8e58d67809e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a01b56d-6e7c-44d0-aa90-1dc688aeb719",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38fc969-ceec-490d-b54f-86c27fe79bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb2f41b-750d-4706-8630-8777a126864b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdca175-fab8-461c-9b7b-ca7f134b778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0664bf7c-5f84-49bc-a5e9-a0cb673bca04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8847607-c797-43b2-b44c-e70eb4749278",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f66e3dc-a13d-425d-84ab-e63bde41f620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c843d6-1d6c-42b5-90c3-21eb1d1dd80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a937f77-6133-470e-a192-61e88cf4157f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e157bbae-898e-46f6-9b94-59fb96ddf4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c3ab45-3ebd-479a-a7c1-1a76b58afc0c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1605a857-319e-4ceb-b348-03426b5d95ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b407841-6cb3-4a58-b725-fa23923c42c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc2d4d9-b24e-46ae-b357-0946ac822b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6502fa05-dad2-4106-aeac-c1b1a75f67ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ee2cca-72df-4499-b36e-b561d2bb0914",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af74952-89cd-4f55-8361-dc79f903def3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bda23b2-4edf-436c-a318-f5f57890a769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9d909d-aa40-47f3-92d2-3db352802239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "42f3c66c-f89b-4311-becf-72bbc7672454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a7fc0b-7163-46e7-94f0-c87f0acb5f91",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be85c4ba-b643-439b-bcf9-0e4d52877507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee38805-bd47-4ced-92e2-3f3972eb828a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c82507-070f-433e-b4a6-82ac51b14e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d5d90e-1a5f-4ee8-ba59-6d71148e54f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f233c183-3fd2-4c25-b4f8-2658692c3a24",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa0a34e-a542-402e-b9a2-dec943395920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c05684-208a-4ff9-9a6a-453ed3165f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ee42b5-078f-4257-9292-d6d997667c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ae2ed7-9934-4143-aae2-940e36c96449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736dc9bc-5cd5-40b3-9bde-ac5d4ec0582e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c865fb6e-cf97-4f1b-8784-09f9e60247d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19aaac54-59dd-4f76-b144-67c8f9b6abbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8960ef-9584-4b81-a13e-b91825f5799d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "316c6f5a-57ea-4adf-af68-31161dcb9977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760ece76-1623-449b-87dd-6dcf6b9bae80",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6b1bd4-79da-4e4c-baf1-a11e8087d872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7022d805-d37c-4e5b-9c40-e799396e06ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7639c6b9-7689-4fe2-9562-87fb349a94ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "258e9b69-7d33-4169-9dca-e245e18985c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e397c0a0-b0e8-4159-b984-79ba3ed724c9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ea4635-6f2e-4d16-a7fd-7de52455fa5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092142ea-9ed5-4400-9958-5c77ad3f03f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b05de5-bb11-43a8-a047-650f6769ca46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdf4400-7e2b-4bc7-98b2-716b1311826e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b3af7b-e38f-4330-a08f-4e32117189c2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738428fd-4e21-4559-87cd-fb95c2fc67fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2a5dc1a-6e88-484b-80af-412331851ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf003cf-9201-4f50-9744-bd5a6fd7f1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79014fab-a9f6-46ec-9c57-2162d5584016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af86247d-9583-4a7e-ae4c-0f82455406d4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611ab599-f82c-4178-9576-c2030480a8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26c73ba-fb6b-421f-8be0-5bf55e7f50a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556a34d7-853f-43ff-a61e-1029d89de8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a1dcec-93b4-42bc-9b98-dbf89a1aaf10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991a4c92-ee19-499a-b265-39a736cc41c4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617251a4-eab1-468b-86c7-50ee2a49c3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c735f52c-cd02-40ee-9307-37a80392d9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7273c6-c0a5-4176-8e1e-ee4f29648871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c08cd40d-38c0-4789-b8ec-9b16ad7e5bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966f3116-8d44-4b86-a856-ce59831f5a1f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "015c2132-f5ec-4389-ae95-e93bbf5f2c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8b2c0f-82be-4c6e-b33a-798e92448408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefba968-a527-4653-a26c-312caa2f8e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "506aed74-4d97-4d70-8306-8efcb3c6efb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e1ff9a-9286-4619-8422-2a0da011a8a6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33f61f6-aff3-413a-ba07-58d31fe8c93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e14fce-7987-4d36-8c7a-35274a06f04b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e57951-9ff4-476d-ae26-395a49975740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8986ae-f909-490d-af0c-1ad49b411d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc187905-9f10-4c1f-aef2-5b7104900895",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94f787c-4d6e-4cc2-be15-12af932a141d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b57add-a708-45bb-9e47-73d9ac1df754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c267e47-e917-4fb9-9422-47935d2c8faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1660a9-e87a-42e4-ac3e-4b4a40fad5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103cd1b6-ee5d-4f69-a50a-0d80f4d156b4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0824effa-6ff9-4e67-9a03-a2a728fcfae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f777e0-5995-4850-a586-b88e2469e17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffba7ef8-94a8-444a-8ed8-d92ffceab45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3289e535-c0fb-48c4-aa24-5e353aa176c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a888477-a46e-4cd6-b2c1-738ffb1c8b4a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18306422-76ee-4fe3-8ad6-daabdc1ce86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a222b5e2-72bd-4b5d-873d-3d6ccb10d201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186b35ed-6516-4991-9470-42b0edab9a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4f381e-a57b-4c0a-86d1-846fa774d2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbdf0b6-d63e-4dfe-aaee-16695c42a1d2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13848cd-8505-4e76-bfba-dc85357a2094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d2d52e-b19e-4384-bf70-d82b478d755f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159b2bb1-310f-4092-ada1-d3687a3a37a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9004fea0-326a-4efa-ab51-681c0729fa4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a631e9-5e0f-4d24-b11b-1905b24b0d19",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbe9c37-a9ed-4910-a8ca-a97519770fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1996cdfa-0329-4144-86ac-d7311118895b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be95d7da-dbab-4b95-b0f6-636cb7ea8c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cfa483e-2c49-4e7e-886a-8041811e1648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ec1a5d-a8f0-4207-9ace-e8a4f626e141",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f60a2f-d2cc-413b-b81b-83b0fe8927e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966aeb7e-9014-4c8a-9356-c2d4f68f2707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fbd7bb-483f-4c09-ae8a-e29dac2d856f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b36d62-01ed-4cb8-a745-6d09db4ee1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722044b8-e715-40c3-8a42-64c034e2a72b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79573c08-e0fd-494c-babe-beb522437616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56918d1-a7f0-4aff-b33e-2b48bbde23e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40aa72d3-fbd0-4bd9-955f-5e4d36afb9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0f4c2b-e600-437d-b7e3-e30163a9dfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c215889-18cc-4d01-9080-d38524b78ef5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17525688-7a84-4f19-b638-970cb89ece87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8512ec47-f08e-4b48-8004-3149eb3329fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151d5b53-fb15-4c1e-b493-43d96efad818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47d2fef-45a4-4781-88dc-bee37af0d559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3af392-aab4-46f0-b65d-2c84f8c583bd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f93b87-eb82-4e51-bcab-400513fbcb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb59a573-5321-4427-b2de-e9d2e34c7a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3e9634-2f3e-4472-829b-9982ebaf3f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33344748-ada3-4565-81ac-2182191fa328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c1599c-4fba-434a-812c-cf98dd0e1487",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d74d80-3c32-4ae9-a763-6358577ab255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1433dcbc-c093-468a-a549-6bf2794ed1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a595bf-0a73-4aca-8841-ff7a6c3786b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8be2ea3-1488-4d24-8695-49406faaa190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196eb7bd-f9a0-407d-818b-4de13bc22768",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8206702-642e-49ec-a94d-1f4b763b7399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7889469c-a024-42fb-81d3-de4e09693e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86a96cf-b674-44f8-b36f-e858c9e8b70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a25600-b383-4e61-8511-7824f22d86b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eab7076-ae92-484a-b363-dd5a22f393c2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f700aff-8bd2-4450-ac01-d741faeac3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac387332-a52c-481a-9ddd-0f61da343108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a710162-f812-4e50-aac9-a25526441f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4e9b32-9b56-43c1-8051-426f51c885b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02459337-b37a-4f07-ad69-9f43e98a7906",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed1da1-3eef-405b-ac79-105dcf76f59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08fad302-942e-4227-ac81-ec927470356d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0a0492-a8fd-4d51-b113-4faea65929a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "deecc470-b046-4062-880a-7b97fefc733c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2586ce3f-bb32-47f2-ab6b-dd07febad4a6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdacdcd-1918-41d1-ad6e-92d6bea94b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c043780b-4993-4ffa-90c6-9219d129036a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09048404-b8f7-4079-a30f-4907fc470796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1ef385-80f6-4da7-86c6-930d616b8341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f978315-0b2e-4eb3-906d-15a73c24ab32",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e9ef15-73e6-495a-b028-6ee67fbdd55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c1296a-8c84-45bf-b2f0-b1ee72da3a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ce49e7-c52e-47e1-a748-deb362e4b5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d36c837-db57-4f35-aaeb-146e6270f65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15f3592-e3ec-4c7f-9062-61894229fb3e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca5d974-1014-449b-8f16-85d4bfce699b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5394c7-8799-43f8-b114-6f5346cfb539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08950ad2-c736-48b3-9553-8ecd9ca603f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "61c7b0e1-e36d-4b7f-88f8-456c1f470d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269acea3-af8b-419d-8e27-89ccae582621",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede3b9a9-eaea-4db1-8642-db4ae090772b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2b962d-2f17-4e53-8177-ddfaa1681f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17ef893-76e1-4fa3-85b4-6b3804cee5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f25cffc-7e53-4c7b-b396-77150a9887b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382eb39d-b5d1-48e6-8810-6b8ee213e639",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed49ee32-084b-4b6c-b6e4-af0f83f50a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfa090e-63cd-4b3d-a50c-542a6a7b9630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9510882-1645-464a-b815-76a8e5597b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "75407d0a-7045-48cf-8002-31525a85c678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c21056d-d8e4-452d-a644-8f28e188a74f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98454f8-769c-4c71-a6af-29eccf71f311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8f2124-b5ff-470a-bd4f-37c607291d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbda2c8-e889-4d62-ad1c-0360b69f4585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1909d7-ff3f-49be-ba6a-b6c7d7318ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f04388-8cb8-4e35-add1-780d9e76b558",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cf573f-c9a8-4616-b172-33cba0ba166a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a71aef-1811-4332-8f8b-caa4637550dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6884246-953a-4a15-b5c0-728568a18051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "76804252-f193-449f-817e-ae797f868916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae81bf43-c703-41f4-af70-7f0e51b05a61",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "216f55cf-99b3-4a4c-aad7-689c445976ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b171de-f66f-45ca-9bdb-38a0fae6b0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daff22b-ab2f-4900-9403-c06b74857572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "57ed0b58-f425-4add-8303-51f08980a7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42164cd3-4585-4e1e-806f-8cb360ca78d6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c0c96f-4f96-4a3a-9684-a2f391696891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881a6f54-86ed-4880-8b11-2ca2f2e28de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6707cf60-bfaa-4271-a0f1-2cf255f4ac9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a42762be-b89b-434b-84b4-1ba08cda9f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34f8ee3-96db-423d-953e-cbe9f18a8cfd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd4b4a9-636f-4e31-bdb7-d1fe788bb29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d541aa-1f9c-43f9-b6b1-a48da3a252b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fb5b81-9f49-4e81-8618-c462aa4ec0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "50f0d4d7-4b49-4e9f-9969-96dd7d68ad2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c12c17c-4b1e-48c1-986e-6c2051dba410",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca75af93-4efb-4caf-892e-562910dd6cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d0c9fb-d805-40da-96b2-e08dbb649985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbfd113-66cf-4633-87b0-4bd2c2aa82e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ad3d6f-93d4-44bd-9ec1-00953b9abd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a3455f-b81f-42c0-9dd3-3ab51b11f9dc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5d4ef0-6fe7-41ef-b861-3eecafe4f875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe0e07e-73aa-466e-97cb-f57fbff7aed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecc86a9-3112-4c3a-8b39-38f326234989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a508e06-9e53-4c75-9932-376ccc53e7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402dd05d-c9e8-4675-93b4-a217f5e53a21",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4f3756-d796-4249-9d50-ea4c4ecf639f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e967e5e-ced3-4b76-a2de-0c6f4a4d1ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2feb490f-4a31-48e1-b33b-32a39fb23f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "957cfe91-c900-47c7-b4e4-f715e8e5f6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81785e2f-514a-42cc-8c37-98507bdb27db",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be39351-8398-4929-87f0-bee91ab5b6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a670911-f14a-4210-b6ba-9489694a6b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac51cee-37e2-4960-a3dc-aa8b0e479e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "935add71-2155-4dc7-a253-149d819eda6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f273475f-fbb8-44f7-a1b6-57516e5a75c2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9e6e2e-7ecb-4772-bace-640d0f7192ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2521af1-5485-4938-9e0f-e7edc94b6a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0d244f-dbcb-4645-9fe3-f99edc5a8d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "550d5a87-da3f-4e53-bd49-d982848da353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b80455-528b-4df8-9ad5-4abdcdb20717",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc552fd-8f89-405d-b2ec-0626502f49f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8312ab61-528c-42f6-957b-ed03d23ddcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae964a1-7458-46eb-aba2-64518ad849b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ae35af-723d-4037-8349-ce6f56445948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b504d00d-8a1c-477c-8a2a-01d26c2db73c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e057c5-4c93-446e-8d84-6dc29565ee95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6049e981-e9a8-4868-81a5-97f2e1843953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8fc901-a285-4c73-ad85-e452d91a542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c51d6186-d563-43ec-b0a8-66d24e5c35d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1a356b-f957-4e70-ac7a-6215f4574288",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05850e31-ee8c-4ab4-ad0a-27f9503b235f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd342c59-3e6a-4d3c-8895-50893f6a77ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9abc27-501e-44e3-90b1-c4fe5078ab35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa50e20e-fb60-4f18-949e-184d97e5a4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4526ef33-5953-4236-89b4-154a0824c318",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17711738-ac76-4af6-a1a3-e3ec72c50193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d242d8-8866-4e20-8b3e-aa1ce64fced8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888015f7-dd65-4b88-84d5-65a3f818ab86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f67c99c-1074-4225-a4f0-50425abdc8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc219c8-ae49-483c-9ff2-96eab6d58699",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9263f7b8-b9eb-408a-ab2e-5f593cbc7637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fabc34a-5a5d-47c8-b28f-53d0eb567a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4228e6-a37f-4b47-abb5-8ea20667334b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b78d2c5-4813-4fa8-8953-a1060a2c3bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b21025c-2969-462f-ad0e-bd262b71d77d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d04773-574b-431b-afb7-8d1d0712baf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580861b5-2bba-4ff3-8552-be0568a4f88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7aa7ff3-8507-4388-94a0-4c91d39229b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3da944-d01a-48ef-a010-f7bb3e98d1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70b9d97-3487-4e19-90a0-875e2abf11dd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605ff39e-967e-4b46-a862-60d36e774968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fcaf76-86a3-421b-b34f-488a096d9fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed0f954-7285-403c-b16e-dc1a58352cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79dc4c11-6cb5-44d7-92cb-f7e5e7578bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c52668-6bdd-41eb-9ddd-5d286f9169b3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7fa497c-8b51-4b07-bf88-2725da213389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcacac4a-b0c7-4f3c-8370-1e681f98ef9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d69ac6b-4839-4fba-a380-5d4e936b850b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f549070a-0bb6-493f-8166-b9a4b5d87708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18dfc57-9bcb-483f-ba6b-134bdbbc0b71",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d82228a-0fff-4ee8-908c-0ce9615f5ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5302c301-e034-411e-9e42-3430ace93cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a99c718-4eea-4587-b460-4e83ac8341f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f24156fb-9e77-4886-a7c0-727cbab6db91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17e26ef-b9da-4540-b982-791a83a2840b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06e694c-fe0e-4b4f-b199-c9fe65ff0745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afed3318-00f5-41aa-9526-1d654e70b877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fd7866-a3b3-4eb3-9135-74b30de72f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90a1f033-2bb7-44c0-ab79-da0499d61d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac5446f-2fe1-496b-8fe3-9fd3971beb67",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4ad739-aac1-4af5-bf33-c554effe179d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee63c1c-0a87-49be-8021-9b32fb49c70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ea76f8-e015-4d0c-8350-4a0f911ae68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75c0e6e2-d3a0-4c64-8908-cea2683f1596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5ee943-ce7f-4ccc-aeef-a16bd565c30c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d39e62-9f1d-446c-9d6d-d28cd9e4e89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a871ed88-5e13-48b1-be7f-3a321ca8b1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42f7b1f-4763-4132-951d-d8f1c0f379cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "929b0e42-a4f4-448e-81e8-90fd66a3a2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e83378f-6a1a-4bba-a7fe-49406b610f57",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9216c07a-8153-48e8-9f4c-46cd33af3630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b9e4d3-9d44-44d5-b297-482fda263aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8859545b-123f-4f85-a6bf-35df65a96121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a370051b-ef8b-4d19-bb84-58b7b06da02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf6d415-d3c5-4a8e-a530-06d9a848e8eb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cb91e2-9b5f-4066-8545-5a9c33ab2fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ad8e37-ddd4-4d25-bc7b-78053272ff89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e24e11-b39f-4474-b3d9-e1f951febe80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f9156c-8539-4bc2-b29a-8ff5dbfb9e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b4c927-dbd4-4f7d-8fd2-f52111ff9498",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bf1d87-f68e-4824-b079-8c30071783c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b140ab2-e7b8-424b-83e7-42e99834dac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba37561c-426e-44d2-a831-c6249a2d4b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2eb6126-0166-4ec3-990b-84374e62f58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52cc39d-9da8-4f7d-b81c-948a2eda23d4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3154f9d-4c1b-4981-a092-701df1c751d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45291413-35e9-483b-99fb-dc0cc4caa8df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d4c9a1-e01f-4211-98eb-f32486bcb493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8fbac7-470c-4d4c-b525-67d0ec50b38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c779d562-97d5-4895-8bab-a28cbe087a3c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b925e7a-95b7-421b-a6ad-5ab7ab678fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14824be6-5b3b-413f-a19b-7196047754a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f45bf3-7c08-47a4-aa73-81b0c7b49bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d41486f4-57fd-4886-97ed-247357cbb468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da39c5f-0b5e-429c-ab4f-ab3e7dde0c41",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80818838-69b6-4174-8b14-b940accf5223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a58337-c706-4a8e-9c08-fe3b9f504afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bcc090-6a83-406b-b9e4-92a0cd0710b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65182c52-edc8-41bc-90be-737c66340a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aee6dae-5612-4256-bbe9-8687513e0f83",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219af638-969e-4c09-914d-c0bcbff243b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf096141-6212-4081-be81-e2df0ae23e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee20305c-a1cf-42b6-8c06-ac5c72a1cf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "11e16c9f-03d3-4fe2-91d2-8f2f3210111b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abf9e55-bebb-442e-9f18-0962dbc7d74d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3438a72-5aed-419c-97f4-8e3264194b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45574e6e-1d76-4ee7-8127-fa32d4974e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91524fb-f4a9-4188-9108-e6455692a503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8031da4f-e8ab-49a4-a3a7-e39663a71aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fb9a15-5fe2-408b-9e2e-316f5e0fe42e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c82b0f0-a830-4dbd-b4fb-645695902a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1930c9d-a5cc-4f92-b014-41905d0e76f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7e41e6-5f83-4f04-983d-697f42d0adc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd0d6c3-e13d-4434-9b61-22e7af6c916e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a893783b-49ed-404c-ad35-d8e1a30e13db",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb63bab2-824a-4674-8acc-f26ce5053449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be49fa1-7142-4b08-b23e-63bad99b038d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d5c8cc-4a4f-4f5a-ab08-59bbd6300294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "37f67d08-41cf-4a8b-9f6e-5139526af166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f762a83f-489e-4c7a-a92d-38a090ce306e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4061ea3a-329a-4daf-be98-fe8b34fe4d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424341e7-2f20-4927-9a00-63b47c8ba3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77e92c2-9d70-4056-9ab3-c0dfe94c8a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f688b65e-099e-46ef-9582-d1069f83abfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345c2ef8-f039-4f88-9928-a3dbf9e371ab",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f211ee8-bcfb-4f54-b8cc-324d47775c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c892388e-63ca-4f49-99bd-5ef3f5b58937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfdc758-3ca0-41f8-ae00-64bd9a856ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "32ea2026-909d-4c9b-9b1c-87112e901012"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e9e553f-9a0d-46f1-b308-c96bd1629bbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06b1e8aa-2ec0-46b3-ad42-0dabb467e1e9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8089907-c507-4344-b23c-10cf294b263c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "966b08f6-a19e-4cbd-bba9-531c6297c7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30230f8-8686-4f3f-badc-9101858038fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "352830ce-eae7-4b63-aff0-994380d81ccd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93424230-a7ec-48c1-a96e-c658eb8cdd1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16c55cc7-28e5-4592-a961-ff084b045228"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99c0a8fa-53e6-4660-9b71-456c1fbaaef8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb0983bb-3a4b-4964-9f3e-79d0967f036f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9736219e-9f1d-4dc5-b802-2af0f6e47461",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db381601-368a-450c-b0ab-4a609b19cbed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae24ee06-f2cd-4949-9e1d-211f5b197de1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e7dfa19-bc48-4e11-9fab-73c719aade38"
                }
              }
            ]
          },
          {
            "id": "a30f6e3b-d982-4abf-889b-39c5005abb1b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b9c744c-f0cd-40da-a525-36504b6d5ab3",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4fd02d06-e664-4877-b50f-be7a83f804c4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb96923f-f3de-41f4-a2d3-2918eeecaff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1b600f9c-641a-4aef-8f76-39db137d179b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc6cf57-d036-4da5-9a1e-3bb991368f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0381d740-b33c-40e7-9a0a-50c4a93cc853"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a2ff51c0-eb3f-46e7-a81c-dfa3283fda92",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d04c57cc-ff36-4bdb-a372-b83f9cfc3aa5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3842d229-ff97-4871-b9cc-b61d6a450791"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4df766dc-5028-4e41-adc8-2178e81ce72c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f501f609-7d90-4bf1-af2a-8c3fbbbe443a"
                    }
                  }
                ]
              },
              {
                "id": "f701050c-00d1-491b-a5f4-0410c28f341d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9078cbfb-d192-4f0b-af61-12d6cfa889e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53f089fb-835e-4b9f-8306-4f1e200cebf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8221667-b2fa-4a88-bb64-b416748b95c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0d9b00c1-25be-4270-8d56-fccdd80fd7c5"
                    }
                  }
                ]
              },
              {
                "id": "d8e8a49f-a689-4fd4-8077-4c040a8b35a4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf447fb5-0153-4433-bee2-ddfd5f8cf0a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9bb776c-076b-4676-965a-096996c32d9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffecabc4-43c7-402a-8b85-0a440f461635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "482e1ef0-35e3-4a61-9de3-4fc0fcfa9607"
                    }
                  }
                ]
              },
              {
                "id": "a1b1e517-ac24-450d-9621-5e884eb38e6a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "316ac013-db5c-44c7-a0cc-78efd8f03b7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c91d6c8f-6986-4eca-9283-49aa8164283f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27914efe-1318-4de2-83ff-df396c27ce47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0c978639-231e-42bc-8b4b-8f8fa75d6593"
                    }
                  }
                ]
              },
              {
                "id": "c746110f-d5be-4949-9c3a-cce1cf589cc4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cedefaa5-3432-452b-b811-2ec672e4b615",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecf7b3f2-054d-4947-9134-df396898b79a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "577c10eb-f0c9-40ca-b450-beccaa3a12dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "aa52fb2e-31c8-4905-84cd-49a55b950d01"
                    }
                  }
                ]
              },
              {
                "id": "9e6ac2e8-8249-4bb3-bd2c-b5c16210d50d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ddcef0b-94ca-405f-b925-20d8f2247634",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93dbf29a-06c6-434a-8cba-720974da5c4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "284c71a3-a754-4653-b81a-e5c3cac7ac4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0aa80045-f7b8-429c-98ac-1cb803d45146"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff257dfd-44b2-4212-a667-d2f709b0b785",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ffcf002b-1ac6-4e03-8aa2-9ae3596e7594"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8510d4b6-b941-4fbd-bada-c40352ba2efd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af934152-e982-43e1-af63-43759c459aa2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d450204-9b90-47fa-a224-c939fefa9a47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "52861428-a31d-4f2d-9bf0-a2a7665a7d98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93eefc5f-ca53-45d0-827d-9e4ccaa0c448",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5a33deb-8f59-4cb7-b88b-3b1a838f3c4e"
            }
          }
        ]
      },
      {
        "id": "72e61f94-86a8-4ee2-8c35-eb717eeab089",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "327d2421-f2e0-49dc-a2a5-5feb8fda8e5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07b26f8a-7064-40a0-9373-89ed3f2282ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "105da91b-6e25-40cf-acaa-2771041b631c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e42ae8-688e-4145-b5e1-a7a72bd57476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5e67d4-4e28-483c-af11-d8c85085727e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77a3223-2244-444f-99ab-06093574a317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b794e27-f803-461d-9ed4-db8aa07813f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f303d708-cd74-43d2-b30b-b5b282fc78df",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1cf7dc-f8a0-4d0a-a152-2c5c1bd875dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b913a300-d6ac-4697-aebc-fef0cc9ae491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50275b1d-f300-4cea-be52-2303f28b2fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ca0e5f-7d9b-4d6f-af31-b2d43f7ac29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae23f4d0-b00b-446d-9c22-479a3489ab8a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d58af30-178b-4405-9b2f-7328e9913329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a683e229-5ed2-4f03-94f9-0ab57dd8b850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4260664-e886-4707-992d-f03f30036645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69b7f632-88cf-4c78-aa5e-addc29444045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ecbf59-6aaa-4d15-923f-4087b2c978f9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583b1067-9fac-4011-8d6b-e9ce830f3f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36c2dbf-e9d7-4317-8193-17c7abf014f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b959ab-0bb9-4c67-b2a4-8670d939f39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afd10db5-1ecb-43dd-bbf3-89117d0424ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6c696b-d05e-4de0-8bf4-f1d7a64a439e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fd16a7-32e7-4e0e-a172-83b3a403bc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb350b11-fd6e-4019-9334-3a2913e4dcf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c2eb12-05ef-4eb2-a77a-650e8d2f317b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be541423-6e03-435f-ac70-e7ad10cc6b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f116cf-c05c-4f3c-8a87-d745ab3cb654",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f3a399-078e-4228-bf39-bf6845777e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76e8b03-3791-4532-b7a2-a850267af042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6542b5b0-4b83-490b-8c53-1229e20a9c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff60c466-fe76-40cb-8912-b7618535ba2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88dac08-e068-4023-a4b1-116aaf906beb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1783c7ca-0418-4c42-a9f3-326ad8bad095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8187dc-b757-4c96-9ae5-4c681c2e419d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810faf08-c145-4b13-872a-f9d7f2b9a011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "637b60ed-09cd-418a-b460-a1519442e3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d49edf7-950a-409b-a9d8-21a3c5bbbbd4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d74461f-c4d7-401e-960b-f6640e69b7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0695ea-81a0-4e31-b188-0872d6978398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cf5a8c-471f-4350-ad57-4e4f03925e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "460715f4-33a8-4332-af89-9096bd60a772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2f574b-070f-480a-9e57-cc6520779832",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f4f597-0fff-48af-bccd-5a6b318d37f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c980ac-b6c6-45cd-a915-d501a967ee18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e5298b-cf4f-4497-a6ff-e7da8e48a105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae24136d-d802-4259-a393-cfbb8d975158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23af1e33-9561-4d87-95ab-e8e4f03684b9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292314f7-5c9f-4d53-8566-90fcb10acf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98c5ec6-bab5-4d5b-aeec-43f156f311e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40186a21-770c-4736-8113-c5a70a3cd624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b36140cd-a597-4a61-bb28-9dfc9b7b056c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26be8d29-24e7-44d3-b4f8-54b92800d3d6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b3ee89-e927-45e2-b0e1-f9453f456d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d219ea15-d3dc-4104-bcfe-258172887a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552913f0-0891-43db-a3dc-354f770f863c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "61f2e27c-611b-4ec4-9550-b968c4184556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f869d6-9f95-4356-b9b3-ecce81c6cf7e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27553dc1-ee36-4454-9f4b-4dcfe4005add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78198433-a7d5-41e9-af71-c8cc74ea3b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff5a5b3-4760-4bf4-bd64-6b9235cd3870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94cffa86-e2c1-4c1b-9d4d-64c1ff7ec5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ac61c0-b88e-4658-8c5a-3fa23175529d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77161d27-3321-43a7-beab-06cdad93e8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f52ab5-d561-46c4-a2ca-1c559d9564ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1457d8-6bb3-4603-9134-bb14604eefa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1a4b1f-e511-4a75-8b7e-218e0285f96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6932ae3-f468-4698-a884-ab9ad2bdece6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03589ee4-fb7e-4b69-b086-611be4fd8452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa208270-0749-4d29-97e8-549ab53178ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce12926-7d19-4811-a1ec-d5457d685223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f70c5e76-cec2-4280-8ae1-20b04d4d233a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a69a1ef-f6f3-4629-a83f-49a43c8671d9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68eb55d-d1f1-416b-87ba-3e8977bdde24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72238a85-cdda-4adb-b982-d457d83a9c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff9122d-faa3-4f1e-95ff-768fc18e4dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "93783714-fba8-4cc3-b55a-d65730127923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7601711b-4976-493b-a402-98d6e9a31412",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855a7004-fd3f-4abc-bbb4-5288929d5f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23bd3af-39a1-4f15-ad31-a4b91da72296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd75b2e-365c-4e16-bf63-de0897f2f582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2dc4d6e-7543-4316-809c-6f0b3a27fab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42913c55-a3f0-4501-8f5e-f0337f634272",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0176ccfb-fd42-4f87-9f55-845812afc2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d8ac7e-c53a-42af-b223-5916d4b44c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d366cf4-f902-4714-90de-e5f17e0e20d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd52c77-2754-4cdb-9854-2828373ca8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7a4dfa-54e3-44e7-9501-0b22729de603",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c397c57-26c1-42ff-bc02-6c1935a16a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae01df4e-f21d-4f0a-8c00-d3cd96ebf906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694bcb9e-39ad-492d-a496-a2398a302205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b436ac-22cd-47e9-8529-d254bbd64d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09c7c94-af46-4c61-b0f8-23b69528098d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1a8245-145f-4649-b3fa-99ca6d19729a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beae5568-8ad1-4703-a712-8ec8865a2c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a401b28f-a20d-4a92-9bbd-e86f619119bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bca2589-c393-4699-9877-1c219ee453d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbff87c-51c0-4923-98ae-9fbc6083892c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdec2d2-7347-4b88-83fd-9a329d942948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29cc8d18-446f-4dbd-920e-4b64c8d0f3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744c1006-1f65-497b-8737-6d67e10a1853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "477e84c4-c104-4d06-a790-cef4aaef68f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39449b58-a65a-468b-bd5f-54775a118c2f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8e4fad-ec34-40f7-8434-1bbc9bd85a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf062c1-06cf-4d47-a516-1dad69bc6ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c20c61e-3ec3-456b-aa48-9ad9dd27b1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da534e7-b57c-49c8-bdb5-3603e489b198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3598dd86-d2e7-4089-abcd-6ed25d7ed54f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c26b106-d362-4e96-920e-e10f525dbd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13512ad-c400-42bc-9b60-c6695c0180d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cd843b-80b6-4045-803f-b2a4363a02dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80c735bf-5afb-4ccf-a919-2d06ef528891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbac6442-5288-4634-935d-f1466f16045a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53a176b-fc2c-4ab3-8bff-e8d09522327b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3dcc15-ea6c-4edc-96b7-ff8830aded0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2196f60e-75e3-4a85-be41-9d537ebe2cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d53ca823-e4dc-433a-9dc1-a82c12c5c990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad25b1f7-f958-45c9-bc4b-ff48490daab1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6eac38e-20b0-4140-a5ad-606d70fccf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfba6408-e7ef-4d89-bdb4-f1fcdefb3d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d71d50d-5f3c-4529-b91c-6cde074721fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a48eb3c-bcae-4a5a-9374-b9e7cd36afb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250aa518-8dcb-4670-93e9-5aca4cc4676d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7ef70a-1b4a-46a3-aaf1-5aa738c5d490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6daf14-e344-44e4-9c49-74e0664b897d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226e5fa5-5498-4813-87e6-f8c00934d6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a61856-f89f-4545-bb4c-cf6b155a7448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27217f11-2148-4a2e-b816-d49519c9c2c3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f415cf1-8273-4ba3-981b-5d03be4e79a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac26af51-aca3-4705-acbd-e1c8bd512f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbbfde8-862e-4c9c-bf76-1e1df7352c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95a03204-e5c8-4494-bc20-9803c60f2e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b92ddf1-7ac2-4554-b831-02367ca50f60",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247ec951-96bb-4423-ad1e-8d04f08e3d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f43bfc-bc7c-424a-8f37-cd5c88ec0326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6814c3-f9ef-4282-81db-cf0542393036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61c3c4e2-50b4-4b74-b95d-6f403a35b016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acc2ab4-2ff3-450f-95aa-78381502f788",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef5340b-66c0-4695-b8ae-c940aca4bad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc6d073-9608-490d-b8ab-d6a4d1f1e64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61826af3-80ff-44c3-b087-26f7f575d44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47d01966-ed62-47fa-a761-d61a508f4435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2f0f7b-3fd1-4a93-85e7-473828d25c58",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d115c4-f038-488e-b9ce-0eb04f3eae75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f8c8c5-1bc8-493b-8a70-9575ba4391ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a0ff0b-bad2-4f3a-abae-041220339d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42539c4f-4ac8-4ce1-9644-1331e34e1d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca4e91a-6d73-43be-8469-c32c42638942",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d20744-b892-4d03-aeec-f06c0991216e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bed3f01-3a53-45b8-8783-9a13d2b59486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1422209-ca13-4a44-9dbb-e0d7b989376b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1865fb8-ac65-4323-a810-b8221be45c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa036e8e-05f5-477c-a692-724d6158ff0f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9278c6fb-8dc6-4261-ad68-bfe6aea3bf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129d6e4a-d381-447a-a0e8-c347db99f77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b068f283-72a5-4297-92f5-829bc422c435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16d12745-7017-4f8b-ba69-4a1035f61a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c33328-3e8d-44ee-abc1-bdf5c021bb95",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60acfc74-88a0-42b6-a608-66814c02c477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ed5f8b-4963-4a64-a497-df67683bd5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11ca44f-b185-4a3e-83a6-abd20b025634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66231307-39f7-4e77-a14f-fcc01a0ba130"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab38202c-0671-4cc8-8c63-b38474167857",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e1488dd-4ca4-4ffe-ad9f-deb99dbd9eab",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960e6b9e-4ebd-44a6-bed5-f038a8fb9563",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "916588f4-2b7b-4be8-a92e-32d6dc4a1fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2d89d3-646d-4c2c-82a7-96650345a3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fae9df58-64ff-425c-8bab-60bc1936e754"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "920e64e3-75cb-4c42-a20f-dbbbf1f19435",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dd3535e-2ae9-4d16-a8a8-e4cfd7ee4696"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a86f586d-7d0a-414a-8046-307763aa8876",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e8bc8a6-6722-40fa-8697-c56b3ad30fe1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc88b4be-f0be-4cc7-9a80-e74e9f5758e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c87ebb22-7655-4ce7-9266-f8f3bdbd0b45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d731e4d2-39f0-463b-80a0-c2ceab9773dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "443f1f28-76b4-4839-9469-df5b833bd1ca"
            }
          }
        ]
      },
      {
        "id": "c1cd2253-8dfd-4cf8-9a64-64b1c7f2d33f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "deafa69d-e592-45e1-b0fa-6b5f2f48a5a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e17d7270-d557-4fa1-9db2-6aafa893ea48",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f6308acc-3ab8-4b97-9350-af8e3b79c027",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521b7128-137e-40ef-9e9b-c5542d6a80f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e70c16-0dd7-4640-b8d0-1e4fb4eb2c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07113513-b271-4b3d-acdd-b788f2bec415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f75b47-1b60-4a62-97a1-723c1be9ee62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535e5bda-2368-499a-b56a-70ac6aa05347",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2649d494-bbe5-414d-aa76-8e7cd1949dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0734ba5b-d28f-4f24-ab2f-adf10897b0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f2e00e-6c8c-4e53-9c3e-dab8a4fa0634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "389b8b03-7bcb-4603-bf54-787aa8a85ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949d6bf0-798c-4f68-8f52-24c9e0e7c23a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e553886d-18af-4e92-bcce-d2f1c6c9fe74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285293fa-2c1d-488e-ad0f-f9e25c2d0276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fe3cae-8f11-44ad-8cf1-a53f3710219f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d67b3d-9ec6-4e0b-875e-2b66439f8ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb78172-cbae-4208-ba05-db8c13ada5a8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aed682d-e31c-4c0d-82d0-29fc1a6e851b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2af2f0-e7eb-4503-9682-62b34a7e87fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622efa0a-2818-43ac-8f1b-dc8908604e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0eb99f5-0fb7-4ad1-9e17-7bf6bd1edce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130336d8-92bb-4afe-99f8-52873df69a53",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176048e1-12c2-4819-ad3b-34929a2aa3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72a7d46-2181-4c67-8f80-b44c0a158593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274829d0-c521-4333-bec7-c20eda627308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a111a8-e58d-450a-8c76-e44f6d034c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82421828-6531-4280-8e8b-986d84f920ab",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241fe922-e35f-4706-bbd3-cce1c1fab9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fdd521f-35df-443d-b6d0-f762c02f8268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5630a9c4-6875-4558-a2b4-962f9c9115d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a6eee1-0823-41df-a35e-a57d71674604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ece3f05-c94a-4afd-97e5-94e545b21592",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc079b5-ceeb-44e0-82e2-5b0f9ac76d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa007302-adde-4045-aa4c-b141f6d811d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363d97b6-6193-4e80-a6df-ad9e58014dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8afe92b-e904-4800-b8de-ed87d2968cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef24f7e-a854-49e8-be9d-129ed0f2faf2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4647411-c141-41f2-be05-f41b3d47d03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5fd400-568d-4590-b3c2-037fa271b179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e36069-90ea-4e32-a3a7-7943c57e346f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf295c7c-f071-4ce1-8dcd-3dbda81f77f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2b19ed-f228-461e-88ba-37dfef61ee62",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8875ec-1bd9-4e85-8e17-461aca79d7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30df6110-ea42-4d2e-aed6-63745f9f046c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88304564-ce35-4f70-b032-f0e5c2572038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bea8c3-c958-4f3a-bbd0-24e3a1430058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4f4407-f110-446f-85aa-d260bdf77bd6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a3418b-fd8e-4e51-9c04-5ce5eb8abd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecd362d-6fac-4b26-9746-6bb31e054c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1b4310-0439-4f1a-a71c-dec1a08bf500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50a732a1-63f8-4d92-b3bd-9d444b1d69a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de0dde3-e216-41dd-936d-8b03676c8774",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb32fb2-d735-4d7c-9032-c3b3fb10dfa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fbe538-5500-4bd0-ae47-34841fec592d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc27503-5e4b-461b-bd83-8348756d5a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "90075baa-9e9b-4a84-b05e-07068b516e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ccbff78-c21e-45f4-82e4-5f526234b781",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5313505-b68c-477c-b474-5769d8a8acb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e03f7a7-9cbb-4045-bac7-715d0f0f24e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608b2715-c64c-47fc-807b-26fa0ff3a65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38ec08d9-33bb-4f4e-9af6-2f1b34ed2d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac20118-b109-4d71-9829-250605c0cc28",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbed94a-729d-4453-8f8a-18ec9d336a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712cb3b3-21a2-4371-90ad-bb3c2ed0a523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff37ed37-517a-4391-8dd0-01da830b6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5afd9e-f582-4b60-a54d-e26bbf959f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08a68ac-d1c0-46bf-8e1d-802d14496d66",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276dd3ee-51cf-4b1c-8d4a-dfb4117fe059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4313f69d-c78e-4ad6-b078-6ca5fa75dd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dea5e8-1ae0-4034-a87d-1e75f18672f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a10e1c8-ee3f-4bd4-8c7e-e3720b60f7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a49009a-e2e0-4bb2-aed9-ed615418eb80",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18328063-2138-4797-bb27-9703d59601db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f972d537-7b8c-4db6-a082-f9f69f21145d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ce2ead-eb90-45f6-94a4-cc2bdff05f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff19060-b2e0-4332-8c24-ac718a5c9536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d085672c-4b5f-4364-8d42-777ed68e3234",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ee96de-e537-4b14-aa74-83a83c8efed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4e7571-2c0e-4f06-90df-60582e702403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea44464-3dd0-40b9-8b1a-2b9e828ebd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "57fd568e-7c99-45f3-ac4b-40c3ba730531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498bc6c9-76f3-4c3d-b393-933cae1c4097",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec810534-8d89-4f44-87d7-6a2c1c5dab93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5195c2cf-6317-493a-9fb4-a8ee39052603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51288b4-5895-4bdc-b365-8e80917ded66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "165f7ed4-6071-4595-8ff0-3a62968b4bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1d6d6b-aa70-4c1f-9c3f-9e117859efea",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0265d11d-b1a1-4431-be8a-c2bda61c542b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80a720e-8daa-4da9-8f38-d5d5cb30d8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730c394e-f633-4c5d-9408-72394b465682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0e2fde-8873-413e-a67d-cacfefb2cada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafb85cf-8504-4302-b912-cf5766466a46",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8522a9-2663-4890-bc6f-ec64300949a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23b34f0-ead0-45f5-bf9b-a4ec350ae3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cde421d-60e2-4ffe-ad18-a0cbf385d51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3338a05f-35d0-40e5-9703-12082352dc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9825f572-2c64-43d4-83ba-f909fe4889e2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e852dfa4-87a6-4a79-87b2-0daee3e1492a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5343e3e-3ae7-467c-8697-45c2f6b06ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95013aa1-c2a5-41e6-8d1b-95e95ba17972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94d62b37-5d12-46f4-b025-ea0f61bc3000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7558fc85-8268-4752-bc2e-4969e9a4c6b2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0814e525-28e5-4af4-a6d3-9b171ea2bdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da74d06c-69cb-4cf1-8734-965b596d386b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1462dfb4-9535-481e-9cc9-0c3cd257d1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56a7bb0d-a968-4b2a-bb52-70dfafc1a689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d437a182-59d4-4b87-81d1-23b3fb00e661",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba52da5-7d2e-4cf5-bc42-d40d11af320f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e1b920-3bed-4194-b922-76e2e7875695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f716308-e0a1-4002-9234-521ded7a86ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9130b57-73d5-4c88-8b16-ed98d43ab850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01d3542-271f-4a66-89a8-d2786d89f657",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc2e45b-b80b-4b9c-bf79-d210ebf4454c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003d624e-cf53-4d5f-8c22-f6aebca3ba87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08c80a0-cd2d-4c6c-b890-eeda8d48a121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f50a1365-119d-42c4-a61a-4ceadb9cd95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d33c83f-416a-4643-ae70-b5f50bc6941d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb6c492-498a-4a3e-8519-9f278259a1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8596b5-8766-4a5a-927d-0897074e28c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d831b0fd-da6c-43e3-ba4a-2b04860ac6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca241591-776f-40e4-9f49-594fa8364079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ff9bca-b27f-46e3-be49-ed6e121bae89",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dea5ed6-9899-41a8-9fe9-ac93d96abe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3daa27-58fe-4733-b3a3-19dd7efa6199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6304d972-27ef-48d2-a0fb-717ea4cc5381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "308cd5ae-09e7-4233-a77b-18254b56710c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1d5f96-fbf1-4b35-a58f-34f54a981e6a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87536f9-8714-462c-a754-37ae50db3d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "778d716f-253d-45e4-963a-70b56f1b5834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725b88fe-b32d-4af9-9a66-83f82ee5cf68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1c753e-1be0-4312-8509-d154540667b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f42065-52fa-4ed4-8bdc-c7f11f940822",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27ea89e-82d4-44c2-8232-a308f7110af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644e3f04-6502-4737-a4c7-8d757c422cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d489c23-22b8-4260-bf50-9ab722d7577c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6489ffaf-62d8-465e-85f4-ab8c73a52d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ca34c1-9777-47a0-ba66-18a6b062640e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a083d9-348d-4096-b9d5-a3d9b28e76b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb040a87-405c-4c59-b752-a2d674b273ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c642f87-08f0-4903-950b-2d4f367ed66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "789b3b42-bf93-477d-81ed-5a5968c9d069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ea4996-d6f2-47c7-80d8-f6d0b522c7cf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64e2b60-b1a1-4a84-b892-9c77ef37d054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2d723e-10ea-4a77-90da-833f2ee28751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373457ed-2b57-48c5-bf79-6449fc12afc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffaf1a82-cb1f-4e08-a3a6-e09d83a40718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2899bee1-9499-4c05-9333-3ab1d9a46792",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14dbc3e-63e1-485e-897d-427d0695204f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c001e1a7-b866-4c1b-b572-a2ee0aa4304d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c640897b-0087-4538-a84d-d8d9be9991ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a341d358-7b81-4bc2-aa04-380079745ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c152bc-ce76-498c-a53a-9ace29cc1445",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23841e19-9bbe-47af-a2e8-16cdfae19d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b424f08a-6521-45df-87f7-64636a66c4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a21917-b187-4511-89c0-db39896dc60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b192ff2-fc14-49bb-bbf1-417b4cf5d76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e77801a-568d-44d3-9738-ae0ee78b1d0e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed1ec64-06c3-4fba-86ee-9dea1fe6f053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e928c9-f6d1-4a4d-ab96-37b940a5f49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91054fbc-7d74-41b8-b8c1-99b69b2c9ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f638ed3-1c92-43f2-b6ef-714ef29a6406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc303f8-93e3-4efe-a920-0b34d4b3e099",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94a96e9-8ec1-4e33-b830-4eaf64253449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2891c2-0818-41f6-b71e-6621ed896caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48aa7a11-4f4b-4f7b-b409-06956049f34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d174ef01-fd41-42f7-8b53-a72b8c8bc8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750b8401-469c-4120-a1fd-27d8f5959292",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88f58d6-34fc-43b1-9420-4edd3d9af5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3aea8fc-de50-4ada-a788-e869a406714f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c884626b-c43e-4d5f-945f-cbc548e69500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03a53fbd-52f2-4309-b3dc-026505c76636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4c66e1-2371-4faa-bdf9-6869539e3aad",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b6fe4b-7d6e-438b-948f-f9e2ad60f3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda6a937-d091-4e43-b978-663d5add2632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c0701b-09c1-40b1-b2e0-5b54460f59f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efee040b-16fc-47b9-b2f6-cc61ccd352d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a74059-8e23-42ea-a5bd-1a2fcff69ca3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffac164-120d-4e16-ac60-aa44914d9156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796eb68c-186c-4cee-a2ff-7cbd6f7017c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d707f1f1-4e37-466f-9277-f9d82462443f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e192074-d0bc-4d06-b1b1-9996d47b871b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906b528c-1770-4acf-9421-a28b30d6be88",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e4972b-25d6-4982-8782-10d3f5dda293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f6ca19-f032-4513-89b0-76de6eeb00b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccaeacf6-25b2-4344-81b0-c373acd078e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71afe0d4-c73d-4f41-856b-36387040dbd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "355ba106-8e2c-4b0c-b929-722c9f356b1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a99f0a5-cf3f-450c-8ca0-7f340edbdaa4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77683842-5632-425d-ac24-c59281e3e576",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "01be0ffc-6110-4aa6-8b34-cfa73bbd4044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba346b4-bcc6-43ed-9963-7652d6a76c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c4f59ab-9825-4c3e-8906-03ca1d3ab68d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ec3e369-38fc-46d4-be38-e5150cdb2843",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b0030cb-690f-448f-952a-fb0d13197668"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2da2a7b2-3fb3-4ad6-88d9-d312b85ccb8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c179b30-6072-401a-81bc-0adb12037aa0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06f67c76-79d2-437f-b105-aaeccc6b5ca9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "763e35c8-c169-4df4-b005-b1d49f796dfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d9e1e11-0bb5-43eb-ae2a-9e8cee6a2d0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87da2de5-8bc0-4ac3-8b2a-4e469aba6bcf"
            }
          }
        ]
      },
      {
        "id": "d64e884a-4e3f-4dfd-ac90-9f908381506e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b37b18ea-11ea-432f-b644-30956555c474",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be51725a-63ad-4645-b941-a35f4c332e50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9285ab77-f025-4680-a980-411ad2731ec9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b2f4c4-251c-4b96-b96f-86cb8c7c649e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c174f418-a865-45ea-91b0-e410288ba01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1c7473-efc3-4e38-a497-5680f2659616",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf63de5-1080-44f4-aed7-a856b7008474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1e34ee-18ce-43e7-b58e-1cf58e621311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30766e51-f13a-40a1-88df-54aef23fd95c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31adf1d6-e53f-4116-8b6b-5983c39d8126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663079fe-f0bb-43e2-af5e-e5ad829875ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e210a0-01b3-4e8c-8b4c-9185fd296828",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb4ad1f-295b-43b3-8082-f5fcd7168cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8d0fe6-76b9-43b1-a861-c30701028e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5a9621-1772-49c8-b6b9-321f3ae3b8a5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cb7120-f40d-41e7-967f-be4b7e3781d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04090d4c-476d-4ad6-bb52-84628abaed38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73cc3d8-525f-4b88-8424-7d65b06f6726",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7718ba07-397e-48ae-9ef0-2f134cfa85ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e107169-2cff-48e9-8e18-1fee7137bfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3c6144-45af-4d14-aeab-fc9d4b856585",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc75b76-0d1e-48af-b55f-2baa91d77eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa5e8bb-cbf1-4e75-823a-cea6cec4eea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f89121-ad8d-4479-859a-ced6675c7443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb776ec-85c3-4f4c-a1d0-6d1d38a52d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae08a148-04d2-4378-bb24-371a20e2059d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba812c7-513a-4d1f-8526-9208dfd08c2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e575e259-fa75-4615-8c56-f9440ea2ac81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9958c578-e30e-4173-9a89-0b737260bba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc11f8e-f39a-466b-b593-5f34228b1166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a176940f-d2ab-4a75-8364-06fddfa8dec3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0485f629-68fb-4cdc-8f74-12c05a4f2a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf29c48-c5b0-469b-bc39-051f90b5f26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2217ce3e-c799-43ee-957c-618f293fc899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aedad91-4c32-474f-8720-82a9c5201c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe0de65-6a8b-403d-92d7-633652f1c68b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ad0e63-7124-4fb2-bacc-17220d631632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bae166a-574e-4a76-b812-629304dc0351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a77862e-1f82-40d5-ada2-5f726bb443de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295402ac-99c6-4ddb-9186-e4f9f5b734bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db57687-20d7-4869-96cf-85945f6b355e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba04abe4-e0fe-42f8-bcf3-f757a14f7e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e769d2-cb91-4656-8155-df6de7ea3acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e08821-4e29-40d7-a2d2-4686735be9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072c9034-654b-439d-a59a-09cbb8c04615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1ef803-5301-41df-988e-1204c1b2803a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d0796f-a184-487d-982a-cd8502dfaa50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28be193a-de84-427b-a29e-665dcf2d49e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4064a3d-571f-45be-9e98-528a7b83b7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc6383c-e3cc-4805-93ef-e480107c3ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2666496f-6207-4676-8793-48c2a0aa0a7e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0310f5f-7d9f-481a-b658-63f66ac9347f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7572631-1f6e-49f6-9344-121cedbb1f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e582dd94-6485-458f-beaf-fbd750301f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4753619e-c2bf-4e67-a1b3-0e516c2532e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec18f22-703d-4375-a14d-59fc2ac535fc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca060c85-2d3a-450f-97b1-3136e6ce5ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed502274-440b-46ef-91ec-46826c3aeec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c61c64e-dea2-4d2b-9794-7f0633cfabf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fb57a2-e20e-489a-83d3-22278e09df3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1937589-bd02-4f30-b0a7-133d7696517a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cc437f-78a8-4593-bb65-2ac1051fdbac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "075ade5c-6f62-4e42-ab60-0b4783e57f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff915475-e047-4678-b89a-939ed8fa38a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ad425b-4aac-4318-9891-e6d2ec049a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b119c01-8fd7-4fbf-b5f9-84ba9e02ddea",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a89376-56d1-4de8-86db-66c93e583a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "460e3634-08c5-4d12-a979-7e24f767788b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5fa765-16f9-465d-aa9f-63bc98f472c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0535580a-498c-44f9-9832-c99cc54f0c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ea1a13-565d-4f81-aac6-351778a1bd2f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa8a6d5-b5b1-4594-b4a4-ee853e8a30a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f197e9-22fa-4888-a030-9f433161a911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddd72c3-ae25-441a-b007-c26f399beef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e81083-8600-403f-9d93-ec58d8842016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe91695-ebac-4a35-8805-e7a30bfce8ab",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5188514-d3a2-4a8a-b0a1-6e9fc70cb529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d58ef17-6ecf-4788-843c-ca8eda2fd947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8063ae5a-2e24-48f7-8e89-b90b498e19dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d970fe1b-0fd4-4cf0-ba59-821e9f6cd29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452c0f4f-c5bc-4b77-adfd-7f03ee04c86f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b564712-b8ce-4ada-98db-6a06a527ac3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0501d850-6bcf-4855-abdd-e75482890758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c864137-226b-4b23-8aee-3bebcae1aa4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026aad43-30fa-49f1-9793-10ecdde6d645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7fd671-14ec-4eb3-ab14-6e31a79094cc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4ac3cc-8597-4b36-b42a-6bfccd944b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42381e6f-18e0-4ad3-89b0-cc1f075cd600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de25420-bd7a-4838-b1a2-9b3386e869fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4b69df-ba12-454b-a2c6-223f64540849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa94883-310c-40ed-9085-a3c287a36197",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de56d740-4061-4a05-a3c1-067a4add01b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1de2f5-e52e-4edf-97ca-d7bc31704087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30b7591-c8e3-4daf-99d4-7d62d767fac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff89cbb-59c1-4b47-b64f-9cf4adfdcfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ef545f-95dd-4a17-9c8a-64bdf2fe6e72",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdd52f8-34f9-4664-b0e0-59408a45c363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8257329-5fdb-4d6d-91b7-c2a75bf5dd68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda9537c-079b-4440-b903-b6be4e581e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e4ded8-28f8-4a4a-bbc9-dd606f4a852f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2ecff6-1c96-48a8-bc2f-0ef9134576d5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ee71e5-9c58-4990-a67b-c92b0919636b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56024ca8-9c0c-49fb-b2ed-2bb9a9650d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0231e30-8682-4d9e-a7ea-735b98f08578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b8a691-790e-45f1-92ff-70edefc2ddec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b448315-d8e6-4e9d-86bc-78647bd8dc2c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8184d86f-7ac6-47ef-94de-d0de71930966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfbea001-614e-4dd8-8f87-9d2782425d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a188d3c-6212-4c0d-bf05-2855a543955c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45d1a9e5-061a-48ad-a976-4b4e663d7d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3ab0f2-6346-41c6-ae88-24773315b6b4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7bb826-b022-4317-a7b1-c39548818957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c636e1-de47-4d72-937b-fe26951cd8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741a943b-134d-41c9-9825-8e5c14981282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40f78d7-ca63-4794-bfb5-49e513c88a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b76b60-ba93-4be0-bce9-63df24795ccc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ecffc9-27c0-4923-a973-4de178eb0332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bc4b698-3eb8-42bb-9c25-479c99b3c843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac583c4a-9bc9-4091-9f2e-4b63aee53ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24b8819-4833-46dc-856f-6b5437f43a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c9910e-3c6e-4201-ad2e-0e51a7081e15",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68f7278-c3ef-431a-8649-aacebca8936f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03550e87-08a8-4eff-b816-0759bf31f294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb25e728-19e7-41b7-a511-b578ba7796d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40743f63-a7ed-447a-b96c-baa89ebbfbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f07e459-6900-4dc7-b4ce-d4a789853927",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b734de3-93e1-44a2-b0b8-ae82915b9f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5208e6a-fd8a-408c-92b1-fff2b0d5f7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32226c44-8500-436c-b1d3-60f7a90ca1c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afe27bb-944f-4dad-ace2-116c0151f5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b541afcd-2dd9-4a60-8128-e237ee211003",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8f8b18-5cbd-4863-8ead-dabf14a40ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffb1d8e7-172a-4b7c-81d5-a8f9ab967a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3224e1-909d-497a-b456-8dc71991769e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7e441f-7e46-4e8b-8f90-ad8e27574e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556f7da1-4978-4314-aabc-4372f0d71399",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03099b63-1cd5-4c6f-930d-003f21148fcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3698a7-086e-42f5-8308-bc4e1a725249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d871c07d-5e1d-49b9-ada1-6ee5044a1f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e50d45-5065-4c24-aa34-18ff78dddc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a2f2e6-e40b-4866-956f-8aed93b07596",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f5c6ba-0c3a-44b6-a80f-f04f308c0eb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0d0fee6-11ec-448f-b771-00e3ac345dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0422b8c6-f1ef-4de7-97bb-59287e3c5b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb699308-34ce-479e-a6ec-c5513899709d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d54850c-e08f-4d29-a8f6-8bef8d50e794",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fde77d4-8277-40ff-ada1-fb4bab25d781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20465805-0912-437f-81bb-f184b99a440f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc7ccea-b90f-421f-8ca9-f88d05fc620b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f89453-bfac-4969-b486-48c163534e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b31bc8-63a0-402f-bdf5-c6e3e78b5bee",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fea9f52-431b-4203-9195-365298293869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a48eac-8888-4330-9e08-bb9696f2b6c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7f8607-f4c8-42d1-a21a-17a8b2250525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb248de-76d4-4ccf-b49c-9ffcfe4ac7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6b71d9-cbb5-4a53-9e32-99f05d56948f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea39572-c77b-4023-8e55-cfe668c7c9c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ea777f5-1df3-4871-adc0-d4f0a13cb3c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3340694a-d39d-4e36-a49c-89837290218d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d84587-0e52-44ca-9f36-bd6b7b8d9e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e535ec6b-8cad-4723-9f38-930a451ea375",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef745379-cb8e-48e2-afcf-843a96a533c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cba29cc-c3e2-4f8e-9f58-a7973ca1391d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "572ea36e-2587-4d64-9868-2f4c719ffbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865c2a4e-6529-4497-9f49-2ece27670450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ffb01f-1cc8-42a6-83a6-5ea8286a1451",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9d00ef-929a-452a-8570-d88094406ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c742dd10-8b96-4cb5-aeba-617b728eec52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c262aeb-df4b-4ec7-894a-59caeced2793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0533eb-14d5-40fc-b734-c0dce18dd83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d678bb17-312a-489f-958f-5509ef594135",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cfb828-7538-430b-9f2a-4d0af302f230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ed5536-25f5-45e7-bac4-02b4f7da7ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405809a1-057b-499e-b112-eaf0fcb42f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d552aaf1-99e1-4831-957f-d816ac16a0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1c6dc1-2c35-43ea-9c0b-bf91df83cb03",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb46b83-a59b-450d-a4e8-9f6c3fddb719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66da1357-004d-4c70-a830-5ad7f05efa77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01917d49-f9a9-4da9-924b-657c9d60c61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6560316a-5283-4aad-aefb-abc3fa50f81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0642fdf-e726-4cfa-80bb-5299478bab2d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1a935f-804b-476f-b954-c86e21afd270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc31ebbc-fad7-4aac-8040-1c3ea6dbe68a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f359f561-17a6-422a-88c8-0630fcc786d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f17449-b73e-48d6-a9cd-deda7d4f7f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a2c612-b245-4a10-8831-00dba7287094",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222dd277-9d7d-408d-9230-2beb47c7a8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec3c823-ae8c-44b2-b180-4bc3ce63d59e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89c5ce8-279e-4383-9c8b-b70ada499cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3139b12b-728d-4af3-a696-d313bf8c750c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ce556d-0deb-47b0-816b-35837f0bc520",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8c18a9-7016-4a83-8c36-c1b950733dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a2b332-af63-4cf4-b372-aaff1de93363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691ea549-3c4c-4088-a01b-27b548fa8f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52632276-cc76-469c-9c32-77b667255d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c0eb59-3bb0-476b-9c99-39b2630fb375",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85aec89-1b81-4057-b7a9-44c86dcb78c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94b5909-8ae6-4c6b-bbc2-4b55a96b8789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22caa7f0-8540-4c03-9870-454402ecaba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e78dbb3-64e3-48b5-9644-dca2297d9391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b4f0dd-6671-4473-a490-2b762540a8dc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86a373f-a958-4f5f-b791-fe45be938312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdaa76fa-13be-42b3-9941-9b15781d9acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f9e22d-c205-4d9f-93ca-7619911e24c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96eecdc-af2a-4630-bea1-8582cbdf9762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecdc295-ba5c-4ccf-85bb-87e9f7172fd1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3093121b-c1f1-4eb7-a70b-367cff6909ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1acbce59-edb3-4bd1-af88-80232416e269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ee48fb-df2d-46cf-ab76-615c4bb10b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e2e964-5c90-4654-b4ff-c5b80fd3bbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ff8f05-bdba-4e85-8cb5-b5acac6e95b6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f653b9-5c6d-4efc-a5cd-d42c6a45131d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555b7e42-c057-4f15-9ccd-d4fdf645ccc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5823484-0ed5-407f-aa93-594cf8595d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1895597c-db4f-419f-9ed7-352e0f7bf195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd947327-c50a-486d-9c71-3c81c6d89c03",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd7a5ee-a902-40ab-9ced-241f6eae5bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1519535b-3d61-47c1-af5b-f475431ebb8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f86a190-e770-40cb-bdd7-b02445f789f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77663c3-a017-467e-9bcf-daaeda3718f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8343cef2-28ce-4d63-a15f-91b228d7e481",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6793f5e-96f1-43c6-b251-8f649dd983ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed452fe9-2fa8-451c-a587-84744770f7e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a715f5d1-1422-4ae1-b747-be058061176a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1f322b-5725-464c-8c5b-376241d59a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6493403-5ccf-4b52-ab2e-0ffed8180e7e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cf4ead-2f2f-4a5d-9d4a-eefd317db0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f5ecc3-ac35-47d9-8e8c-5e1dd4981f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e85a2e7-2065-4904-99cf-f9b34c222d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9002c25-d4d8-435d-838e-928fc85327f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af61419c-a4de-434a-a2ef-1d9bc6b7ba93",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bb6d95-4129-46a7-b962-cee00e193939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12e98ff6-7220-4c91-bc73-038b0d5f49df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8d19eb-0dbf-4be3-8251-8d82c1c64c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f57bdb9-884e-4a61-b2b4-da3711a5bc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ed3853-26c6-4f32-b44d-a1a67a83c1ab",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db4acd2-9465-407b-85d6-1de4a575d7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee47a7d-d374-4718-b756-d4c9f5abd8fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8443bf07-d81f-429f-a248-b58e6483a3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b84da8-1ff0-46b6-9509-936f3414d526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3885f945-a9bd-4052-84d3-44aee204075f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbd5472-3a3a-4a7e-9f70-04bffce27980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc5f788-4e3c-44bd-b832-0a3f4a9d161e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca3a3f1-403b-4c93-a966-08c3ba5fcce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c51939-e3c8-49fa-9f7e-65839206f380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262cf6ff-8aa9-4d23-8d90-a5fbab02caf2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efbcb49-b901-410e-9c54-6391efa8ac37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4109ab7e-6de3-41e5-a56a-cb8cafe0e72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a0689b-68e4-4cfb-8b79-bdbddfaa2609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250c5a20-0b81-4037-bef4-bf2d8ec9bcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a3d80e-37f0-4565-81b5-a84d70f447b0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d726e6f-e551-4dac-82ae-d80517051471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8119b934-ad88-43a6-94aa-3bb88b2b0a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5172cbcf-bcfa-4525-bad0-0a8268411ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508687ec-c175-42d1-8253-74d4fcfbb96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f910bd-afa0-4dfb-abac-147abb879066",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9ed7fc-c573-4660-9849-c864ef95048a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710234bb-bfbc-4e94-91a4-1819b40d8397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0a88ec-2dda-490f-adeb-e31293337f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ed6b05-5728-4978-8c2e-15f65b02799f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89aa26c9-1c03-4364-9061-42df8e4cd49d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3c2ff1-2fc2-482b-b8af-18b273e23d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a184873-08af-4dd6-977d-87199556f094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9514390f-3c30-4616-87b3-3287ff00fd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4f48c8-f055-474f-b9fe-4017c9efbc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baba2ba-855e-4a40-9262-2f51c2ac9f71",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02449e58-0e93-4a2e-a7ea-d5f6a2783426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3229da-4b03-4d53-9d86-bd16e197dc8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a22967f-4e6f-42c9-9096-48b09e34eff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ceb84d-bba0-4f10-b0e6-185206ecd8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b1fc4f-b99c-407c-9a70-644197075b31",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27550fb0-73d2-446f-b475-c407b717925e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3210f69-f51c-413c-a366-de825a9f33cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f300d2c2-3531-49d2-955b-a8eea7cdf86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06df16d6-8df9-47a2-ab63-a12a892ed1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07a7bf1-e7f0-4568-9400-9f958ea4ec9e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173936a8-217d-4b41-8a7a-aec95606bb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb07d0d-7db4-4bbc-a5c6-973faa0356ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5568ac-6f25-443d-8272-c00b3a6b0633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998e6b8d-2640-4c99-8c49-a662fb1c3f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569cb9f8-55fb-4388-87fc-eeba333caf8c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9557b511-0a88-498d-9053-a24b1db1d1ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08f3ecd-0915-4a83-868f-da9118b242cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f374a98c-81be-4f95-993e-44f020ce2009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4105cbe-6a7e-49cd-89f8-c22f726955cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e3f5f7-2178-4bbb-88be-53651cb37aaf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bf8c96-ec78-4468-869f-2b0d3ee0f37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03275748-eb4e-4586-bc45-afd28db2a9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f03fe2-6fdd-458f-ac52-ca896131665c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1628163f-88f2-458f-9607-6ff070285248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44128a3-1d37-4286-a773-7361bd9ce2af",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be49d452-d22d-4390-8884-28bb5e62700c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f646a6-fa4d-40c7-95c2-988c09f1d730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007a09df-3870-4521-982c-dec70fca6a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a098112-be31-472d-9f40-0412b09a27fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2757d8b-c1c3-4e1d-a7d9-575b1b0e9910",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0b1b29-a302-4410-8f2e-f1e4da9c68ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848a6373-9b83-4077-b4e7-62ab37583d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5449cb-44b0-4f79-87da-53bc3d32987c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2adb8d53-b2a3-4a0f-964e-9a62f02ccf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b33556a-4b4b-4481-ad51-4eae81ab3e1a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53f3af6-9abe-44a6-9ffd-a657554fff56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d534a91-704a-4d74-8f95-3dcdf81ecfe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b0ff2d-d768-415b-96e3-8772caca0f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893fb35d-f6d7-41f7-bd0f-62a8a0fa0251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31be0b09-3004-4f3a-ab0c-7a7f374672a9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc900157-5388-4b14-bf39-5cc3347e9110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ace89df-2f4b-4c05-ad73-a6161d5cd0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab60113-8c81-49fc-8705-5323caf21ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec97c1c8-e02b-4304-a423-f798f70cd8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27685b57-217d-47f9-a696-25d60f028478",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13a35f1-57c3-4d3e-9179-9262dc620677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f220fda1-10c1-4c07-b435-6474cea346fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ea8bda-3f94-4570-be7b-2e753a268e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c462089-5b90-47a9-8144-8810b2b84d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f211e9a8-fe26-4b2f-9aab-1baf73d7e505",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1d2e07-b165-49e7-8aad-c6ccd5d38f17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7333b7a-a088-4b74-95a2-cab94c540fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce41cf23-69c0-4221-914c-f7cc2f91b477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2865683a-913f-4389-a9ac-b1cbf02a53ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b390c838-37c2-43c3-b8db-eec729e74226",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0666a1-5dac-47cd-b309-a4502a3ffb3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42846f83-815b-4a43-b554-28f233daad0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff62e74-4aae-4339-91ce-00b319aea2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2860a3-ad2f-45d5-b972-39f840661fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52378db8-be8d-4f2a-ab3d-ccec928d1715",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7802d6-45ca-4ff2-aeb6-717322884ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb137087-2ecb-483a-93a3-4b7542f1dd20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d74bd3-6f38-4daf-a986-bd795b247576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca97631-c5a5-46a9-af14-de30a54b6664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3b3165-34a8-4595-8031-245250ad5f77",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf538f1-bbdf-4e08-a562-a48c6a2ca19e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0433444-4517-46e0-bd3d-6e400a003f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab810a8-76a5-4a19-92e6-d33718cb95d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d308afee-4862-4d20-95be-2148e0a57fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369bad4e-8426-44b6-badc-56c6cae8163a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6c48b5-4bd1-4302-8890-03f01a8a362a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79368a02-a748-4060-8bd7-88922882c1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acdb494-7064-4c9f-bbab-17b1ec4e720b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4ef5f7-bfbd-490a-a747-ab4350c7bb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb83447-5ccc-42a4-b087-896a810f4d7d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556b5e69-5e85-42d6-aab0-fcf620de3561",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60945006-c0ea-4975-a91d-85610515d73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93383b8b-ce91-4eb2-9897-b00d8259699f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281bcfe3-fe2d-4f64-8eb9-e24afddcfc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ab44cc-f85d-47c0-aff5-82cb2d296b3f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c040a4-f80a-4941-a6ad-26f8aa7d0f93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c856a6f-3470-4e85-9d90-f65669f6dc00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e033d0-28a0-4082-a9e5-f78086ece693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa72e0ff-faed-40d4-b9e2-ec385d1320a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e544ef7f-8db2-4cb8-ab3e-ae544c23a417",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053b6e55-6a3f-4c43-bae4-90ae404a4acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e30485-b1ce-458a-af7f-c8220dd12858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5713d612-2f38-4de4-a727-a7ccd037c9e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b76352-8cee-46fa-b52b-7d6b6f5ac14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642b5a17-8076-4d49-9814-5c170cbbebab",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec32a98e-ea58-415e-bccb-6ae96ec30635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05202e03-5211-4b07-b104-de56ff898c84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8e6829-60ba-47c8-9cd4-30b6d9b61348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e97a376-f8a4-4a63-8c44-1f9b8d9fd655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c90608-3d50-437c-913f-5e66069119ac",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e05fb2-07f6-448a-9bb3-fb235b9c4741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e428b6-d8a4-44ee-b85c-3b78905dbd06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e96318-ca94-4d2a-b7dd-44f4344cedde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95953ad9-fc0f-499a-ae13-071a40a37994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715651e1-03b8-44dc-969c-0af3deeb3089",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fa38b7-48db-4c09-933f-01f943844801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "946c4ad7-5069-4510-a130-2b726c47d1d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a58bf09-f9a9-46ba-97ed-48c474b46987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45fcba8-347d-4bc6-9df3-fe14f8ae6e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a55828-e9f0-4a46-a0be-c79304bb4b56",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7664b923-d5d4-4829-b6b5-7a069a8ec2fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ed505a-2348-42c4-9550-4ded86028979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf4d7a9-fb05-4b43-97e5-12d824a2a373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062a0f85-5cc6-4587-bf8c-2e2cbdfc652e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb0111a-1757-440f-954e-00615c40f3f3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3fbf39-75ca-4a71-b86b-c383aa6b1582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "209aa1f7-53cd-4f04-9893-be2981216183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e5ba71-01a4-4788-89da-be478789c81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba010da-69ba-4003-9b64-79d5c652488c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebfca10-9de9-4b9c-a479-7bc11bdddeec",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3817bbcb-b992-4fae-8b34-0cc06f1e7fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2b993f0-08f0-4c2f-b2b6-cd89edefe07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "563e747a-6960-43af-8f7c-3596f87a05a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156ab50e-4e77-43e5-810b-8d84c17e7f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad67ab4-ede6-48e4-acf8-9321e95f8256",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a34a4ef-f467-4591-ad40-e92f565c7444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5448aab-9035-440b-a6a8-76743290c124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63310454-535e-4cdf-adbd-ab09fd23d968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac3d466-476f-4c1d-87c8-51e62e748806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1cf743-3ef1-4045-b5fc-7550b101a3b6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30007113-765f-4bc1-a170-224d0fccc611",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f69d9ff-6206-4bea-a850-d98bf9ff0fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d563a46e-eeba-4e63-b7ae-ea5f77e0ec9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9259365-ef15-4c8b-9d7d-3e9684bc4a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77b7415-f329-4702-82aa-0d40f2c4a4fb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a3f22b-fc26-4410-9d1e-750c9e5a7c8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdfe5201-3544-4309-9690-9b8304c0b7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6a2bdd-7ce6-4e5f-bdcb-58ea305112ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a1ab5a6-db81-4668-acc0-67081c6b4cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91130d57-d437-4f4f-85fc-96a77263349b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758eca04-1266-49dd-9236-8626690c701b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5ebbfef-90e9-49a2-bb8c-d11f06522e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9b9dab-48fe-4a94-9b90-b2b0fd94cfad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80feeb38-1ea4-4409-ab8d-87c161380ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96a1a0b-71dd-44fd-8329-34823b808265",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048d24f9-2db2-48f9-8401-4c961014b839",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ed9527-4688-4d3c-9991-70c448fa8982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98e384c-bf8b-4d8d-a233-8ad16e9a2de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e9afdf-3567-4af2-b558-6a5da89b0261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6cd2e8-51b9-4cc6-9bdb-4116e093b082",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b734c810-9502-4932-9672-3eba7c8ea210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e2f4c56-85ec-4c29-864d-f70ba6e546ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d26b433-4920-4bb2-9a89-bc30f36644ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a8c16d-3790-4d97-ac39-6a3a16ecd6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ec7eac-eb42-4872-9ac6-857a368c6bef",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01194bac-f937-44f0-aeef-2f518e76f8a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79d5746-26a5-4575-a3f6-00825e6c1df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb559d4-bc7a-4416-aaea-af421a44baf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25a804c-bca3-4e1c-9dd0-5c35d4e8db6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7416c26-063b-48dc-90e1-8980a35bce9b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd3407c-e4e9-4b16-9929-714bde5ea73b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29d805b4-1676-4e5e-98dd-8b52b7f64e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca070c1d-ad4c-4dde-9994-9c3c939ce205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7471d8e5-bcf6-45aa-9917-bf478699e7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137f8f2f-3e3e-48ea-af2a-a853b6551fec",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afce87a-eec0-4d37-8763-2c6bc082b924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98fabf86-c939-466f-b151-68c8f91a7969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c527361-0d7c-4c2a-b4df-f2b8d413b324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7a9bea-1bd9-4784-8b5d-c8b937df01a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93960618-fbee-4580-aff4-27655ecb54f2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a10663f-48f2-48ca-a6e0-97c6ce9e3f68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a08cbc-cff1-4eb5-996d-587c65d7a96b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6cd286-6e0a-4e3a-bfd4-ab5192259d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9eedf54-7f5c-4d24-8eee-4cef40339d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d40509-f65e-44ba-ab8f-bf862583e5f3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51df370-38ec-4d4b-9af0-20901b3eae4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cceb2643-2f7a-4e2f-941b-951ff6a0b688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68619943-07f4-4a39-91f5-835e3e2c0def",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6c6674-01a6-461f-a0d9-7326c29c6e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ceb686-4ff3-4949-a8f3-d623cfe641af",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e22f16a-56c3-4c6c-b853-f72c9d75a4b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d95576-bf4f-418f-a7a1-5135e4545e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f440bc-d7a7-42c1-a777-5bfde12b7fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ccab17-1086-4b62-a3da-2762ba0f9d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e68745-65b7-45a6-892e-d05e84491a68",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436af114-8e10-482a-bb14-5cee92596602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c8390d-e89f-4ce2-a351-f5859236e588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71119aeb-2a81-4bb7-b6a3-05afa8e4c34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd162aea-0463-4be1-bfd6-0524572fce17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641fc38c-e6f0-4b51-b3a6-50fdfadaba33",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdb7d8e-5e9a-4d39-a7d9-8b9b2fd36905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93db26f1-42e1-41f4-a3d7-f05a9472478f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763776bd-d9ce-4cf4-98f7-f9f03a08941c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7965ecf-5a1d-43ac-ae0d-94cc4a5600ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a52323a-9c92-4343-b5da-fbbee598fca4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f782c9-0daf-4118-9b73-49c4cf17c952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03c6445f-c5c9-408e-b676-ab8ce1aa1ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48ccca8-e291-4c29-935b-ded85f72c6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba78a832-4246-4451-851d-b2f6ee23d78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab976d4-05a8-4420-a8cd-1dbdbb643fd4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc04241-3522-4df5-9bcb-c093d1b6cbe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c66fc6c-143b-4028-b2b5-58ef39cf809b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8878dc3e-d70b-4e69-bbc3-af96508362a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24d1ccc-4b2a-4694-a2a4-510fd566378a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f905cbd3-3c16-4e83-8304-f7d8ec6b1366",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cf7a09-e6a8-4985-9144-becf89f6f915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e3bad0-d4d2-4fe5-9c84-96759be43910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65152892-3494-4fdf-b07c-1cc4167ef846",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930f3cc1-215d-4092-94fb-f370bf53cccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771e2bb1-75bd-48ec-b827-0c105bad7587",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c7c52e-018a-4f9c-95c9-5662b1522666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dee2684-3bf1-48d6-9cd0-d432cb98fe42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5c9cc3-6a3b-4191-8c22-dbf29f2a4a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8005ba9b-894a-47bf-92a7-47f79dcf91c5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7f9bd0e-4546-4daf-82c2-1906bba1b50f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30393e5b-f3e7-41ef-bd76-985795d4660d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e6064e6-c1b1-48df-a054-62c6ef92f6b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7dc2d290-51ea-45bd-b0a1-e9c06b75092c"
                    }
                  }
                ]
              },
              {
                "id": "6b283227-078e-4f7c-9b93-5606c15d467b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "adc9478f-d1f2-4698-bb12-c9b4ea8c5fac",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81508582-6970-4b2f-b12f-87bb15d92452",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "258b8158-4a90-41b4-b11c-197b2b7cf583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa2fa45-29eb-4061-8880-b61e0c547c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1d1a152-a96b-41b0-b71e-1570e526febe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "027fdbfc-89da-4627-a01e-5838d6bf2d9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d292efe-535e-4816-8f7e-9081659b3fea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48645933-6c0f-4a80-9157-5efa3d705002",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ee7277b-a54d-4723-97c7-750b37f938ed"
                    }
                  }
                ]
              },
              {
                "id": "4ba3a51d-0f62-4f03-9c91-362c202f444c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "516cb9a3-53c2-413a-ba6f-81b347e84014",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132b34ab-7787-4cc8-b539-07da05f7013f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b8e9df11-077c-4f9c-91c0-3804e823d8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1b4af4-9923-4f9a-9f91-69d5ec8f97ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9316540-6485-4940-827e-67f07f1d7d6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "be1886fe-db43-4c4a-aa28-ac96df050a36",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70404810-3347-4ed5-9e9b-f5851c6e4a85",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce45b7de-787a-4c51-941d-245f81eca1a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0ded72bb-d2c9-4c0f-aa74-20cf91aeca45"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53f7198f-3b9e-4fba-bf84-2622f42e0225",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e989b96-74df-4aa9-ba6b-1df4778feb3c"
                    }
                  }
                ]
              },
              {
                "id": "507f3510-1eb2-49ae-9522-22e69f85980b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65b8c9db-add1-40c4-bcf9-5cadc4929daf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "976be699-2dd7-4402-94cf-8e3d6d240b0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8006374c-0461-48fa-aa58-16998515f350",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75d88a1e-421d-4a48-b79d-45858c3443e5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b25f02bc-0cf7-422e-8720-4189ffc041d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "139a33cd-31a9-4bc5-9266-429e08ab0824"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac448689-73b6-48e9-9192-f6c761e0793e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99dcb399-f8e4-4ad0-997b-8dc35cb598d8"
            }
          }
        ]
      },
      {
        "id": "2dc5f76c-8b27-486f-bb9a-03741d3f0b4b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f8145cc3-6f0b-43be-a62b-2034e7da0114",
            "name": "Negative Testing",
            "item": [
              {
                "id": "197a7002-0a69-4cd0-938e-40f9f01634dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f57a7e0-5f2a-4afa-aa2b-d96ef4288dbd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88bd9c7-bf6b-4d33-8f20-3c639576552b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "514b36ef-20f6-47b6-a4fe-8da71209dea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd373ba7-fd03-47e0-8a3f-9adfdf51c54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8a4a64d-d938-4d8e-ba69-886a1f111fa8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28fcd477-4d91-4865-8550-6b067fe35ad7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a0d1d5d-c6eb-4caa-b1d5-b2602e462c82"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3b94fc1-e940-4c2d-aead-62342deb5c3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01693208-ff14-46e1-92ef-72762d44b850"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d96faf0-6d83-4cbb-854a-8558a6a58699",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b046dadb-f33f-4b60-a012-f2382ff1c674"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f961e4a-b1fb-4795-8797-84cceba8dee8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b61945bf-c30e-4fa8-8e02-d2285d5dff3e"
            }
          }
        ]
      },
      {
        "id": "50b966bf-1f67-4718-bb12-22cda6294599",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c9ee1761-9f1f-455d-baeb-a20b30678d19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cba6f785-934d-41bb-9883-54e2647b4164",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "54fb9a34-ed77-4c6c-87a5-552e529ce0ae",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899e762d-f5a5-4231-81d9-1d46f6e724a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10a58d4a-b064-457f-927f-d69a3ce7012a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf41d1fe-ed8f-4d8b-a2a7-f99c7ca78a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "452ffbce-bbab-4c7d-aa54-20961ddb187b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab593243-aef6-464c-bca9-7fec9a6cc8dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f251d3cc-2448-4413-a3b0-f18886570b28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9334b631-047a-47bd-b48a-c4475d4babd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8129b1f4-ecbc-42ae-9c10-c1b82ee86a29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46359b6f-5885-437c-b357-0d4fc8a95634",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "01c5d67c-5a07-4bc9-a634-64a24ab99212"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87873cd4-7d8c-4bad-92a1-256dd5e0161f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14d90d14-71f8-4504-9ad3-10114287fb48"
            }
          }
        ]
      },
      {
        "id": "dc460705-20e7-4b39-87e7-870f781e5303",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0c4d1ea2-bc05-4f61-a436-4775cdf85593",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ddbce1a3-42e2-48e1-a27c-6f3614c5f150",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c25a5ba7-cb23-431b-9e5e-5a044fcd9b9d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1ff434-cb63-459f-9a56-636d2b266353",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7ab4290-78f4-4df0-8364-32239783abe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9b171a-b7a8-4b9b-b0ea-29767a515584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccc342c9-c720-47ad-ae70-d79d5ce5c25b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "434c5f2f-0f46-4b89-92eb-fb1e84b5902a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ecbd48b-54dd-4cc3-8057-842c9594996e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2489f4e-1548-4f74-92fa-c5082419163e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "059593a4-e282-4858-ad69-1557347217a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f2ce07d-9be8-420e-95c4-8a481a6123cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "48e19475-1cdb-4adf-89ff-7613e2270439"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b46af00b-c978-4051-af20-e7efec83ff8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22f96fb9-1970-4bb8-935f-b14e1bbd4e26"
            }
          }
        ]
      },
      {
        "id": "2349d006-595c-4d0f-b1f2-264eb0e480f8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3599dfe5-ebee-43d0-98d5-ae12069f7462",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "429c6014-0feb-49d5-96d9-d7a3cdc05058",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1e8744c0-647d-4cca-889e-e73865a72efa",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92143d70-eb7b-4e1d-8c04-2fa1592184e7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04688570-3540-4d06-88c5-3eeefa4a0b0c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.50709219858155,
      "responseMin": 5,
      "responseMax": 1287,
      "responseSd": 57.03328895471053,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706229267990,
      "completed": 1706229309954
    },
    "executions": [
      {
        "id": "a62eed48-9717-4fb7-9f04-2b2820ab4e27",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "49e72098-f8f0-42b4-9c5c-4ff8f2ee8cc1",
          "httpRequestId": "203ebc15-4fba-4ca2-af71-37d225e076a3"
        },
        "item": {
          "id": "a62eed48-9717-4fb7-9f04-2b2820ab4e27",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b61b79ca-e447-4d28-aad1-ff11fa2ebcf0",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 0
        }
      },
      {
        "id": "0c9ff1a8-dcc9-4742-879a-4fe6063896b0",
        "cursor": {
          "ref": "90c9f9e8-1510-42ea-9d2b-f11d4237a82b",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f82ebfd0-0ddc-4f9f-974c-2c91793b6b5f"
        },
        "item": {
          "id": "0c9ff1a8-dcc9-4742-879a-4fe6063896b0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "eefdf5c1-b2a8-48f1-83df-d52c3b4d4a91",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "9cf74307-83b7-4935-9df8-5a96957daf17",
        "cursor": {
          "ref": "12ed5f78-2423-4de7-82fd-b50fa79fe306",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "14ea91fa-386b-4c78-8e64-5ab90ee6aab9"
        },
        "item": {
          "id": "9cf74307-83b7-4935-9df8-5a96957daf17",
          "name": "did_json"
        },
        "response": {
          "id": "904dd6de-030f-440f-924f-f55f70c7189d",
          "status": "OK",
          "code": 200,
          "responseTime": 1287,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cc5478-9c58-4d8d-896b-e7c6ccb0cf98",
        "cursor": {
          "ref": "89876970-eaa9-4ac7-a5b4-31f762db8d4a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae8c60d7-dc5b-4f6b-ad0f-842e439d4c6c"
        },
        "item": {
          "id": "31cc5478-9c58-4d8d-896b-e7c6ccb0cf98",
          "name": "did:invalid"
        },
        "response": {
          "id": "43358cdf-f7dd-4670-9505-57a44291ef61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cc5478-9c58-4d8d-896b-e7c6ccb0cf98",
        "cursor": {
          "ref": "89876970-eaa9-4ac7-a5b4-31f762db8d4a",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae8c60d7-dc5b-4f6b-ad0f-842e439d4c6c"
        },
        "item": {
          "id": "31cc5478-9c58-4d8d-896b-e7c6ccb0cf98",
          "name": "did:invalid"
        },
        "response": {
          "id": "43358cdf-f7dd-4670-9505-57a44291ef61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f45ba9-c578-4663-9501-063ead3b133a",
        "cursor": {
          "ref": "36721818-6d48-44e1-a6ec-9bc656103a8d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ca050237-f5c8-4f37-a9ff-02c8e4dea03b"
        },
        "item": {
          "id": "36f45ba9-c578-4663-9501-063ead3b133a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "98d7eff3-193c-4413-b20d-d1c3b280988d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f45ba9-c578-4663-9501-063ead3b133a",
        "cursor": {
          "ref": "36721818-6d48-44e1-a6ec-9bc656103a8d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ca050237-f5c8-4f37-a9ff-02c8e4dea03b"
        },
        "item": {
          "id": "36f45ba9-c578-4663-9501-063ead3b133a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "98d7eff3-193c-4413-b20d-d1c3b280988d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce77b56b-942e-42a5-8ba8-841095dc88de",
        "cursor": {
          "ref": "80893e87-71a9-4056-9862-a69f0da86000",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3f7a724a-b38c-447e-9810-1a8ba3298026"
        },
        "item": {
          "id": "ce77b56b-942e-42a5-8ba8-841095dc88de",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ce281f5f-e35d-4415-ab7e-526ba99b32cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce77b56b-942e-42a5-8ba8-841095dc88de",
        "cursor": {
          "ref": "80893e87-71a9-4056-9862-a69f0da86000",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3f7a724a-b38c-447e-9810-1a8ba3298026"
        },
        "item": {
          "id": "ce77b56b-942e-42a5-8ba8-841095dc88de",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ce281f5f-e35d-4415-ab7e-526ba99b32cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3c1f2a-907f-45b5-9867-ed44af06bf97",
        "cursor": {
          "ref": "21d305a7-e33d-49d1-8a4d-c583682438b8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c4fd2958-5719-4ce0-9fba-38cd91a652f8"
        },
        "item": {
          "id": "be3c1f2a-907f-45b5-9867-ed44af06bf97",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a39b5c60-a39c-4366-b406-7e35a5da47b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3c1f2a-907f-45b5-9867-ed44af06bf97",
        "cursor": {
          "ref": "21d305a7-e33d-49d1-8a4d-c583682438b8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c4fd2958-5719-4ce0-9fba-38cd91a652f8"
        },
        "item": {
          "id": "be3c1f2a-907f-45b5-9867-ed44af06bf97",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a39b5c60-a39c-4366-b406-7e35a5da47b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a3f38d-e53b-4f95-9b2f-8161e8e979d1",
        "cursor": {
          "ref": "37d8f79c-263c-4e08-8d47-a8b5c699aa2f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1244527b-0a44-4763-a0bb-41b4d861eec1"
        },
        "item": {
          "id": "36a3f38d-e53b-4f95-9b2f-8161e8e979d1",
          "name": "identifiers"
        },
        "response": {
          "id": "c3fc6782-3941-490f-b755-2ef875422047",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "36a3f38d-e53b-4f95-9b2f-8161e8e979d1",
        "cursor": {
          "ref": "37d8f79c-263c-4e08-8d47-a8b5c699aa2f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1244527b-0a44-4763-a0bb-41b4d861eec1"
        },
        "item": {
          "id": "36a3f38d-e53b-4f95-9b2f-8161e8e979d1",
          "name": "identifiers"
        },
        "response": {
          "id": "c3fc6782-3941-490f-b755-2ef875422047",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4c2c724f-94b3-4a04-a1d4-c5b462e168dc",
        "cursor": {
          "ref": "754357a1-02a4-44cc-9f3a-fee38b794aa1",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c45a9a67-9f8f-401b-8bbb-53f76df40d28"
        },
        "item": {
          "id": "4c2c724f-94b3-4a04-a1d4-c5b462e168dc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "49afe6cf-f70e-43be-82cf-933088be03fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2c724f-94b3-4a04-a1d4-c5b462e168dc",
        "cursor": {
          "ref": "754357a1-02a4-44cc-9f3a-fee38b794aa1",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c45a9a67-9f8f-401b-8bbb-53f76df40d28"
        },
        "item": {
          "id": "4c2c724f-94b3-4a04-a1d4-c5b462e168dc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "49afe6cf-f70e-43be-82cf-933088be03fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e485ba8-b60f-45e4-b037-92fb9cc70596",
        "cursor": {
          "ref": "ee353e77-5394-43e8-b2de-05f669ca5df1",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e58fa9f2-fd5a-40e1-8123-d7001dab6895"
        },
        "item": {
          "id": "2e485ba8-b60f-45e4-b037-92fb9cc70596",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a5516fd7-dd22-4834-869f-6381ae0d64e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e485ba8-b60f-45e4-b037-92fb9cc70596",
        "cursor": {
          "ref": "ee353e77-5394-43e8-b2de-05f669ca5df1",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e58fa9f2-fd5a-40e1-8123-d7001dab6895"
        },
        "item": {
          "id": "2e485ba8-b60f-45e4-b037-92fb9cc70596",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a5516fd7-dd22-4834-869f-6381ae0d64e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e27bb8f-c3d7-4c34-9687-ab0739c43285",
        "cursor": {
          "ref": "1b0c73ec-68c7-4058-ad17-6fae1f66816d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6c38812b-59c0-4c11-81c3-4aeda9b590c0"
        },
        "item": {
          "id": "1e27bb8f-c3d7-4c34-9687-ab0739c43285",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4cb0820f-ce21-47b4-8a24-4978be68c4e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e27bb8f-c3d7-4c34-9687-ab0739c43285",
        "cursor": {
          "ref": "1b0c73ec-68c7-4058-ad17-6fae1f66816d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6c38812b-59c0-4c11-81c3-4aeda9b590c0"
        },
        "item": {
          "id": "1e27bb8f-c3d7-4c34-9687-ab0739c43285",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4cb0820f-ce21-47b4-8a24-4978be68c4e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07542c52-4420-4572-9212-618dba0c9473",
        "cursor": {
          "ref": "d7544476-b93f-4858-9adf-3e69656777f0",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a36097ac-9ea5-4a2e-b746-61d010bb4e69"
        },
        "item": {
          "id": "07542c52-4420-4572-9212-618dba0c9473",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "98a70a08-09a3-4b06-97e3-92df71ed162f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07542c52-4420-4572-9212-618dba0c9473",
        "cursor": {
          "ref": "d7544476-b93f-4858-9adf-3e69656777f0",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a36097ac-9ea5-4a2e-b746-61d010bb4e69"
        },
        "item": {
          "id": "07542c52-4420-4572-9212-618dba0c9473",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "98a70a08-09a3-4b06-97e3-92df71ed162f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a98581-790e-44c0-9361-f05dd777891b",
        "cursor": {
          "ref": "b896b080-065b-4a30-9a34-5f4106faba1f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e040600d-7507-4a89-8934-eb8a592f0d85"
        },
        "item": {
          "id": "a2a98581-790e-44c0-9361-f05dd777891b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ed543f70-00a5-4408-a90e-d152bdc8f5f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a98581-790e-44c0-9361-f05dd777891b",
        "cursor": {
          "ref": "b896b080-065b-4a30-9a34-5f4106faba1f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e040600d-7507-4a89-8934-eb8a592f0d85"
        },
        "item": {
          "id": "a2a98581-790e-44c0-9361-f05dd777891b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ed543f70-00a5-4408-a90e-d152bdc8f5f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5005ce40-e764-4e68-95c8-74fb51d93f93",
        "cursor": {
          "ref": "1a35b790-00fe-44e3-98a6-d37513fffafe",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e528ca27-42bc-419c-88c8-4c0664e61684"
        },
        "item": {
          "id": "5005ce40-e764-4e68-95c8-74fb51d93f93",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "045431ec-9ad7-47f6-81ce-7a6b1f2d0e8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5005ce40-e764-4e68-95c8-74fb51d93f93",
        "cursor": {
          "ref": "1a35b790-00fe-44e3-98a6-d37513fffafe",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e528ca27-42bc-419c-88c8-4c0664e61684"
        },
        "item": {
          "id": "5005ce40-e764-4e68-95c8-74fb51d93f93",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "045431ec-9ad7-47f6-81ce-7a6b1f2d0e8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc39e95-ec19-49ba-b115-fcb3478d7ec8",
        "cursor": {
          "ref": "b5ca6c20-12f2-4877-8ece-cd9659eb985f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8dea6719-f807-4838-947f-2a82c84f1a4d"
        },
        "item": {
          "id": "1fc39e95-ec19-49ba-b115-fcb3478d7ec8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "32dc14c0-c09a-4da4-964b-bef6d49a2652",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc39e95-ec19-49ba-b115-fcb3478d7ec8",
        "cursor": {
          "ref": "b5ca6c20-12f2-4877-8ece-cd9659eb985f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8dea6719-f807-4838-947f-2a82c84f1a4d"
        },
        "item": {
          "id": "1fc39e95-ec19-49ba-b115-fcb3478d7ec8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "32dc14c0-c09a-4da4-964b-bef6d49a2652",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6d62f4-3029-48e6-a99d-9861deb30ff6",
        "cursor": {
          "ref": "bf66c6cf-daa8-4258-83d9-3d3de6943101",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "69386bf0-172b-4122-bce1-3cb7859c6ceb"
        },
        "item": {
          "id": "6c6d62f4-3029-48e6-a99d-9861deb30ff6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a0094014-6a54-427d-a442-685a08f6673d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6d62f4-3029-48e6-a99d-9861deb30ff6",
        "cursor": {
          "ref": "bf66c6cf-daa8-4258-83d9-3d3de6943101",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "69386bf0-172b-4122-bce1-3cb7859c6ceb"
        },
        "item": {
          "id": "6c6d62f4-3029-48e6-a99d-9861deb30ff6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a0094014-6a54-427d-a442-685a08f6673d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cad5a1-78af-4500-b919-151a383f8793",
        "cursor": {
          "ref": "adcba58c-667e-437f-84d9-ab3ed2ad5929",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cff2ddd6-5325-4d35-9477-223145025962"
        },
        "item": {
          "id": "01cad5a1-78af-4500-b919-151a383f8793",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d8e706b6-1be4-4055-96c1-8ff9d5f16957",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cad5a1-78af-4500-b919-151a383f8793",
        "cursor": {
          "ref": "adcba58c-667e-437f-84d9-ab3ed2ad5929",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cff2ddd6-5325-4d35-9477-223145025962"
        },
        "item": {
          "id": "01cad5a1-78af-4500-b919-151a383f8793",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d8e706b6-1be4-4055-96c1-8ff9d5f16957",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5334ba-de25-4ec4-96f9-0c0b7aa2a9f1",
        "cursor": {
          "ref": "ba27de4d-6d03-49e7-8610-a5b704f94630",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a03c3cc1-8549-44b1-acc4-2c0cd0436391"
        },
        "item": {
          "id": "4f5334ba-de25-4ec4-96f9-0c0b7aa2a9f1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2a615270-7606-4daa-a2ac-25b61b1b58dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5334ba-de25-4ec4-96f9-0c0b7aa2a9f1",
        "cursor": {
          "ref": "ba27de4d-6d03-49e7-8610-a5b704f94630",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a03c3cc1-8549-44b1-acc4-2c0cd0436391"
        },
        "item": {
          "id": "4f5334ba-de25-4ec4-96f9-0c0b7aa2a9f1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2a615270-7606-4daa-a2ac-25b61b1b58dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4300f3-afc2-4206-b7dc-fc386ba1db55",
        "cursor": {
          "ref": "3b1f2356-5155-463a-aa8c-f19366c26002",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "509ed519-348c-451b-847b-8295fab62a5b"
        },
        "item": {
          "id": "fb4300f3-afc2-4206-b7dc-fc386ba1db55",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f48df1b7-6495-410f-b217-cf668e69e3df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4300f3-afc2-4206-b7dc-fc386ba1db55",
        "cursor": {
          "ref": "3b1f2356-5155-463a-aa8c-f19366c26002",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "509ed519-348c-451b-847b-8295fab62a5b"
        },
        "item": {
          "id": "fb4300f3-afc2-4206-b7dc-fc386ba1db55",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f48df1b7-6495-410f-b217-cf668e69e3df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d1b6c0-b4e5-4cfb-983e-0666f2e93d43",
        "cursor": {
          "ref": "b2085b9a-e618-40e8-869c-c63def99f673",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "38ae2c6a-c257-4d01-9a09-de3ba12d1203"
        },
        "item": {
          "id": "41d1b6c0-b4e5-4cfb-983e-0666f2e93d43",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "703666bb-92ce-49a3-8930-f7458605f80b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d1b6c0-b4e5-4cfb-983e-0666f2e93d43",
        "cursor": {
          "ref": "b2085b9a-e618-40e8-869c-c63def99f673",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "38ae2c6a-c257-4d01-9a09-de3ba12d1203"
        },
        "item": {
          "id": "41d1b6c0-b4e5-4cfb-983e-0666f2e93d43",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "703666bb-92ce-49a3-8930-f7458605f80b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcad391-e57a-48c4-a2df-c2721af02cf5",
        "cursor": {
          "ref": "453528e0-abde-4170-97b9-cf5edc224b17",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "af719014-3eb9-43d1-ae30-5aab8d256ec7"
        },
        "item": {
          "id": "efcad391-e57a-48c4-a2df-c2721af02cf5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dcf3df12-7556-42d4-9fd0-70e80aea2d4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcad391-e57a-48c4-a2df-c2721af02cf5",
        "cursor": {
          "ref": "453528e0-abde-4170-97b9-cf5edc224b17",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "af719014-3eb9-43d1-ae30-5aab8d256ec7"
        },
        "item": {
          "id": "efcad391-e57a-48c4-a2df-c2721af02cf5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dcf3df12-7556-42d4-9fd0-70e80aea2d4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff9ebae-1df7-4740-9f53-e2fdaf1971f7",
        "cursor": {
          "ref": "aa0a0900-a95d-466a-9331-45b3cdce4a98",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "214c6499-db1b-4542-b16c-a1e97b62fcf1"
        },
        "item": {
          "id": "dff9ebae-1df7-4740-9f53-e2fdaf1971f7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fee82588-6323-476c-ac0d-a9291dadf9fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff9ebae-1df7-4740-9f53-e2fdaf1971f7",
        "cursor": {
          "ref": "aa0a0900-a95d-466a-9331-45b3cdce4a98",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "214c6499-db1b-4542-b16c-a1e97b62fcf1"
        },
        "item": {
          "id": "dff9ebae-1df7-4740-9f53-e2fdaf1971f7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fee82588-6323-476c-ac0d-a9291dadf9fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5babe52-828e-4ade-bdac-fa76d352b14d",
        "cursor": {
          "ref": "05f03d24-e44d-4518-a0e2-5c4fd6e990cf",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "25218145-9839-4e86-8fca-9bdffb731f96"
        },
        "item": {
          "id": "c5babe52-828e-4ade-bdac-fa76d352b14d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "efc2c5b7-93de-4302-a0a7-6b16d50aa3b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5babe52-828e-4ade-bdac-fa76d352b14d",
        "cursor": {
          "ref": "05f03d24-e44d-4518-a0e2-5c4fd6e990cf",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "25218145-9839-4e86-8fca-9bdffb731f96"
        },
        "item": {
          "id": "c5babe52-828e-4ade-bdac-fa76d352b14d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "efc2c5b7-93de-4302-a0a7-6b16d50aa3b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f320bb8-d4f2-417f-8997-92792932b9d6",
        "cursor": {
          "ref": "e78e665c-5cf5-40e8-aba3-536395949cf5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2f0cf267-3688-437b-bdbf-d72909fc9f03"
        },
        "item": {
          "id": "1f320bb8-d4f2-417f-8997-92792932b9d6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "101c6288-1d6c-4ffa-a7e5-adb610e19209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f320bb8-d4f2-417f-8997-92792932b9d6",
        "cursor": {
          "ref": "e78e665c-5cf5-40e8-aba3-536395949cf5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2f0cf267-3688-437b-bdbf-d72909fc9f03"
        },
        "item": {
          "id": "1f320bb8-d4f2-417f-8997-92792932b9d6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "101c6288-1d6c-4ffa-a7e5-adb610e19209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe718882-dc2b-42de-861e-928a6903ea6e",
        "cursor": {
          "ref": "90681e5b-b547-4aa4-9181-2d7092d19224",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f1415db6-0ba4-4a08-93fd-da5b4d0006ef"
        },
        "item": {
          "id": "fe718882-dc2b-42de-861e-928a6903ea6e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7be423d2-9760-4324-8ceb-c4d9a1bee9dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe718882-dc2b-42de-861e-928a6903ea6e",
        "cursor": {
          "ref": "90681e5b-b547-4aa4-9181-2d7092d19224",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f1415db6-0ba4-4a08-93fd-da5b4d0006ef"
        },
        "item": {
          "id": "fe718882-dc2b-42de-861e-928a6903ea6e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7be423d2-9760-4324-8ceb-c4d9a1bee9dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a45bcc-3ecb-40ce-9feb-079ae85f3014",
        "cursor": {
          "ref": "f24f993c-c13b-47f0-a5fb-ed7c90ab9f53",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "51327605-0dd1-43a5-ba5e-d46f98b1e1ed"
        },
        "item": {
          "id": "c2a45bcc-3ecb-40ce-9feb-079ae85f3014",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "90544c89-7017-4b9f-905c-0b625862a8fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a45bcc-3ecb-40ce-9feb-079ae85f3014",
        "cursor": {
          "ref": "f24f993c-c13b-47f0-a5fb-ed7c90ab9f53",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "51327605-0dd1-43a5-ba5e-d46f98b1e1ed"
        },
        "item": {
          "id": "c2a45bcc-3ecb-40ce-9feb-079ae85f3014",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "90544c89-7017-4b9f-905c-0b625862a8fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d028a0d-4d4c-4caf-81ae-75da6927d8b6",
        "cursor": {
          "ref": "8e724233-516f-4e69-9863-d173c2b362fc",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "eebf7c26-083a-467e-b309-144c897fef50"
        },
        "item": {
          "id": "3d028a0d-4d4c-4caf-81ae-75da6927d8b6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3cd209e9-a0e8-42a9-9027-04756969ba2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d028a0d-4d4c-4caf-81ae-75da6927d8b6",
        "cursor": {
          "ref": "8e724233-516f-4e69-9863-d173c2b362fc",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "eebf7c26-083a-467e-b309-144c897fef50"
        },
        "item": {
          "id": "3d028a0d-4d4c-4caf-81ae-75da6927d8b6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3cd209e9-a0e8-42a9-9027-04756969ba2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc24c364-5001-4a1a-988c-3c5cee15b31f",
        "cursor": {
          "ref": "13da5d03-6383-4331-93cd-e1a1f453c1ce",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "afc2e280-503d-48d5-a6dc-2b2e5fb880dd"
        },
        "item": {
          "id": "dc24c364-5001-4a1a-988c-3c5cee15b31f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "32f12098-152a-4fa1-b3a7-bd132ec87c08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc24c364-5001-4a1a-988c-3c5cee15b31f",
        "cursor": {
          "ref": "13da5d03-6383-4331-93cd-e1a1f453c1ce",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "afc2e280-503d-48d5-a6dc-2b2e5fb880dd"
        },
        "item": {
          "id": "dc24c364-5001-4a1a-988c-3c5cee15b31f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "32f12098-152a-4fa1-b3a7-bd132ec87c08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07f8e24-c959-48c2-8df1-7ee4c04eda74",
        "cursor": {
          "ref": "76aaa37e-362b-4889-b285-1bd1e236afce",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "48a62697-b7f5-4347-850a-7711a5111044"
        },
        "item": {
          "id": "e07f8e24-c959-48c2-8df1-7ee4c04eda74",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2d4d3cac-64ea-46fe-9051-cf5b9956cd0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07f8e24-c959-48c2-8df1-7ee4c04eda74",
        "cursor": {
          "ref": "76aaa37e-362b-4889-b285-1bd1e236afce",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "48a62697-b7f5-4347-850a-7711a5111044"
        },
        "item": {
          "id": "e07f8e24-c959-48c2-8df1-7ee4c04eda74",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2d4d3cac-64ea-46fe-9051-cf5b9956cd0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191f5283-2028-41ae-9402-329406d8b0aa",
        "cursor": {
          "ref": "82113cfc-0acf-4ef0-9ca3-24b404eb53d7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e5893d1b-524d-4df8-ab80-c85d4b8aaca3"
        },
        "item": {
          "id": "191f5283-2028-41ae-9402-329406d8b0aa",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7dab7fe4-ad10-48f3-ad80-8810e2b6254c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191f5283-2028-41ae-9402-329406d8b0aa",
        "cursor": {
          "ref": "82113cfc-0acf-4ef0-9ca3-24b404eb53d7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e5893d1b-524d-4df8-ab80-c85d4b8aaca3"
        },
        "item": {
          "id": "191f5283-2028-41ae-9402-329406d8b0aa",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7dab7fe4-ad10-48f3-ad80-8810e2b6254c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeac3d3-8ffa-4d75-adc3-69d85a109f29",
        "cursor": {
          "ref": "7367e61e-3460-4594-81b6-5dbc6c3a9ff9",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8ac153dd-edb9-4d6b-a97f-16581df9a473"
        },
        "item": {
          "id": "3eeac3d3-8ffa-4d75-adc3-69d85a109f29",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "14a86c7a-2d9a-4ae5-b2bd-bcdb688ae706",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeac3d3-8ffa-4d75-adc3-69d85a109f29",
        "cursor": {
          "ref": "7367e61e-3460-4594-81b6-5dbc6c3a9ff9",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8ac153dd-edb9-4d6b-a97f-16581df9a473"
        },
        "item": {
          "id": "3eeac3d3-8ffa-4d75-adc3-69d85a109f29",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "14a86c7a-2d9a-4ae5-b2bd-bcdb688ae706",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da522c93-ee75-4de4-832f-25bc8ce31036",
        "cursor": {
          "ref": "a4308fc6-a79b-4ab2-9e68-f00c49ef3ef0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f2a92a07-a17f-40b9-88ec-3482fb56c7ef"
        },
        "item": {
          "id": "da522c93-ee75-4de4-832f-25bc8ce31036",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7a2879b1-268f-42c8-9a4c-ee4806c18c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da522c93-ee75-4de4-832f-25bc8ce31036",
        "cursor": {
          "ref": "a4308fc6-a79b-4ab2-9e68-f00c49ef3ef0",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f2a92a07-a17f-40b9-88ec-3482fb56c7ef"
        },
        "item": {
          "id": "da522c93-ee75-4de4-832f-25bc8ce31036",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7a2879b1-268f-42c8-9a4c-ee4806c18c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7ee0b5-29da-48af-ba99-969e8cc79fd4",
        "cursor": {
          "ref": "55ac2490-3177-48cc-8b69-27b3c3c547a4",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f6a92b06-c163-4098-be54-ae8c1fba9da4"
        },
        "item": {
          "id": "af7ee0b5-29da-48af-ba99-969e8cc79fd4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a2fdd019-9918-4dc1-9c1b-4cda59aa30c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7ee0b5-29da-48af-ba99-969e8cc79fd4",
        "cursor": {
          "ref": "55ac2490-3177-48cc-8b69-27b3c3c547a4",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f6a92b06-c163-4098-be54-ae8c1fba9da4"
        },
        "item": {
          "id": "af7ee0b5-29da-48af-ba99-969e8cc79fd4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a2fdd019-9918-4dc1-9c1b-4cda59aa30c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df728e68-a9c3-4636-bd96-656843fdf421",
        "cursor": {
          "ref": "f25160a9-2755-459b-b23c-6c39db59be8c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "723bad87-1639-4f21-8436-d3080ba99e7c"
        },
        "item": {
          "id": "df728e68-a9c3-4636-bd96-656843fdf421",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "01525117-a6c6-48bd-a417-986a3b78e2f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df728e68-a9c3-4636-bd96-656843fdf421",
        "cursor": {
          "ref": "f25160a9-2755-459b-b23c-6c39db59be8c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "723bad87-1639-4f21-8436-d3080ba99e7c"
        },
        "item": {
          "id": "df728e68-a9c3-4636-bd96-656843fdf421",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "01525117-a6c6-48bd-a417-986a3b78e2f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a01b56d-6e7c-44d0-aa90-1dc688aeb719",
        "cursor": {
          "ref": "26cafc97-0119-4ddf-9632-c0bf6f72e9a4",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c9013c4f-b959-420f-bf46-b2e8ae1bd8e5"
        },
        "item": {
          "id": "3a01b56d-6e7c-44d0-aa90-1dc688aeb719",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4ddc0547-ea95-4bc9-b290-c1ff39a8d6e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a01b56d-6e7c-44d0-aa90-1dc688aeb719",
        "cursor": {
          "ref": "26cafc97-0119-4ddf-9632-c0bf6f72e9a4",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c9013c4f-b959-420f-bf46-b2e8ae1bd8e5"
        },
        "item": {
          "id": "3a01b56d-6e7c-44d0-aa90-1dc688aeb719",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4ddc0547-ea95-4bc9-b290-c1ff39a8d6e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8847607-c797-43b2-b44c-e70eb4749278",
        "cursor": {
          "ref": "411944d4-af23-4d7d-a5cd-2b50c774e648",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "41ae090b-4312-4f93-9c88-77357a7daefe"
        },
        "item": {
          "id": "e8847607-c797-43b2-b44c-e70eb4749278",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ac2095ab-6e92-40cd-9164-78c8ddd0a111",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8847607-c797-43b2-b44c-e70eb4749278",
        "cursor": {
          "ref": "411944d4-af23-4d7d-a5cd-2b50c774e648",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "41ae090b-4312-4f93-9c88-77357a7daefe"
        },
        "item": {
          "id": "e8847607-c797-43b2-b44c-e70eb4749278",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ac2095ab-6e92-40cd-9164-78c8ddd0a111",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c3ab45-3ebd-479a-a7c1-1a76b58afc0c",
        "cursor": {
          "ref": "f3a10724-b5aa-4c5f-b573-1b0287ba2cf0",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c15d06c0-530b-41b8-a408-bf73145c4758"
        },
        "item": {
          "id": "f5c3ab45-3ebd-479a-a7c1-1a76b58afc0c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f09514e2-9e90-4c03-824b-cd5fc176831e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c3ab45-3ebd-479a-a7c1-1a76b58afc0c",
        "cursor": {
          "ref": "f3a10724-b5aa-4c5f-b573-1b0287ba2cf0",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c15d06c0-530b-41b8-a408-bf73145c4758"
        },
        "item": {
          "id": "f5c3ab45-3ebd-479a-a7c1-1a76b58afc0c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f09514e2-9e90-4c03-824b-cd5fc176831e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ee2cca-72df-4499-b36e-b561d2bb0914",
        "cursor": {
          "ref": "42699861-8db9-461c-972a-59676b0435f8",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f4ebf99b-909f-45f9-80d1-6611cd75ea3e"
        },
        "item": {
          "id": "14ee2cca-72df-4499-b36e-b561d2bb0914",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1d57cb22-87eb-428d-a9b1-0f63f401740b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ee2cca-72df-4499-b36e-b561d2bb0914",
        "cursor": {
          "ref": "42699861-8db9-461c-972a-59676b0435f8",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f4ebf99b-909f-45f9-80d1-6611cd75ea3e"
        },
        "item": {
          "id": "14ee2cca-72df-4499-b36e-b561d2bb0914",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1d57cb22-87eb-428d-a9b1-0f63f401740b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a7fc0b-7163-46e7-94f0-c87f0acb5f91",
        "cursor": {
          "ref": "53101352-8530-4a3c-9152-19f744cf6e5c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8a937e7c-2adc-4b13-9f6d-2403e3335d3c"
        },
        "item": {
          "id": "53a7fc0b-7163-46e7-94f0-c87f0acb5f91",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "74f1cfe5-6ac4-493b-9dd8-8b82085db41f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a7fc0b-7163-46e7-94f0-c87f0acb5f91",
        "cursor": {
          "ref": "53101352-8530-4a3c-9152-19f744cf6e5c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8a937e7c-2adc-4b13-9f6d-2403e3335d3c"
        },
        "item": {
          "id": "53a7fc0b-7163-46e7-94f0-c87f0acb5f91",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "74f1cfe5-6ac4-493b-9dd8-8b82085db41f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f233c183-3fd2-4c25-b4f8-2658692c3a24",
        "cursor": {
          "ref": "72774260-e070-4a36-a16d-a2ba1362c655",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "812ed067-6b46-4ce5-990c-c43672995bcc"
        },
        "item": {
          "id": "f233c183-3fd2-4c25-b4f8-2658692c3a24",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cf0fe80d-5611-418f-a36b-399c4d784f2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f233c183-3fd2-4c25-b4f8-2658692c3a24",
        "cursor": {
          "ref": "72774260-e070-4a36-a16d-a2ba1362c655",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "812ed067-6b46-4ce5-990c-c43672995bcc"
        },
        "item": {
          "id": "f233c183-3fd2-4c25-b4f8-2658692c3a24",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cf0fe80d-5611-418f-a36b-399c4d784f2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736dc9bc-5cd5-40b3-9bde-ac5d4ec0582e",
        "cursor": {
          "ref": "798c7150-e20c-414a-83d3-5bb223480c56",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5cb86917-1db8-48f8-bd35-065813b883b7"
        },
        "item": {
          "id": "736dc9bc-5cd5-40b3-9bde-ac5d4ec0582e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "87081aae-51f8-4871-88b1-14b35778afe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736dc9bc-5cd5-40b3-9bde-ac5d4ec0582e",
        "cursor": {
          "ref": "798c7150-e20c-414a-83d3-5bb223480c56",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5cb86917-1db8-48f8-bd35-065813b883b7"
        },
        "item": {
          "id": "736dc9bc-5cd5-40b3-9bde-ac5d4ec0582e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "87081aae-51f8-4871-88b1-14b35778afe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760ece76-1623-449b-87dd-6dcf6b9bae80",
        "cursor": {
          "ref": "2b0747cd-0e78-47f9-84c2-c5308cebf218",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f28821c2-806f-46c6-9376-580e2c7cf66b"
        },
        "item": {
          "id": "760ece76-1623-449b-87dd-6dcf6b9bae80",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fef8aa8d-1565-40e8-85cf-c27651f34864",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760ece76-1623-449b-87dd-6dcf6b9bae80",
        "cursor": {
          "ref": "2b0747cd-0e78-47f9-84c2-c5308cebf218",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f28821c2-806f-46c6-9376-580e2c7cf66b"
        },
        "item": {
          "id": "760ece76-1623-449b-87dd-6dcf6b9bae80",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fef8aa8d-1565-40e8-85cf-c27651f34864",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e397c0a0-b0e8-4159-b984-79ba3ed724c9",
        "cursor": {
          "ref": "82a4d103-ffc6-4a30-b293-52b40fc3db51",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "44ba125b-1227-4c21-b8dc-b35be51f916d"
        },
        "item": {
          "id": "e397c0a0-b0e8-4159-b984-79ba3ed724c9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "acfb0085-7216-4414-b9a4-c1fc5fb4b14a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e397c0a0-b0e8-4159-b984-79ba3ed724c9",
        "cursor": {
          "ref": "82a4d103-ffc6-4a30-b293-52b40fc3db51",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "44ba125b-1227-4c21-b8dc-b35be51f916d"
        },
        "item": {
          "id": "e397c0a0-b0e8-4159-b984-79ba3ed724c9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "acfb0085-7216-4414-b9a4-c1fc5fb4b14a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b3af7b-e38f-4330-a08f-4e32117189c2",
        "cursor": {
          "ref": "516df54f-3380-46e4-81e3-4699b22b4f1f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3b72a591-dd52-4c31-888d-21b03b9a0615"
        },
        "item": {
          "id": "b0b3af7b-e38f-4330-a08f-4e32117189c2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "51415bb4-f89c-4a33-a778-4f1c2b32455a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b3af7b-e38f-4330-a08f-4e32117189c2",
        "cursor": {
          "ref": "516df54f-3380-46e4-81e3-4699b22b4f1f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3b72a591-dd52-4c31-888d-21b03b9a0615"
        },
        "item": {
          "id": "b0b3af7b-e38f-4330-a08f-4e32117189c2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "51415bb4-f89c-4a33-a778-4f1c2b32455a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af86247d-9583-4a7e-ae4c-0f82455406d4",
        "cursor": {
          "ref": "187ffc51-742e-4b5d-bdea-4ffd36e2afda",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5ff992fa-6571-4937-b052-1a80970af3d7"
        },
        "item": {
          "id": "af86247d-9583-4a7e-ae4c-0f82455406d4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "69e9d93f-d4be-469e-913c-c9391e4a478e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af86247d-9583-4a7e-ae4c-0f82455406d4",
        "cursor": {
          "ref": "187ffc51-742e-4b5d-bdea-4ffd36e2afda",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5ff992fa-6571-4937-b052-1a80970af3d7"
        },
        "item": {
          "id": "af86247d-9583-4a7e-ae4c-0f82455406d4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "69e9d93f-d4be-469e-913c-c9391e4a478e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991a4c92-ee19-499a-b265-39a736cc41c4",
        "cursor": {
          "ref": "0a89bddc-927c-44f3-8a20-aa195f68a227",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0b5f6457-9bf3-4f53-83ee-2770a6b1ed36"
        },
        "item": {
          "id": "991a4c92-ee19-499a-b265-39a736cc41c4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c0026dfb-f4a2-4868-8313-2cc4353edacf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991a4c92-ee19-499a-b265-39a736cc41c4",
        "cursor": {
          "ref": "0a89bddc-927c-44f3-8a20-aa195f68a227",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0b5f6457-9bf3-4f53-83ee-2770a6b1ed36"
        },
        "item": {
          "id": "991a4c92-ee19-499a-b265-39a736cc41c4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c0026dfb-f4a2-4868-8313-2cc4353edacf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966f3116-8d44-4b86-a856-ce59831f5a1f",
        "cursor": {
          "ref": "a414be6b-facf-4b38-a937-b94c0a6b03b9",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "37561daf-a068-426c-abdf-0f96482424e0"
        },
        "item": {
          "id": "966f3116-8d44-4b86-a856-ce59831f5a1f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dd541528-3dcf-485d-90f6-695a8c4026c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966f3116-8d44-4b86-a856-ce59831f5a1f",
        "cursor": {
          "ref": "a414be6b-facf-4b38-a937-b94c0a6b03b9",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "37561daf-a068-426c-abdf-0f96482424e0"
        },
        "item": {
          "id": "966f3116-8d44-4b86-a856-ce59831f5a1f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dd541528-3dcf-485d-90f6-695a8c4026c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e1ff9a-9286-4619-8422-2a0da011a8a6",
        "cursor": {
          "ref": "f91228e1-d59a-4bd1-be37-4243e386aa3d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2b7fe228-6bb5-4f24-8879-a2aaa17a8b36"
        },
        "item": {
          "id": "66e1ff9a-9286-4619-8422-2a0da011a8a6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ed622068-f77f-4c5c-93c5-4985b3b9e922",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e1ff9a-9286-4619-8422-2a0da011a8a6",
        "cursor": {
          "ref": "f91228e1-d59a-4bd1-be37-4243e386aa3d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2b7fe228-6bb5-4f24-8879-a2aaa17a8b36"
        },
        "item": {
          "id": "66e1ff9a-9286-4619-8422-2a0da011a8a6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ed622068-f77f-4c5c-93c5-4985b3b9e922",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc187905-9f10-4c1f-aef2-5b7104900895",
        "cursor": {
          "ref": "80bfbfa9-2db3-44b2-850b-1f0be97ec864",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f6721f2c-3586-4fff-ba16-d46917eac704"
        },
        "item": {
          "id": "dc187905-9f10-4c1f-aef2-5b7104900895",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "41531fda-66ca-46db-8a7b-f8545327ce89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc187905-9f10-4c1f-aef2-5b7104900895",
        "cursor": {
          "ref": "80bfbfa9-2db3-44b2-850b-1f0be97ec864",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f6721f2c-3586-4fff-ba16-d46917eac704"
        },
        "item": {
          "id": "dc187905-9f10-4c1f-aef2-5b7104900895",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "41531fda-66ca-46db-8a7b-f8545327ce89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103cd1b6-ee5d-4f69-a50a-0d80f4d156b4",
        "cursor": {
          "ref": "52fd4fe2-2d59-4c5f-854f-28c6245e69f3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7ed2e07c-0c39-4857-85c0-e9a32ce0a8cb"
        },
        "item": {
          "id": "103cd1b6-ee5d-4f69-a50a-0d80f4d156b4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1c21cae4-8031-42b7-a65f-0cd61cbfb9e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103cd1b6-ee5d-4f69-a50a-0d80f4d156b4",
        "cursor": {
          "ref": "52fd4fe2-2d59-4c5f-854f-28c6245e69f3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7ed2e07c-0c39-4857-85c0-e9a32ce0a8cb"
        },
        "item": {
          "id": "103cd1b6-ee5d-4f69-a50a-0d80f4d156b4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "1c21cae4-8031-42b7-a65f-0cd61cbfb9e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a888477-a46e-4cd6-b2c1-738ffb1c8b4a",
        "cursor": {
          "ref": "b32f2cae-770a-44dc-867e-9e867f6f88e0",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "35fd5f05-87c1-443a-91f5-75184d348153"
        },
        "item": {
          "id": "9a888477-a46e-4cd6-b2c1-738ffb1c8b4a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "51f51982-c675-4cd5-afe0-48e7b559331e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a888477-a46e-4cd6-b2c1-738ffb1c8b4a",
        "cursor": {
          "ref": "b32f2cae-770a-44dc-867e-9e867f6f88e0",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "35fd5f05-87c1-443a-91f5-75184d348153"
        },
        "item": {
          "id": "9a888477-a46e-4cd6-b2c1-738ffb1c8b4a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "51f51982-c675-4cd5-afe0-48e7b559331e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbdf0b6-d63e-4dfe-aaee-16695c42a1d2",
        "cursor": {
          "ref": "57bfaffa-55b2-4fc7-9f41-c673d79eabd5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bbfe06f7-c4d7-4b1d-ae0f-4f54c3578741"
        },
        "item": {
          "id": "1fbdf0b6-d63e-4dfe-aaee-16695c42a1d2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9f4f7640-28c6-4f93-a225-daf0c9f1b6eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbdf0b6-d63e-4dfe-aaee-16695c42a1d2",
        "cursor": {
          "ref": "57bfaffa-55b2-4fc7-9f41-c673d79eabd5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bbfe06f7-c4d7-4b1d-ae0f-4f54c3578741"
        },
        "item": {
          "id": "1fbdf0b6-d63e-4dfe-aaee-16695c42a1d2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9f4f7640-28c6-4f93-a225-daf0c9f1b6eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a631e9-5e0f-4d24-b11b-1905b24b0d19",
        "cursor": {
          "ref": "cc3ba4a7-0a23-44ac-ae25-430eeb58f9a8",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "81325945-3191-49fd-8469-987f6732c49f"
        },
        "item": {
          "id": "43a631e9-5e0f-4d24-b11b-1905b24b0d19",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6e0fd027-0c31-467f-b884-6e547e572f0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a631e9-5e0f-4d24-b11b-1905b24b0d19",
        "cursor": {
          "ref": "cc3ba4a7-0a23-44ac-ae25-430eeb58f9a8",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "81325945-3191-49fd-8469-987f6732c49f"
        },
        "item": {
          "id": "43a631e9-5e0f-4d24-b11b-1905b24b0d19",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6e0fd027-0c31-467f-b884-6e547e572f0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ec1a5d-a8f0-4207-9ace-e8a4f626e141",
        "cursor": {
          "ref": "9238c17e-14d9-4481-ae76-ed2a4363d720",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3ae7e1f1-ef5f-48cb-9c97-21b4d4d0a5ce"
        },
        "item": {
          "id": "08ec1a5d-a8f0-4207-9ace-e8a4f626e141",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "533f09ef-743a-4223-8384-a6bc680022b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ec1a5d-a8f0-4207-9ace-e8a4f626e141",
        "cursor": {
          "ref": "9238c17e-14d9-4481-ae76-ed2a4363d720",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3ae7e1f1-ef5f-48cb-9c97-21b4d4d0a5ce"
        },
        "item": {
          "id": "08ec1a5d-a8f0-4207-9ace-e8a4f626e141",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "533f09ef-743a-4223-8384-a6bc680022b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722044b8-e715-40c3-8a42-64c034e2a72b",
        "cursor": {
          "ref": "696b69e0-5164-4ad2-9968-a1291a27ba6d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "89fcf09a-6ac5-42ba-b3ae-0de39973dad4"
        },
        "item": {
          "id": "722044b8-e715-40c3-8a42-64c034e2a72b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "23bb1391-9186-4891-8a53-03b4917f46b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722044b8-e715-40c3-8a42-64c034e2a72b",
        "cursor": {
          "ref": "696b69e0-5164-4ad2-9968-a1291a27ba6d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "89fcf09a-6ac5-42ba-b3ae-0de39973dad4"
        },
        "item": {
          "id": "722044b8-e715-40c3-8a42-64c034e2a72b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "23bb1391-9186-4891-8a53-03b4917f46b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c215889-18cc-4d01-9080-d38524b78ef5",
        "cursor": {
          "ref": "365e13e0-4759-4eb2-ac96-9d1c45c0344f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5f6a809d-ce4f-4c97-9646-23d8f83c9cec"
        },
        "item": {
          "id": "0c215889-18cc-4d01-9080-d38524b78ef5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "08bf55e7-7bfa-40cb-8de9-a1bfdb9118e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c215889-18cc-4d01-9080-d38524b78ef5",
        "cursor": {
          "ref": "365e13e0-4759-4eb2-ac96-9d1c45c0344f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5f6a809d-ce4f-4c97-9646-23d8f83c9cec"
        },
        "item": {
          "id": "0c215889-18cc-4d01-9080-d38524b78ef5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "08bf55e7-7bfa-40cb-8de9-a1bfdb9118e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3af392-aab4-46f0-b65d-2c84f8c583bd",
        "cursor": {
          "ref": "3388fb8b-5aa9-4712-8f92-739684cce35a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fd715633-8df8-4b0b-ad09-7984203ab048"
        },
        "item": {
          "id": "de3af392-aab4-46f0-b65d-2c84f8c583bd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2e987004-f2d3-473e-957d-c2f7f2cdbace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3af392-aab4-46f0-b65d-2c84f8c583bd",
        "cursor": {
          "ref": "3388fb8b-5aa9-4712-8f92-739684cce35a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fd715633-8df8-4b0b-ad09-7984203ab048"
        },
        "item": {
          "id": "de3af392-aab4-46f0-b65d-2c84f8c583bd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2e987004-f2d3-473e-957d-c2f7f2cdbace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c1599c-4fba-434a-812c-cf98dd0e1487",
        "cursor": {
          "ref": "f164493f-8035-4e5e-a5d8-bfefa300899f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ab241ab3-79cb-4972-9be5-8b27707136c8"
        },
        "item": {
          "id": "f2c1599c-4fba-434a-812c-cf98dd0e1487",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b56e59e8-c001-4eca-9896-2cee0cbb1bef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c1599c-4fba-434a-812c-cf98dd0e1487",
        "cursor": {
          "ref": "f164493f-8035-4e5e-a5d8-bfefa300899f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ab241ab3-79cb-4972-9be5-8b27707136c8"
        },
        "item": {
          "id": "f2c1599c-4fba-434a-812c-cf98dd0e1487",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b56e59e8-c001-4eca-9896-2cee0cbb1bef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196eb7bd-f9a0-407d-818b-4de13bc22768",
        "cursor": {
          "ref": "772e5134-d0a2-4fad-925e-ec24563ee28d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6e4201a7-45fa-45c3-9b00-c1b7817bfabd"
        },
        "item": {
          "id": "196eb7bd-f9a0-407d-818b-4de13bc22768",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2eb32cd5-811f-4108-9f3e-347827c8bb48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196eb7bd-f9a0-407d-818b-4de13bc22768",
        "cursor": {
          "ref": "772e5134-d0a2-4fad-925e-ec24563ee28d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6e4201a7-45fa-45c3-9b00-c1b7817bfabd"
        },
        "item": {
          "id": "196eb7bd-f9a0-407d-818b-4de13bc22768",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2eb32cd5-811f-4108-9f3e-347827c8bb48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eab7076-ae92-484a-b363-dd5a22f393c2",
        "cursor": {
          "ref": "6ae40f13-8f2e-4e95-b6fe-31cef7ecb09c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4fccdc20-b01e-41e3-867b-3d7c2054d303"
        },
        "item": {
          "id": "1eab7076-ae92-484a-b363-dd5a22f393c2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "95fe0549-0ea9-4697-8a9a-87476ae58327",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eab7076-ae92-484a-b363-dd5a22f393c2",
        "cursor": {
          "ref": "6ae40f13-8f2e-4e95-b6fe-31cef7ecb09c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4fccdc20-b01e-41e3-867b-3d7c2054d303"
        },
        "item": {
          "id": "1eab7076-ae92-484a-b363-dd5a22f393c2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "95fe0549-0ea9-4697-8a9a-87476ae58327",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02459337-b37a-4f07-ad69-9f43e98a7906",
        "cursor": {
          "ref": "20969edf-ae92-437c-82f2-8401f9441a69",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "38c727d1-6ceb-434f-8489-b680656abfe0"
        },
        "item": {
          "id": "02459337-b37a-4f07-ad69-9f43e98a7906",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f4e8e659-5613-45c2-9a2f-7415fc49c43b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02459337-b37a-4f07-ad69-9f43e98a7906",
        "cursor": {
          "ref": "20969edf-ae92-437c-82f2-8401f9441a69",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "38c727d1-6ceb-434f-8489-b680656abfe0"
        },
        "item": {
          "id": "02459337-b37a-4f07-ad69-9f43e98a7906",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f4e8e659-5613-45c2-9a2f-7415fc49c43b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2586ce3f-bb32-47f2-ab6b-dd07febad4a6",
        "cursor": {
          "ref": "280606dd-2816-4f7f-965c-671465070e92",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "80a78f8e-2700-4eac-b6f6-b317b0659f0e"
        },
        "item": {
          "id": "2586ce3f-bb32-47f2-ab6b-dd07febad4a6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "adfa3b09-739e-4d8d-b136-5f7a4b903097",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2586ce3f-bb32-47f2-ab6b-dd07febad4a6",
        "cursor": {
          "ref": "280606dd-2816-4f7f-965c-671465070e92",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "80a78f8e-2700-4eac-b6f6-b317b0659f0e"
        },
        "item": {
          "id": "2586ce3f-bb32-47f2-ab6b-dd07febad4a6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "adfa3b09-739e-4d8d-b136-5f7a4b903097",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f978315-0b2e-4eb3-906d-15a73c24ab32",
        "cursor": {
          "ref": "9ef4b771-b998-4d11-8c92-d0733f6fae4e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4eaf7ff3-f819-4d87-ab9d-b73bc040c26c"
        },
        "item": {
          "id": "5f978315-0b2e-4eb3-906d-15a73c24ab32",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7142583e-0288-4347-9199-217356eada56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f978315-0b2e-4eb3-906d-15a73c24ab32",
        "cursor": {
          "ref": "9ef4b771-b998-4d11-8c92-d0733f6fae4e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4eaf7ff3-f819-4d87-ab9d-b73bc040c26c"
        },
        "item": {
          "id": "5f978315-0b2e-4eb3-906d-15a73c24ab32",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7142583e-0288-4347-9199-217356eada56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15f3592-e3ec-4c7f-9062-61894229fb3e",
        "cursor": {
          "ref": "86e7e2fd-27e9-4983-922c-c1bcc2e6844a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "31d4c48e-117f-4620-8613-9365f004927c"
        },
        "item": {
          "id": "f15f3592-e3ec-4c7f-9062-61894229fb3e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "238a5d65-100e-4dcf-808c-428cd7c4cf53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15f3592-e3ec-4c7f-9062-61894229fb3e",
        "cursor": {
          "ref": "86e7e2fd-27e9-4983-922c-c1bcc2e6844a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "31d4c48e-117f-4620-8613-9365f004927c"
        },
        "item": {
          "id": "f15f3592-e3ec-4c7f-9062-61894229fb3e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "238a5d65-100e-4dcf-808c-428cd7c4cf53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269acea3-af8b-419d-8e27-89ccae582621",
        "cursor": {
          "ref": "e999a604-8d7a-4b5a-81b9-aaca51a4f1e4",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b802a3ea-88b4-46f8-bd35-e432e62fda42"
        },
        "item": {
          "id": "269acea3-af8b-419d-8e27-89ccae582621",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "378f1914-90e6-46de-9db2-68a3a9b48465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269acea3-af8b-419d-8e27-89ccae582621",
        "cursor": {
          "ref": "e999a604-8d7a-4b5a-81b9-aaca51a4f1e4",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b802a3ea-88b4-46f8-bd35-e432e62fda42"
        },
        "item": {
          "id": "269acea3-af8b-419d-8e27-89ccae582621",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "378f1914-90e6-46de-9db2-68a3a9b48465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382eb39d-b5d1-48e6-8810-6b8ee213e639",
        "cursor": {
          "ref": "8fd7d56a-b974-4611-bde5-62942b2cabe1",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "768ef3af-4e2c-44cd-8e7b-23b3b4002cbc"
        },
        "item": {
          "id": "382eb39d-b5d1-48e6-8810-6b8ee213e639",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4cb18b9-d42d-452c-9f14-0b902567456b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382eb39d-b5d1-48e6-8810-6b8ee213e639",
        "cursor": {
          "ref": "8fd7d56a-b974-4611-bde5-62942b2cabe1",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "768ef3af-4e2c-44cd-8e7b-23b3b4002cbc"
        },
        "item": {
          "id": "382eb39d-b5d1-48e6-8810-6b8ee213e639",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4cb18b9-d42d-452c-9f14-0b902567456b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c21056d-d8e4-452d-a644-8f28e188a74f",
        "cursor": {
          "ref": "6b09c12d-5c97-4f51-9226-f860896aa5eb",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eb18bf2d-bfa2-4855-bd2d-64ab222d2171"
        },
        "item": {
          "id": "1c21056d-d8e4-452d-a644-8f28e188a74f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "13a78c5b-885a-458a-b66b-8d79cd9364d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c21056d-d8e4-452d-a644-8f28e188a74f",
        "cursor": {
          "ref": "6b09c12d-5c97-4f51-9226-f860896aa5eb",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eb18bf2d-bfa2-4855-bd2d-64ab222d2171"
        },
        "item": {
          "id": "1c21056d-d8e4-452d-a644-8f28e188a74f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "13a78c5b-885a-458a-b66b-8d79cd9364d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f04388-8cb8-4e35-add1-780d9e76b558",
        "cursor": {
          "ref": "5d6b4ca6-3f9c-4db0-a460-9d403b11b32b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d8090d47-3cfa-4520-b676-09baef13ccfb"
        },
        "item": {
          "id": "19f04388-8cb8-4e35-add1-780d9e76b558",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "162471e0-3488-4d86-b7b5-321a257b8342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f04388-8cb8-4e35-add1-780d9e76b558",
        "cursor": {
          "ref": "5d6b4ca6-3f9c-4db0-a460-9d403b11b32b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d8090d47-3cfa-4520-b676-09baef13ccfb"
        },
        "item": {
          "id": "19f04388-8cb8-4e35-add1-780d9e76b558",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "162471e0-3488-4d86-b7b5-321a257b8342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae81bf43-c703-41f4-af70-7f0e51b05a61",
        "cursor": {
          "ref": "74b862e2-c2fd-4ef9-a5e0-ee54dd7a3a34",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2a358fb0-8578-4178-930b-1d27a8f3376f"
        },
        "item": {
          "id": "ae81bf43-c703-41f4-af70-7f0e51b05a61",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ecf6eaeb-42bf-4059-8927-ab9b3974a7cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae81bf43-c703-41f4-af70-7f0e51b05a61",
        "cursor": {
          "ref": "74b862e2-c2fd-4ef9-a5e0-ee54dd7a3a34",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2a358fb0-8578-4178-930b-1d27a8f3376f"
        },
        "item": {
          "id": "ae81bf43-c703-41f4-af70-7f0e51b05a61",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ecf6eaeb-42bf-4059-8927-ab9b3974a7cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42164cd3-4585-4e1e-806f-8cb360ca78d6",
        "cursor": {
          "ref": "d2e055ea-a648-4872-8f3b-9de173ea9478",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "27786195-9d9e-4ef4-b2df-4459985b7dc0"
        },
        "item": {
          "id": "42164cd3-4585-4e1e-806f-8cb360ca78d6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3cc08b5e-820c-46f7-bb11-6e2320df6552",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42164cd3-4585-4e1e-806f-8cb360ca78d6",
        "cursor": {
          "ref": "d2e055ea-a648-4872-8f3b-9de173ea9478",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "27786195-9d9e-4ef4-b2df-4459985b7dc0"
        },
        "item": {
          "id": "42164cd3-4585-4e1e-806f-8cb360ca78d6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3cc08b5e-820c-46f7-bb11-6e2320df6552",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34f8ee3-96db-423d-953e-cbe9f18a8cfd",
        "cursor": {
          "ref": "7c311e16-95fe-4f7a-ad31-f03fb272a088",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e76a5019-a136-48c6-be62-437c1d763625"
        },
        "item": {
          "id": "f34f8ee3-96db-423d-953e-cbe9f18a8cfd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9553447c-4950-4ed1-b98a-ede3e5b20472",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34f8ee3-96db-423d-953e-cbe9f18a8cfd",
        "cursor": {
          "ref": "7c311e16-95fe-4f7a-ad31-f03fb272a088",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e76a5019-a136-48c6-be62-437c1d763625"
        },
        "item": {
          "id": "f34f8ee3-96db-423d-953e-cbe9f18a8cfd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9553447c-4950-4ed1-b98a-ede3e5b20472",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c12c17c-4b1e-48c1-986e-6c2051dba410",
        "cursor": {
          "ref": "d2006f14-3d57-4e99-a484-48ff12428e4d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3ac12bab-5018-4819-88b2-f38a425733ee"
        },
        "item": {
          "id": "0c12c17c-4b1e-48c1-986e-6c2051dba410",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "975c5ea2-d28c-454e-802a-cf3ad9495d0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c12c17c-4b1e-48c1-986e-6c2051dba410",
        "cursor": {
          "ref": "d2006f14-3d57-4e99-a484-48ff12428e4d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3ac12bab-5018-4819-88b2-f38a425733ee"
        },
        "item": {
          "id": "0c12c17c-4b1e-48c1-986e-6c2051dba410",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "975c5ea2-d28c-454e-802a-cf3ad9495d0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a3455f-b81f-42c0-9dd3-3ab51b11f9dc",
        "cursor": {
          "ref": "44c45527-c39f-4685-a3bf-536e5c4d9b09",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d4f8e897-f3e9-498f-8d37-f5bfe002247b"
        },
        "item": {
          "id": "d7a3455f-b81f-42c0-9dd3-3ab51b11f9dc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ab1f3797-3c18-4d3c-a2c7-360d8791d499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a3455f-b81f-42c0-9dd3-3ab51b11f9dc",
        "cursor": {
          "ref": "44c45527-c39f-4685-a3bf-536e5c4d9b09",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d4f8e897-f3e9-498f-8d37-f5bfe002247b"
        },
        "item": {
          "id": "d7a3455f-b81f-42c0-9dd3-3ab51b11f9dc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ab1f3797-3c18-4d3c-a2c7-360d8791d499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402dd05d-c9e8-4675-93b4-a217f5e53a21",
        "cursor": {
          "ref": "22bf7594-c78a-4f4a-81c7-6b5f79d073f6",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "26ace803-bf9c-44b8-b3f7-a2b67a2a5f37"
        },
        "item": {
          "id": "402dd05d-c9e8-4675-93b4-a217f5e53a21",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "857cc605-bbf6-46ba-b9e3-905b6d07b9d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402dd05d-c9e8-4675-93b4-a217f5e53a21",
        "cursor": {
          "ref": "22bf7594-c78a-4f4a-81c7-6b5f79d073f6",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "26ace803-bf9c-44b8-b3f7-a2b67a2a5f37"
        },
        "item": {
          "id": "402dd05d-c9e8-4675-93b4-a217f5e53a21",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "857cc605-bbf6-46ba-b9e3-905b6d07b9d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81785e2f-514a-42cc-8c37-98507bdb27db",
        "cursor": {
          "ref": "73508061-a25b-4757-9705-bee7fc05fd88",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "56816278-8e8c-490f-ad21-398764d7797e"
        },
        "item": {
          "id": "81785e2f-514a-42cc-8c37-98507bdb27db",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "daab7b5d-a820-4069-a934-df37949df87a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81785e2f-514a-42cc-8c37-98507bdb27db",
        "cursor": {
          "ref": "73508061-a25b-4757-9705-bee7fc05fd88",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "56816278-8e8c-490f-ad21-398764d7797e"
        },
        "item": {
          "id": "81785e2f-514a-42cc-8c37-98507bdb27db",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "daab7b5d-a820-4069-a934-df37949df87a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f273475f-fbb8-44f7-a1b6-57516e5a75c2",
        "cursor": {
          "ref": "f8e898c5-64dc-439d-b133-0f3e070ab96f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7d012218-5690-4027-b5f9-0d15f939cd72"
        },
        "item": {
          "id": "f273475f-fbb8-44f7-a1b6-57516e5a75c2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d8ae30ce-2594-4bfe-9f6d-525c2cc187bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f273475f-fbb8-44f7-a1b6-57516e5a75c2",
        "cursor": {
          "ref": "f8e898c5-64dc-439d-b133-0f3e070ab96f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7d012218-5690-4027-b5f9-0d15f939cd72"
        },
        "item": {
          "id": "f273475f-fbb8-44f7-a1b6-57516e5a75c2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d8ae30ce-2594-4bfe-9f6d-525c2cc187bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b80455-528b-4df8-9ad5-4abdcdb20717",
        "cursor": {
          "ref": "0526abe3-d1e1-4151-9587-c3681c645ff3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "269e79e7-1693-44cc-8d74-ef3cb113a884"
        },
        "item": {
          "id": "75b80455-528b-4df8-9ad5-4abdcdb20717",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c04b3de0-9f13-4977-bfaf-bf8b6948ac1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b80455-528b-4df8-9ad5-4abdcdb20717",
        "cursor": {
          "ref": "0526abe3-d1e1-4151-9587-c3681c645ff3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "269e79e7-1693-44cc-8d74-ef3cb113a884"
        },
        "item": {
          "id": "75b80455-528b-4df8-9ad5-4abdcdb20717",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c04b3de0-9f13-4977-bfaf-bf8b6948ac1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b504d00d-8a1c-477c-8a2a-01d26c2db73c",
        "cursor": {
          "ref": "70513098-a47f-4368-a19e-4654ebcd98bb",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0f288c93-3544-4957-b726-8899cd2b434e"
        },
        "item": {
          "id": "b504d00d-8a1c-477c-8a2a-01d26c2db73c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d7f72f9c-9b64-41e1-9f7a-e1d389a25155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b504d00d-8a1c-477c-8a2a-01d26c2db73c",
        "cursor": {
          "ref": "70513098-a47f-4368-a19e-4654ebcd98bb",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0f288c93-3544-4957-b726-8899cd2b434e"
        },
        "item": {
          "id": "b504d00d-8a1c-477c-8a2a-01d26c2db73c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d7f72f9c-9b64-41e1-9f7a-e1d389a25155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1a356b-f957-4e70-ac7a-6215f4574288",
        "cursor": {
          "ref": "84bf4e31-91d3-4360-b502-822260770692",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "62ffef29-6ce2-44cf-9075-71c250b93ecb"
        },
        "item": {
          "id": "ac1a356b-f957-4e70-ac7a-6215f4574288",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1533e3e5-c31f-4233-acfe-0828c5b6a8e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1a356b-f957-4e70-ac7a-6215f4574288",
        "cursor": {
          "ref": "84bf4e31-91d3-4360-b502-822260770692",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "62ffef29-6ce2-44cf-9075-71c250b93ecb"
        },
        "item": {
          "id": "ac1a356b-f957-4e70-ac7a-6215f4574288",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1533e3e5-c31f-4233-acfe-0828c5b6a8e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4526ef33-5953-4236-89b4-154a0824c318",
        "cursor": {
          "ref": "ab76dded-6da4-4fe4-a2d2-7f3a756a165d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "523b62b5-bb36-452f-83fc-cc0d054734dd"
        },
        "item": {
          "id": "4526ef33-5953-4236-89b4-154a0824c318",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cdab1569-ebdb-4ded-8e85-d3a893ddaa7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4526ef33-5953-4236-89b4-154a0824c318",
        "cursor": {
          "ref": "ab76dded-6da4-4fe4-a2d2-7f3a756a165d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "523b62b5-bb36-452f-83fc-cc0d054734dd"
        },
        "item": {
          "id": "4526ef33-5953-4236-89b4-154a0824c318",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cdab1569-ebdb-4ded-8e85-d3a893ddaa7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc219c8-ae49-483c-9ff2-96eab6d58699",
        "cursor": {
          "ref": "144be119-84bb-4923-bac6-304fc7e0bf49",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b0302fb5-9696-407b-9959-7741c48be7a2"
        },
        "item": {
          "id": "9cc219c8-ae49-483c-9ff2-96eab6d58699",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1b43d5b7-ea2f-4da2-ae75-25f14269ddf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc219c8-ae49-483c-9ff2-96eab6d58699",
        "cursor": {
          "ref": "144be119-84bb-4923-bac6-304fc7e0bf49",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b0302fb5-9696-407b-9959-7741c48be7a2"
        },
        "item": {
          "id": "9cc219c8-ae49-483c-9ff2-96eab6d58699",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1b43d5b7-ea2f-4da2-ae75-25f14269ddf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b21025c-2969-462f-ad0e-bd262b71d77d",
        "cursor": {
          "ref": "4d6d6e6e-f553-4919-ba3e-68d24226d75c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a868793c-2e2c-4015-a8d6-7fdd40b13a53"
        },
        "item": {
          "id": "3b21025c-2969-462f-ad0e-bd262b71d77d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cfea58f8-f460-4c8e-b13c-0624e2cce39d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b21025c-2969-462f-ad0e-bd262b71d77d",
        "cursor": {
          "ref": "4d6d6e6e-f553-4919-ba3e-68d24226d75c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a868793c-2e2c-4015-a8d6-7fdd40b13a53"
        },
        "item": {
          "id": "3b21025c-2969-462f-ad0e-bd262b71d77d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cfea58f8-f460-4c8e-b13c-0624e2cce39d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70b9d97-3487-4e19-90a0-875e2abf11dd",
        "cursor": {
          "ref": "fd6da1b1-71dd-41a3-a094-f401a7525f27",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e6b631a4-629e-4cae-9773-301893b2df3f"
        },
        "item": {
          "id": "b70b9d97-3487-4e19-90a0-875e2abf11dd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ba25b892-c858-4004-85f3-17bf6a6acfd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70b9d97-3487-4e19-90a0-875e2abf11dd",
        "cursor": {
          "ref": "fd6da1b1-71dd-41a3-a094-f401a7525f27",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e6b631a4-629e-4cae-9773-301893b2df3f"
        },
        "item": {
          "id": "b70b9d97-3487-4e19-90a0-875e2abf11dd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ba25b892-c858-4004-85f3-17bf6a6acfd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c52668-6bdd-41eb-9ddd-5d286f9169b3",
        "cursor": {
          "ref": "c7725142-7b90-4d9d-8980-f5d2435fb3d7",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8265995d-edbe-4760-a107-0a0fbd23602d"
        },
        "item": {
          "id": "89c52668-6bdd-41eb-9ddd-5d286f9169b3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "478415e8-a358-47fb-a2dc-0412100252f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c52668-6bdd-41eb-9ddd-5d286f9169b3",
        "cursor": {
          "ref": "c7725142-7b90-4d9d-8980-f5d2435fb3d7",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8265995d-edbe-4760-a107-0a0fbd23602d"
        },
        "item": {
          "id": "89c52668-6bdd-41eb-9ddd-5d286f9169b3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "478415e8-a358-47fb-a2dc-0412100252f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18dfc57-9bcb-483f-ba6b-134bdbbc0b71",
        "cursor": {
          "ref": "8a7aa1f3-23c5-49a4-8041-558183a455fe",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "61eb5e99-6dd7-454d-9ce0-e2b3419e9d0e"
        },
        "item": {
          "id": "d18dfc57-9bcb-483f-ba6b-134bdbbc0b71",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c9867eac-7fc3-47af-b967-43e335fffa44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18dfc57-9bcb-483f-ba6b-134bdbbc0b71",
        "cursor": {
          "ref": "8a7aa1f3-23c5-49a4-8041-558183a455fe",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "61eb5e99-6dd7-454d-9ce0-e2b3419e9d0e"
        },
        "item": {
          "id": "d18dfc57-9bcb-483f-ba6b-134bdbbc0b71",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c9867eac-7fc3-47af-b967-43e335fffa44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e26ef-b9da-4540-b982-791a83a2840b",
        "cursor": {
          "ref": "e612eb41-3895-459d-b3b7-e4ddfc1ad48b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9ef4e014-3544-41ad-a8fb-38d6b95b0f0f"
        },
        "item": {
          "id": "a17e26ef-b9da-4540-b982-791a83a2840b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5b5ae4d9-db50-4d94-9f68-e7d07e849eaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e26ef-b9da-4540-b982-791a83a2840b",
        "cursor": {
          "ref": "e612eb41-3895-459d-b3b7-e4ddfc1ad48b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9ef4e014-3544-41ad-a8fb-38d6b95b0f0f"
        },
        "item": {
          "id": "a17e26ef-b9da-4540-b982-791a83a2840b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5b5ae4d9-db50-4d94-9f68-e7d07e849eaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac5446f-2fe1-496b-8fe3-9fd3971beb67",
        "cursor": {
          "ref": "9e725b8f-7e95-499d-a77d-861046ec9048",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2afb7efe-079e-4b21-a381-6b88af31d0c1"
        },
        "item": {
          "id": "3ac5446f-2fe1-496b-8fe3-9fd3971beb67",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4e2eea92-c929-44be-8722-623537d9c227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac5446f-2fe1-496b-8fe3-9fd3971beb67",
        "cursor": {
          "ref": "9e725b8f-7e95-499d-a77d-861046ec9048",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2afb7efe-079e-4b21-a381-6b88af31d0c1"
        },
        "item": {
          "id": "3ac5446f-2fe1-496b-8fe3-9fd3971beb67",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4e2eea92-c929-44be-8722-623537d9c227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5ee943-ce7f-4ccc-aeef-a16bd565c30c",
        "cursor": {
          "ref": "ec1c52bf-72fb-4ad1-98b2-091047eb966f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b9be1c05-8161-49a5-9954-33ac653f1e94"
        },
        "item": {
          "id": "ea5ee943-ce7f-4ccc-aeef-a16bd565c30c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "485b471e-49e6-42ac-b0c6-c468ba84cbf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5ee943-ce7f-4ccc-aeef-a16bd565c30c",
        "cursor": {
          "ref": "ec1c52bf-72fb-4ad1-98b2-091047eb966f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b9be1c05-8161-49a5-9954-33ac653f1e94"
        },
        "item": {
          "id": "ea5ee943-ce7f-4ccc-aeef-a16bd565c30c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "485b471e-49e6-42ac-b0c6-c468ba84cbf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e83378f-6a1a-4bba-a7fe-49406b610f57",
        "cursor": {
          "ref": "be2f20b5-a70b-44d5-a2e3-98ea88a58cc1",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b01c6e97-bfcb-40b9-9371-33769ef9f1b0"
        },
        "item": {
          "id": "9e83378f-6a1a-4bba-a7fe-49406b610f57",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c9ec99d6-c3e2-462d-a489-7d51d258d19b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e83378f-6a1a-4bba-a7fe-49406b610f57",
        "cursor": {
          "ref": "be2f20b5-a70b-44d5-a2e3-98ea88a58cc1",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b01c6e97-bfcb-40b9-9371-33769ef9f1b0"
        },
        "item": {
          "id": "9e83378f-6a1a-4bba-a7fe-49406b610f57",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c9ec99d6-c3e2-462d-a489-7d51d258d19b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf6d415-d3c5-4a8e-a530-06d9a848e8eb",
        "cursor": {
          "ref": "fafa5c34-e47c-4f09-8fdd-7019f0f1b456",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a6470286-2a86-44e2-8b20-c886ea8d710d"
        },
        "item": {
          "id": "abf6d415-d3c5-4a8e-a530-06d9a848e8eb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7c9117c0-6c9b-48b4-b1e6-f6f59aa60b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf6d415-d3c5-4a8e-a530-06d9a848e8eb",
        "cursor": {
          "ref": "fafa5c34-e47c-4f09-8fdd-7019f0f1b456",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a6470286-2a86-44e2-8b20-c886ea8d710d"
        },
        "item": {
          "id": "abf6d415-d3c5-4a8e-a530-06d9a848e8eb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7c9117c0-6c9b-48b4-b1e6-f6f59aa60b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b4c927-dbd4-4f7d-8fd2-f52111ff9498",
        "cursor": {
          "ref": "9df536c2-c417-45e9-bb38-f522815596b0",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "535ea2c3-7d95-4e5f-9c81-4e65627a0e3d"
        },
        "item": {
          "id": "55b4c927-dbd4-4f7d-8fd2-f52111ff9498",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6b631182-db4b-4241-b063-4e36ded8b483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b4c927-dbd4-4f7d-8fd2-f52111ff9498",
        "cursor": {
          "ref": "9df536c2-c417-45e9-bb38-f522815596b0",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "535ea2c3-7d95-4e5f-9c81-4e65627a0e3d"
        },
        "item": {
          "id": "55b4c927-dbd4-4f7d-8fd2-f52111ff9498",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6b631182-db4b-4241-b063-4e36ded8b483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52cc39d-9da8-4f7d-b81c-948a2eda23d4",
        "cursor": {
          "ref": "d6df1e9e-6d95-42fd-983c-bf8bcba2c695",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "13b5018a-27e4-49ee-aca1-070443031f12"
        },
        "item": {
          "id": "f52cc39d-9da8-4f7d-b81c-948a2eda23d4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d95e7e1c-7125-42df-a973-837e3bd4b2dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52cc39d-9da8-4f7d-b81c-948a2eda23d4",
        "cursor": {
          "ref": "d6df1e9e-6d95-42fd-983c-bf8bcba2c695",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "13b5018a-27e4-49ee-aca1-070443031f12"
        },
        "item": {
          "id": "f52cc39d-9da8-4f7d-b81c-948a2eda23d4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d95e7e1c-7125-42df-a973-837e3bd4b2dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c779d562-97d5-4895-8bab-a28cbe087a3c",
        "cursor": {
          "ref": "c294bf47-f843-4382-820f-8640dd4396e2",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6114cc61-6e38-4217-98fe-30e63b8dcaf6"
        },
        "item": {
          "id": "c779d562-97d5-4895-8bab-a28cbe087a3c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cc459016-ffda-4040-85d7-009d7a84adf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c779d562-97d5-4895-8bab-a28cbe087a3c",
        "cursor": {
          "ref": "c294bf47-f843-4382-820f-8640dd4396e2",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6114cc61-6e38-4217-98fe-30e63b8dcaf6"
        },
        "item": {
          "id": "c779d562-97d5-4895-8bab-a28cbe087a3c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cc459016-ffda-4040-85d7-009d7a84adf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da39c5f-0b5e-429c-ab4f-ab3e7dde0c41",
        "cursor": {
          "ref": "193ddef3-7aba-41ee-85fb-cddc3eee071e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2b3893db-738e-4f54-bd35-62993c6bb871"
        },
        "item": {
          "id": "7da39c5f-0b5e-429c-ab4f-ab3e7dde0c41",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "88229bc8-c4aa-4bc4-a7d3-7ebbc6db75ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da39c5f-0b5e-429c-ab4f-ab3e7dde0c41",
        "cursor": {
          "ref": "193ddef3-7aba-41ee-85fb-cddc3eee071e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2b3893db-738e-4f54-bd35-62993c6bb871"
        },
        "item": {
          "id": "7da39c5f-0b5e-429c-ab4f-ab3e7dde0c41",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "88229bc8-c4aa-4bc4-a7d3-7ebbc6db75ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aee6dae-5612-4256-bbe9-8687513e0f83",
        "cursor": {
          "ref": "4740b47a-724b-4267-baf7-1c04998c48a1",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3f963f65-a780-48f6-a19d-64a00cd9232f"
        },
        "item": {
          "id": "2aee6dae-5612-4256-bbe9-8687513e0f83",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "90029757-8df3-4207-9b26-65b2f6c59127",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aee6dae-5612-4256-bbe9-8687513e0f83",
        "cursor": {
          "ref": "4740b47a-724b-4267-baf7-1c04998c48a1",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3f963f65-a780-48f6-a19d-64a00cd9232f"
        },
        "item": {
          "id": "2aee6dae-5612-4256-bbe9-8687513e0f83",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "90029757-8df3-4207-9b26-65b2f6c59127",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abf9e55-bebb-442e-9f18-0962dbc7d74d",
        "cursor": {
          "ref": "6f263e35-9725-4eb7-ab67-8823683537bb",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b96cdfba-b9be-42a1-9e39-631846fca2c8"
        },
        "item": {
          "id": "8abf9e55-bebb-442e-9f18-0962dbc7d74d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7322716a-9658-4047-8dd4-c0eca4a04ee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abf9e55-bebb-442e-9f18-0962dbc7d74d",
        "cursor": {
          "ref": "6f263e35-9725-4eb7-ab67-8823683537bb",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b96cdfba-b9be-42a1-9e39-631846fca2c8"
        },
        "item": {
          "id": "8abf9e55-bebb-442e-9f18-0962dbc7d74d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7322716a-9658-4047-8dd4-c0eca4a04ee8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fb9a15-5fe2-408b-9e2e-316f5e0fe42e",
        "cursor": {
          "ref": "5b35a0ee-e00b-48ad-ae8a-675f67e9fd72",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e21be214-d1e2-4b97-a494-685eeb47026b"
        },
        "item": {
          "id": "b4fb9a15-5fe2-408b-9e2e-316f5e0fe42e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3c6de64f-37c6-4479-a3c9-7268e4968640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fb9a15-5fe2-408b-9e2e-316f5e0fe42e",
        "cursor": {
          "ref": "5b35a0ee-e00b-48ad-ae8a-675f67e9fd72",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e21be214-d1e2-4b97-a494-685eeb47026b"
        },
        "item": {
          "id": "b4fb9a15-5fe2-408b-9e2e-316f5e0fe42e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3c6de64f-37c6-4479-a3c9-7268e4968640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a893783b-49ed-404c-ad35-d8e1a30e13db",
        "cursor": {
          "ref": "abc20833-3923-456a-bc9c-09ec10d02d6a",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1a6dd50a-6277-484f-9677-1134010140ea"
        },
        "item": {
          "id": "a893783b-49ed-404c-ad35-d8e1a30e13db",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d8500857-f1ba-4135-ad7a-f94c688281fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a893783b-49ed-404c-ad35-d8e1a30e13db",
        "cursor": {
          "ref": "abc20833-3923-456a-bc9c-09ec10d02d6a",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1a6dd50a-6277-484f-9677-1134010140ea"
        },
        "item": {
          "id": "a893783b-49ed-404c-ad35-d8e1a30e13db",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d8500857-f1ba-4135-ad7a-f94c688281fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f762a83f-489e-4c7a-a92d-38a090ce306e",
        "cursor": {
          "ref": "6e6498e3-d6d1-4d1c-b275-9cc770a8b5c9",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "35907096-26d9-463f-83b0-b82e46c4b593"
        },
        "item": {
          "id": "f762a83f-489e-4c7a-a92d-38a090ce306e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f58567f9-b9d9-465e-aa3f-0cb47e1ad03b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f762a83f-489e-4c7a-a92d-38a090ce306e",
        "cursor": {
          "ref": "6e6498e3-d6d1-4d1c-b275-9cc770a8b5c9",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "35907096-26d9-463f-83b0-b82e46c4b593"
        },
        "item": {
          "id": "f762a83f-489e-4c7a-a92d-38a090ce306e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f58567f9-b9d9-465e-aa3f-0cb47e1ad03b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345c2ef8-f039-4f88-9928-a3dbf9e371ab",
        "cursor": {
          "ref": "ffe80cd7-74c5-4bac-b922-01ad9ff02d60",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "61019b63-3864-4360-8c63-d66e428c4f9f"
        },
        "item": {
          "id": "345c2ef8-f039-4f88-9928-a3dbf9e371ab",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "267debe8-0283-4099-88d1-c75990065a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345c2ef8-f039-4f88-9928-a3dbf9e371ab",
        "cursor": {
          "ref": "ffe80cd7-74c5-4bac-b922-01ad9ff02d60",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "61019b63-3864-4360-8c63-d66e428c4f9f"
        },
        "item": {
          "id": "345c2ef8-f039-4f88-9928-a3dbf9e371ab",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "267debe8-0283-4099-88d1-c75990065a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b1e8aa-2ec0-46b3-ad42-0dabb467e1e9",
        "cursor": {
          "ref": "5af96c06-fd46-442d-bf7c-d419e3adbff1",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b34e7a44-1ec9-40a8-be6a-f19430d3c267"
        },
        "item": {
          "id": "06b1e8aa-2ec0-46b3-ad42-0dabb467e1e9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0da41991-cd43-4e0b-bc09-aa2cb991e172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b1e8aa-2ec0-46b3-ad42-0dabb467e1e9",
        "cursor": {
          "ref": "5af96c06-fd46-442d-bf7c-d419e3adbff1",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b34e7a44-1ec9-40a8-be6a-f19430d3c267"
        },
        "item": {
          "id": "06b1e8aa-2ec0-46b3-ad42-0dabb467e1e9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0da41991-cd43-4e0b-bc09-aa2cb991e172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd02d06-e664-4877-b50f-be7a83f804c4",
        "cursor": {
          "ref": "2ca9fabe-8718-4289-95f2-078b3a616c3d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2c434bd1-da18-4c1b-8922-8ab93bf25c8b"
        },
        "item": {
          "id": "4fd02d06-e664-4877-b50f-be7a83f804c4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ef857a3f-24c2-4219-872d-71cc0b25dc07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4fd02d06-e664-4877-b50f-be7a83f804c4",
        "cursor": {
          "ref": "2ca9fabe-8718-4289-95f2-078b3a616c3d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2c434bd1-da18-4c1b-8922-8ab93bf25c8b"
        },
        "item": {
          "id": "4fd02d06-e664-4877-b50f-be7a83f804c4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "ef857a3f-24c2-4219-872d-71cc0b25dc07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a2ff51c0-eb3f-46e7-a81c-dfa3283fda92",
        "cursor": {
          "ref": "f08b1116-7dc4-4edf-9c14-e5f7d3641138",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f42fce61-c11d-4870-99d6-32379a9d4717"
        },
        "item": {
          "id": "a2ff51c0-eb3f-46e7-a81c-dfa3283fda92",
          "name": "credentials_issue"
        },
        "response": {
          "id": "77f8b729-4ed3-4541-bc69-fe4e01f65c17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "a2ff51c0-eb3f-46e7-a81c-dfa3283fda92",
        "cursor": {
          "ref": "f08b1116-7dc4-4edf-9c14-e5f7d3641138",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f42fce61-c11d-4870-99d6-32379a9d4717"
        },
        "item": {
          "id": "a2ff51c0-eb3f-46e7-a81c-dfa3283fda92",
          "name": "credentials_issue"
        },
        "response": {
          "id": "77f8b729-4ed3-4541-bc69-fe4e01f65c17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "f701050c-00d1-491b-a5f4-0410c28f341d",
        "cursor": {
          "ref": "f9cce8e3-36d4-4cbb-aa0b-7f46d3dc786c",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "af1fd41c-fcb8-46bb-8cce-a0db485da656"
        },
        "item": {
          "id": "f701050c-00d1-491b-a5f4-0410c28f341d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b45c375f-8ef9-41b5-837d-b86c8945e6f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "f701050c-00d1-491b-a5f4-0410c28f341d",
        "cursor": {
          "ref": "f9cce8e3-36d4-4cbb-aa0b-7f46d3dc786c",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "af1fd41c-fcb8-46bb-8cce-a0db485da656"
        },
        "item": {
          "id": "f701050c-00d1-491b-a5f4-0410c28f341d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b45c375f-8ef9-41b5-837d-b86c8945e6f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "d8e8a49f-a689-4fd4-8077-4c040a8b35a4",
        "cursor": {
          "ref": "79aba1c7-c972-4662-80de-b1100356d914",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "37f2b1ea-6061-4343-b0f3-bb0bf70f8c66"
        },
        "item": {
          "id": "d8e8a49f-a689-4fd4-8077-4c040a8b35a4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "774b2bd7-bc5a-4fe3-8c63-9c6806b81b4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "d8e8a49f-a689-4fd4-8077-4c040a8b35a4",
        "cursor": {
          "ref": "79aba1c7-c972-4662-80de-b1100356d914",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "37f2b1ea-6061-4343-b0f3-bb0bf70f8c66"
        },
        "item": {
          "id": "d8e8a49f-a689-4fd4-8077-4c040a8b35a4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "774b2bd7-bc5a-4fe3-8c63-9c6806b81b4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "a1b1e517-ac24-450d-9621-5e884eb38e6a",
        "cursor": {
          "ref": "d5e01f4e-fb94-4d4c-983d-6865dcb7e980",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "40024e2f-cfda-4919-9625-4cf7bc10ae93"
        },
        "item": {
          "id": "a1b1e517-ac24-450d-9621-5e884eb38e6a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ff80484c-d7a6-4b93-8e94-9d248dd89372",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "a1b1e517-ac24-450d-9621-5e884eb38e6a",
        "cursor": {
          "ref": "d5e01f4e-fb94-4d4c-983d-6865dcb7e980",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "40024e2f-cfda-4919-9625-4cf7bc10ae93"
        },
        "item": {
          "id": "a1b1e517-ac24-450d-9621-5e884eb38e6a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ff80484c-d7a6-4b93-8e94-9d248dd89372",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c746110f-d5be-4949-9c3a-cce1cf589cc4",
        "cursor": {
          "ref": "13593c8c-4447-4c04-a3e1-cc7f44dce917",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "332e640d-d70e-4cbc-b663-88195d8eafb9"
        },
        "item": {
          "id": "c746110f-d5be-4949-9c3a-cce1cf589cc4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "35419f18-d8ff-4033-8e6f-c4f7a0e74c6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c746110f-d5be-4949-9c3a-cce1cf589cc4",
        "cursor": {
          "ref": "13593c8c-4447-4c04-a3e1-cc7f44dce917",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "332e640d-d70e-4cbc-b663-88195d8eafb9"
        },
        "item": {
          "id": "c746110f-d5be-4949-9c3a-cce1cf589cc4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "35419f18-d8ff-4033-8e6f-c4f7a0e74c6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9e6ac2e8-8249-4bb3-bd2c-b5c16210d50d",
        "cursor": {
          "ref": "8d9217c4-f2bd-46aa-9597-07586b51f31f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dc99a5a1-4003-46ad-9775-950e571067f3"
        },
        "item": {
          "id": "9e6ac2e8-8249-4bb3-bd2c-b5c16210d50d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "14b755d7-7787-41de-921f-902cc594863e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "9e6ac2e8-8249-4bb3-bd2c-b5c16210d50d",
        "cursor": {
          "ref": "8d9217c4-f2bd-46aa-9597-07586b51f31f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dc99a5a1-4003-46ad-9775-950e571067f3"
        },
        "item": {
          "id": "9e6ac2e8-8249-4bb3-bd2c-b5c16210d50d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "14b755d7-7787-41de-921f-902cc594863e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "105da91b-6e25-40cf-acaa-2771041b631c",
        "cursor": {
          "ref": "6ce2d72b-4347-4254-9848-1ab3317e710d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9cbd7fd3-cba3-4d3f-876e-f0c531b03988"
        },
        "item": {
          "id": "105da91b-6e25-40cf-acaa-2771041b631c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a435fd6e-5988-471c-9d85-284412be36c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105da91b-6e25-40cf-acaa-2771041b631c",
        "cursor": {
          "ref": "6ce2d72b-4347-4254-9848-1ab3317e710d",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9cbd7fd3-cba3-4d3f-876e-f0c531b03988"
        },
        "item": {
          "id": "105da91b-6e25-40cf-acaa-2771041b631c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a435fd6e-5988-471c-9d85-284412be36c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f303d708-cd74-43d2-b30b-b5b282fc78df",
        "cursor": {
          "ref": "4e8e4e7a-09f5-4e2b-a331-a432e44719d1",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "145ed9e1-10d6-4952-af59-a8d22381a1fa"
        },
        "item": {
          "id": "f303d708-cd74-43d2-b30b-b5b282fc78df",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "805b581e-7359-41f9-aadb-d4769779dbba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f303d708-cd74-43d2-b30b-b5b282fc78df",
        "cursor": {
          "ref": "4e8e4e7a-09f5-4e2b-a331-a432e44719d1",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "145ed9e1-10d6-4952-af59-a8d22381a1fa"
        },
        "item": {
          "id": "f303d708-cd74-43d2-b30b-b5b282fc78df",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "805b581e-7359-41f9-aadb-d4769779dbba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae23f4d0-b00b-446d-9c22-479a3489ab8a",
        "cursor": {
          "ref": "00ffe141-4b34-47bb-a015-4458f7d24a62",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "97ab90c8-e362-404e-bf0f-734f6890f20e"
        },
        "item": {
          "id": "ae23f4d0-b00b-446d-9c22-479a3489ab8a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f9cbc05e-13b0-4c9b-9cda-24f365705c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae23f4d0-b00b-446d-9c22-479a3489ab8a",
        "cursor": {
          "ref": "00ffe141-4b34-47bb-a015-4458f7d24a62",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "97ab90c8-e362-404e-bf0f-734f6890f20e"
        },
        "item": {
          "id": "ae23f4d0-b00b-446d-9c22-479a3489ab8a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f9cbc05e-13b0-4c9b-9cda-24f365705c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ecbf59-6aaa-4d15-923f-4087b2c978f9",
        "cursor": {
          "ref": "b87dca93-0fca-4af0-8a42-91c4e6ece5a5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7db2b87b-b413-4efb-8e99-92981007177f"
        },
        "item": {
          "id": "29ecbf59-6aaa-4d15-923f-4087b2c978f9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7e91af7b-96df-43cf-9fa2-b8d392156459",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ecbf59-6aaa-4d15-923f-4087b2c978f9",
        "cursor": {
          "ref": "b87dca93-0fca-4af0-8a42-91c4e6ece5a5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7db2b87b-b413-4efb-8e99-92981007177f"
        },
        "item": {
          "id": "29ecbf59-6aaa-4d15-923f-4087b2c978f9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7e91af7b-96df-43cf-9fa2-b8d392156459",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6c696b-d05e-4de0-8bf4-f1d7a64a439e",
        "cursor": {
          "ref": "9add786f-f145-49a6-b6b3-4156629eb620",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "edcdc8bf-dd67-4925-8fc0-1de4277ac38c"
        },
        "item": {
          "id": "6b6c696b-d05e-4de0-8bf4-f1d7a64a439e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b021156f-4afa-4e8d-a290-2f583bb7fff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6c696b-d05e-4de0-8bf4-f1d7a64a439e",
        "cursor": {
          "ref": "9add786f-f145-49a6-b6b3-4156629eb620",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "edcdc8bf-dd67-4925-8fc0-1de4277ac38c"
        },
        "item": {
          "id": "6b6c696b-d05e-4de0-8bf4-f1d7a64a439e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b021156f-4afa-4e8d-a290-2f583bb7fff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f116cf-c05c-4f3c-8a87-d745ab3cb654",
        "cursor": {
          "ref": "42d619af-f678-4179-bf7e-d518d3f9afc0",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cd739752-75d0-4eac-b50c-5bb9cebdad90"
        },
        "item": {
          "id": "06f116cf-c05c-4f3c-8a87-d745ab3cb654",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "aac6a48c-69ca-4239-88c7-24ed00ee4817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f116cf-c05c-4f3c-8a87-d745ab3cb654",
        "cursor": {
          "ref": "42d619af-f678-4179-bf7e-d518d3f9afc0",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cd739752-75d0-4eac-b50c-5bb9cebdad90"
        },
        "item": {
          "id": "06f116cf-c05c-4f3c-8a87-d745ab3cb654",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "aac6a48c-69ca-4239-88c7-24ed00ee4817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88dac08-e068-4023-a4b1-116aaf906beb",
        "cursor": {
          "ref": "e6a99de3-c638-43c4-bbb3-749337d52560",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "87caea33-3529-43c8-8a08-48c0443cde48"
        },
        "item": {
          "id": "f88dac08-e068-4023-a4b1-116aaf906beb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f930c4ab-ad3c-4716-929e-f3d29ba32a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88dac08-e068-4023-a4b1-116aaf906beb",
        "cursor": {
          "ref": "e6a99de3-c638-43c4-bbb3-749337d52560",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "87caea33-3529-43c8-8a08-48c0443cde48"
        },
        "item": {
          "id": "f88dac08-e068-4023-a4b1-116aaf906beb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f930c4ab-ad3c-4716-929e-f3d29ba32a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d49edf7-950a-409b-a9d8-21a3c5bbbbd4",
        "cursor": {
          "ref": "9d711bb2-60b5-4ac6-b3af-ea5f97460029",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "73c90814-e1d9-4571-8bac-2d041e5d5a16"
        },
        "item": {
          "id": "6d49edf7-950a-409b-a9d8-21a3c5bbbbd4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e53f231b-d62d-4d08-ac65-8d8c62a4ffed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d49edf7-950a-409b-a9d8-21a3c5bbbbd4",
        "cursor": {
          "ref": "9d711bb2-60b5-4ac6-b3af-ea5f97460029",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "73c90814-e1d9-4571-8bac-2d041e5d5a16"
        },
        "item": {
          "id": "6d49edf7-950a-409b-a9d8-21a3c5bbbbd4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e53f231b-d62d-4d08-ac65-8d8c62a4ffed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2f574b-070f-480a-9e57-cc6520779832",
        "cursor": {
          "ref": "234867eb-c5ed-4c53-a300-e38cc1ad6bc5",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "98b1c072-3789-4984-a1c0-62411b728f12"
        },
        "item": {
          "id": "cb2f574b-070f-480a-9e57-cc6520779832",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8243d67b-d171-412b-89ec-bb10cf83b264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2f574b-070f-480a-9e57-cc6520779832",
        "cursor": {
          "ref": "234867eb-c5ed-4c53-a300-e38cc1ad6bc5",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "98b1c072-3789-4984-a1c0-62411b728f12"
        },
        "item": {
          "id": "cb2f574b-070f-480a-9e57-cc6520779832",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8243d67b-d171-412b-89ec-bb10cf83b264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23af1e33-9561-4d87-95ab-e8e4f03684b9",
        "cursor": {
          "ref": "6ad55380-72ef-4633-b59d-c9870a096b0c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "148d2cf2-8342-43c5-b2d8-deda9780e8d7"
        },
        "item": {
          "id": "23af1e33-9561-4d87-95ab-e8e4f03684b9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "98f99d3b-d48e-45ff-a1c6-ef61cdb7c436",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23af1e33-9561-4d87-95ab-e8e4f03684b9",
        "cursor": {
          "ref": "6ad55380-72ef-4633-b59d-c9870a096b0c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "148d2cf2-8342-43c5-b2d8-deda9780e8d7"
        },
        "item": {
          "id": "23af1e33-9561-4d87-95ab-e8e4f03684b9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "98f99d3b-d48e-45ff-a1c6-ef61cdb7c436",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26be8d29-24e7-44d3-b4f8-54b92800d3d6",
        "cursor": {
          "ref": "02dacac8-5f02-4237-a43e-2aa122f30632",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b068def9-5df2-4e59-9f85-b1d2414aa012"
        },
        "item": {
          "id": "26be8d29-24e7-44d3-b4f8-54b92800d3d6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3d7301d5-94dc-4a15-9b28-c582e65d6304",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26be8d29-24e7-44d3-b4f8-54b92800d3d6",
        "cursor": {
          "ref": "02dacac8-5f02-4237-a43e-2aa122f30632",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b068def9-5df2-4e59-9f85-b1d2414aa012"
        },
        "item": {
          "id": "26be8d29-24e7-44d3-b4f8-54b92800d3d6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3d7301d5-94dc-4a15-9b28-c582e65d6304",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f869d6-9f95-4356-b9b3-ecce81c6cf7e",
        "cursor": {
          "ref": "056aaf1c-0110-4af4-a261-377de1c878dc",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6ab66e10-bc9f-4acb-a5a0-7cc8c34138a7"
        },
        "item": {
          "id": "11f869d6-9f95-4356-b9b3-ecce81c6cf7e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1bfb5d35-6701-4ffa-bfdc-b2ed634e9627",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f869d6-9f95-4356-b9b3-ecce81c6cf7e",
        "cursor": {
          "ref": "056aaf1c-0110-4af4-a261-377de1c878dc",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6ab66e10-bc9f-4acb-a5a0-7cc8c34138a7"
        },
        "item": {
          "id": "11f869d6-9f95-4356-b9b3-ecce81c6cf7e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1bfb5d35-6701-4ffa-bfdc-b2ed634e9627",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ac61c0-b88e-4658-8c5a-3fa23175529d",
        "cursor": {
          "ref": "e01cbf08-b909-4a68-a980-8fbf71bbe2e3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "148c2e28-ea8a-4eb9-97d1-39fa267a993f"
        },
        "item": {
          "id": "b9ac61c0-b88e-4658-8c5a-3fa23175529d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8fe577cf-fea0-4c52-8118-c06d27b4f73f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ac61c0-b88e-4658-8c5a-3fa23175529d",
        "cursor": {
          "ref": "e01cbf08-b909-4a68-a980-8fbf71bbe2e3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "148c2e28-ea8a-4eb9-97d1-39fa267a993f"
        },
        "item": {
          "id": "b9ac61c0-b88e-4658-8c5a-3fa23175529d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8fe577cf-fea0-4c52-8118-c06d27b4f73f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6932ae3-f468-4698-a884-ab9ad2bdece6",
        "cursor": {
          "ref": "0db65683-bdc1-4869-89ca-7e2839dabf54",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3a844651-ebdc-42cf-801d-4d12b805f2ec"
        },
        "item": {
          "id": "c6932ae3-f468-4698-a884-ab9ad2bdece6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b9157745-b465-4c56-a15c-c0c55dc9c4a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6932ae3-f468-4698-a884-ab9ad2bdece6",
        "cursor": {
          "ref": "0db65683-bdc1-4869-89ca-7e2839dabf54",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3a844651-ebdc-42cf-801d-4d12b805f2ec"
        },
        "item": {
          "id": "c6932ae3-f468-4698-a884-ab9ad2bdece6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b9157745-b465-4c56-a15c-c0c55dc9c4a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a69a1ef-f6f3-4629-a83f-49a43c8671d9",
        "cursor": {
          "ref": "a63e5b2b-5fd8-413e-abb1-97e75b55a68b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "42f128a6-37f2-43c2-9aa4-576681c908c9"
        },
        "item": {
          "id": "9a69a1ef-f6f3-4629-a83f-49a43c8671d9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5fe06aac-6d48-4eb5-893e-2865b374cde4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a69a1ef-f6f3-4629-a83f-49a43c8671d9",
        "cursor": {
          "ref": "a63e5b2b-5fd8-413e-abb1-97e75b55a68b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "42f128a6-37f2-43c2-9aa4-576681c908c9"
        },
        "item": {
          "id": "9a69a1ef-f6f3-4629-a83f-49a43c8671d9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5fe06aac-6d48-4eb5-893e-2865b374cde4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7601711b-4976-493b-a402-98d6e9a31412",
        "cursor": {
          "ref": "0dc4ac59-8368-4356-ab99-7d8f77a9bacb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "beb28240-f272-4c08-a729-d2bcfdeacc41"
        },
        "item": {
          "id": "7601711b-4976-493b-a402-98d6e9a31412",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b7fa627-5a11-4425-9356-a673e3ad9ef1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7601711b-4976-493b-a402-98d6e9a31412",
        "cursor": {
          "ref": "0dc4ac59-8368-4356-ab99-7d8f77a9bacb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "beb28240-f272-4c08-a729-d2bcfdeacc41"
        },
        "item": {
          "id": "7601711b-4976-493b-a402-98d6e9a31412",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b7fa627-5a11-4425-9356-a673e3ad9ef1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42913c55-a3f0-4501-8f5e-f0337f634272",
        "cursor": {
          "ref": "a6aea922-49c2-4345-bd68-80b0ef368e0e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "375bff4b-c136-41d6-bfdf-ac06e4a5551d"
        },
        "item": {
          "id": "42913c55-a3f0-4501-8f5e-f0337f634272",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ced0c1d6-e9e0-4775-a305-0954b5ca407a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42913c55-a3f0-4501-8f5e-f0337f634272",
        "cursor": {
          "ref": "a6aea922-49c2-4345-bd68-80b0ef368e0e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "375bff4b-c136-41d6-bfdf-ac06e4a5551d"
        },
        "item": {
          "id": "42913c55-a3f0-4501-8f5e-f0337f634272",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ced0c1d6-e9e0-4775-a305-0954b5ca407a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7a4dfa-54e3-44e7-9501-0b22729de603",
        "cursor": {
          "ref": "3273e300-e213-4efb-8a07-8e175b84f5e9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "69aa9ff8-4ddc-4f9c-b7f5-08d408639c60"
        },
        "item": {
          "id": "dd7a4dfa-54e3-44e7-9501-0b22729de603",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8098a4a3-dd60-4de0-9334-bac7c40d2b6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7a4dfa-54e3-44e7-9501-0b22729de603",
        "cursor": {
          "ref": "3273e300-e213-4efb-8a07-8e175b84f5e9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "69aa9ff8-4ddc-4f9c-b7f5-08d408639c60"
        },
        "item": {
          "id": "dd7a4dfa-54e3-44e7-9501-0b22729de603",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8098a4a3-dd60-4de0-9334-bac7c40d2b6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09c7c94-af46-4c61-b0f8-23b69528098d",
        "cursor": {
          "ref": "39bb4c2f-d36f-4b17-ad41-34cdde4a2e01",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e8f6412d-ccae-4374-b383-367f6c75b029"
        },
        "item": {
          "id": "c09c7c94-af46-4c61-b0f8-23b69528098d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "689eed6b-096d-475f-908f-df5e07ee6bb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09c7c94-af46-4c61-b0f8-23b69528098d",
        "cursor": {
          "ref": "39bb4c2f-d36f-4b17-ad41-34cdde4a2e01",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e8f6412d-ccae-4374-b383-367f6c75b029"
        },
        "item": {
          "id": "c09c7c94-af46-4c61-b0f8-23b69528098d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "689eed6b-096d-475f-908f-df5e07ee6bb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbff87c-51c0-4923-98ae-9fbc6083892c",
        "cursor": {
          "ref": "5ebf61ae-3c0d-489d-8607-124da97c2180",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "62ecb1b0-3d5d-4bb0-b0bb-dad28585f888"
        },
        "item": {
          "id": "0fbff87c-51c0-4923-98ae-9fbc6083892c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f55dcf92-0f7c-4a14-9502-6757cac221f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbff87c-51c0-4923-98ae-9fbc6083892c",
        "cursor": {
          "ref": "5ebf61ae-3c0d-489d-8607-124da97c2180",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "62ecb1b0-3d5d-4bb0-b0bb-dad28585f888"
        },
        "item": {
          "id": "0fbff87c-51c0-4923-98ae-9fbc6083892c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f55dcf92-0f7c-4a14-9502-6757cac221f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39449b58-a65a-468b-bd5f-54775a118c2f",
        "cursor": {
          "ref": "dc6f42c7-c696-4eec-aa8a-7bb4308d3054",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d69caf63-0f07-4796-a4b1-1ae89da9ddde"
        },
        "item": {
          "id": "39449b58-a65a-468b-bd5f-54775a118c2f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9a634d5e-74da-4633-b42a-6f728b9be4ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39449b58-a65a-468b-bd5f-54775a118c2f",
        "cursor": {
          "ref": "dc6f42c7-c696-4eec-aa8a-7bb4308d3054",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d69caf63-0f07-4796-a4b1-1ae89da9ddde"
        },
        "item": {
          "id": "39449b58-a65a-468b-bd5f-54775a118c2f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9a634d5e-74da-4633-b42a-6f728b9be4ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3598dd86-d2e7-4089-abcd-6ed25d7ed54f",
        "cursor": {
          "ref": "bd27faa2-3785-474f-893c-b360434072c8",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2687bfef-28b8-4c4f-a736-14959514b458"
        },
        "item": {
          "id": "3598dd86-d2e7-4089-abcd-6ed25d7ed54f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa3e07d5-9fa5-4c64-b39d-b722cdc2191c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3598dd86-d2e7-4089-abcd-6ed25d7ed54f",
        "cursor": {
          "ref": "bd27faa2-3785-474f-893c-b360434072c8",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2687bfef-28b8-4c4f-a736-14959514b458"
        },
        "item": {
          "id": "3598dd86-d2e7-4089-abcd-6ed25d7ed54f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa3e07d5-9fa5-4c64-b39d-b722cdc2191c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbac6442-5288-4634-935d-f1466f16045a",
        "cursor": {
          "ref": "e952c886-c822-4a6e-adac-a5b5c9bd9519",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "afa716ca-5ce7-4482-bba1-c0b6ebb2df78"
        },
        "item": {
          "id": "fbac6442-5288-4634-935d-f1466f16045a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "efe18968-d78c-464d-8108-a2801aee3249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbac6442-5288-4634-935d-f1466f16045a",
        "cursor": {
          "ref": "e952c886-c822-4a6e-adac-a5b5c9bd9519",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "afa716ca-5ce7-4482-bba1-c0b6ebb2df78"
        },
        "item": {
          "id": "fbac6442-5288-4634-935d-f1466f16045a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "efe18968-d78c-464d-8108-a2801aee3249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad25b1f7-f958-45c9-bc4b-ff48490daab1",
        "cursor": {
          "ref": "a106f87c-b362-49d0-9813-3bbd61d42b7a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bb6d322d-37fc-4ff9-a94c-d2df0560dc8f"
        },
        "item": {
          "id": "ad25b1f7-f958-45c9-bc4b-ff48490daab1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4a765b74-bba9-4ce7-9cca-d4295121da12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad25b1f7-f958-45c9-bc4b-ff48490daab1",
        "cursor": {
          "ref": "a106f87c-b362-49d0-9813-3bbd61d42b7a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bb6d322d-37fc-4ff9-a94c-d2df0560dc8f"
        },
        "item": {
          "id": "ad25b1f7-f958-45c9-bc4b-ff48490daab1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4a765b74-bba9-4ce7-9cca-d4295121da12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250aa518-8dcb-4670-93e9-5aca4cc4676d",
        "cursor": {
          "ref": "24002d70-5128-410e-b613-a64feb498566",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6bd2ad5a-5b18-44a1-9eed-3f0b1250ad7e"
        },
        "item": {
          "id": "250aa518-8dcb-4670-93e9-5aca4cc4676d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db7d18c7-e037-4343-9cde-c0d51bf305f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250aa518-8dcb-4670-93e9-5aca4cc4676d",
        "cursor": {
          "ref": "24002d70-5128-410e-b613-a64feb498566",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6bd2ad5a-5b18-44a1-9eed-3f0b1250ad7e"
        },
        "item": {
          "id": "250aa518-8dcb-4670-93e9-5aca4cc4676d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "db7d18c7-e037-4343-9cde-c0d51bf305f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27217f11-2148-4a2e-b816-d49519c9c2c3",
        "cursor": {
          "ref": "d4bb6214-a299-44ce-bceb-2a903ca07d54",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0b0a64c9-4a3e-47b8-af7c-249597681fc4"
        },
        "item": {
          "id": "27217f11-2148-4a2e-b816-d49519c9c2c3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0db96a5d-d30a-4ceb-ba52-857f5ad4f35b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27217f11-2148-4a2e-b816-d49519c9c2c3",
        "cursor": {
          "ref": "d4bb6214-a299-44ce-bceb-2a903ca07d54",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0b0a64c9-4a3e-47b8-af7c-249597681fc4"
        },
        "item": {
          "id": "27217f11-2148-4a2e-b816-d49519c9c2c3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0db96a5d-d30a-4ceb-ba52-857f5ad4f35b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b92ddf1-7ac2-4554-b831-02367ca50f60",
        "cursor": {
          "ref": "a9a3dac9-551d-42f6-9a05-5f0528b7e905",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7d1a695d-04b9-45e6-ad9e-33b3bcb6ab5a"
        },
        "item": {
          "id": "5b92ddf1-7ac2-4554-b831-02367ca50f60",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fde30003-4182-4252-be06-4a802da2a263",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b92ddf1-7ac2-4554-b831-02367ca50f60",
        "cursor": {
          "ref": "a9a3dac9-551d-42f6-9a05-5f0528b7e905",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7d1a695d-04b9-45e6-ad9e-33b3bcb6ab5a"
        },
        "item": {
          "id": "5b92ddf1-7ac2-4554-b831-02367ca50f60",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fde30003-4182-4252-be06-4a802da2a263",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acc2ab4-2ff3-450f-95aa-78381502f788",
        "cursor": {
          "ref": "700124fa-9a94-4a11-a167-c8675002060b",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8977d2ba-cdb4-4bec-a13b-2de496003bac"
        },
        "item": {
          "id": "1acc2ab4-2ff3-450f-95aa-78381502f788",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4f2cad15-e8ea-42c5-a995-c33d253b8cd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acc2ab4-2ff3-450f-95aa-78381502f788",
        "cursor": {
          "ref": "700124fa-9a94-4a11-a167-c8675002060b",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8977d2ba-cdb4-4bec-a13b-2de496003bac"
        },
        "item": {
          "id": "1acc2ab4-2ff3-450f-95aa-78381502f788",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4f2cad15-e8ea-42c5-a995-c33d253b8cd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2f0f7b-3fd1-4a93-85e7-473828d25c58",
        "cursor": {
          "ref": "3b094e55-5701-4d3f-b27f-4627c50cf447",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1c6eb69a-cec0-4a76-96b3-bab8cee1d3e8"
        },
        "item": {
          "id": "aa2f0f7b-3fd1-4a93-85e7-473828d25c58",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ebaf4d6b-dfe7-4660-8a5c-f276f738d8db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2f0f7b-3fd1-4a93-85e7-473828d25c58",
        "cursor": {
          "ref": "3b094e55-5701-4d3f-b27f-4627c50cf447",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1c6eb69a-cec0-4a76-96b3-bab8cee1d3e8"
        },
        "item": {
          "id": "aa2f0f7b-3fd1-4a93-85e7-473828d25c58",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ebaf4d6b-dfe7-4660-8a5c-f276f738d8db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca4e91a-6d73-43be-8469-c32c42638942",
        "cursor": {
          "ref": "850b4b8c-e2b7-477e-bddc-9e82bb4708e2",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d454182a-02e5-4b70-a2a3-15dfb78e92f3"
        },
        "item": {
          "id": "6ca4e91a-6d73-43be-8469-c32c42638942",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1ad1ef84-7a9e-4c49-b30c-fdaffd683c6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca4e91a-6d73-43be-8469-c32c42638942",
        "cursor": {
          "ref": "850b4b8c-e2b7-477e-bddc-9e82bb4708e2",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d454182a-02e5-4b70-a2a3-15dfb78e92f3"
        },
        "item": {
          "id": "6ca4e91a-6d73-43be-8469-c32c42638942",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1ad1ef84-7a9e-4c49-b30c-fdaffd683c6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa036e8e-05f5-477c-a692-724d6158ff0f",
        "cursor": {
          "ref": "9e345cf5-2399-4be9-a551-b8a0e6e7e530",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8c5936bc-4a3a-423c-b7fa-a838ba95c52a"
        },
        "item": {
          "id": "aa036e8e-05f5-477c-a692-724d6158ff0f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b351bec0-9cf1-4f78-b423-24b73e3b4ad4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa036e8e-05f5-477c-a692-724d6158ff0f",
        "cursor": {
          "ref": "9e345cf5-2399-4be9-a551-b8a0e6e7e530",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8c5936bc-4a3a-423c-b7fa-a838ba95c52a"
        },
        "item": {
          "id": "aa036e8e-05f5-477c-a692-724d6158ff0f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b351bec0-9cf1-4f78-b423-24b73e3b4ad4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c33328-3e8d-44ee-abc1-bdf5c021bb95",
        "cursor": {
          "ref": "8fe85147-3c46-4310-93a3-17c5602ef52c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3f905536-17a4-40ec-9ee9-97a99c230319"
        },
        "item": {
          "id": "46c33328-3e8d-44ee-abc1-bdf5c021bb95",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4b2d30a7-8329-4641-9595-fbb0534525ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c33328-3e8d-44ee-abc1-bdf5c021bb95",
        "cursor": {
          "ref": "8fe85147-3c46-4310-93a3-17c5602ef52c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3f905536-17a4-40ec-9ee9-97a99c230319"
        },
        "item": {
          "id": "46c33328-3e8d-44ee-abc1-bdf5c021bb95",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4b2d30a7-8329-4641-9595-fbb0534525ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1488dd-4ca4-4ffe-ad9f-deb99dbd9eab",
        "cursor": {
          "ref": "0dcd9815-4331-4368-ab9d-c33a312eb573",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c4fba691-7f21-4bb4-a002-31d82c82eebc"
        },
        "item": {
          "id": "1e1488dd-4ca4-4ffe-ad9f-deb99dbd9eab",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8fbe8463-9771-4691-a23f-f9676e72edc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1488dd-4ca4-4ffe-ad9f-deb99dbd9eab",
        "cursor": {
          "ref": "0dcd9815-4331-4368-ab9d-c33a312eb573",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c4fba691-7f21-4bb4-a002-31d82c82eebc"
        },
        "item": {
          "id": "1e1488dd-4ca4-4ffe-ad9f-deb99dbd9eab",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8fbe8463-9771-4691-a23f-f9676e72edc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6308acc-3ab8-4b97-9350-af8e3b79c027",
        "cursor": {
          "ref": "4df53b47-8ca2-4809-9896-fcc6aa2e73eb",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1df26da8-2035-4d19-9197-82a494ee5713"
        },
        "item": {
          "id": "f6308acc-3ab8-4b97-9350-af8e3b79c027",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea74f20b-8d7a-4714-b8f2-575ca64ad425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6308acc-3ab8-4b97-9350-af8e3b79c027",
        "cursor": {
          "ref": "4df53b47-8ca2-4809-9896-fcc6aa2e73eb",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1df26da8-2035-4d19-9197-82a494ee5713"
        },
        "item": {
          "id": "f6308acc-3ab8-4b97-9350-af8e3b79c027",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea74f20b-8d7a-4714-b8f2-575ca64ad425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535e5bda-2368-499a-b56a-70ac6aa05347",
        "cursor": {
          "ref": "57285c0d-7868-4016-b90f-37b244ec6eca",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a403e249-879d-4212-84e7-801e40fdb36b"
        },
        "item": {
          "id": "535e5bda-2368-499a-b56a-70ac6aa05347",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a035f3fd-a731-467c-9845-db0be6913aa4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535e5bda-2368-499a-b56a-70ac6aa05347",
        "cursor": {
          "ref": "57285c0d-7868-4016-b90f-37b244ec6eca",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a403e249-879d-4212-84e7-801e40fdb36b"
        },
        "item": {
          "id": "535e5bda-2368-499a-b56a-70ac6aa05347",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a035f3fd-a731-467c-9845-db0be6913aa4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949d6bf0-798c-4f68-8f52-24c9e0e7c23a",
        "cursor": {
          "ref": "3af89f85-3f59-41e8-aac7-9ba89ecb8291",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e8bd1211-c9f3-427b-ad73-4c965fc4b98d"
        },
        "item": {
          "id": "949d6bf0-798c-4f68-8f52-24c9e0e7c23a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cf485df2-7085-40cc-9980-33ae423fbc10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949d6bf0-798c-4f68-8f52-24c9e0e7c23a",
        "cursor": {
          "ref": "3af89f85-3f59-41e8-aac7-9ba89ecb8291",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e8bd1211-c9f3-427b-ad73-4c965fc4b98d"
        },
        "item": {
          "id": "949d6bf0-798c-4f68-8f52-24c9e0e7c23a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cf485df2-7085-40cc-9980-33ae423fbc10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb78172-cbae-4208-ba05-db8c13ada5a8",
        "cursor": {
          "ref": "87f22705-427c-4f8f-b356-bb1db0ed97be",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "35b34658-0510-4df6-91f7-6adfcbdbea90"
        },
        "item": {
          "id": "8eb78172-cbae-4208-ba05-db8c13ada5a8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c4a5198c-719c-4df0-aa03-df17605776ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb78172-cbae-4208-ba05-db8c13ada5a8",
        "cursor": {
          "ref": "87f22705-427c-4f8f-b356-bb1db0ed97be",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "35b34658-0510-4df6-91f7-6adfcbdbea90"
        },
        "item": {
          "id": "8eb78172-cbae-4208-ba05-db8c13ada5a8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c4a5198c-719c-4df0-aa03-df17605776ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130336d8-92bb-4afe-99f8-52873df69a53",
        "cursor": {
          "ref": "34b7f42f-8c73-433b-86c8-aa97a834d48c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8efd7c08-8f49-4f71-b3a5-36e9a440d809"
        },
        "item": {
          "id": "130336d8-92bb-4afe-99f8-52873df69a53",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1d6e24e7-b1ff-4543-b663-446679e7f027",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130336d8-92bb-4afe-99f8-52873df69a53",
        "cursor": {
          "ref": "34b7f42f-8c73-433b-86c8-aa97a834d48c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8efd7c08-8f49-4f71-b3a5-36e9a440d809"
        },
        "item": {
          "id": "130336d8-92bb-4afe-99f8-52873df69a53",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1d6e24e7-b1ff-4543-b663-446679e7f027",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82421828-6531-4280-8e8b-986d84f920ab",
        "cursor": {
          "ref": "21c67186-3a51-4e8e-98b0-1b4c79409e47",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d2bc727b-8b94-4777-82f2-b6bb87d803a9"
        },
        "item": {
          "id": "82421828-6531-4280-8e8b-986d84f920ab",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "678becb0-cfe2-4fbb-8f49-4e99baae5740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82421828-6531-4280-8e8b-986d84f920ab",
        "cursor": {
          "ref": "21c67186-3a51-4e8e-98b0-1b4c79409e47",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d2bc727b-8b94-4777-82f2-b6bb87d803a9"
        },
        "item": {
          "id": "82421828-6531-4280-8e8b-986d84f920ab",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "678becb0-cfe2-4fbb-8f49-4e99baae5740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ece3f05-c94a-4afd-97e5-94e545b21592",
        "cursor": {
          "ref": "23dc30b9-2962-47e8-b56b-2b115af3c6cb",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2d17984b-b8b8-4feb-8747-76187d2943a5"
        },
        "item": {
          "id": "7ece3f05-c94a-4afd-97e5-94e545b21592",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "843e322e-84dc-4e55-bf2e-86e329ddaeed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ece3f05-c94a-4afd-97e5-94e545b21592",
        "cursor": {
          "ref": "23dc30b9-2962-47e8-b56b-2b115af3c6cb",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2d17984b-b8b8-4feb-8747-76187d2943a5"
        },
        "item": {
          "id": "7ece3f05-c94a-4afd-97e5-94e545b21592",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "843e322e-84dc-4e55-bf2e-86e329ddaeed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef24f7e-a854-49e8-be9d-129ed0f2faf2",
        "cursor": {
          "ref": "30f0fbdc-c5e6-4590-ada5-f787205958ba",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7c9a71a0-5279-4835-8680-6a962f010e78"
        },
        "item": {
          "id": "eef24f7e-a854-49e8-be9d-129ed0f2faf2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4702cb3c-9199-4f15-9d5e-7c926fadff93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef24f7e-a854-49e8-be9d-129ed0f2faf2",
        "cursor": {
          "ref": "30f0fbdc-c5e6-4590-ada5-f787205958ba",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7c9a71a0-5279-4835-8680-6a962f010e78"
        },
        "item": {
          "id": "eef24f7e-a854-49e8-be9d-129ed0f2faf2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4702cb3c-9199-4f15-9d5e-7c926fadff93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2b19ed-f228-461e-88ba-37dfef61ee62",
        "cursor": {
          "ref": "0ec6c0f9-5833-4a74-a03a-417cacc4e901",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fe1ae436-a070-48f7-aba9-a7d5f7934c30"
        },
        "item": {
          "id": "bf2b19ed-f228-461e-88ba-37dfef61ee62",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "11d5ff57-b5c1-4fce-9e3f-7c601e0d1f1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2b19ed-f228-461e-88ba-37dfef61ee62",
        "cursor": {
          "ref": "0ec6c0f9-5833-4a74-a03a-417cacc4e901",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fe1ae436-a070-48f7-aba9-a7d5f7934c30"
        },
        "item": {
          "id": "bf2b19ed-f228-461e-88ba-37dfef61ee62",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "11d5ff57-b5c1-4fce-9e3f-7c601e0d1f1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4f4407-f110-446f-85aa-d260bdf77bd6",
        "cursor": {
          "ref": "eed093fd-a3e3-40d0-ba93-df72c8655fcd",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "045e7f7c-32a3-413a-99e2-784e705ac185"
        },
        "item": {
          "id": "bc4f4407-f110-446f-85aa-d260bdf77bd6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cdd60406-89a0-4cff-b51a-00c730056665",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4f4407-f110-446f-85aa-d260bdf77bd6",
        "cursor": {
          "ref": "eed093fd-a3e3-40d0-ba93-df72c8655fcd",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "045e7f7c-32a3-413a-99e2-784e705ac185"
        },
        "item": {
          "id": "bc4f4407-f110-446f-85aa-d260bdf77bd6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cdd60406-89a0-4cff-b51a-00c730056665",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de0dde3-e216-41dd-936d-8b03676c8774",
        "cursor": {
          "ref": "be9cc1c6-a528-438f-a788-83cb8fb7c4c7",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "573633b4-87c3-4fe3-9426-b806b893f26b"
        },
        "item": {
          "id": "8de0dde3-e216-41dd-936d-8b03676c8774",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "97ac0349-c0d3-44b4-bea6-ba896565cd53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de0dde3-e216-41dd-936d-8b03676c8774",
        "cursor": {
          "ref": "be9cc1c6-a528-438f-a788-83cb8fb7c4c7",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "573633b4-87c3-4fe3-9426-b806b893f26b"
        },
        "item": {
          "id": "8de0dde3-e216-41dd-936d-8b03676c8774",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "97ac0349-c0d3-44b4-bea6-ba896565cd53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccbff78-c21e-45f4-82e4-5f526234b781",
        "cursor": {
          "ref": "72209b59-9c06-49ed-ad27-5961701f29c2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "511b16b3-e8f3-4e8a-98bf-5af7f5fefa54"
        },
        "item": {
          "id": "2ccbff78-c21e-45f4-82e4-5f526234b781",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6751d1e1-23a7-4adb-a85e-833c1588d9f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccbff78-c21e-45f4-82e4-5f526234b781",
        "cursor": {
          "ref": "72209b59-9c06-49ed-ad27-5961701f29c2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "511b16b3-e8f3-4e8a-98bf-5af7f5fefa54"
        },
        "item": {
          "id": "2ccbff78-c21e-45f4-82e4-5f526234b781",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6751d1e1-23a7-4adb-a85e-833c1588d9f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac20118-b109-4d71-9829-250605c0cc28",
        "cursor": {
          "ref": "beca4842-5b6d-43cf-9b59-133cce1f053e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ff24efab-7a7b-4e4f-b1f6-b60e01735f97"
        },
        "item": {
          "id": "cac20118-b109-4d71-9829-250605c0cc28",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c32f31da-0904-4a24-8075-efc3de9e5e4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac20118-b109-4d71-9829-250605c0cc28",
        "cursor": {
          "ref": "beca4842-5b6d-43cf-9b59-133cce1f053e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ff24efab-7a7b-4e4f-b1f6-b60e01735f97"
        },
        "item": {
          "id": "cac20118-b109-4d71-9829-250605c0cc28",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c32f31da-0904-4a24-8075-efc3de9e5e4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08a68ac-d1c0-46bf-8e1d-802d14496d66",
        "cursor": {
          "ref": "604eef27-6dcb-4eda-b21b-28603bdbecf8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7f434c29-fdee-42f2-9177-2e98fe7ed213"
        },
        "item": {
          "id": "f08a68ac-d1c0-46bf-8e1d-802d14496d66",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c04a1a1a-ea67-434f-9989-e8d7bca75d07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08a68ac-d1c0-46bf-8e1d-802d14496d66",
        "cursor": {
          "ref": "604eef27-6dcb-4eda-b21b-28603bdbecf8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7f434c29-fdee-42f2-9177-2e98fe7ed213"
        },
        "item": {
          "id": "f08a68ac-d1c0-46bf-8e1d-802d14496d66",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c04a1a1a-ea67-434f-9989-e8d7bca75d07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a49009a-e2e0-4bb2-aed9-ed615418eb80",
        "cursor": {
          "ref": "389c93b0-3771-4f65-9e43-f2084c763c5c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3c663828-1695-481a-b8a0-c201f1408714"
        },
        "item": {
          "id": "9a49009a-e2e0-4bb2-aed9-ed615418eb80",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8e284cdb-0098-446d-906c-1e741958f6cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a49009a-e2e0-4bb2-aed9-ed615418eb80",
        "cursor": {
          "ref": "389c93b0-3771-4f65-9e43-f2084c763c5c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3c663828-1695-481a-b8a0-c201f1408714"
        },
        "item": {
          "id": "9a49009a-e2e0-4bb2-aed9-ed615418eb80",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8e284cdb-0098-446d-906c-1e741958f6cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d085672c-4b5f-4364-8d42-777ed68e3234",
        "cursor": {
          "ref": "66633cae-479f-4a38-ae67-e199e7994bd2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "866c2813-782c-43e4-9dd6-6a53781127b5"
        },
        "item": {
          "id": "d085672c-4b5f-4364-8d42-777ed68e3234",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f5161a41-2a6d-46a2-9ada-67d33eb5f9e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d085672c-4b5f-4364-8d42-777ed68e3234",
        "cursor": {
          "ref": "66633cae-479f-4a38-ae67-e199e7994bd2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "866c2813-782c-43e4-9dd6-6a53781127b5"
        },
        "item": {
          "id": "d085672c-4b5f-4364-8d42-777ed68e3234",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f5161a41-2a6d-46a2-9ada-67d33eb5f9e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498bc6c9-76f3-4c3d-b393-933cae1c4097",
        "cursor": {
          "ref": "7f4d38cb-8b84-465c-a3f7-d002636d94d0",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "936ba789-b5ff-48ff-8eea-d74904ee7111"
        },
        "item": {
          "id": "498bc6c9-76f3-4c3d-b393-933cae1c4097",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "12b843d6-a781-41fc-8e16-58df404ea882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498bc6c9-76f3-4c3d-b393-933cae1c4097",
        "cursor": {
          "ref": "7f4d38cb-8b84-465c-a3f7-d002636d94d0",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "936ba789-b5ff-48ff-8eea-d74904ee7111"
        },
        "item": {
          "id": "498bc6c9-76f3-4c3d-b393-933cae1c4097",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "12b843d6-a781-41fc-8e16-58df404ea882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1d6d6b-aa70-4c1f-9c3f-9e117859efea",
        "cursor": {
          "ref": "da8681e0-3ff7-4d58-a2ef-2d2d4f0020b5",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9bf88102-438f-4064-9264-435510fa1a24"
        },
        "item": {
          "id": "2a1d6d6b-aa70-4c1f-9c3f-9e117859efea",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d0f4a699-c030-46b4-a1b1-12da45b548bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1d6d6b-aa70-4c1f-9c3f-9e117859efea",
        "cursor": {
          "ref": "da8681e0-3ff7-4d58-a2ef-2d2d4f0020b5",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9bf88102-438f-4064-9264-435510fa1a24"
        },
        "item": {
          "id": "2a1d6d6b-aa70-4c1f-9c3f-9e117859efea",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d0f4a699-c030-46b4-a1b1-12da45b548bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafb85cf-8504-4302-b912-cf5766466a46",
        "cursor": {
          "ref": "0208dea3-ed5a-4a53-88c9-a73b1bc2337c",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b82b288f-68f6-4717-8d3a-5a51b97a695c"
        },
        "item": {
          "id": "bafb85cf-8504-4302-b912-cf5766466a46",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "068d45ef-8fa4-4301-8af1-9041d8756cbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafb85cf-8504-4302-b912-cf5766466a46",
        "cursor": {
          "ref": "0208dea3-ed5a-4a53-88c9-a73b1bc2337c",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b82b288f-68f6-4717-8d3a-5a51b97a695c"
        },
        "item": {
          "id": "bafb85cf-8504-4302-b912-cf5766466a46",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "068d45ef-8fa4-4301-8af1-9041d8756cbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9825f572-2c64-43d4-83ba-f909fe4889e2",
        "cursor": {
          "ref": "4ca8f16b-809e-4fd9-8cf1-8ed8e1edd9e9",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a536e4d7-d310-45c3-b566-8518e819b5ba"
        },
        "item": {
          "id": "9825f572-2c64-43d4-83ba-f909fe4889e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ff5cedb9-bf46-4fd5-b2b0-b4d0617d7579",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9825f572-2c64-43d4-83ba-f909fe4889e2",
        "cursor": {
          "ref": "4ca8f16b-809e-4fd9-8cf1-8ed8e1edd9e9",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a536e4d7-d310-45c3-b566-8518e819b5ba"
        },
        "item": {
          "id": "9825f572-2c64-43d4-83ba-f909fe4889e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ff5cedb9-bf46-4fd5-b2b0-b4d0617d7579",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7558fc85-8268-4752-bc2e-4969e9a4c6b2",
        "cursor": {
          "ref": "334eac37-87db-4f90-a035-e8f0c9afe792",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b2e006b2-3f5c-4a09-8f86-24f525642d16"
        },
        "item": {
          "id": "7558fc85-8268-4752-bc2e-4969e9a4c6b2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "813b8ec6-6839-40a5-a743-74f886a051d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7558fc85-8268-4752-bc2e-4969e9a4c6b2",
        "cursor": {
          "ref": "334eac37-87db-4f90-a035-e8f0c9afe792",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b2e006b2-3f5c-4a09-8f86-24f525642d16"
        },
        "item": {
          "id": "7558fc85-8268-4752-bc2e-4969e9a4c6b2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "813b8ec6-6839-40a5-a743-74f886a051d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d437a182-59d4-4b87-81d1-23b3fb00e661",
        "cursor": {
          "ref": "dcb77cda-3bc8-412d-8b0f-4a01ce815163",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "05238b66-4b8e-47a0-835c-68fb75a2876a"
        },
        "item": {
          "id": "d437a182-59d4-4b87-81d1-23b3fb00e661",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a0b2564b-ffb7-486a-b6ab-a53b13226bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d437a182-59d4-4b87-81d1-23b3fb00e661",
        "cursor": {
          "ref": "dcb77cda-3bc8-412d-8b0f-4a01ce815163",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "05238b66-4b8e-47a0-835c-68fb75a2876a"
        },
        "item": {
          "id": "d437a182-59d4-4b87-81d1-23b3fb00e661",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a0b2564b-ffb7-486a-b6ab-a53b13226bb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01d3542-271f-4a66-89a8-d2786d89f657",
        "cursor": {
          "ref": "a6e2b270-62be-4107-9050-849211b46b20",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9a90afbb-28b9-49f0-8df7-ee2185f6ca67"
        },
        "item": {
          "id": "b01d3542-271f-4a66-89a8-d2786d89f657",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "68e86bb3-2880-443a-a56f-fee50253dd09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01d3542-271f-4a66-89a8-d2786d89f657",
        "cursor": {
          "ref": "a6e2b270-62be-4107-9050-849211b46b20",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9a90afbb-28b9-49f0-8df7-ee2185f6ca67"
        },
        "item": {
          "id": "b01d3542-271f-4a66-89a8-d2786d89f657",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "68e86bb3-2880-443a-a56f-fee50253dd09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d33c83f-416a-4643-ae70-b5f50bc6941d",
        "cursor": {
          "ref": "cee20fa6-57f7-40e0-ac25-a83c3edd6a20",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47d00b66-bce6-4d51-9149-7f4502cbca0c"
        },
        "item": {
          "id": "0d33c83f-416a-4643-ae70-b5f50bc6941d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "94b6f131-63a5-4305-b1fd-3f0d62e1b6ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d33c83f-416a-4643-ae70-b5f50bc6941d",
        "cursor": {
          "ref": "cee20fa6-57f7-40e0-ac25-a83c3edd6a20",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47d00b66-bce6-4d51-9149-7f4502cbca0c"
        },
        "item": {
          "id": "0d33c83f-416a-4643-ae70-b5f50bc6941d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "94b6f131-63a5-4305-b1fd-3f0d62e1b6ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ff9bca-b27f-46e3-be49-ed6e121bae89",
        "cursor": {
          "ref": "4730be08-d2f5-44e7-bcb9-5330144dcab5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a70011a0-e87b-472b-9562-996cb701d9ad"
        },
        "item": {
          "id": "e1ff9bca-b27f-46e3-be49-ed6e121bae89",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "214bce56-4b23-4478-ad62-396f4b2dd425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ff9bca-b27f-46e3-be49-ed6e121bae89",
        "cursor": {
          "ref": "4730be08-d2f5-44e7-bcb9-5330144dcab5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a70011a0-e87b-472b-9562-996cb701d9ad"
        },
        "item": {
          "id": "e1ff9bca-b27f-46e3-be49-ed6e121bae89",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "214bce56-4b23-4478-ad62-396f4b2dd425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1d5f96-fbf1-4b35-a58f-34f54a981e6a",
        "cursor": {
          "ref": "335dc445-ab41-4268-8829-cfe3bc4724bd",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5ed5e70b-e2ab-4f9f-b807-9f7c79a92f5b"
        },
        "item": {
          "id": "ca1d5f96-fbf1-4b35-a58f-34f54a981e6a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1538fb1f-9e8d-408d-9247-c62a3d960868",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1d5f96-fbf1-4b35-a58f-34f54a981e6a",
        "cursor": {
          "ref": "335dc445-ab41-4268-8829-cfe3bc4724bd",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5ed5e70b-e2ab-4f9f-b807-9f7c79a92f5b"
        },
        "item": {
          "id": "ca1d5f96-fbf1-4b35-a58f-34f54a981e6a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1538fb1f-9e8d-408d-9247-c62a3d960868",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f42065-52fa-4ed4-8bdc-c7f11f940822",
        "cursor": {
          "ref": "feb3eba8-a3db-47b6-ae2c-62571a13b318",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "86d98249-9321-4f0c-acef-b0a2f8d221ec"
        },
        "item": {
          "id": "54f42065-52fa-4ed4-8bdc-c7f11f940822",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1ad55460-4a34-4a09-a981-b1eb48cad725",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f42065-52fa-4ed4-8bdc-c7f11f940822",
        "cursor": {
          "ref": "feb3eba8-a3db-47b6-ae2c-62571a13b318",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "86d98249-9321-4f0c-acef-b0a2f8d221ec"
        },
        "item": {
          "id": "54f42065-52fa-4ed4-8bdc-c7f11f940822",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1ad55460-4a34-4a09-a981-b1eb48cad725",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ca34c1-9777-47a0-ba66-18a6b062640e",
        "cursor": {
          "ref": "4230382f-c31f-4a17-bd2f-afe4f877bd73",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "49308822-6c7e-4d9d-a8a6-edf00f915af2"
        },
        "item": {
          "id": "b9ca34c1-9777-47a0-ba66-18a6b062640e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5e8a9dd9-c5f0-4a08-a42e-9a82b617ecb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ca34c1-9777-47a0-ba66-18a6b062640e",
        "cursor": {
          "ref": "4230382f-c31f-4a17-bd2f-afe4f877bd73",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "49308822-6c7e-4d9d-a8a6-edf00f915af2"
        },
        "item": {
          "id": "b9ca34c1-9777-47a0-ba66-18a6b062640e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5e8a9dd9-c5f0-4a08-a42e-9a82b617ecb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ea4996-d6f2-47c7-80d8-f6d0b522c7cf",
        "cursor": {
          "ref": "e22978a1-235c-474e-9fe2-54e93493ac68",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c32341ee-3acd-4a30-8850-f034ee450909"
        },
        "item": {
          "id": "d8ea4996-d6f2-47c7-80d8-f6d0b522c7cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7dbf2049-c76d-410e-b095-f6c5f38884ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ea4996-d6f2-47c7-80d8-f6d0b522c7cf",
        "cursor": {
          "ref": "e22978a1-235c-474e-9fe2-54e93493ac68",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c32341ee-3acd-4a30-8850-f034ee450909"
        },
        "item": {
          "id": "d8ea4996-d6f2-47c7-80d8-f6d0b522c7cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7dbf2049-c76d-410e-b095-f6c5f38884ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2899bee1-9499-4c05-9333-3ab1d9a46792",
        "cursor": {
          "ref": "e6673265-9737-48a8-9f27-8328df3dffef",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e8a23d1f-8927-4fa5-8654-4511b154e0da"
        },
        "item": {
          "id": "2899bee1-9499-4c05-9333-3ab1d9a46792",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "11c9e8dd-5ca6-48a6-ad0b-74c5581f1bcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2899bee1-9499-4c05-9333-3ab1d9a46792",
        "cursor": {
          "ref": "e6673265-9737-48a8-9f27-8328df3dffef",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e8a23d1f-8927-4fa5-8654-4511b154e0da"
        },
        "item": {
          "id": "2899bee1-9499-4c05-9333-3ab1d9a46792",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "11c9e8dd-5ca6-48a6-ad0b-74c5581f1bcc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c152bc-ce76-498c-a53a-9ace29cc1445",
        "cursor": {
          "ref": "acc2cf43-f2e6-4257-98f2-45dbaa23e3e1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "73c409e8-51c5-4a9e-b909-c43d9a1b45f1"
        },
        "item": {
          "id": "48c152bc-ce76-498c-a53a-9ace29cc1445",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a6eb65cc-cca4-418b-987d-708ddbc68779",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c152bc-ce76-498c-a53a-9ace29cc1445",
        "cursor": {
          "ref": "acc2cf43-f2e6-4257-98f2-45dbaa23e3e1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "73c409e8-51c5-4a9e-b909-c43d9a1b45f1"
        },
        "item": {
          "id": "48c152bc-ce76-498c-a53a-9ace29cc1445",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a6eb65cc-cca4-418b-987d-708ddbc68779",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e77801a-568d-44d3-9738-ae0ee78b1d0e",
        "cursor": {
          "ref": "9eeb561b-a245-4460-8641-5cd9938a63fb",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bcfc611d-1a19-4ced-a70a-f99c73841403"
        },
        "item": {
          "id": "1e77801a-568d-44d3-9738-ae0ee78b1d0e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "95055bf7-bc45-49dd-a6ec-328c8e08e253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e77801a-568d-44d3-9738-ae0ee78b1d0e",
        "cursor": {
          "ref": "9eeb561b-a245-4460-8641-5cd9938a63fb",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bcfc611d-1a19-4ced-a70a-f99c73841403"
        },
        "item": {
          "id": "1e77801a-568d-44d3-9738-ae0ee78b1d0e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "95055bf7-bc45-49dd-a6ec-328c8e08e253",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc303f8-93e3-4efe-a920-0b34d4b3e099",
        "cursor": {
          "ref": "f5259b06-a376-495b-984c-3c156920f715",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "63a0a91c-55c6-43a1-953d-d3c89f6a2cf0"
        },
        "item": {
          "id": "bdc303f8-93e3-4efe-a920-0b34d4b3e099",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f73161a1-c3f5-43d5-8ffa-c3b4261d071b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc303f8-93e3-4efe-a920-0b34d4b3e099",
        "cursor": {
          "ref": "f5259b06-a376-495b-984c-3c156920f715",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "63a0a91c-55c6-43a1-953d-d3c89f6a2cf0"
        },
        "item": {
          "id": "bdc303f8-93e3-4efe-a920-0b34d4b3e099",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f73161a1-c3f5-43d5-8ffa-c3b4261d071b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750b8401-469c-4120-a1fd-27d8f5959292",
        "cursor": {
          "ref": "5904c8e0-615d-4868-b9b0-a3550ca9f326",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "367fd846-46a9-437d-9f7e-de683610043b"
        },
        "item": {
          "id": "750b8401-469c-4120-a1fd-27d8f5959292",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "56799dda-ac47-4e60-8c03-d4b88dea96f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750b8401-469c-4120-a1fd-27d8f5959292",
        "cursor": {
          "ref": "5904c8e0-615d-4868-b9b0-a3550ca9f326",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "367fd846-46a9-437d-9f7e-de683610043b"
        },
        "item": {
          "id": "750b8401-469c-4120-a1fd-27d8f5959292",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "56799dda-ac47-4e60-8c03-d4b88dea96f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4c66e1-2371-4faa-bdf9-6869539e3aad",
        "cursor": {
          "ref": "4ad92b35-8015-4502-ad14-aba874f3557d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fafad46a-df21-40fd-8682-db7c37d45d9d"
        },
        "item": {
          "id": "cd4c66e1-2371-4faa-bdf9-6869539e3aad",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6ca53eac-df9d-4fd9-909a-d992f21e8c8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4c66e1-2371-4faa-bdf9-6869539e3aad",
        "cursor": {
          "ref": "4ad92b35-8015-4502-ad14-aba874f3557d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fafad46a-df21-40fd-8682-db7c37d45d9d"
        },
        "item": {
          "id": "cd4c66e1-2371-4faa-bdf9-6869539e3aad",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6ca53eac-df9d-4fd9-909a-d992f21e8c8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a74059-8e23-42ea-a5bd-1a2fcff69ca3",
        "cursor": {
          "ref": "3ee16c87-0b45-44f6-8cf1-fd34a46c676e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5a726e6a-53c9-450e-b069-81d1f9c4e15f"
        },
        "item": {
          "id": "b2a74059-8e23-42ea-a5bd-1a2fcff69ca3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bdb9ce78-140b-4b38-814c-9934f6980802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a74059-8e23-42ea-a5bd-1a2fcff69ca3",
        "cursor": {
          "ref": "3ee16c87-0b45-44f6-8cf1-fd34a46c676e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5a726e6a-53c9-450e-b069-81d1f9c4e15f"
        },
        "item": {
          "id": "b2a74059-8e23-42ea-a5bd-1a2fcff69ca3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bdb9ce78-140b-4b38-814c-9934f6980802",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906b528c-1770-4acf-9421-a28b30d6be88",
        "cursor": {
          "ref": "aadb93b9-5cf1-4dab-a16d-51db0c860ad8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "081fd738-8174-448a-8b69-b17acc1f32da"
        },
        "item": {
          "id": "906b528c-1770-4acf-9421-a28b30d6be88",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "805b7a8c-c5e5-4e3e-adcf-813bd227c08f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906b528c-1770-4acf-9421-a28b30d6be88",
        "cursor": {
          "ref": "aadb93b9-5cf1-4dab-a16d-51db0c860ad8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "081fd738-8174-448a-8b69-b17acc1f32da"
        },
        "item": {
          "id": "906b528c-1770-4acf-9421-a28b30d6be88",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "805b7a8c-c5e5-4e3e-adcf-813bd227c08f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a99f0a5-cf3f-450c-8ca0-7f340edbdaa4",
        "cursor": {
          "ref": "ee215153-5d05-4880-8a24-6319e6b904c2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3f4f9c95-e34f-4303-a601-2230bf7178ac"
        },
        "item": {
          "id": "0a99f0a5-cf3f-450c-8ca0-7f340edbdaa4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "93b78689-8f33-4e93-a558-68e106a7a98f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a99f0a5-cf3f-450c-8ca0-7f340edbdaa4",
        "cursor": {
          "ref": "ee215153-5d05-4880-8a24-6319e6b904c2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3f4f9c95-e34f-4303-a601-2230bf7178ac"
        },
        "item": {
          "id": "0a99f0a5-cf3f-450c-8ca0-7f340edbdaa4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "93b78689-8f33-4e93-a558-68e106a7a98f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9285ab77-f025-4680-a980-411ad2731ec9",
        "cursor": {
          "ref": "f1ed692f-aadb-4d14-9c1c-79374432e5c3",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "81241b5f-6132-4bf1-9073-32022f9f881a"
        },
        "item": {
          "id": "9285ab77-f025-4680-a980-411ad2731ec9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9330f3e3-a23a-4e57-a6bd-49d95c35ce88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9285ab77-f025-4680-a980-411ad2731ec9",
        "cursor": {
          "ref": "f1ed692f-aadb-4d14-9c1c-79374432e5c3",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "81241b5f-6132-4bf1-9073-32022f9f881a"
        },
        "item": {
          "id": "9285ab77-f025-4680-a980-411ad2731ec9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9330f3e3-a23a-4e57-a6bd-49d95c35ce88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1c7473-efc3-4e38-a497-5680f2659616",
        "cursor": {
          "ref": "7ddced3e-f27d-494d-9288-df4be01eebbc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "adc58ba8-afcc-44f8-b6a5-7d0e83d4807b"
        },
        "item": {
          "id": "8d1c7473-efc3-4e38-a497-5680f2659616",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "89281a7b-ebf8-483d-85e1-5df0a4f2eca4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1c7473-efc3-4e38-a497-5680f2659616",
        "cursor": {
          "ref": "7ddced3e-f27d-494d-9288-df4be01eebbc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "adc58ba8-afcc-44f8-b6a5-7d0e83d4807b"
        },
        "item": {
          "id": "8d1c7473-efc3-4e38-a497-5680f2659616",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "89281a7b-ebf8-483d-85e1-5df0a4f2eca4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30766e51-f13a-40a1-88df-54aef23fd95c",
        "cursor": {
          "ref": "4da0e7ef-14b1-4d03-9b3d-de1a58f56334",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5669a2e2-c4db-47ea-a5ae-a8490a58b7d7"
        },
        "item": {
          "id": "30766e51-f13a-40a1-88df-54aef23fd95c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "68886813-81b2-4a70-bba7-60054b943b21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30766e51-f13a-40a1-88df-54aef23fd95c",
        "cursor": {
          "ref": "4da0e7ef-14b1-4d03-9b3d-de1a58f56334",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5669a2e2-c4db-47ea-a5ae-a8490a58b7d7"
        },
        "item": {
          "id": "30766e51-f13a-40a1-88df-54aef23fd95c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "68886813-81b2-4a70-bba7-60054b943b21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e210a0-01b3-4e8c-8b4c-9185fd296828",
        "cursor": {
          "ref": "84f7d0bf-9772-423c-91a1-e360a674bc67",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5c5f42ee-bb12-4a16-b1e3-8ee4785f8000"
        },
        "item": {
          "id": "38e210a0-01b3-4e8c-8b4c-9185fd296828",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "aeb33d3e-37b9-4ab1-a5b9-66eab70b9dad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e210a0-01b3-4e8c-8b4c-9185fd296828",
        "cursor": {
          "ref": "84f7d0bf-9772-423c-91a1-e360a674bc67",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5c5f42ee-bb12-4a16-b1e3-8ee4785f8000"
        },
        "item": {
          "id": "38e210a0-01b3-4e8c-8b4c-9185fd296828",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "aeb33d3e-37b9-4ab1-a5b9-66eab70b9dad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5a9621-1772-49c8-b6b9-321f3ae3b8a5",
        "cursor": {
          "ref": "d58eb397-01b4-4638-a6db-7161d538771a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3e6a595c-b8f6-496c-842b-da6bfb52f17b"
        },
        "item": {
          "id": "fb5a9621-1772-49c8-b6b9-321f3ae3b8a5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "62714dd5-464a-477d-ae60-eb788b2d1784",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5a9621-1772-49c8-b6b9-321f3ae3b8a5",
        "cursor": {
          "ref": "d58eb397-01b4-4638-a6db-7161d538771a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3e6a595c-b8f6-496c-842b-da6bfb52f17b"
        },
        "item": {
          "id": "fb5a9621-1772-49c8-b6b9-321f3ae3b8a5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "62714dd5-464a-477d-ae60-eb788b2d1784",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73cc3d8-525f-4b88-8424-7d65b06f6726",
        "cursor": {
          "ref": "8cb2df7d-5aaf-49b4-b2f5-19177be6dd64",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "19beae9a-1bf1-47fd-8369-9c66ec64d6f0"
        },
        "item": {
          "id": "e73cc3d8-525f-4b88-8424-7d65b06f6726",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6b5bcf38-6153-4c6c-90e7-02c4debebdc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73cc3d8-525f-4b88-8424-7d65b06f6726",
        "cursor": {
          "ref": "8cb2df7d-5aaf-49b4-b2f5-19177be6dd64",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "19beae9a-1bf1-47fd-8369-9c66ec64d6f0"
        },
        "item": {
          "id": "e73cc3d8-525f-4b88-8424-7d65b06f6726",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6b5bcf38-6153-4c6c-90e7-02c4debebdc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3c6144-45af-4d14-aeab-fc9d4b856585",
        "cursor": {
          "ref": "6fc12f8a-f9d6-4d70-bb89-bd2cd2c1228a",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "adf84bd2-c28a-4168-80ad-a69853da4a3e"
        },
        "item": {
          "id": "2a3c6144-45af-4d14-aeab-fc9d4b856585",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f6424d38-5e02-41bd-a45c-c155e1c075d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3c6144-45af-4d14-aeab-fc9d4b856585",
        "cursor": {
          "ref": "6fc12f8a-f9d6-4d70-bb89-bd2cd2c1228a",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "adf84bd2-c28a-4168-80ad-a69853da4a3e"
        },
        "item": {
          "id": "2a3c6144-45af-4d14-aeab-fc9d4b856585",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f6424d38-5e02-41bd-a45c-c155e1c075d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae08a148-04d2-4378-bb24-371a20e2059d",
        "cursor": {
          "ref": "1caa19e1-0bd4-49cd-9023-5911c7bea5ed",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7b4647c4-b508-4286-903f-b65976262ac1"
        },
        "item": {
          "id": "ae08a148-04d2-4378-bb24-371a20e2059d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "83837a8c-8852-4e42-bfb1-9e61aca851f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae08a148-04d2-4378-bb24-371a20e2059d",
        "cursor": {
          "ref": "1caa19e1-0bd4-49cd-9023-5911c7bea5ed",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7b4647c4-b508-4286-903f-b65976262ac1"
        },
        "item": {
          "id": "ae08a148-04d2-4378-bb24-371a20e2059d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "83837a8c-8852-4e42-bfb1-9e61aca851f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a176940f-d2ab-4a75-8364-06fddfa8dec3",
        "cursor": {
          "ref": "ade66fc9-3407-4ed3-92f1-c0f991a67aaa",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "42761d1e-27e7-47eb-804a-a4050f6df852"
        },
        "item": {
          "id": "a176940f-d2ab-4a75-8364-06fddfa8dec3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cd5fe591-1142-4518-be08-5c7030300d24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a176940f-d2ab-4a75-8364-06fddfa8dec3",
        "cursor": {
          "ref": "ade66fc9-3407-4ed3-92f1-c0f991a67aaa",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "42761d1e-27e7-47eb-804a-a4050f6df852"
        },
        "item": {
          "id": "a176940f-d2ab-4a75-8364-06fddfa8dec3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cd5fe591-1142-4518-be08-5c7030300d24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe0de65-6a8b-403d-92d7-633652f1c68b",
        "cursor": {
          "ref": "db04a7ec-3bd8-4781-9c95-c5a76b712237",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0c7f3c74-b92d-4e8a-846b-cb4372e48d9f"
        },
        "item": {
          "id": "4fe0de65-6a8b-403d-92d7-633652f1c68b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "056221d0-76aa-429a-9db2-19de651cd722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe0de65-6a8b-403d-92d7-633652f1c68b",
        "cursor": {
          "ref": "db04a7ec-3bd8-4781-9c95-c5a76b712237",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0c7f3c74-b92d-4e8a-846b-cb4372e48d9f"
        },
        "item": {
          "id": "4fe0de65-6a8b-403d-92d7-633652f1c68b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "056221d0-76aa-429a-9db2-19de651cd722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db57687-20d7-4869-96cf-85945f6b355e",
        "cursor": {
          "ref": "906cc00b-5b01-4fa5-9bd0-a4dba02ffa3b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "200ab950-de40-48af-93e0-b8b313bd3bc5"
        },
        "item": {
          "id": "8db57687-20d7-4869-96cf-85945f6b355e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fbb600d2-c5e1-49b3-a3ec-ffa1450cf483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db57687-20d7-4869-96cf-85945f6b355e",
        "cursor": {
          "ref": "906cc00b-5b01-4fa5-9bd0-a4dba02ffa3b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "200ab950-de40-48af-93e0-b8b313bd3bc5"
        },
        "item": {
          "id": "8db57687-20d7-4869-96cf-85945f6b355e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fbb600d2-c5e1-49b3-a3ec-ffa1450cf483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1ef803-5301-41df-988e-1204c1b2803a",
        "cursor": {
          "ref": "c8e4db61-1eac-4e09-9529-dd7318a32aec",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "755ea5be-e522-4fd8-9103-c39ee20225b7"
        },
        "item": {
          "id": "bc1ef803-5301-41df-988e-1204c1b2803a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d62c0635-19e8-4021-b3f9-a8687c7dd0a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1ef803-5301-41df-988e-1204c1b2803a",
        "cursor": {
          "ref": "c8e4db61-1eac-4e09-9529-dd7318a32aec",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "755ea5be-e522-4fd8-9103-c39ee20225b7"
        },
        "item": {
          "id": "bc1ef803-5301-41df-988e-1204c1b2803a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d62c0635-19e8-4021-b3f9-a8687c7dd0a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2666496f-6207-4676-8793-48c2a0aa0a7e",
        "cursor": {
          "ref": "af9dda07-ab2a-4b3c-8a22-0e08c2c3b77f",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1fc7b44d-1dd4-45f4-bb7c-cfeacc5661d3"
        },
        "item": {
          "id": "2666496f-6207-4676-8793-48c2a0aa0a7e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9da52feb-1c89-4b70-b547-f184ff7d1870",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2666496f-6207-4676-8793-48c2a0aa0a7e",
        "cursor": {
          "ref": "af9dda07-ab2a-4b3c-8a22-0e08c2c3b77f",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1fc7b44d-1dd4-45f4-bb7c-cfeacc5661d3"
        },
        "item": {
          "id": "2666496f-6207-4676-8793-48c2a0aa0a7e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9da52feb-1c89-4b70-b547-f184ff7d1870",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec18f22-703d-4375-a14d-59fc2ac535fc",
        "cursor": {
          "ref": "0c9d848b-4fba-43a6-b3ea-834ca3d4b9c9",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "620c68cf-7e5a-4529-969e-da24e9349eaa"
        },
        "item": {
          "id": "6ec18f22-703d-4375-a14d-59fc2ac535fc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a317d486-a621-4ef5-9fac-c5c7bc431ea4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec18f22-703d-4375-a14d-59fc2ac535fc",
        "cursor": {
          "ref": "0c9d848b-4fba-43a6-b3ea-834ca3d4b9c9",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "620c68cf-7e5a-4529-969e-da24e9349eaa"
        },
        "item": {
          "id": "6ec18f22-703d-4375-a14d-59fc2ac535fc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a317d486-a621-4ef5-9fac-c5c7bc431ea4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1937589-bd02-4f30-b0a7-133d7696517a",
        "cursor": {
          "ref": "4aca032f-f2f1-4296-a136-c7caf9a616a7",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8c59f517-3851-4421-8d02-60daedc941dd"
        },
        "item": {
          "id": "d1937589-bd02-4f30-b0a7-133d7696517a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "39e58ca9-d4b3-4ffa-8f52-c700bcd2e8ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1937589-bd02-4f30-b0a7-133d7696517a",
        "cursor": {
          "ref": "4aca032f-f2f1-4296-a136-c7caf9a616a7",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8c59f517-3851-4421-8d02-60daedc941dd"
        },
        "item": {
          "id": "d1937589-bd02-4f30-b0a7-133d7696517a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "39e58ca9-d4b3-4ffa-8f52-c700bcd2e8ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b119c01-8fd7-4fbf-b5f9-84ba9e02ddea",
        "cursor": {
          "ref": "d1d6ad47-a3b3-461a-8e5b-7c589b9c7bf6",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "34025fe9-0f20-4977-b280-5a5283304900"
        },
        "item": {
          "id": "2b119c01-8fd7-4fbf-b5f9-84ba9e02ddea",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "191b6377-5ae4-4598-8f75-8dee0d5f722b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b119c01-8fd7-4fbf-b5f9-84ba9e02ddea",
        "cursor": {
          "ref": "d1d6ad47-a3b3-461a-8e5b-7c589b9c7bf6",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "34025fe9-0f20-4977-b280-5a5283304900"
        },
        "item": {
          "id": "2b119c01-8fd7-4fbf-b5f9-84ba9e02ddea",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "191b6377-5ae4-4598-8f75-8dee0d5f722b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ea1a13-565d-4f81-aac6-351778a1bd2f",
        "cursor": {
          "ref": "9d6a0004-d9a8-4006-b4ff-ac0c112b058c",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7ec264f7-a35d-47c2-ba42-1d8d31ccc9ca"
        },
        "item": {
          "id": "33ea1a13-565d-4f81-aac6-351778a1bd2f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a1772481-376e-4ab1-b6d8-1906dddc19a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ea1a13-565d-4f81-aac6-351778a1bd2f",
        "cursor": {
          "ref": "9d6a0004-d9a8-4006-b4ff-ac0c112b058c",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7ec264f7-a35d-47c2-ba42-1d8d31ccc9ca"
        },
        "item": {
          "id": "33ea1a13-565d-4f81-aac6-351778a1bd2f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a1772481-376e-4ab1-b6d8-1906dddc19a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe91695-ebac-4a35-8805-e7a30bfce8ab",
        "cursor": {
          "ref": "b3bbc398-706f-4873-87c0-dfe4c8bd399d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bc0a3ccc-7926-4dda-a10e-8bc5e40b714f"
        },
        "item": {
          "id": "abe91695-ebac-4a35-8805-e7a30bfce8ab",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "31df9285-1e4f-49b7-b66f-c4b94ba4ac1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe91695-ebac-4a35-8805-e7a30bfce8ab",
        "cursor": {
          "ref": "b3bbc398-706f-4873-87c0-dfe4c8bd399d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bc0a3ccc-7926-4dda-a10e-8bc5e40b714f"
        },
        "item": {
          "id": "abe91695-ebac-4a35-8805-e7a30bfce8ab",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "31df9285-1e4f-49b7-b66f-c4b94ba4ac1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452c0f4f-c5bc-4b77-adfd-7f03ee04c86f",
        "cursor": {
          "ref": "552f846f-92d0-4b98-9816-e3b6f5d0dc8f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9fbea82a-7577-41c9-ab83-aabe2b3a3ca8"
        },
        "item": {
          "id": "452c0f4f-c5bc-4b77-adfd-7f03ee04c86f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ba26d77a-eb45-4dc7-9982-f8553806c674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452c0f4f-c5bc-4b77-adfd-7f03ee04c86f",
        "cursor": {
          "ref": "552f846f-92d0-4b98-9816-e3b6f5d0dc8f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9fbea82a-7577-41c9-ab83-aabe2b3a3ca8"
        },
        "item": {
          "id": "452c0f4f-c5bc-4b77-adfd-7f03ee04c86f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ba26d77a-eb45-4dc7-9982-f8553806c674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7fd671-14ec-4eb3-ab14-6e31a79094cc",
        "cursor": {
          "ref": "19785102-a513-4efb-9c39-9ef46fcbc557",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f3201d63-0d6b-4efc-a71c-2ffd8e36a693"
        },
        "item": {
          "id": "3c7fd671-14ec-4eb3-ab14-6e31a79094cc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6c969ac6-b6de-40dd-9160-f89f6729de86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7fd671-14ec-4eb3-ab14-6e31a79094cc",
        "cursor": {
          "ref": "19785102-a513-4efb-9c39-9ef46fcbc557",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f3201d63-0d6b-4efc-a71c-2ffd8e36a693"
        },
        "item": {
          "id": "3c7fd671-14ec-4eb3-ab14-6e31a79094cc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6c969ac6-b6de-40dd-9160-f89f6729de86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa94883-310c-40ed-9085-a3c287a36197",
        "cursor": {
          "ref": "1c266440-e60b-4bf9-8016-42d45a141378",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "46834867-feee-4ae6-bde4-b67fb231f035"
        },
        "item": {
          "id": "aaa94883-310c-40ed-9085-a3c287a36197",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9d8f7af4-20d4-4b45-8a9d-e2453aec8a0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa94883-310c-40ed-9085-a3c287a36197",
        "cursor": {
          "ref": "1c266440-e60b-4bf9-8016-42d45a141378",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "46834867-feee-4ae6-bde4-b67fb231f035"
        },
        "item": {
          "id": "aaa94883-310c-40ed-9085-a3c287a36197",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9d8f7af4-20d4-4b45-8a9d-e2453aec8a0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ef545f-95dd-4a17-9c8a-64bdf2fe6e72",
        "cursor": {
          "ref": "a7645c93-13a0-40b0-991d-480d516a8d3c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "17992738-b377-4f45-9c7e-625cb30229e6"
        },
        "item": {
          "id": "73ef545f-95dd-4a17-9c8a-64bdf2fe6e72",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b8c4a363-f88a-4801-a23d-435251ee4008",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ef545f-95dd-4a17-9c8a-64bdf2fe6e72",
        "cursor": {
          "ref": "a7645c93-13a0-40b0-991d-480d516a8d3c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "17992738-b377-4f45-9c7e-625cb30229e6"
        },
        "item": {
          "id": "73ef545f-95dd-4a17-9c8a-64bdf2fe6e72",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b8c4a363-f88a-4801-a23d-435251ee4008",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2ecff6-1c96-48a8-bc2f-0ef9134576d5",
        "cursor": {
          "ref": "da9fb213-8111-40f6-8bee-7e96cebd972e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e4a4f103-20c0-494f-a297-7a741faf7061"
        },
        "item": {
          "id": "eb2ecff6-1c96-48a8-bc2f-0ef9134576d5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "17b6e6d5-2c0b-4c0e-b745-8ccd307bc53a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2ecff6-1c96-48a8-bc2f-0ef9134576d5",
        "cursor": {
          "ref": "da9fb213-8111-40f6-8bee-7e96cebd972e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e4a4f103-20c0-494f-a297-7a741faf7061"
        },
        "item": {
          "id": "eb2ecff6-1c96-48a8-bc2f-0ef9134576d5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "17b6e6d5-2c0b-4c0e-b745-8ccd307bc53a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b448315-d8e6-4e9d-86bc-78647bd8dc2c",
        "cursor": {
          "ref": "0a9c7368-9150-4183-ad15-4c57396f5ed9",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b1023012-ebec-4f6a-8ab5-d6808d6936cc"
        },
        "item": {
          "id": "0b448315-d8e6-4e9d-86bc-78647bd8dc2c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "561b680f-3aef-4309-be90-f259483be6fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b448315-d8e6-4e9d-86bc-78647bd8dc2c",
        "cursor": {
          "ref": "0a9c7368-9150-4183-ad15-4c57396f5ed9",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b1023012-ebec-4f6a-8ab5-d6808d6936cc"
        },
        "item": {
          "id": "0b448315-d8e6-4e9d-86bc-78647bd8dc2c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "561b680f-3aef-4309-be90-f259483be6fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3ab0f2-6346-41c6-ae88-24773315b6b4",
        "cursor": {
          "ref": "01a58b5f-a844-4491-a549-f78b01c1a854",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "14553142-a7b4-4d9a-ab92-4326a49ba57b"
        },
        "item": {
          "id": "df3ab0f2-6346-41c6-ae88-24773315b6b4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "421e912b-cbba-4f5a-a85a-408a2b950ec8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3ab0f2-6346-41c6-ae88-24773315b6b4",
        "cursor": {
          "ref": "01a58b5f-a844-4491-a549-f78b01c1a854",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "14553142-a7b4-4d9a-ab92-4326a49ba57b"
        },
        "item": {
          "id": "df3ab0f2-6346-41c6-ae88-24773315b6b4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "421e912b-cbba-4f5a-a85a-408a2b950ec8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b76b60-ba93-4be0-bce9-63df24795ccc",
        "cursor": {
          "ref": "af658733-93b7-401c-acab-dfdcb09c6f35",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8620532d-ef80-4d73-9fd0-a121551934a8"
        },
        "item": {
          "id": "78b76b60-ba93-4be0-bce9-63df24795ccc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aa628a18-034f-4225-a1eb-58099ad6aca0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b76b60-ba93-4be0-bce9-63df24795ccc",
        "cursor": {
          "ref": "af658733-93b7-401c-acab-dfdcb09c6f35",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8620532d-ef80-4d73-9fd0-a121551934a8"
        },
        "item": {
          "id": "78b76b60-ba93-4be0-bce9-63df24795ccc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aa628a18-034f-4225-a1eb-58099ad6aca0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c9910e-3c6e-4201-ad2e-0e51a7081e15",
        "cursor": {
          "ref": "0828e211-184c-4b77-a41b-9d073a9e8f08",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cb5c71fb-51d8-45f9-9739-fb96f6338d58"
        },
        "item": {
          "id": "f6c9910e-3c6e-4201-ad2e-0e51a7081e15",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f8ac9d21-acea-4a46-a9fd-23698791c6cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c9910e-3c6e-4201-ad2e-0e51a7081e15",
        "cursor": {
          "ref": "0828e211-184c-4b77-a41b-9d073a9e8f08",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cb5c71fb-51d8-45f9-9739-fb96f6338d58"
        },
        "item": {
          "id": "f6c9910e-3c6e-4201-ad2e-0e51a7081e15",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f8ac9d21-acea-4a46-a9fd-23698791c6cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f07e459-6900-4dc7-b4ce-d4a789853927",
        "cursor": {
          "ref": "4341642e-fca0-4075-b8bf-a2d69d487a03",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "efff6368-856f-4490-b5ae-95e3a81ba5a1"
        },
        "item": {
          "id": "8f07e459-6900-4dc7-b4ce-d4a789853927",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6d175b87-7ddc-413e-8833-f789a744168a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f07e459-6900-4dc7-b4ce-d4a789853927",
        "cursor": {
          "ref": "4341642e-fca0-4075-b8bf-a2d69d487a03",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "efff6368-856f-4490-b5ae-95e3a81ba5a1"
        },
        "item": {
          "id": "8f07e459-6900-4dc7-b4ce-d4a789853927",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6d175b87-7ddc-413e-8833-f789a744168a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b541afcd-2dd9-4a60-8128-e237ee211003",
        "cursor": {
          "ref": "180d8541-cde1-4957-a6d5-7f7fb3de00ef",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6af0e163-68d5-4045-89b3-0311575f25e1"
        },
        "item": {
          "id": "b541afcd-2dd9-4a60-8128-e237ee211003",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0ab4ac5b-559e-4de2-b339-f2bb057db100",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b541afcd-2dd9-4a60-8128-e237ee211003",
        "cursor": {
          "ref": "180d8541-cde1-4957-a6d5-7f7fb3de00ef",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6af0e163-68d5-4045-89b3-0311575f25e1"
        },
        "item": {
          "id": "b541afcd-2dd9-4a60-8128-e237ee211003",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0ab4ac5b-559e-4de2-b339-f2bb057db100",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556f7da1-4978-4314-aabc-4372f0d71399",
        "cursor": {
          "ref": "e7d0fb28-2456-4cc8-af8b-e3fa0ff65a9e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "498bfaa7-2750-4565-85db-93bff7001e0b"
        },
        "item": {
          "id": "556f7da1-4978-4314-aabc-4372f0d71399",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6ea5cf51-5e9e-49bc-8cd0-e1d2b140a2c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556f7da1-4978-4314-aabc-4372f0d71399",
        "cursor": {
          "ref": "e7d0fb28-2456-4cc8-af8b-e3fa0ff65a9e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "498bfaa7-2750-4565-85db-93bff7001e0b"
        },
        "item": {
          "id": "556f7da1-4978-4314-aabc-4372f0d71399",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6ea5cf51-5e9e-49bc-8cd0-e1d2b140a2c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a2f2e6-e40b-4866-956f-8aed93b07596",
        "cursor": {
          "ref": "8a61e958-67ad-40f6-af27-e03cdefb776b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5159b2fc-cc1c-4a10-ae3e-ca5fb4668f6e"
        },
        "item": {
          "id": "17a2f2e6-e40b-4866-956f-8aed93b07596",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ed456e34-4675-4b77-8137-1aa0e5b148e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a2f2e6-e40b-4866-956f-8aed93b07596",
        "cursor": {
          "ref": "8a61e958-67ad-40f6-af27-e03cdefb776b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5159b2fc-cc1c-4a10-ae3e-ca5fb4668f6e"
        },
        "item": {
          "id": "17a2f2e6-e40b-4866-956f-8aed93b07596",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ed456e34-4675-4b77-8137-1aa0e5b148e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d54850c-e08f-4d29-a8f6-8bef8d50e794",
        "cursor": {
          "ref": "678d05b7-d3dc-42dd-a331-adc8618cda5d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8a45dd7d-ee67-4bcb-a99a-d035ff26ab90"
        },
        "item": {
          "id": "1d54850c-e08f-4d29-a8f6-8bef8d50e794",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f429f94e-3d22-485d-b35e-c86f2ed71a84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d54850c-e08f-4d29-a8f6-8bef8d50e794",
        "cursor": {
          "ref": "678d05b7-d3dc-42dd-a331-adc8618cda5d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8a45dd7d-ee67-4bcb-a99a-d035ff26ab90"
        },
        "item": {
          "id": "1d54850c-e08f-4d29-a8f6-8bef8d50e794",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f429f94e-3d22-485d-b35e-c86f2ed71a84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b31bc8-63a0-402f-bdf5-c6e3e78b5bee",
        "cursor": {
          "ref": "568b15db-71ca-497c-89ae-d42972cafa0a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9a071f1e-21bb-4392-a77e-88c76a82efc6"
        },
        "item": {
          "id": "e6b31bc8-63a0-402f-bdf5-c6e3e78b5bee",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2549c467-96c9-436d-b747-d67eda63d287",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b31bc8-63a0-402f-bdf5-c6e3e78b5bee",
        "cursor": {
          "ref": "568b15db-71ca-497c-89ae-d42972cafa0a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9a071f1e-21bb-4392-a77e-88c76a82efc6"
        },
        "item": {
          "id": "e6b31bc8-63a0-402f-bdf5-c6e3e78b5bee",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2549c467-96c9-436d-b747-d67eda63d287",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6b71d9-cbb5-4a53-9e32-99f05d56948f",
        "cursor": {
          "ref": "27a42ab3-5f4e-438c-a6ee-7abb76e9f5d2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f3ba28c6-cee9-48ea-97da-f94312aa8e0e"
        },
        "item": {
          "id": "fe6b71d9-cbb5-4a53-9e32-99f05d56948f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "51389bdc-3a3f-4a62-9263-a71fdea857ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6b71d9-cbb5-4a53-9e32-99f05d56948f",
        "cursor": {
          "ref": "27a42ab3-5f4e-438c-a6ee-7abb76e9f5d2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f3ba28c6-cee9-48ea-97da-f94312aa8e0e"
        },
        "item": {
          "id": "fe6b71d9-cbb5-4a53-9e32-99f05d56948f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "51389bdc-3a3f-4a62-9263-a71fdea857ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e535ec6b-8cad-4723-9f38-930a451ea375",
        "cursor": {
          "ref": "8162f677-aa5a-4828-ae9d-9d814a6b7407",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2eafcf2d-c580-431b-811c-9c6168ea8374"
        },
        "item": {
          "id": "e535ec6b-8cad-4723-9f38-930a451ea375",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1e07b38d-1da0-4f3a-91cf-2ec033b96ed2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e535ec6b-8cad-4723-9f38-930a451ea375",
        "cursor": {
          "ref": "8162f677-aa5a-4828-ae9d-9d814a6b7407",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2eafcf2d-c580-431b-811c-9c6168ea8374"
        },
        "item": {
          "id": "e535ec6b-8cad-4723-9f38-930a451ea375",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1e07b38d-1da0-4f3a-91cf-2ec033b96ed2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ffb01f-1cc8-42a6-83a6-5ea8286a1451",
        "cursor": {
          "ref": "d17ceb75-9b6d-43da-80bb-936786de69c4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "02c3e82f-72e5-47c3-8f7b-b68f7ed00743"
        },
        "item": {
          "id": "b5ffb01f-1cc8-42a6-83a6-5ea8286a1451",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1e26c366-7faf-4b1e-87a9-5e62bee9a1e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ffb01f-1cc8-42a6-83a6-5ea8286a1451",
        "cursor": {
          "ref": "d17ceb75-9b6d-43da-80bb-936786de69c4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "02c3e82f-72e5-47c3-8f7b-b68f7ed00743"
        },
        "item": {
          "id": "b5ffb01f-1cc8-42a6-83a6-5ea8286a1451",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1e26c366-7faf-4b1e-87a9-5e62bee9a1e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d678bb17-312a-489f-958f-5509ef594135",
        "cursor": {
          "ref": "df8e8e30-7145-4ea9-a15a-2f270b71ad82",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1f6f1431-7aac-4368-ae3b-4f04b4863d80"
        },
        "item": {
          "id": "d678bb17-312a-489f-958f-5509ef594135",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8450d3cc-1652-4e98-85c1-718f1855eb61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d678bb17-312a-489f-958f-5509ef594135",
        "cursor": {
          "ref": "df8e8e30-7145-4ea9-a15a-2f270b71ad82",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1f6f1431-7aac-4368-ae3b-4f04b4863d80"
        },
        "item": {
          "id": "d678bb17-312a-489f-958f-5509ef594135",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8450d3cc-1652-4e98-85c1-718f1855eb61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1c6dc1-2c35-43ea-9c0b-bf91df83cb03",
        "cursor": {
          "ref": "1b54247f-6982-4b5b-a61a-bc0547bbe531",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e387d89e-ce1c-493c-abce-796a49297f55"
        },
        "item": {
          "id": "5d1c6dc1-2c35-43ea-9c0b-bf91df83cb03",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b572ad23-e60e-4eb3-af2f-dbce5e4a465c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1c6dc1-2c35-43ea-9c0b-bf91df83cb03",
        "cursor": {
          "ref": "1b54247f-6982-4b5b-a61a-bc0547bbe531",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e387d89e-ce1c-493c-abce-796a49297f55"
        },
        "item": {
          "id": "5d1c6dc1-2c35-43ea-9c0b-bf91df83cb03",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b572ad23-e60e-4eb3-af2f-dbce5e4a465c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0642fdf-e726-4cfa-80bb-5299478bab2d",
        "cursor": {
          "ref": "68c07f97-9491-44b7-94a5-74f807847f97",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c0008c0e-f229-4afb-8170-6dd6851885f9"
        },
        "item": {
          "id": "c0642fdf-e726-4cfa-80bb-5299478bab2d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c80855cf-10f4-47fa-8b89-75eacc2618ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0642fdf-e726-4cfa-80bb-5299478bab2d",
        "cursor": {
          "ref": "68c07f97-9491-44b7-94a5-74f807847f97",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c0008c0e-f229-4afb-8170-6dd6851885f9"
        },
        "item": {
          "id": "c0642fdf-e726-4cfa-80bb-5299478bab2d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c80855cf-10f4-47fa-8b89-75eacc2618ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a2c612-b245-4a10-8831-00dba7287094",
        "cursor": {
          "ref": "4fbcd8c2-d151-4873-bac2-dc077107916b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "487887ad-22fd-411a-b70f-ca2d3b6c50ac"
        },
        "item": {
          "id": "29a2c612-b245-4a10-8831-00dba7287094",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cc2a6db1-c75d-4f1e-8697-43cd849b0c8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a2c612-b245-4a10-8831-00dba7287094",
        "cursor": {
          "ref": "4fbcd8c2-d151-4873-bac2-dc077107916b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "487887ad-22fd-411a-b70f-ca2d3b6c50ac"
        },
        "item": {
          "id": "29a2c612-b245-4a10-8831-00dba7287094",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cc2a6db1-c75d-4f1e-8697-43cd849b0c8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ce556d-0deb-47b0-816b-35837f0bc520",
        "cursor": {
          "ref": "5df47c66-4be9-4eaa-aaf0-354da0de3b42",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "be0b89bd-d94d-4040-b721-09804b6f2acb"
        },
        "item": {
          "id": "c6ce556d-0deb-47b0-816b-35837f0bc520",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d1e7a7df-82d0-42c5-a7e4-a709be0e6a3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ce556d-0deb-47b0-816b-35837f0bc520",
        "cursor": {
          "ref": "5df47c66-4be9-4eaa-aaf0-354da0de3b42",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "be0b89bd-d94d-4040-b721-09804b6f2acb"
        },
        "item": {
          "id": "c6ce556d-0deb-47b0-816b-35837f0bc520",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d1e7a7df-82d0-42c5-a7e4-a709be0e6a3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c0eb59-3bb0-476b-9c99-39b2630fb375",
        "cursor": {
          "ref": "3b1fc569-0046-4c05-ba33-f7d1ebb2dead",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1f2052b6-2881-4106-979a-d0353b9aa7a6"
        },
        "item": {
          "id": "83c0eb59-3bb0-476b-9c99-39b2630fb375",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d2146440-ee4d-4ebd-8925-b13b510cdbe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c0eb59-3bb0-476b-9c99-39b2630fb375",
        "cursor": {
          "ref": "3b1fc569-0046-4c05-ba33-f7d1ebb2dead",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1f2052b6-2881-4106-979a-d0353b9aa7a6"
        },
        "item": {
          "id": "83c0eb59-3bb0-476b-9c99-39b2630fb375",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d2146440-ee4d-4ebd-8925-b13b510cdbe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b4f0dd-6671-4473-a490-2b762540a8dc",
        "cursor": {
          "ref": "233a28a4-e1b9-4c93-9d8f-d7555c705ee3",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7ae3c01f-9068-479a-9720-5bf539500285"
        },
        "item": {
          "id": "37b4f0dd-6671-4473-a490-2b762540a8dc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ab250ebf-fe57-4105-83d1-f487cbaa22e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b4f0dd-6671-4473-a490-2b762540a8dc",
        "cursor": {
          "ref": "233a28a4-e1b9-4c93-9d8f-d7555c705ee3",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7ae3c01f-9068-479a-9720-5bf539500285"
        },
        "item": {
          "id": "37b4f0dd-6671-4473-a490-2b762540a8dc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ab250ebf-fe57-4105-83d1-f487cbaa22e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecdc295-ba5c-4ccf-85bb-87e9f7172fd1",
        "cursor": {
          "ref": "b7b8d773-e410-4d0b-a113-fef7f3b71adf",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3e553d1b-0cb8-4a0a-bbaa-7e4ef689dabc"
        },
        "item": {
          "id": "fecdc295-ba5c-4ccf-85bb-87e9f7172fd1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e40f4919-5f41-4dfa-81b0-e260eb38b993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecdc295-ba5c-4ccf-85bb-87e9f7172fd1",
        "cursor": {
          "ref": "b7b8d773-e410-4d0b-a113-fef7f3b71adf",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3e553d1b-0cb8-4a0a-bbaa-7e4ef689dabc"
        },
        "item": {
          "id": "fecdc295-ba5c-4ccf-85bb-87e9f7172fd1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e40f4919-5f41-4dfa-81b0-e260eb38b993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ff8f05-bdba-4e85-8cb5-b5acac6e95b6",
        "cursor": {
          "ref": "f70d32d4-f79c-4429-8fca-8ad46f3445b8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d6eef4c6-a1af-4b99-a6ff-7c01cfb1377a"
        },
        "item": {
          "id": "68ff8f05-bdba-4e85-8cb5-b5acac6e95b6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "043be234-b648-48ca-a996-386bd09977e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ff8f05-bdba-4e85-8cb5-b5acac6e95b6",
        "cursor": {
          "ref": "f70d32d4-f79c-4429-8fca-8ad46f3445b8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d6eef4c6-a1af-4b99-a6ff-7c01cfb1377a"
        },
        "item": {
          "id": "68ff8f05-bdba-4e85-8cb5-b5acac6e95b6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "043be234-b648-48ca-a996-386bd09977e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd947327-c50a-486d-9c71-3c81c6d89c03",
        "cursor": {
          "ref": "a51cbbd5-265d-4ef4-bbf4-8e085f691757",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8b7e156b-cdcc-4174-a232-ca6373961086"
        },
        "item": {
          "id": "fd947327-c50a-486d-9c71-3c81c6d89c03",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dc749d09-7cab-483a-b6b2-7a9e892c98cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd947327-c50a-486d-9c71-3c81c6d89c03",
        "cursor": {
          "ref": "a51cbbd5-265d-4ef4-bbf4-8e085f691757",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8b7e156b-cdcc-4174-a232-ca6373961086"
        },
        "item": {
          "id": "fd947327-c50a-486d-9c71-3c81c6d89c03",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dc749d09-7cab-483a-b6b2-7a9e892c98cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8343cef2-28ce-4d63-a15f-91b228d7e481",
        "cursor": {
          "ref": "b062cafd-0402-43d7-a876-4b48d4256218",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "65ffcfaa-b993-4ede-89cd-6bc566683e4a"
        },
        "item": {
          "id": "8343cef2-28ce-4d63-a15f-91b228d7e481",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5fab76c-01ac-4372-9a06-37635bc717cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8343cef2-28ce-4d63-a15f-91b228d7e481",
        "cursor": {
          "ref": "b062cafd-0402-43d7-a876-4b48d4256218",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "65ffcfaa-b993-4ede-89cd-6bc566683e4a"
        },
        "item": {
          "id": "8343cef2-28ce-4d63-a15f-91b228d7e481",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5fab76c-01ac-4372-9a06-37635bc717cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6493403-5ccf-4b52-ab2e-0ffed8180e7e",
        "cursor": {
          "ref": "03fedda6-2bb3-4517-8464-5d3791cc285f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6d832023-429a-4e7b-8319-4382e0c47bef"
        },
        "item": {
          "id": "a6493403-5ccf-4b52-ab2e-0ffed8180e7e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "524ac3e7-b3ec-4e34-b8a8-caca099e8a48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6493403-5ccf-4b52-ab2e-0ffed8180e7e",
        "cursor": {
          "ref": "03fedda6-2bb3-4517-8464-5d3791cc285f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6d832023-429a-4e7b-8319-4382e0c47bef"
        },
        "item": {
          "id": "a6493403-5ccf-4b52-ab2e-0ffed8180e7e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "524ac3e7-b3ec-4e34-b8a8-caca099e8a48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af61419c-a4de-434a-a2ef-1d9bc6b7ba93",
        "cursor": {
          "ref": "75e3821b-921a-4bb0-8f50-779943117f42",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "09105147-0e77-48ca-afa3-5f5c4685f024"
        },
        "item": {
          "id": "af61419c-a4de-434a-a2ef-1d9bc6b7ba93",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "886c8dfd-3705-4fd0-9e2c-74dad1b0a2e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af61419c-a4de-434a-a2ef-1d9bc6b7ba93",
        "cursor": {
          "ref": "75e3821b-921a-4bb0-8f50-779943117f42",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "09105147-0e77-48ca-afa3-5f5c4685f024"
        },
        "item": {
          "id": "af61419c-a4de-434a-a2ef-1d9bc6b7ba93",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "886c8dfd-3705-4fd0-9e2c-74dad1b0a2e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ed3853-26c6-4f32-b44d-a1a67a83c1ab",
        "cursor": {
          "ref": "88558e22-f6af-4b3c-9a46-f4711bc6626b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d8db0149-8d24-457f-b53b-98d9de591a78"
        },
        "item": {
          "id": "b5ed3853-26c6-4f32-b44d-a1a67a83c1ab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bfa20244-5974-406a-ae8d-5d5a45d4dbe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ed3853-26c6-4f32-b44d-a1a67a83c1ab",
        "cursor": {
          "ref": "88558e22-f6af-4b3c-9a46-f4711bc6626b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d8db0149-8d24-457f-b53b-98d9de591a78"
        },
        "item": {
          "id": "b5ed3853-26c6-4f32-b44d-a1a67a83c1ab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bfa20244-5974-406a-ae8d-5d5a45d4dbe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3885f945-a9bd-4052-84d3-44aee204075f",
        "cursor": {
          "ref": "c93aa35c-f89d-4851-a9b4-289e626e7540",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9de674a3-0afa-47d2-8863-1e08c4164614"
        },
        "item": {
          "id": "3885f945-a9bd-4052-84d3-44aee204075f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b397bf01-291e-4695-a961-0e32c31498fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3885f945-a9bd-4052-84d3-44aee204075f",
        "cursor": {
          "ref": "c93aa35c-f89d-4851-a9b4-289e626e7540",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9de674a3-0afa-47d2-8863-1e08c4164614"
        },
        "item": {
          "id": "3885f945-a9bd-4052-84d3-44aee204075f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b397bf01-291e-4695-a961-0e32c31498fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262cf6ff-8aa9-4d23-8d90-a5fbab02caf2",
        "cursor": {
          "ref": "3e81eaa1-47ef-48c2-a5cf-771507e6c855",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e2142491-f4e0-442a-ac3c-5ddae2f08c2e"
        },
        "item": {
          "id": "262cf6ff-8aa9-4d23-8d90-a5fbab02caf2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6d5ae3c1-0374-449e-acb7-0ff91bbc1bb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262cf6ff-8aa9-4d23-8d90-a5fbab02caf2",
        "cursor": {
          "ref": "3e81eaa1-47ef-48c2-a5cf-771507e6c855",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e2142491-f4e0-442a-ac3c-5ddae2f08c2e"
        },
        "item": {
          "id": "262cf6ff-8aa9-4d23-8d90-a5fbab02caf2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6d5ae3c1-0374-449e-acb7-0ff91bbc1bb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a3d80e-37f0-4565-81b5-a84d70f447b0",
        "cursor": {
          "ref": "b764707c-c025-4451-ba1e-2c77a8bad7be",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b04e5037-e9e4-44f3-9990-e84cff9e13c3"
        },
        "item": {
          "id": "91a3d80e-37f0-4565-81b5-a84d70f447b0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fc541ebf-f751-4add-8b20-036970eb9d21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a3d80e-37f0-4565-81b5-a84d70f447b0",
        "cursor": {
          "ref": "b764707c-c025-4451-ba1e-2c77a8bad7be",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b04e5037-e9e4-44f3-9990-e84cff9e13c3"
        },
        "item": {
          "id": "91a3d80e-37f0-4565-81b5-a84d70f447b0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fc541ebf-f751-4add-8b20-036970eb9d21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f910bd-afa0-4dfb-abac-147abb879066",
        "cursor": {
          "ref": "dd5a36a0-f19a-43cc-bdc6-f5df0b8a58a6",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2bfdf80b-a5e6-47a6-83dd-5c9d244d2cd5"
        },
        "item": {
          "id": "53f910bd-afa0-4dfb-abac-147abb879066",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "844081ca-9196-4b4c-9a4a-2b2c102405dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f910bd-afa0-4dfb-abac-147abb879066",
        "cursor": {
          "ref": "dd5a36a0-f19a-43cc-bdc6-f5df0b8a58a6",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2bfdf80b-a5e6-47a6-83dd-5c9d244d2cd5"
        },
        "item": {
          "id": "53f910bd-afa0-4dfb-abac-147abb879066",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "844081ca-9196-4b4c-9a4a-2b2c102405dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89aa26c9-1c03-4364-9061-42df8e4cd49d",
        "cursor": {
          "ref": "6d21a99e-6193-4da0-b1ac-927e04fd46cd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8aee1cc3-7e87-464c-af6b-20302fd4fc77"
        },
        "item": {
          "id": "89aa26c9-1c03-4364-9061-42df8e4cd49d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d5ccc150-157f-4df7-94b2-c723f7ce776a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89aa26c9-1c03-4364-9061-42df8e4cd49d",
        "cursor": {
          "ref": "6d21a99e-6193-4da0-b1ac-927e04fd46cd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8aee1cc3-7e87-464c-af6b-20302fd4fc77"
        },
        "item": {
          "id": "89aa26c9-1c03-4364-9061-42df8e4cd49d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d5ccc150-157f-4df7-94b2-c723f7ce776a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baba2ba-855e-4a40-9262-2f51c2ac9f71",
        "cursor": {
          "ref": "0eddde88-173a-4952-aa9b-63bffe0b6a49",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5510ef05-c9a1-4019-a2e5-855f34510fcb"
        },
        "item": {
          "id": "4baba2ba-855e-4a40-9262-2f51c2ac9f71",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5588e37f-fb29-449a-b4f0-80b0e6232798",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baba2ba-855e-4a40-9262-2f51c2ac9f71",
        "cursor": {
          "ref": "0eddde88-173a-4952-aa9b-63bffe0b6a49",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5510ef05-c9a1-4019-a2e5-855f34510fcb"
        },
        "item": {
          "id": "4baba2ba-855e-4a40-9262-2f51c2ac9f71",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5588e37f-fb29-449a-b4f0-80b0e6232798",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b1fc4f-b99c-407c-9a70-644197075b31",
        "cursor": {
          "ref": "daf9eb5a-40b2-41c5-a1ad-63816ae76854",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d78840d1-e426-4b86-bc1d-5905f0526d68"
        },
        "item": {
          "id": "54b1fc4f-b99c-407c-9a70-644197075b31",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7eb58581-84a3-46fc-b65d-2ed310918750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b1fc4f-b99c-407c-9a70-644197075b31",
        "cursor": {
          "ref": "daf9eb5a-40b2-41c5-a1ad-63816ae76854",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d78840d1-e426-4b86-bc1d-5905f0526d68"
        },
        "item": {
          "id": "54b1fc4f-b99c-407c-9a70-644197075b31",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7eb58581-84a3-46fc-b65d-2ed310918750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07a7bf1-e7f0-4568-9400-9f958ea4ec9e",
        "cursor": {
          "ref": "08fdb982-342c-4b05-8d7d-7b17b94684eb",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3f2cff42-3dca-42e2-979c-087b46a019e8"
        },
        "item": {
          "id": "d07a7bf1-e7f0-4568-9400-9f958ea4ec9e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1981f2a5-a214-4421-9b12-988d42f3a926",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07a7bf1-e7f0-4568-9400-9f958ea4ec9e",
        "cursor": {
          "ref": "08fdb982-342c-4b05-8d7d-7b17b94684eb",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3f2cff42-3dca-42e2-979c-087b46a019e8"
        },
        "item": {
          "id": "d07a7bf1-e7f0-4568-9400-9f958ea4ec9e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1981f2a5-a214-4421-9b12-988d42f3a926",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569cb9f8-55fb-4388-87fc-eeba333caf8c",
        "cursor": {
          "ref": "da1e674b-304b-41ce-836a-73569ef54f4d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "127c963f-7d7e-4ec2-951a-55c39ee2155c"
        },
        "item": {
          "id": "569cb9f8-55fb-4388-87fc-eeba333caf8c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f4b714d2-37ec-41ec-aede-d5dcd87e5679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569cb9f8-55fb-4388-87fc-eeba333caf8c",
        "cursor": {
          "ref": "da1e674b-304b-41ce-836a-73569ef54f4d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "127c963f-7d7e-4ec2-951a-55c39ee2155c"
        },
        "item": {
          "id": "569cb9f8-55fb-4388-87fc-eeba333caf8c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f4b714d2-37ec-41ec-aede-d5dcd87e5679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e3f5f7-2178-4bbb-88be-53651cb37aaf",
        "cursor": {
          "ref": "ed1127ef-245b-471a-b567-2073d1c7552d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "69228724-6be9-4686-bb76-b1296fd60a64"
        },
        "item": {
          "id": "e6e3f5f7-2178-4bbb-88be-53651cb37aaf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "51d2d3fd-d844-4b94-92e4-46093e84ee06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e3f5f7-2178-4bbb-88be-53651cb37aaf",
        "cursor": {
          "ref": "ed1127ef-245b-471a-b567-2073d1c7552d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "69228724-6be9-4686-bb76-b1296fd60a64"
        },
        "item": {
          "id": "e6e3f5f7-2178-4bbb-88be-53651cb37aaf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "51d2d3fd-d844-4b94-92e4-46093e84ee06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44128a3-1d37-4286-a773-7361bd9ce2af",
        "cursor": {
          "ref": "ada62c4e-bed0-4264-954e-f709cec342a6",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8e784df7-ca60-4de8-a648-1216db80bee7"
        },
        "item": {
          "id": "c44128a3-1d37-4286-a773-7361bd9ce2af",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f45c773c-a822-4ffd-b6e7-0ed218b37705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44128a3-1d37-4286-a773-7361bd9ce2af",
        "cursor": {
          "ref": "ada62c4e-bed0-4264-954e-f709cec342a6",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8e784df7-ca60-4de8-a648-1216db80bee7"
        },
        "item": {
          "id": "c44128a3-1d37-4286-a773-7361bd9ce2af",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f45c773c-a822-4ffd-b6e7-0ed218b37705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2757d8b-c1c3-4e1d-a7d9-575b1b0e9910",
        "cursor": {
          "ref": "f5524f3f-40fb-4a8b-a0b9-074e68b86771",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d58a2c01-9dce-42f1-9347-d33cb639317d"
        },
        "item": {
          "id": "c2757d8b-c1c3-4e1d-a7d9-575b1b0e9910",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ec06b691-4a2f-4364-afc6-ce84848b65c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2757d8b-c1c3-4e1d-a7d9-575b1b0e9910",
        "cursor": {
          "ref": "f5524f3f-40fb-4a8b-a0b9-074e68b86771",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d58a2c01-9dce-42f1-9347-d33cb639317d"
        },
        "item": {
          "id": "c2757d8b-c1c3-4e1d-a7d9-575b1b0e9910",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ec06b691-4a2f-4364-afc6-ce84848b65c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b33556a-4b4b-4481-ad51-4eae81ab3e1a",
        "cursor": {
          "ref": "d27ef284-33d2-48dc-babb-ba096b1ace39",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "87021a41-6085-4a40-a044-be3396c7346b"
        },
        "item": {
          "id": "8b33556a-4b4b-4481-ad51-4eae81ab3e1a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f06db386-61f3-483d-8eb6-aad1d4aaafd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b33556a-4b4b-4481-ad51-4eae81ab3e1a",
        "cursor": {
          "ref": "d27ef284-33d2-48dc-babb-ba096b1ace39",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "87021a41-6085-4a40-a044-be3396c7346b"
        },
        "item": {
          "id": "8b33556a-4b4b-4481-ad51-4eae81ab3e1a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f06db386-61f3-483d-8eb6-aad1d4aaafd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31be0b09-3004-4f3a-ab0c-7a7f374672a9",
        "cursor": {
          "ref": "a876a4f6-541b-4375-84f9-7038b0359b97",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1191c710-ab63-4295-bc0e-ec888fd2040c"
        },
        "item": {
          "id": "31be0b09-3004-4f3a-ab0c-7a7f374672a9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "190449ce-b16d-4540-9cab-903de4eac9c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31be0b09-3004-4f3a-ab0c-7a7f374672a9",
        "cursor": {
          "ref": "a876a4f6-541b-4375-84f9-7038b0359b97",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1191c710-ab63-4295-bc0e-ec888fd2040c"
        },
        "item": {
          "id": "31be0b09-3004-4f3a-ab0c-7a7f374672a9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "190449ce-b16d-4540-9cab-903de4eac9c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27685b57-217d-47f9-a696-25d60f028478",
        "cursor": {
          "ref": "4b62984d-b568-4a59-84bf-acce8a33dbf5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4dc34d94-672e-4b92-8d28-4c7119558b7d"
        },
        "item": {
          "id": "27685b57-217d-47f9-a696-25d60f028478",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cf925bda-5537-4d13-8a57-7a72ed379d0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27685b57-217d-47f9-a696-25d60f028478",
        "cursor": {
          "ref": "4b62984d-b568-4a59-84bf-acce8a33dbf5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4dc34d94-672e-4b92-8d28-4c7119558b7d"
        },
        "item": {
          "id": "27685b57-217d-47f9-a696-25d60f028478",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cf925bda-5537-4d13-8a57-7a72ed379d0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f211e9a8-fe26-4b2f-9aab-1baf73d7e505",
        "cursor": {
          "ref": "951e79d0-9d12-41a1-940e-4129dd2303ac",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "35889fad-de7c-45ac-b6ae-6bd68a4f9e3f"
        },
        "item": {
          "id": "f211e9a8-fe26-4b2f-9aab-1baf73d7e505",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9a6ac897-3e96-48bf-acfe-4ae48a4596dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f211e9a8-fe26-4b2f-9aab-1baf73d7e505",
        "cursor": {
          "ref": "951e79d0-9d12-41a1-940e-4129dd2303ac",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "35889fad-de7c-45ac-b6ae-6bd68a4f9e3f"
        },
        "item": {
          "id": "f211e9a8-fe26-4b2f-9aab-1baf73d7e505",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9a6ac897-3e96-48bf-acfe-4ae48a4596dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b390c838-37c2-43c3-b8db-eec729e74226",
        "cursor": {
          "ref": "e674ef37-51d1-4c6e-b639-1fac85d3d5da",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f6fc0b69-b059-4dd2-a601-14f08653bd77"
        },
        "item": {
          "id": "b390c838-37c2-43c3-b8db-eec729e74226",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c2a2c5e1-1d17-4b87-a006-84c709d37dae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b390c838-37c2-43c3-b8db-eec729e74226",
        "cursor": {
          "ref": "e674ef37-51d1-4c6e-b639-1fac85d3d5da",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f6fc0b69-b059-4dd2-a601-14f08653bd77"
        },
        "item": {
          "id": "b390c838-37c2-43c3-b8db-eec729e74226",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c2a2c5e1-1d17-4b87-a006-84c709d37dae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52378db8-be8d-4f2a-ab3d-ccec928d1715",
        "cursor": {
          "ref": "29ab8b02-bd37-4dfb-8699-618cd7e36127",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "827e3067-4c86-4453-be0c-1c1896141dca"
        },
        "item": {
          "id": "52378db8-be8d-4f2a-ab3d-ccec928d1715",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "604ce550-3fa3-4c3b-92f5-e58d13069f99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52378db8-be8d-4f2a-ab3d-ccec928d1715",
        "cursor": {
          "ref": "29ab8b02-bd37-4dfb-8699-618cd7e36127",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "827e3067-4c86-4453-be0c-1c1896141dca"
        },
        "item": {
          "id": "52378db8-be8d-4f2a-ab3d-ccec928d1715",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "604ce550-3fa3-4c3b-92f5-e58d13069f99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3b3165-34a8-4595-8031-245250ad5f77",
        "cursor": {
          "ref": "583e7029-18c4-43d9-a488-6025c1e00099",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "677b74bf-10af-4b9b-95aa-378b6f45aa96"
        },
        "item": {
          "id": "7a3b3165-34a8-4595-8031-245250ad5f77",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "66b8266d-1301-4ab6-9582-2738503270e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3b3165-34a8-4595-8031-245250ad5f77",
        "cursor": {
          "ref": "583e7029-18c4-43d9-a488-6025c1e00099",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "677b74bf-10af-4b9b-95aa-378b6f45aa96"
        },
        "item": {
          "id": "7a3b3165-34a8-4595-8031-245250ad5f77",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "66b8266d-1301-4ab6-9582-2738503270e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369bad4e-8426-44b6-badc-56c6cae8163a",
        "cursor": {
          "ref": "a8ece6f1-eeab-4bfb-a404-2cb4f372b074",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "56c2f885-cdef-4d56-b1a2-a4b20488fa1f"
        },
        "item": {
          "id": "369bad4e-8426-44b6-badc-56c6cae8163a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "947332c5-2773-42a7-9062-4b2d58238e0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369bad4e-8426-44b6-badc-56c6cae8163a",
        "cursor": {
          "ref": "a8ece6f1-eeab-4bfb-a404-2cb4f372b074",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "56c2f885-cdef-4d56-b1a2-a4b20488fa1f"
        },
        "item": {
          "id": "369bad4e-8426-44b6-badc-56c6cae8163a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "947332c5-2773-42a7-9062-4b2d58238e0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb83447-5ccc-42a4-b087-896a810f4d7d",
        "cursor": {
          "ref": "d6331961-bfcc-41c6-a411-c7775a291c17",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dd03f9de-c76f-4a70-aa0a-a60db8631399"
        },
        "item": {
          "id": "ecb83447-5ccc-42a4-b087-896a810f4d7d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "769a9beb-9662-43f9-8aa6-288d2867708a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb83447-5ccc-42a4-b087-896a810f4d7d",
        "cursor": {
          "ref": "d6331961-bfcc-41c6-a411-c7775a291c17",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "dd03f9de-c76f-4a70-aa0a-a60db8631399"
        },
        "item": {
          "id": "ecb83447-5ccc-42a4-b087-896a810f4d7d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "769a9beb-9662-43f9-8aa6-288d2867708a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ab44cc-f85d-47c0-aff5-82cb2d296b3f",
        "cursor": {
          "ref": "e9d271e2-02fa-4be4-9854-bcdf9ccbbfd3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f686ba54-6c3a-4875-9e79-a1b6cf2dae13"
        },
        "item": {
          "id": "e0ab44cc-f85d-47c0-aff5-82cb2d296b3f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a0aae45f-6b46-43d9-9f4d-e19636faa4ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ab44cc-f85d-47c0-aff5-82cb2d296b3f",
        "cursor": {
          "ref": "e9d271e2-02fa-4be4-9854-bcdf9ccbbfd3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f686ba54-6c3a-4875-9e79-a1b6cf2dae13"
        },
        "item": {
          "id": "e0ab44cc-f85d-47c0-aff5-82cb2d296b3f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a0aae45f-6b46-43d9-9f4d-e19636faa4ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e544ef7f-8db2-4cb8-ab3e-ae544c23a417",
        "cursor": {
          "ref": "b5b7a355-e65a-4606-a4ff-a192f50f4f80",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d1a6990f-19f2-418a-beab-3c0d2a4e49d6"
        },
        "item": {
          "id": "e544ef7f-8db2-4cb8-ab3e-ae544c23a417",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1712892d-c1f6-4343-80e6-3428bb23ae84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e544ef7f-8db2-4cb8-ab3e-ae544c23a417",
        "cursor": {
          "ref": "b5b7a355-e65a-4606-a4ff-a192f50f4f80",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d1a6990f-19f2-418a-beab-3c0d2a4e49d6"
        },
        "item": {
          "id": "e544ef7f-8db2-4cb8-ab3e-ae544c23a417",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1712892d-c1f6-4343-80e6-3428bb23ae84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642b5a17-8076-4d49-9814-5c170cbbebab",
        "cursor": {
          "ref": "0adb2ffc-197b-4c2f-868e-2b9ca748f8c8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "efec4626-52f0-4522-af0c-e577c653791c"
        },
        "item": {
          "id": "642b5a17-8076-4d49-9814-5c170cbbebab",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1cb975f0-fb38-40d9-b81c-e8b65ebdfb34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642b5a17-8076-4d49-9814-5c170cbbebab",
        "cursor": {
          "ref": "0adb2ffc-197b-4c2f-868e-2b9ca748f8c8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "efec4626-52f0-4522-af0c-e577c653791c"
        },
        "item": {
          "id": "642b5a17-8076-4d49-9814-5c170cbbebab",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1cb975f0-fb38-40d9-b81c-e8b65ebdfb34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c90608-3d50-437c-913f-5e66069119ac",
        "cursor": {
          "ref": "1876cf09-411c-448e-9513-18a6374d41a9",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "762683b1-0293-452e-afa5-90e71af3ad69"
        },
        "item": {
          "id": "49c90608-3d50-437c-913f-5e66069119ac",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2092f91b-1f82-4d77-ac43-6616a0fca298",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c90608-3d50-437c-913f-5e66069119ac",
        "cursor": {
          "ref": "1876cf09-411c-448e-9513-18a6374d41a9",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "762683b1-0293-452e-afa5-90e71af3ad69"
        },
        "item": {
          "id": "49c90608-3d50-437c-913f-5e66069119ac",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2092f91b-1f82-4d77-ac43-6616a0fca298",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715651e1-03b8-44dc-969c-0af3deeb3089",
        "cursor": {
          "ref": "533c90ea-01ab-4ff7-a162-056d4becb840",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a8205bce-471f-4304-b589-1f450c234c31"
        },
        "item": {
          "id": "715651e1-03b8-44dc-969c-0af3deeb3089",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "55897234-ec50-414c-badb-e3e4f8b0a7a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715651e1-03b8-44dc-969c-0af3deeb3089",
        "cursor": {
          "ref": "533c90ea-01ab-4ff7-a162-056d4becb840",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a8205bce-471f-4304-b589-1f450c234c31"
        },
        "item": {
          "id": "715651e1-03b8-44dc-969c-0af3deeb3089",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "55897234-ec50-414c-badb-e3e4f8b0a7a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a55828-e9f0-4a46-a0be-c79304bb4b56",
        "cursor": {
          "ref": "70c5ff09-be16-4506-b506-52182d4bf745",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "43345435-1670-4ce6-9ad9-90f739b2c819"
        },
        "item": {
          "id": "58a55828-e9f0-4a46-a0be-c79304bb4b56",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "353b7635-d960-4219-8724-f8050e21dec5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a55828-e9f0-4a46-a0be-c79304bb4b56",
        "cursor": {
          "ref": "70c5ff09-be16-4506-b506-52182d4bf745",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "43345435-1670-4ce6-9ad9-90f739b2c819"
        },
        "item": {
          "id": "58a55828-e9f0-4a46-a0be-c79304bb4b56",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "353b7635-d960-4219-8724-f8050e21dec5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb0111a-1757-440f-954e-00615c40f3f3",
        "cursor": {
          "ref": "a3b9aea4-3283-4b40-8505-e5b535490fd7",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7762802f-cdec-4d11-a964-a289325bb879"
        },
        "item": {
          "id": "7cb0111a-1757-440f-954e-00615c40f3f3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "36ad2382-a0d5-4ae1-983b-388c0db41de9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb0111a-1757-440f-954e-00615c40f3f3",
        "cursor": {
          "ref": "a3b9aea4-3283-4b40-8505-e5b535490fd7",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7762802f-cdec-4d11-a964-a289325bb879"
        },
        "item": {
          "id": "7cb0111a-1757-440f-954e-00615c40f3f3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "36ad2382-a0d5-4ae1-983b-388c0db41de9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebfca10-9de9-4b9c-a479-7bc11bdddeec",
        "cursor": {
          "ref": "795db9c0-928f-4660-93e1-aa07029e995a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "88a71533-660c-4c4a-984f-0069231517b3"
        },
        "item": {
          "id": "2ebfca10-9de9-4b9c-a479-7bc11bdddeec",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "da3b1a61-7f56-4e9b-b182-fd5ad3091a68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebfca10-9de9-4b9c-a479-7bc11bdddeec",
        "cursor": {
          "ref": "795db9c0-928f-4660-93e1-aa07029e995a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "88a71533-660c-4c4a-984f-0069231517b3"
        },
        "item": {
          "id": "2ebfca10-9de9-4b9c-a479-7bc11bdddeec",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "da3b1a61-7f56-4e9b-b182-fd5ad3091a68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad67ab4-ede6-48e4-acf8-9321e95f8256",
        "cursor": {
          "ref": "52404a53-8157-4018-ae01-2ed5aa13648f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4dab3c70-0fdc-4445-8e0a-99ce0ec9fd42"
        },
        "item": {
          "id": "cad67ab4-ede6-48e4-acf8-9321e95f8256",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f96caee5-4c7a-4a8e-807c-1fe222b90ee7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad67ab4-ede6-48e4-acf8-9321e95f8256",
        "cursor": {
          "ref": "52404a53-8157-4018-ae01-2ed5aa13648f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4dab3c70-0fdc-4445-8e0a-99ce0ec9fd42"
        },
        "item": {
          "id": "cad67ab4-ede6-48e4-acf8-9321e95f8256",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f96caee5-4c7a-4a8e-807c-1fe222b90ee7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1cf743-3ef1-4045-b5fc-7550b101a3b6",
        "cursor": {
          "ref": "8c1e6422-cf24-4872-9477-7cde76e11dfd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "82d6fd10-2846-41f1-bf19-227a6d414203"
        },
        "item": {
          "id": "2f1cf743-3ef1-4045-b5fc-7550b101a3b6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "61bc8183-7d52-4c71-9ff5-346ddc8daa5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1cf743-3ef1-4045-b5fc-7550b101a3b6",
        "cursor": {
          "ref": "8c1e6422-cf24-4872-9477-7cde76e11dfd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "82d6fd10-2846-41f1-bf19-227a6d414203"
        },
        "item": {
          "id": "2f1cf743-3ef1-4045-b5fc-7550b101a3b6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "61bc8183-7d52-4c71-9ff5-346ddc8daa5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77b7415-f329-4702-82aa-0d40f2c4a4fb",
        "cursor": {
          "ref": "5dbd80cc-58db-400a-840f-1c571f6f772f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "42526a64-59b0-4a7d-a733-44bb51640801"
        },
        "item": {
          "id": "b77b7415-f329-4702-82aa-0d40f2c4a4fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5fc3d29f-2eea-4088-b15f-26d943a46641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77b7415-f329-4702-82aa-0d40f2c4a4fb",
        "cursor": {
          "ref": "5dbd80cc-58db-400a-840f-1c571f6f772f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "42526a64-59b0-4a7d-a733-44bb51640801"
        },
        "item": {
          "id": "b77b7415-f329-4702-82aa-0d40f2c4a4fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5fc3d29f-2eea-4088-b15f-26d943a46641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91130d57-d437-4f4f-85fc-96a77263349b",
        "cursor": {
          "ref": "48f209c6-98ff-4622-8e52-9e643b3678b3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "052fd487-1ed2-4bb9-ae7c-8ab3ae894c30"
        },
        "item": {
          "id": "91130d57-d437-4f4f-85fc-96a77263349b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2e123b7a-c72d-460e-ad79-a6467a324f84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91130d57-d437-4f4f-85fc-96a77263349b",
        "cursor": {
          "ref": "48f209c6-98ff-4622-8e52-9e643b3678b3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "052fd487-1ed2-4bb9-ae7c-8ab3ae894c30"
        },
        "item": {
          "id": "91130d57-d437-4f4f-85fc-96a77263349b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2e123b7a-c72d-460e-ad79-a6467a324f84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96a1a0b-71dd-44fd-8329-34823b808265",
        "cursor": {
          "ref": "5d3f13ab-8753-42f8-ad9a-a71e0bcd95d3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7f7552eb-5594-4f69-a1b7-7000105808f4"
        },
        "item": {
          "id": "c96a1a0b-71dd-44fd-8329-34823b808265",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "247bd571-4bca-4b0d-996f-e3190ce7e4dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96a1a0b-71dd-44fd-8329-34823b808265",
        "cursor": {
          "ref": "5d3f13ab-8753-42f8-ad9a-a71e0bcd95d3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7f7552eb-5594-4f69-a1b7-7000105808f4"
        },
        "item": {
          "id": "c96a1a0b-71dd-44fd-8329-34823b808265",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "247bd571-4bca-4b0d-996f-e3190ce7e4dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6cd2e8-51b9-4cc6-9bdb-4116e093b082",
        "cursor": {
          "ref": "107f21ca-785a-45ca-81ca-7091434ac298",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9d50a1b8-17c2-48f9-8498-d90516b8f2cc"
        },
        "item": {
          "id": "ca6cd2e8-51b9-4cc6-9bdb-4116e093b082",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "40c73167-a441-4861-befd-77dd586e1a48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6cd2e8-51b9-4cc6-9bdb-4116e093b082",
        "cursor": {
          "ref": "107f21ca-785a-45ca-81ca-7091434ac298",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9d50a1b8-17c2-48f9-8498-d90516b8f2cc"
        },
        "item": {
          "id": "ca6cd2e8-51b9-4cc6-9bdb-4116e093b082",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "40c73167-a441-4861-befd-77dd586e1a48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ec7eac-eb42-4872-9ac6-857a368c6bef",
        "cursor": {
          "ref": "ed4a8d73-7722-47d4-a79a-5e199ee3e7e2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0863210e-eb44-49fa-9e66-dc7a4cb54a21"
        },
        "item": {
          "id": "81ec7eac-eb42-4872-9ac6-857a368c6bef",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9eb4c068-2710-416f-93b6-83751b611d41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ec7eac-eb42-4872-9ac6-857a368c6bef",
        "cursor": {
          "ref": "ed4a8d73-7722-47d4-a79a-5e199ee3e7e2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0863210e-eb44-49fa-9e66-dc7a4cb54a21"
        },
        "item": {
          "id": "81ec7eac-eb42-4872-9ac6-857a368c6bef",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9eb4c068-2710-416f-93b6-83751b611d41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7416c26-063b-48dc-90e1-8980a35bce9b",
        "cursor": {
          "ref": "fe082df7-f821-448e-bcec-06dfdbfb8794",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "dfd00eef-1488-40cf-aba0-5ba2b8ddbf75"
        },
        "item": {
          "id": "c7416c26-063b-48dc-90e1-8980a35bce9b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5dc80394-8864-49e3-b549-d52d27116935",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7416c26-063b-48dc-90e1-8980a35bce9b",
        "cursor": {
          "ref": "fe082df7-f821-448e-bcec-06dfdbfb8794",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "dfd00eef-1488-40cf-aba0-5ba2b8ddbf75"
        },
        "item": {
          "id": "c7416c26-063b-48dc-90e1-8980a35bce9b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5dc80394-8864-49e3-b549-d52d27116935",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137f8f2f-3e3e-48ea-af2a-a853b6551fec",
        "cursor": {
          "ref": "0ac366a8-ea2e-4610-ae8d-016262c5a511",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "06fd8f23-824f-4096-a76a-1ef5accc8344"
        },
        "item": {
          "id": "137f8f2f-3e3e-48ea-af2a-a853b6551fec",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3c0cc822-0eee-4533-9270-4846e3f40b23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137f8f2f-3e3e-48ea-af2a-a853b6551fec",
        "cursor": {
          "ref": "0ac366a8-ea2e-4610-ae8d-016262c5a511",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "06fd8f23-824f-4096-a76a-1ef5accc8344"
        },
        "item": {
          "id": "137f8f2f-3e3e-48ea-af2a-a853b6551fec",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3c0cc822-0eee-4533-9270-4846e3f40b23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93960618-fbee-4580-aff4-27655ecb54f2",
        "cursor": {
          "ref": "11a5b57d-efff-4a9f-8dc0-5c8d13e42626",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "70b93ac7-9bc5-4ea3-a417-f6a1ffc0940a"
        },
        "item": {
          "id": "93960618-fbee-4580-aff4-27655ecb54f2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "13110522-4a4b-4a50-8d28-ed8d10c081e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93960618-fbee-4580-aff4-27655ecb54f2",
        "cursor": {
          "ref": "11a5b57d-efff-4a9f-8dc0-5c8d13e42626",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "70b93ac7-9bc5-4ea3-a417-f6a1ffc0940a"
        },
        "item": {
          "id": "93960618-fbee-4580-aff4-27655ecb54f2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "13110522-4a4b-4a50-8d28-ed8d10c081e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d40509-f65e-44ba-ab8f-bf862583e5f3",
        "cursor": {
          "ref": "9cf7fc90-6687-4a36-95d2-2dec6f7d3db3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c542a178-bcf8-4b50-8472-2829220b4551"
        },
        "item": {
          "id": "37d40509-f65e-44ba-ab8f-bf862583e5f3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b72f1b7f-6f28-4b87-973b-060179706199",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d40509-f65e-44ba-ab8f-bf862583e5f3",
        "cursor": {
          "ref": "9cf7fc90-6687-4a36-95d2-2dec6f7d3db3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c542a178-bcf8-4b50-8472-2829220b4551"
        },
        "item": {
          "id": "37d40509-f65e-44ba-ab8f-bf862583e5f3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b72f1b7f-6f28-4b87-973b-060179706199",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ceb686-4ff3-4949-a8f3-d623cfe641af",
        "cursor": {
          "ref": "969d4119-87cb-4b89-8993-c8b4c7e5689d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f11c68cf-44e2-4329-b5d8-e4d3557c9ed9"
        },
        "item": {
          "id": "54ceb686-4ff3-4949-a8f3-d623cfe641af",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5020bec9-8e39-41ed-ae07-5e1e5529aa95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ceb686-4ff3-4949-a8f3-d623cfe641af",
        "cursor": {
          "ref": "969d4119-87cb-4b89-8993-c8b4c7e5689d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f11c68cf-44e2-4329-b5d8-e4d3557c9ed9"
        },
        "item": {
          "id": "54ceb686-4ff3-4949-a8f3-d623cfe641af",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5020bec9-8e39-41ed-ae07-5e1e5529aa95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e68745-65b7-45a6-892e-d05e84491a68",
        "cursor": {
          "ref": "b9441b69-07e3-4897-816d-f9467e120db6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3c58ce65-0f9b-40a1-abcf-4ac25d257e74"
        },
        "item": {
          "id": "73e68745-65b7-45a6-892e-d05e84491a68",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2c8f6514-eab3-4c15-b0ca-1b46191ca3c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e68745-65b7-45a6-892e-d05e84491a68",
        "cursor": {
          "ref": "b9441b69-07e3-4897-816d-f9467e120db6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3c58ce65-0f9b-40a1-abcf-4ac25d257e74"
        },
        "item": {
          "id": "73e68745-65b7-45a6-892e-d05e84491a68",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2c8f6514-eab3-4c15-b0ca-1b46191ca3c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641fc38c-e6f0-4b51-b3a6-50fdfadaba33",
        "cursor": {
          "ref": "9fa27dc8-5608-4e20-89a4-fc9a2eb56809",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a60fc763-39e0-4215-8c32-64f6b4c62da9"
        },
        "item": {
          "id": "641fc38c-e6f0-4b51-b3a6-50fdfadaba33",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2de1d69b-1e2a-4841-b546-48845dafede9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641fc38c-e6f0-4b51-b3a6-50fdfadaba33",
        "cursor": {
          "ref": "9fa27dc8-5608-4e20-89a4-fc9a2eb56809",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a60fc763-39e0-4215-8c32-64f6b4c62da9"
        },
        "item": {
          "id": "641fc38c-e6f0-4b51-b3a6-50fdfadaba33",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2de1d69b-1e2a-4841-b546-48845dafede9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a52323a-9c92-4343-b5da-fbbee598fca4",
        "cursor": {
          "ref": "296ff943-60c9-4091-96cd-69a42f07cb12",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f00ef774-c1f4-4efc-9b54-e9fa07e9e307"
        },
        "item": {
          "id": "5a52323a-9c92-4343-b5da-fbbee598fca4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5125f087-76b1-4b29-801a-abc1baf289fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a52323a-9c92-4343-b5da-fbbee598fca4",
        "cursor": {
          "ref": "296ff943-60c9-4091-96cd-69a42f07cb12",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f00ef774-c1f4-4efc-9b54-e9fa07e9e307"
        },
        "item": {
          "id": "5a52323a-9c92-4343-b5da-fbbee598fca4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5125f087-76b1-4b29-801a-abc1baf289fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab976d4-05a8-4420-a8cd-1dbdbb643fd4",
        "cursor": {
          "ref": "f8cc3134-b294-467e-83f6-deb6eb5d71ce",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1c006da0-5f3d-4345-a44c-afe928ab8979"
        },
        "item": {
          "id": "fab976d4-05a8-4420-a8cd-1dbdbb643fd4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "384e9c5c-993c-4480-a24f-85bb45eba553",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab976d4-05a8-4420-a8cd-1dbdbb643fd4",
        "cursor": {
          "ref": "f8cc3134-b294-467e-83f6-deb6eb5d71ce",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1c006da0-5f3d-4345-a44c-afe928ab8979"
        },
        "item": {
          "id": "fab976d4-05a8-4420-a8cd-1dbdbb643fd4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "384e9c5c-993c-4480-a24f-85bb45eba553",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f905cbd3-3c16-4e83-8304-f7d8ec6b1366",
        "cursor": {
          "ref": "8dc047c7-ad69-4367-968d-5f0b8a0e8a7a",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d0624155-ce17-4be1-9948-4a4f5dbc7f67"
        },
        "item": {
          "id": "f905cbd3-3c16-4e83-8304-f7d8ec6b1366",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a20a7c3c-462f-4642-98c3-975f58aaa6c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f905cbd3-3c16-4e83-8304-f7d8ec6b1366",
        "cursor": {
          "ref": "8dc047c7-ad69-4367-968d-5f0b8a0e8a7a",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d0624155-ce17-4be1-9948-4a4f5dbc7f67"
        },
        "item": {
          "id": "f905cbd3-3c16-4e83-8304-f7d8ec6b1366",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a20a7c3c-462f-4642-98c3-975f58aaa6c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771e2bb1-75bd-48ec-b827-0c105bad7587",
        "cursor": {
          "ref": "e1b1f222-5ebf-440d-8e76-f63c4ef2ae46",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "40a8220f-c7ed-4326-a13e-f2d72da30433"
        },
        "item": {
          "id": "771e2bb1-75bd-48ec-b827-0c105bad7587",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "15ebf0f4-c2be-4acd-84ca-02f70a394bb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771e2bb1-75bd-48ec-b827-0c105bad7587",
        "cursor": {
          "ref": "e1b1f222-5ebf-440d-8e76-f63c4ef2ae46",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "40a8220f-c7ed-4326-a13e-f2d72da30433"
        },
        "item": {
          "id": "771e2bb1-75bd-48ec-b827-0c105bad7587",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "15ebf0f4-c2be-4acd-84ca-02f70a394bb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc9478f-d1f2-4698-bb12-c9b4ea8c5fac",
        "cursor": {
          "ref": "7a1570e9-1ce3-41b6-8195-a602f2bccbe8",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d21ac11a-9d9a-4f1c-a0d1-be4c399e5d74"
        },
        "item": {
          "id": "adc9478f-d1f2-4698-bb12-c9b4ea8c5fac",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e6c95712-0b9b-445f-aa1f-97aac4e6884e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc9478f-d1f2-4698-bb12-c9b4ea8c5fac",
        "cursor": {
          "ref": "7a1570e9-1ce3-41b6-8195-a602f2bccbe8",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d21ac11a-9d9a-4f1c-a0d1-be4c399e5d74"
        },
        "item": {
          "id": "adc9478f-d1f2-4698-bb12-c9b4ea8c5fac",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e6c95712-0b9b-445f-aa1f-97aac4e6884e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516cb9a3-53c2-413a-ba6f-81b347e84014",
        "cursor": {
          "ref": "59a08acb-dced-4e9d-aac2-1a44f5f207f4",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7d6c8a68-90a5-4859-ba07-73c9538e87d6"
        },
        "item": {
          "id": "516cb9a3-53c2-413a-ba6f-81b347e84014",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2403332d-592d-4893-bdf2-fc488c5d8f0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "516cb9a3-53c2-413a-ba6f-81b347e84014",
        "cursor": {
          "ref": "59a08acb-dced-4e9d-aac2-1a44f5f207f4",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7d6c8a68-90a5-4859-ba07-73c9538e87d6"
        },
        "item": {
          "id": "516cb9a3-53c2-413a-ba6f-81b347e84014",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2403332d-592d-4893-bdf2-fc488c5d8f0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "70404810-3347-4ed5-9e9b-f5851c6e4a85",
        "cursor": {
          "ref": "32b62d3f-2efe-46c6-9760-3da5472ef4e7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ce72df7a-0426-404f-a409-2f75136c5baa"
        },
        "item": {
          "id": "70404810-3347-4ed5-9e9b-f5851c6e4a85",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dac4ffe5-e354-401f-bfe8-d2b8afb6c5cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "70404810-3347-4ed5-9e9b-f5851c6e4a85",
        "cursor": {
          "ref": "32b62d3f-2efe-46c6-9760-3da5472ef4e7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ce72df7a-0426-404f-a409-2f75136c5baa"
        },
        "item": {
          "id": "70404810-3347-4ed5-9e9b-f5851c6e4a85",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dac4ffe5-e354-401f-bfe8-d2b8afb6c5cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "507f3510-1eb2-49ae-9522-22e69f85980b",
        "cursor": {
          "ref": "3d80f134-f9f5-4ecb-83eb-6095d122649b",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7b21ca10-c791-4190-aa09-8e33c1167839"
        },
        "item": {
          "id": "507f3510-1eb2-49ae-9522-22e69f85980b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f906421f-e463-4e68-8c61-c58ed72bb44f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "507f3510-1eb2-49ae-9522-22e69f85980b",
        "cursor": {
          "ref": "3d80f134-f9f5-4ecb-83eb-6095d122649b",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7b21ca10-c791-4190-aa09-8e33c1167839"
        },
        "item": {
          "id": "507f3510-1eb2-49ae-9522-22e69f85980b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f906421f-e463-4e68-8c61-c58ed72bb44f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "6f57a7e0-5f2a-4afa-aa2b-d96ef4288dbd",
        "cursor": {
          "ref": "4357e57a-245b-4dd8-ad29-30d0e4ccf94f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0b3f5443-05ca-4754-919f-3278b93ebd98"
        },
        "item": {
          "id": "6f57a7e0-5f2a-4afa-aa2b-d96ef4288dbd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "15fbcd45-3e72-46b0-b44b-96ae4f6bd0dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f57a7e0-5f2a-4afa-aa2b-d96ef4288dbd",
        "cursor": {
          "ref": "4357e57a-245b-4dd8-ad29-30d0e4ccf94f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0b3f5443-05ca-4754-919f-3278b93ebd98"
        },
        "item": {
          "id": "6f57a7e0-5f2a-4afa-aa2b-d96ef4288dbd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "15fbcd45-3e72-46b0-b44b-96ae4f6bd0dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f57a7e0-5f2a-4afa-aa2b-d96ef4288dbd",
        "cursor": {
          "ref": "4357e57a-245b-4dd8-ad29-30d0e4ccf94f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0b3f5443-05ca-4754-919f-3278b93ebd98"
        },
        "item": {
          "id": "6f57a7e0-5f2a-4afa-aa2b-d96ef4288dbd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "15fbcd45-3e72-46b0-b44b-96ae4f6bd0dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fb9a34-ed77-4c6c-87a5-552e529ce0ae",
        "cursor": {
          "ref": "3582b4de-b913-4497-96e6-17d0a24ee833",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "477d9b7d-9524-4ed1-a2e9-a2529ca5eba3"
        },
        "item": {
          "id": "54fb9a34-ed77-4c6c-87a5-552e529ce0ae",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4e9ff8d2-aa3e-4ead-88a1-7bc0c2147994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fb9a34-ed77-4c6c-87a5-552e529ce0ae",
        "cursor": {
          "ref": "3582b4de-b913-4497-96e6-17d0a24ee833",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "477d9b7d-9524-4ed1-a2e9-a2529ca5eba3"
        },
        "item": {
          "id": "54fb9a34-ed77-4c6c-87a5-552e529ce0ae",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4e9ff8d2-aa3e-4ead-88a1-7bc0c2147994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25a5ba7-cb23-431b-9e5e-5a044fcd9b9d",
        "cursor": {
          "ref": "08c82e22-bde1-4701-97be-b2392c1a0f02",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b94d8320-3e19-479b-bcd4-bf7bfb89c5b9"
        },
        "item": {
          "id": "c25a5ba7-cb23-431b-9e5e-5a044fcd9b9d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fad57e43-a27d-4d14-886b-41fb0a307f69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25a5ba7-cb23-431b-9e5e-5a044fcd9b9d",
        "cursor": {
          "ref": "08c82e22-bde1-4701-97be-b2392c1a0f02",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b94d8320-3e19-479b-bcd4-bf7bfb89c5b9"
        },
        "item": {
          "id": "c25a5ba7-cb23-431b-9e5e-5a044fcd9b9d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fad57e43-a27d-4d14-886b-41fb0a307f69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}