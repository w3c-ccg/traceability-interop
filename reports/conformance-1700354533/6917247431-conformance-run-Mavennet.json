{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c2a956b1-f877-4fe0-b859-ad5aed38f4e9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "93e077be-775f-4bfa-96de-41822aaad57f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27dfb868-31b2-464d-9653-0f30317a7bc2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cc6606f7-2d5a-445a-9296-50adb1a968a7"
                }
              }
            ]
          },
          {
            "id": "cc9561ce-73ab-4957-aad0-747a1885424d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5df4447-ea56-4c27-b488-7f48baf916f3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1b4c250d-c901-4b76-a7c5-79109faa7fcd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bd761b2d-253c-42d8-98b0-c463450dec87",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "15537c74-60d3-4804-b0f4-e93c6fe97c26",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9f2e2a5-b8c5-4052-b3be-9dc86d7b4bf5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77f8c556-1a8e-4512-875a-79acace96fff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1fc9833-6041-49d8-bec0-79cba60a352e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9aa00168-7676-440e-b337-146193f640d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8413625a-c391-4e95-b277-01ef11eb9320"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cbf6bc11-e471-41ab-800f-094efe632bf8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b668a07-7604-41e7-a16d-0d064c0632d1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82ce1eb0-8e48-4ade-ac58-a4fdfd5ffeae",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9d60dedf-c532-4010-9fed-50a7432e50d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00ae91c6-9ddb-4a45-b588-5db1e97de463",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61254bca-c628-49f9-ad64-147d6358b928"
            }
          }
        ]
      },
      {
        "id": "a8acb926-e655-413b-a3b7-0c244bc1c0c8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "eaebc0d3-19ee-45c6-8f13-01074fb3b9e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "565a006b-7606-480a-aae1-1ca47884aad5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c8fd10c-34ab-4da3-b51f-a6cb0bdb24fc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf82adb-e16e-4b70-af0d-dd49441e0fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bae3dac7-10a8-4a22-ae8c-b6825f0ce4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43599706-3a69-49ce-ac07-5084712af1f1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ba3df3-efbc-4067-81b1-64e8b85f83fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74f856c4-de88-46fb-ab02-972e2c9858b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d55dfa0-38cf-4a9d-b07d-d7bc4bedff52",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5baf2f0-2e90-40d5-8101-3b611c29d387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5e44557-3713-4d03-9d13-9032b5996d4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a8df99c0-9cc6-4de3-b3e5-dae6b41ddd29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cccd639-0680-41e3-9b0a-7633fa6ba004",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf99b4d9-c3ed-4700-81fa-847686710cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87f6b044-2a34-4568-95f5-c8e801c82c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb17a23-b935-459b-bf40-17686dbf8c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432a432e-1741-4868-a82c-6a63306dad3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eaf78538-ff87-40c6-b2df-9f2713b3145b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d833ebc-f945-413c-9753-5a2bddd56f4f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49cdb702-c3dc-4b72-bf3b-2c7c138bee47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "be976e22-05de-4704-a224-b9e2d060bc7f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fa0d8bb-b8ff-4953-a65f-e2d59e0907a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9a8a62a6-93e3-4758-baac-a54724b9d58a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "268c575b-fc45-4f34-8e20-0689597537d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "278cf09e-05ba-4099-b0f0-992b48e09381"
            }
          }
        ]
      },
      {
        "id": "48527354-eac5-479b-990f-aefe6f39aa52",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5acf40a9-ea15-4c9b-ae6c-f25e2edb2077",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd98079b-864f-403e-90d9-d23c0f2c085c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5ae88081-26dc-4e06-908a-21ed32cebb0d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39367f03-e460-49c2-b128-9ffda971dd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85576f3a-485d-40bf-9fc5-93278e0c9272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e78ad85-0c4f-495f-bf90-5ce6da25f1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "609d5eff-9a59-48eb-bdd0-bb0b016d69d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd0f071-6abb-4108-97b5-6a44bef1f5a6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8215e44-3de7-45ed-b602-82eb339b32dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d640ecfa-09dc-4bea-a2e9-97b431221fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1768503-d1df-4fe7-a783-f901616e4893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "453f3e6c-b095-4609-a576-952017bd4dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d9cecc-7518-4a8c-a6c9-7782bb06ceb9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f287b177-096e-4218-9dd0-7ba9cdd57c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70be266-f1dd-470f-ade9-710b2bf7ab9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08a16f1-9e06-47ab-b3a8-acde28c88168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b63b545a-703b-41c2-ab25-f4cf05c7d2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c679bf67-b415-439b-b2ae-6ad17ace3f7e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff74e3ab-b7d8-446a-856c-30cab948e272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0d6ef0-8ff7-47b4-8d37-c5c2e1c10523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc34b11d-f596-4109-bd82-34c17f72371a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75c56150-454e-4abe-bb02-cc3ccd182a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0a40de-eadc-4c15-ba12-0282697b86f4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84743da-458a-4c6e-ba1b-8bee8c576957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddb563f-061a-4646-a30e-2654566793a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c63d2fb-e2be-4e7a-b22f-2dabf2cea646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bed0eb0c-ec72-4b66-928f-f85ebe0d744e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061e0d87-33f2-4852-8645-1fbb1a11a357",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea844ef-5d99-41d4-9169-edc2dd7dd190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3767113f-472c-461e-9cca-bdedb9af6ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4869493-06f1-4e2b-a8e0-70d96cf58fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0814166-b3ae-4348-acd9-4b90b1337834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0309f29-359a-4a85-b1fc-b51b12f01b0e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20228f5c-3a58-42d9-a2c3-e100bd32e881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb50a13-cfbd-4901-8a0f-8c4507bddf9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b84bc2-bedf-4b6f-a7d7-1ef3af002c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f10be1-c7eb-4b9c-a770-e5eb3400c26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784b203d-525a-47c6-bc8d-813948533fd6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f8f9bc-cc6c-498e-aeb9-1209ae2bc563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571c3d62-8797-436f-8efc-2cab1c168678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5216193-89d8-44b2-b119-897a0874db72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3613eff-1c03-4860-8913-7752e74d3113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac55a92e-c28d-4b3c-9339-dedb749b17a2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be47cd9-63e1-4f62-bbf3-020c8fafb3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a184d103-bd41-4226-81f6-c77f445f9e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2e7b71-84ce-46fd-a414-9b2f8a8743c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "094cc346-f565-47b8-a248-5442aa24620d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056ff011-20f0-4100-8c89-301174a32efb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cfbf5f-454c-407a-b824-a0ebb2fd68d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af7c64b-9299-44d0-9440-86bd301df3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb34895a-0fd3-4923-859c-8c1eeb257b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf18f87e-2437-4fa6-9d9a-f1697d1b6819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a2998f-19ba-4da3-b2db-0ab6a98312da",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47df7403-ae2b-4534-862e-6a589e01d142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17aed5d-0b0a-4eb8-a0ad-bc2a0df3fbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7576c9-48c2-413e-9ab2-2bc6688fa0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e793317e-7eec-451e-b932-ff8d9027f899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7390baf-f325-409f-913e-0f8589fc223e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69208531-69dc-474d-ba68-23c30c12140b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fffdfdf-9637-46b5-a5f2-3f8da66a7ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f08bcbc-853e-46e8-9d21-a9557b5fa38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0347cef-223a-40db-9f5d-090f4b3ea9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b7bc0d-74b8-4d8b-8865-7fa3078dc2ba",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa216fc-8db7-4787-a3ca-ecdc535f89fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992dfc36-9c2b-4ad3-800f-39d4f08a3518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f72723-6a13-4d0f-8a98-a510f9471110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0262010-c206-4f22-9016-8e221ce9cb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2e746a-dc57-4947-952e-8f38919e7d94",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8579b294-4520-4afc-bbca-d41b889a40c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8251f86a-8146-450a-beed-370b5513720b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4738827-b68b-4570-97ec-dd00dcef71c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b1a828d-10d1-4795-876e-1f3b9212e6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d694b6-55f9-4ba9-81f8-3dd8a8ee5839",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105c2f9e-c43c-4bf5-b8fd-70ac1add200b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af1d05c-6e67-4b50-bd85-ecf65b6eb9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08491aaf-a782-4607-94d2-af4d8bce618a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f45f9be6-4e61-409c-97d5-c3092f2cf7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d32b266-863f-4bdb-a571-5fab8faacf44",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febbc4e1-92b5-4ca9-9a8b-aad60b569565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3ab364-66b8-4bc5-ad35-682fbed4c574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be275e25-4c5a-456a-8b73-2205193fc995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77ea1d18-fa3d-47da-a2fb-1ffbe52b4155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17086a65-204d-4512-83d9-20e082f56217",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8575b89-d9a3-4e5d-b831-82284a1b59f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a11226a-0acb-4fbb-a374-eb0bde45ebb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8987edb0-d72e-448a-909c-774c7bdcb8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ffcde82-7658-442a-b2ed-dc096828a9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e058f7-936a-4747-b6ec-d6814286963d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ea016d-46ad-4093-94a5-4c6a2fa7d6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69704f7-ad86-499d-9d01-2375eddb4c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bf2e1b-481c-4d9b-91be-8faf994d8687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1a4244-a86f-442b-bf04-bea87bf8e08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc37ebd-1c32-4ce4-9a7e-7ab689a4e401",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf89015-3d78-4c67-927b-92bcce57dd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789a654f-a45a-4c85-8f3c-8d210ce710f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573473d4-b98a-4885-ab82-4a628b580818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "380fdabf-de80-4260-9dd5-3968fc6f57e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336d0e63-d80c-4d48-82de-c01b0ed6957f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277a45f4-e13f-4ce3-8697-e7ff1e3cedaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ae38ac-4817-4649-a66d-379379dfe6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a1c4c3-a7e6-4853-a299-0a8e76b825fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15f1e529-0590-43cf-b1d6-a6648ae2cc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e07100-bb40-46fe-8b4f-fd648c2ab4a5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e8add6-fa65-48ac-b190-dbac7ebc5e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8f2b4a-42c0-4630-87d3-6d02ba562441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acc9a3a-3609-477b-8088-65bc9b5c7343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "831d7d70-a9ab-4e2c-84b2-5e190b7ff5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4d51ee-1f0a-4a88-ad36-a169cfb47630",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34cc582-32f9-4990-9583-064dc8912d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01829c1-591c-4c60-bc14-2802b400dd61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023d1bde-886a-429a-a520-b589e9950a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c07d1e6-9fd1-45b8-9949-63297bcfde8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59530673-8841-41b3-a9a3-735eb8e4a641",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff7a537-a832-4efb-99c8-b62e2f1abe51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ef1868-7371-4838-ae6d-58c9801a4845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b8b56c-624a-4526-95cf-53e86760a534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3abbcb-64b1-44bb-8a57-c6f3a07c1ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f1d01d-7273-4478-9065-92bd287078ac",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9430a1a8-1d22-431c-89f3-a8cc4537a935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6938c3c9-0a26-4f51-9fad-63333b969095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f955dd51-25aa-4d3e-bb41-4f928a86cf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b547225-b10b-4971-9369-e1a95cec4577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b1662b-03ff-494d-aaa4-0585e3b4cf13",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8612850a-e6b3-4d41-b5ee-d128dc4a7793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a4f117-2af6-4d13-8555-0b6f44a743c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574e23a8-97d6-4acc-b900-09c78963e823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e1b5c2-1b9f-44e1-8261-85760d3f2669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1959baff-92c3-4d94-a633-fabd04a10863",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c54f18-06a0-4086-a75f-9bea81faaf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9df478e-8903-486c-a439-0f245f47170e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7d2432-5e50-4022-8931-0b39a44867ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3640f2b7-8ab2-499c-9d79-04e454d0a7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7012ecd6-6113-4079-acfd-ee5aa2f4f91b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9b12af-b80a-4de1-97e1-ecc84b6931cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e74796b-11ba-445c-aeef-0a5e81d506ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6a9005-1b94-4274-a0b4-7b2aff83415c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fde5f92a-31c4-414a-ac95-61b4bd87261a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69e0def-1a9b-4d85-ac79-a116dfa4541f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfbefc0-886e-4b0a-ad13-defc1c95e676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53376ed-291e-4dcb-87b5-c71ee84bb25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d1abb7-96d7-4ffa-b6d3-71619f063cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21708141-c865-4d3a-a3c8-3663a8cb6a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842f7561-3f02-483d-972a-da5de7b188c3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f47808-9b28-41a1-be62-3ea07025c3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925842cc-6b0a-44b6-9690-ac4f2885c6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfcff55-3fda-4ada-8cfd-3ab316ada802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95021f45-89ca-4aef-9d6b-ed6605757196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfaa601-e138-47f1-a510-aeb692a16d6b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ceefea-117e-469a-ad80-1d8a392e3ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188d610a-d9c1-4ac6-872a-f35762163d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c79415-c740-4b33-a8ae-1e184ce8f064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "81344a62-e6c1-4af4-913d-5f2844ac6b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b8bdc7-4503-43b6-811c-516fa856bdc0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f681c264-f900-4bf5-bb44-baaf351962de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485b594d-4c0e-463e-bc00-cc7958b6672e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a10cf1f-715f-4cbd-91bb-5e69777143f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d724ce-258c-44d4-a169-88edfe43893a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a27422-1f9b-4965-adcb-b75eabac9b11",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69caa3f-97fc-440d-b656-7dfd6f82bef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4e1dc2-a23b-4513-8d5c-ba8e0fed9fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9c3ff3-1f35-4012-a3b5-a5d456b3049f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "660f5b7d-18a0-433b-a4e4-1b1ba883a16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d528f0e-ef7f-4758-87e5-065446e4d70f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f701c3-c404-4134-b6c3-efb80eef8fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bd167b-6007-45df-921b-2c02b915429d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a55e1d-59ba-452c-afc6-ca1920a1ded0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1969689c-17ae-4cbe-a180-17419e950788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bcaf6d-a168-41ed-86fc-b7a6e6e710ba",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b51baf7-3b07-4c01-951c-03e54b63ac7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2310369b-9c1f-4617-924f-4c664c7730a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82405315-4d9c-44c2-afa4-819f88b8dbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba28a314-1466-44cc-aa85-3a337e5b847e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6e3945-f513-434a-b1cb-bf6e798a5db7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9772c52e-710b-41fc-bdf9-2bd5434191ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9414df-8e92-4f62-b04a-0ec2d11e4365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355771b3-97f5-4980-abbd-2d738692911e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "25f83a2a-236f-454a-bbfc-356b208beadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3807833-6ff6-4dcd-aeb0-a6a910820faa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53c17db-8642-434d-a750-5d85fb586aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "770f8a5a-b2c6-4953-b6b6-4f8bc169d3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7bcf35-cbe7-4149-8975-39d44c69e761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bcea27-b1b7-430a-b174-10fa9a7ba36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb984b2-b923-4ea5-8c8e-b1e09f88e46f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2cf41f-5cab-4239-8c64-a80c2971787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec57460c-858c-4e9f-8778-f7033b8bee3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d8718d-5537-449e-a807-43300d9d5a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78997a8e-8cdd-4fa2-ba6c-f9802ce90dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518c1cf7-fd7d-4df4-b4aa-b7d6d4ec539b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a023e1-a45e-485a-bcbb-8ed3fe60b9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6cacb41-255e-4a43-a5e8-6b60964a7e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c720554f-49ab-4cbb-a862-4967f239cbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5e3328-8399-48d7-a6c4-e1a223c32bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83745125-61ad-401a-8494-3b4d94c912be",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64ac6e2-beea-43ec-a604-cc005ecefa77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54702bd-b2f7-4555-ab59-362b96a80943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3adc235-5a78-4d12-9614-713b838657b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0206b5b-d6af-4dcf-8548-fba8febd8d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c909c6-4316-4388-8e7c-09f028fa6eb2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cbbfe2-70b3-4567-9035-06a0e559c8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb6e976-c0c7-4ff7-a07e-613c11d57e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794dd345-6ccc-4ee8-82c5-4bf3113f02f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d629b80e-07db-4952-bc69-046c95061d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefa94b6-a8db-4ce7-ab63-cb4db45c7a15",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95732a0-9230-46bc-8c93-bf90488761dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e224b41b-545e-40d6-a957-379a52175293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5140c87f-9f9a-4150-85ca-6342b2ed8197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "31be3ac5-cb15-4541-b591-01bf9bd1ee46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a512d6b4-cf09-4641-b7de-04711e3c0245",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a667571-63fd-41ba-bfba-ec201d4d1136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3a8ff0-3409-4d55-b733-36a6f2ace57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899ff6d2-dd89-47c1-a96c-12eef75e0655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3d568b-9be8-447d-9e81-e706f5ea8ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d8f9e6-5c58-4164-b143-3bc315616448",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0869f8cb-a88b-4be2-9475-44c385c3ba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5be908-74d7-4511-a3f1-8ad6449de3b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc9475a-45e5-409a-83d4-d40f4a570ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "84f803e3-0055-489a-853e-0fb3adb20485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1e1028-4e46-4f64-8576-1e0fa2328fb5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b448c4-52f8-4412-907b-a35d09824559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f9d458-5e8b-4082-87a0-a0b6d094b69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be27fd7-e3ba-4fb0-8414-0ec9d45450b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "988d0a05-6527-4ec1-ab26-aeb7fdfedbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5135001c-e687-4474-875d-02176ac6fbad",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7644e6-f474-49df-aff6-896ec2e72682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d368e0-e463-45f8-b4f2-adf9c58b46a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f241a57c-005f-4f8d-b7d3-663a41cf1333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e546859-f877-494e-8fcd-621a5db5785f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a3d2cf-0e6b-480c-85b6-d409ccec7bb9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a71337-883c-455b-ab2d-23134a5336bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c418b85-fb1d-44ff-b0f3-90962f751aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8248da-070a-44bd-b7d5-cae8294e4f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "155c1681-5f96-4676-8108-e32a53b1b248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd07f53-72ca-4734-a301-70f06f37c12c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97493374-f05d-4909-b543-1d41ff2097fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31377dbc-2f62-41a7-b761-849a82c8fffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f5bf2c-1715-481d-88b3-b28bd874a36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2074f571-04bc-4942-97a7-74dde376b76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d96a231-afe6-456c-af6b-0b6c91cfc852",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836ad194-dc04-4020-9cfb-d16fe88a607d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76cfa2c2-8aed-49bc-965c-f7d4c9eef6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b18392-1180-410a-8ba4-7c870c43ac51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2df12f19-9e4e-4777-b229-5f2f0c946edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2427dc15-aaa4-40f0-b24f-e132f2663c94",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3941df9d-4d65-4db8-a5bc-8652b5c5d1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aced05e-3725-44f9-affb-13673b41031a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec502a62-4eab-49f6-a24f-b4d97ebb6f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5537a7f3-ef07-41a7-b282-f6001366e41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6547c7a5-8f29-4a9a-85b6-15dee38ca265",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70418708-8614-41c5-8e58-e9fbcf7d3b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec6267b-a33d-40f0-9838-821e44d09d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef516b2-ebce-4882-bfdc-15c0d421d633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6b3955-fecc-4308-8354-571cf8aa5d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9e2f0e-b596-460f-a7d3-5a99d7ce7c4d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858fa3f9-cb3c-465c-8c38-cb8fa8f31960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe55ae3-7b3b-48c4-9e6c-04037a366906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3852e201-5a62-4a68-8a68-d634cdc1a059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "835ece2b-f280-41b1-b179-0f68626f287c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064288f3-6387-4311-8e4e-228b37439f97",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdb6f5c-71d2-48c6-94d6-2f6a0d732dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4616e590-c848-4c99-a99b-77b8a1e90aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde0f604-52f2-4968-839d-af17e03bb625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5ab2de-10cb-470b-999e-0c8ed3032f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc80c525-feee-4ba3-809d-3bc7a12c38e4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989d4dca-af09-4e33-80c9-debecaf94539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5a4621-5563-4c6b-a5bc-7344bafa0515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff7bdc6-976f-437f-96fd-992391109e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd960d0-75c3-4459-b343-16612a627fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4813944-c1f8-4ea2-97b9-e918389eff68",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c0eb42-1844-4716-808a-2f1eaec619e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8cd2309-28a6-41b5-a7e1-df7522165c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4425a9f4-f449-4d73-a3ef-6a80287be910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72f2883-b2d2-4ce0-91a7-84d53793912f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767c0f97-1ce7-4008-b633-d5ec689f290b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4fc4fa-8141-419f-adb0-cccca84704dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9eca540-0f1b-4981-a2ca-c12a39069cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09f5753-4519-49fc-9e73-c16d3cbbb064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e90f763b-2533-4305-9bd7-67166087203b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8246a310-5c79-40df-950f-ac5b7563cd1c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240ab455-3203-4e4e-817b-5ea2cbbd404b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f986fc0d-03fb-40c2-9156-0003c57bc020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25b41ae-45f4-4307-81ad-ce6786540b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4359cdaa-c723-40bc-bc95-296a491168a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a11cdd5-c5d7-4213-a59a-4b61ae3f6e72",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ac7eeb-6035-46bc-9833-1cdef5626baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9d8029-e470-4e25-b5da-508e17491c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d01d27-1a4d-4108-97c9-b8e29f68b9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2447cc-8fed-45bc-98df-f09d32cb21ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34c7cc3-f103-4c50-af39-5e268dd2a9bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45427994-5628-4089-b022-f6d146b12703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedd6cfc-56a9-48ed-99a3-b3dede642c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f1cc30-6d87-484d-a94b-07ea167e065c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f9e3c47-9410-4b4d-b4fc-5bbad792f347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4062de14-e2b3-4e9e-a84b-57d10ce82180",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0263c5be-b4dd-4b3b-8722-09d7cd114770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee43f4f0-86a8-4402-8ed9-c18266f9a309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8b4fc3-61c1-43af-b232-c89d576c6aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c813e2d-b53a-4b90-a179-fa0fb47157cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3db8baf-e2c8-4071-acb0-48da6b2188bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2288433-a8e7-4d30-a021-0030f3ec0329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297ad465-110c-4ed0-b7c1-358a852b4641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19a5106-df9b-4bcc-a356-29721f5189a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c5617a-2fbd-4fe8-8edf-97063d7346fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68daaf41-08af-4a87-9e63-519affcd4b43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd20200-8255-41e1-8005-e0b4eddf46a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf88869-c9f1-4004-b023-07d1f75b5711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb4ad51-2a9f-4d58-aa8c-0c6f425175a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2abe8af-3694-4116-81f1-9981d92de4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f238ac3-bb10-474b-ac63-a2cdfbb0d011",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3540fe0-c283-4983-b910-c0d5b5e89f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b371aa4d-2e58-4d85-8831-dd518dc3a910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202bb4cb-9286-45c6-952b-40bf70faca91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "149694a0-db9b-44c0-bd1e-ca395368adbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a46e11-e67c-40be-9c84-6e54cb1ea976",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13486c98-e5f2-45f9-88b2-c62f30059fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c8a89a-5e4a-4f82-a14d-be2f470ec4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7400fcaa-9ee6-489c-a1d5-f2d2a1aaa4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6e9033-02ad-44bd-8ecb-6173bb97c35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ebb667-3db6-43b6-840c-9b777f3b2e02",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9f5afc-19be-41ed-a1c9-515b3047f5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9adcf572-9e70-4a62-99df-ec1a2c786dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15153834-135d-4c17-a431-1a7111bf5b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00e2929a-ce92-429f-af43-141788d0366e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95152fd-1050-4114-bf50-33a4585c69f8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b441b480-00f7-4810-8d33-fdb0bda23fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe3dce5-5a3f-484d-8ceb-f84ffe6303ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03f83e2-cb46-4281-96e5-8c6cb7ec0723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce76cab3-c768-43f5-88b4-2f34cd4c58cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214e5cca-9de8-4dfe-b2e0-e9b021d9a605",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829a53d3-b16d-44e1-8a36-a48927795eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47782764-f2b3-40c1-9bb2-1b2249b3f3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3281e8a0-d065-484f-9fca-93b3bc972d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ee4657-fce2-4db9-84fa-44f7e57db075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3793aa45-0bf8-4961-883d-7919aaf4dd06",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5879b13e-d40e-454e-8e03-2fe95bfab7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c245f5ce-72e1-4be5-8d5f-8b8f1cceab29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5886e294-3874-4e81-a39f-4fa79b5cde29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85171653-6090-45c6-9e7c-adede77e4277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58030517-ba73-4f3d-8856-c6352870262b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cce5d6-3e33-4400-aba4-82657e3a6c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd47ed3c-058b-4d5c-a107-e3f0e8c53d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d789dd06-cd00-4b0f-9e37-c58ccdb7039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aadc8784-a710-4525-9ff9-4206fc3ff5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510802ed-b845-46f7-ac0b-049fd3d2ca67",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee0d96e-7bac-42bf-858b-36e4a5aefd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7ad2eb-84eb-48f4-9b0a-f5ca3430dba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4498bb6f-aadc-4c8a-89f1-f582b94d2c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7c0d62-e643-40a2-be80-9010ecd2d297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a111b41-24a2-44a5-80f6-5e508bc4434a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30aedb2e-443c-46a3-b575-39717a750ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951a339b-3fce-4a83-b417-587a579e2fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51972e4-9def-4932-8bcd-afb4b535e4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b39906-a9a9-406a-954a-812a81f3d3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2506fb8b-9d1a-437d-b8db-f55f29b5b9df",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fa20ff-25e5-4761-a2b8-28b8d10e8589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3128b1d7-1f4c-4bf4-99e0-399bd417d2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbc1fa3-8aaa-4255-805f-64c7c2c5461f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4aa2a1d-388a-4231-a658-11e02f7a2bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4581e99-e68c-4142-b5f3-025e520ef91f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583caa6a-b523-4146-8b2a-1b9f5075a621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0efd16-13f2-4267-bc2c-dab268479bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c41aed-be0a-4ca8-855f-bf82bebac050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f44b370-d1d6-4915-bfce-0bdc95f5efcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521a9bc1-c370-442d-99cb-382db90fcd8b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f04980-b96a-45d3-84d4-9126af1cb2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84df009e-da0e-46e9-8989-e8c4f1771f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2270d0de-b05e-4e52-8c8a-388831de7b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "45328223-3185-4eb8-81a0-792969e40794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d961b614-043c-4560-a0b4-63aa4f6c109e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8b322d-18fe-4340-8ba2-2b27d0132b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63328b26-8553-405c-a277-8c3b49e19113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0094ec5-34ea-428b-89ac-e495c4bba680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a475af-7659-486c-bea0-680e94afdd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39158ae-bfc3-45be-aad6-e2f09fe0a87d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82634b89-83b8-4471-a6ef-26452998a201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c26f7fa-b94e-45a0-9751-b531ad72207f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5586401-0562-47d9-9f8d-157cc39fae4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ceaf71-0ea1-4df7-aa58-c4dfdaace4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee06b81e-d15e-4ad7-a9e8-19ca321708bd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41be266b-4572-475e-8093-eea15d8059d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b998427-a500-48c4-8a7f-80e2d0e4174d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c3e5d3-0bc8-46cb-bc12-80dc108f18c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb76beb-8471-4c34-b3da-3359d9e5d157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7170388d-c0d6-40c4-883d-25ad65a59905",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6dc108a-b2d6-4af5-b69e-8dab8ed98de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e33f246b-ffdc-4228-a8ab-d87c2123d92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eabd95c-915d-4a49-94a3-4c8633ac4cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a367e9cf-9e28-4305-8ae0-a2dfab27c54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be13722e-2f1b-4b78-916a-f9d5b5289698",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5205d8d-8b0d-416c-bacd-18788b5dd6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2cdad1-13ed-47f1-af50-6bb60c914e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf2ce3b-9695-47dd-a543-dfa1772e31dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de37acba-d5e9-4f8c-9ead-8cb32e42684f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897a4a72-bdbc-40a6-85eb-ab51efabbe73",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "770dcebc-4a25-46b5-ae2c-e26713f1f0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0ade7e-cd31-46cf-8faa-e81d6401b8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee631966-bc1c-484c-ac32-161291d5a63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb5c228-a99a-4190-bd69-503e12d12f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164170bc-6f97-4a8b-9f58-dafcc821f1c2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f90904-9e7d-4c30-b2fe-1f3cc1bea084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c25101e-f842-416e-a437-d21a2b98f581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdc26ed-aeb1-44ba-8c9f-ba208fd57eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5e5c6f-3ee2-4b53-8f7b-e05fd4508c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a154de36-5a50-4db0-b37b-c6fbdb3f0db4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f256bb7c-1608-402c-9b1e-18f3d446c33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4a7e0c-eddc-498e-9ceb-cd4bb3954b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9eaa55-c9cb-4bc7-b9d0-6d7db83df592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0ef9d6-d8d2-44f0-a43d-b0f766333c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a436d788-a7d7-4744-ab08-30360857f573",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5695a686-308c-41ba-84b6-ee46a8c6f27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed32459-23bd-4c23-9301-38fd0bf09f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a1d15a-5361-441c-bcf2-fe3d9229c203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c69ebdb0-137d-4266-833d-b1767c478cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4929ff22-8a48-4bb9-aed4-0c6ba704af96",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdbaf21-06df-4f0a-9dd9-8d410cb916f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "405a6060-e179-4225-96ab-67b1654c4709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ada306-93c8-4322-a2a9-cd2e1cc4a828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88bedaca-7c3f-4bb2-84d1-0fea1d14ed25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4c9a09-bd39-4621-8f60-5bf652bdf113",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a307ece-c5ff-41ee-9c67-5c38c3fec795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40dc885-92c8-4cb6-8a3b-743734f1e6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbdb883-ca89-4828-9e43-d7b9fbb05b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c074db9a-0cea-4870-8757-eadab2725753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb07c691-459c-4b64-81f8-c3de2a209409",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74551c8-3474-4949-9402-ca87296fc582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca37309f-6b5b-469c-b1d3-2a376e93416e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707e21d3-322f-485c-88f5-73bb3b4eb041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1bb1c1c-d600-4fba-bc34-2664d2895064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003e37b1-9ed2-4d7e-8050-9c8f563c1a26",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2f2f2d-afe3-43dc-894b-4c1e4ed33ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb19f36-785d-4023-9d67-07787cd38ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3933c171-7066-4df9-8c36-a1a186ab2f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f42f488-31d3-42c3-8c50-5bd99dc377fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45176084-5cd9-46b8-b78e-ec419a0a251c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1135c3-fb21-4475-961b-3a19e306f81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d9f461-af33-4e13-aafd-30cfa46a500e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0288cbaf-c91c-4661-82b5-3ffb4b71d5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce58729-1061-4d8d-b54b-54a17bf7e34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839b9e47-8549-42c6-bd66-52bfa4e854b0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9486b461-2f27-4cfc-8cad-61393ad7ede1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922f7b8f-6512-41e4-82cb-baa957978b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d696dff-e8c1-49f0-94be-b85c71d13432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3461ec-c494-43af-b7ff-c00163099c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef46520d-b3d4-4088-8ff2-b036bc78e7f3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100bdf03-c4b4-4cc2-a888-787cb06da115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a413984c-b88d-479f-87b1-979738f3cf27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beddd322-2333-482c-b62e-a92a94f4aff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f077ce-5cd1-4aed-9e67-1ee387151318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a280e8df-c347-486b-9289-7b1c1ae89106",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb647eb-d3a0-48ac-b387-1a04c7804a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddb95bc-6ec5-42ed-a326-a1bee031dd9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e66230-2889-48b9-aa38-24f89bc01017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fac0861f-d521-4d3a-88b7-0c6fcde9993c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bc4051-447e-4585-bdbe-84595c7a9e42",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcb5dd5-6a45-45bf-aee6-6af3eb2714f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3d3f7f-f247-48d5-80c3-c28082c8a833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9649dd-da50-4aa2-a94d-9b39bc631092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "de9921a7-cd67-4ff2-bb88-5aee5ae76a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71305143-066b-46ac-a702-d7e34ae34d61",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a01624-6a3a-4cb8-a4e5-8770f5f00bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "65b706b3-3388-4cb2-855a-c1ffc020d51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69c3939-0851-4cda-bc75-d29a8d124da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc53dfc0-521f-45f6-9048-1f2d578e3101"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e2d2a398-eb6e-4ff9-83bb-9230cf5dcf4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69749ac6-b30a-4e92-864f-8e024bafd17c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f4badf-b506-4428-8174-7fa0ec57743c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bf3faa5-35e5-49ca-b653-7a85660e644b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a40d40-3df8-4a7a-a730-6f5044b8f868",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "737c8faf-a59c-461f-84fe-2bdd3dcaa361"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1971efd7-5f92-4664-9487-9c5892a48244",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aafe9424-e70b-4818-8f0b-1c96834a1e3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd7dccf8-30bf-445b-be91-039b6a05238a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73a5b6bd-21b0-4272-9c23-733134151e5d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40decf34-95bf-4222-864d-a1d5b4361a1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29e7f8fe-78ca-4afb-8807-59e9f48f75a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "022c2d2c-6384-48cb-93fe-716a93db9f5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83038ce4-d283-4015-b5aa-19ea70801deb"
                }
              }
            ]
          },
          {
            "id": "a17fff21-4d50-46d2-9c71-edd8ff9b7d8f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "366ef5f7-380c-4326-8b20-1be6bfc20576",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "de000b05-46f7-44f0-8c3c-fad8d0a278a4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef462b6-3061-4f18-9f02-13b20adde807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fdd2eafc-ee13-433a-813d-cf04fbe9dc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582d3264-92b6-4055-9170-db66ddd4463c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8d3c88-54de-47c2-ac63-7b06f96f9672"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e1a60f2f-184f-455e-90c4-bf0b86f9b992",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61b706df-7122-40bd-8b89-e376c33b1e1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3a155e8-d2c1-4452-8235-3827e733cd64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8e644a4-0f0b-4481-9e08-1771bea5ab56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2c097a39-9ccf-4cd0-b904-d4979f68de4d"
                    }
                  }
                ]
              },
              {
                "id": "67f7b71c-fb42-4991-8a16-886670843a82",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbcae23c-4532-4f8d-a6cc-c88815dc6eda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8aafdf63-4add-4b23-aee1-956047043971"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a9890c8-9c29-464b-a3e7-91b3c80cf36d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10be8dd6-0421-4bb0-a299-e41b21b576bd"
                    }
                  }
                ]
              },
              {
                "id": "fb81be72-e07d-4c30-8658-37fdb9a1b27c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b508140-7c51-4f1f-8d7f-c275f89c85e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ef004b2-5745-44a7-8fb5-bc8ff90fcd6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c88cf601-ee5c-4d74-9a1f-dcac1c562abb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7bfab4af-de87-48bd-88f6-daa02e7466e3"
                    }
                  }
                ]
              },
              {
                "id": "9a193bde-2588-4d0b-9cd7-0515beb4dc75",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3db24fe2-cd20-475a-b997-2907a485a9d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c92aab47-c262-40eb-80bb-ca82a2f5d080"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e75b957e-8621-423a-b631-bd63b7a4e1e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1a47b64c-1052-4de2-9832-a065f368823d"
                    }
                  }
                ]
              },
              {
                "id": "fc4eb15b-e6a6-43a2-ab36-6ba641e0fcc7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46817594-d8d4-4aaf-ac93-866914db5bbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca6071fa-0643-46c9-9367-0e0d34fdee79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee002f27-7d56-4b1f-aead-565c2314ef19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b9322f3d-cb20-4b41-8648-2be4a5d662f8"
                    }
                  }
                ]
              },
              {
                "id": "33a801fc-f324-42a9-934e-abe4770ace41",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03af92cc-f0d7-42c2-8f69-56e9882d0103",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5057b170-3a2f-4317-83f9-e529ff141998"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a1cbf1c-5360-4457-b847-04bf73265e0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "304c7211-86f3-4822-ae37-902946425d8e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "72d16404-f57a-437d-9432-31bc63e78962",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6bace383-2e7a-467a-a47f-972ed3f93055"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cce26a26-101c-45a8-add7-a902f1498cf1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20857a40-6ac1-4481-abbe-c7e6b411c8cf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e838f45-cb14-4a39-b871-8cff3ac446a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f1b9bd7e-1b69-4c2d-b628-9e754bccbb1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d60b9a4b-92e6-42ce-9454-d7621a5bf5d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e59580e6-fdb6-4251-83c2-1c50f52122fb"
            }
          }
        ]
      },
      {
        "id": "2802ea48-3ddb-4840-9db3-3df483775fdc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3d88491e-7fe2-4bf7-b80f-340df713e066",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcdc2208-2637-4940-af32-d6b0db221c1e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "507e9e88-a1e5-4b9b-b2eb-abf271b48d84",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af31129a-46c4-41d1-b061-8ec2c58ad682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71315230-10c8-4693-bc70-ec3926316ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939b55e0-bab4-4d82-b331-bd7eda16798c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "00402deb-779b-46f7-ae92-f9e769bae8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cb8099-9aa4-4bf6-a6ca-c28e39d88078",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696b29fb-ede1-4015-93ad-855be5c6726d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4206480-eac3-4c94-9dbf-a9812b7dbfbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e237d8-8da6-48c9-806f-2a8c07258092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c578013b-83dd-4f28-9bf0-667d16aaa32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fe8645-7652-4d4b-9927-9091afb6d41f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6bab76-84c2-4abd-8388-031e4795a30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c8c464-003f-4514-837a-42275e30a792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493b0e19-60c9-4e7f-82a9-c0399e30dd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b6cd152-9da0-47c3-95ab-c0d97c5aed4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea7bcb0-94a0-4489-ad02-e6f455bc4ef7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f5d3ae-001c-43b3-98a6-fa40cb4042c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8f6231-0b6a-493f-97d8-7a93fff05319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184f370d-bc11-4115-8096-bb5c397416a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4c0e3b-cd4e-4ef3-9c91-074825932f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047724e2-1f10-45eb-a278-86cc2208f93e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff479214-9246-4d01-a676-9490b62d3c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e03491a-4c91-4ed7-8c14-9dd2d9d7de37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee6bd3b-cb16-4ce7-88c7-941a932a71b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d3d8ef-d2ca-4edc-a6f6-e3e71a9851ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68501659-140c-49fc-8b5b-0b13f9cca033",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80dec050-7c6b-4fcb-8280-4d01adba4f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4e4ec8-128d-4ebd-9589-2d307f8a7892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0880822a-0b6b-4139-8654-9dafe74a690c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35a1d1e1-a8e9-46c9-b285-6c9f81e1aba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1cdf5c-8f88-4c12-965e-bccb9169184d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9b4e17-6f90-40b5-9847-d549d9944be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15c6f49-8618-463d-9197-d611127602a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31501b41-a2ca-42bb-8ce9-a741ae4b4db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c9f209-a825-4aba-8b67-6458dd2206fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868efc6b-9a86-47af-9608-42ec5ee52d59",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a157f19e-c6fe-4f8e-99a0-009a58bf96b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a01187-9ef8-4f8e-9bdd-39db61ff7d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75731200-ccdf-4f0a-a487-7a83fba98161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "764186ea-ba60-4d0b-9e44-a02b23e865f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52e2c6c-bdfa-470d-90e0-7b69d13c7c2a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edef4f4d-b9e4-410d-8d46-ca9572fe7edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237651ec-e799-40a6-80cc-013304d6d856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e18d73-8c66-4133-b686-fffc52b20cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3eca257-91e0-4073-ab0b-e79e5a29dc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dfba65-dc5f-4c45-aa29-12823289a738",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc657105-5085-44af-841a-4c4c7c0f766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33fd7f0-a80a-4833-9438-fc55088131fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f29368-4d30-4921-8dc3-7eb0f5b0c366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7755df-83d8-4838-91b9-0865cad1a103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abfacf4-e8b7-4080-a6b0-7368ca4bd418",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11aafa73-521d-49d6-bf64-92a86c2ab962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b2e429-069d-4eae-a23d-935aaa3d9486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb71351-d41a-4f2b-bd2d-cb72639870d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa30c6e-46d1-4ebe-bae3-7043897d22ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee5aaf4-85cc-423c-8c51-1c4d601ab641",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfa949b-4dcf-4238-9818-98e6f9ceb60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc93a32-80d3-40fe-9971-991523cf06a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968c7a3a-23b0-46dd-a65c-06c33e761b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9860c02c-0ac6-40d1-a2b7-22f2a34ebc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0275e00f-fda5-416b-9e46-c71224ff293f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5934c34e-6f93-46af-b31d-d34ae28c6b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f6999c-7813-495b-8381-839bf726db6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8b733f-c01c-4c92-85c7-302e1003bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abf53894-e38e-4b61-9cc5-a3c5fca582c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10084ff1-9885-4088-bc14-80dcf7f68ddf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ddfa1e-d099-44aa-89bb-345ac95a8a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd68db63-b36d-45d8-9b32-13cf92c8d2f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4dbc76-2221-4cfb-bb53-9b7361a2a787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc6bde5-1e46-496e-8091-771a36cecdee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb8be72-9016-414a-bfe2-1d357a531b9b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473c4e7f-7655-44ef-ab4a-8cca0600488d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863e0ae4-7086-4a94-9d1e-0bbfaf969ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2232aa33-0315-4455-a83a-f0d45c342686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe6ec41-b524-4b71-8ec2-4218c6f2e137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea45879-0416-4b04-9997-088a3da88827",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7141a7e-116a-4a4e-9afd-7e2a790bdc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e300ff3a-e9fb-41d8-97e1-3e27e0ad771a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5ab489-a63b-4c5d-8dbb-70122f6cf809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b47c31e-36fe-4ea7-a446-93514a82df44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784e85b6-2b17-430b-abf3-cdc1ae7756b0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d31a7b-aefc-43b2-924f-32b38b230b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ffe153-8e71-40e0-a284-400c5ff36ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efa09fb-30a6-41fe-9274-71275ed469e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b127533-b6ee-407f-acbd-43451880ef31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bbe38e-2570-40f9-bd41-9215593557d3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ed338a-efab-4e04-aac0-e7dcc6bc2056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cabc6b4-129e-41a2-91fc-671eaa3b2ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0835384e-6030-48ef-a20d-1a7d50175f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3852a5dc-112a-4a56-8b37-a5223c0c5c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688f1940-e653-4627-8079-ce6e145dbc63",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd14d38-0dfe-4c1f-9388-f3e2396beb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b87096b-40fc-4341-8ee6-905dcc9d5c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999abd1f-5d88-4ec9-b977-52ef9560c922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4825e16c-1253-4803-999b-e69422806dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c99fd11-6bed-41e9-8afe-df6482c10ef2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61337dd-9669-4a7b-b439-8589f12ec5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58b5bf4-497e-4d00-8bf5-7a51aaee5c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce83ab9-24be-4b9d-8d0b-3661850622f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "feecc06f-f68d-49be-a23c-4c55daf63bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b62be0b-f007-471e-b2f8-d2ddb98ee6a9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d53a8c-8a9f-4b3c-8f09-a19bd81ce563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5dc44d-f282-45c4-9c07-32c1611356c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526a2b1f-76ce-43b9-b1fb-a40432abea45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "138ab1db-8d82-4c6b-bd34-e9ef6e86a244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06b97f1-2a02-46fd-ad48-1b20f95026db",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28a7912-36a1-404f-9696-42fdcea6863e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418bf65d-bede-4a57-8083-1f64d210acde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebc4495-3429-410c-b552-0ce63f2b3b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "198835da-8964-4348-87e0-355df363128c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d866087e-06b2-424e-9841-bbb66d7d622a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68d16a9-2e55-471b-b1e0-dd1331f57b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1daa68d0-8e0d-443e-9ba2-4431688049f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c10b0ec-61b5-49da-af73-e6c8e8c5dd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2deec0a-1e9e-476b-9346-5dd6a2af50f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1ea5a4-0f41-44cc-9c0e-c3746054b082",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2934c72-b206-4599-b624-bfe93f5d64f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b7e430-eaca-4218-a95c-e1c556bb180c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1908c259-9a43-444c-acd8-6f7177539107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "828d20c9-d74c-4a2a-8c1d-905f832302d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ec42f3-0e41-42a2-b921-d75fdf4909ae",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad01a2c-ed0e-4d06-ae9c-50b3016eaba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25323ea-36ef-4704-8407-9e0c557b2b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558e08fa-5725-43db-90ed-1b62768d6e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffab723b-83c4-4cf6-93f9-149dfc89ae09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2f598c-dd6f-4a49-84e9-cbbc46bf8b71",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f4fc3d-facf-4a7f-9ee8-15f3cb281e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e79029-8ebc-4e16-bc10-cbf64a8ae22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed264179-6a7f-41c7-a852-b2e2c3fde5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a03adc-6b40-4bc2-9e06-e30ed50ec900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e369ef3-f136-4261-8c23-704b0a377405",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafc25f5-ed6d-4d0e-915b-0317ce7a6e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0d98a2-bf6a-4c48-8e8d-87b5646f13a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b69703-b8e9-4b78-a473-dcbc8465fe29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb6321b-8b5a-4280-8db3-fd05203bf092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1747231e-9d22-458c-a65a-ca0b42020714",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f3d716-8100-46a8-ba69-7002c3eec6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f97835a-26ba-4112-9aa4-74934b76e697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc66f90-9a6f-4112-b41a-74347c49b677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05121bbf-9f03-4366-b7f1-fcbe74817370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534c09cb-129e-4157-ac95-f22cbaae2896",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369d634b-e72a-4b2b-bda6-cf1af8757f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20443153-0132-4858-a02f-96b90dc6d539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5514c8-509d-4ca7-97e6-35d1c0fb356d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0c92c7-7859-439f-9c5f-83b9c4a739d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1822127-ea4d-4df9-b772-4bcc98ca4b7b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772bb32e-1a53-4989-bbad-3721f7d04cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e435a6-f751-44ea-b7b2-ac50345a1fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e80cd34-6238-4b05-b5bb-ca07c3e6f69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f854042-9ba3-402e-83ea-9609539a57f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2594be-fcc2-4da2-bd9e-0f221d14ad7c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2165169b-5a7e-49c3-87ad-f978c9508140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632fa826-1c08-48d9-89ff-af4fb9a0b007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f581e8d1-e376-4dd7-b110-6eab33aba5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b32adaac-23c4-4908-aeaf-ad791e94465f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cd091b-a315-489c-b0a3-ebfbe8c4d98f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a298ad-83c0-4f7b-a68f-231e5f93d997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0672f3f-40c2-4e98-94b9-cda210fab846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4adb4ed-4005-48b6-8925-997d553e18e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f34720c-c559-44a9-b228-fe5cbc3db9e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1cb5b1b8-587c-408e-98f7-c8a5661b36a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cef5149d-b217-4604-abed-e751892e2041",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0105b3-0e2e-478a-b060-6629734599fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "520085af-3718-4875-ad6f-cbf3866ac51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081d20e2-6ae0-4003-85d8-be3c814d4264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a54e383-beb3-44b5-b23e-d796b11efce1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e28c0c9-782f-46be-b593-cc67ed938e06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3dfaa2c-be36-460b-a46f-9f2e2c734946"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ae9f427-d538-49bd-b571-82554fa0424f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af22b8f4-2578-4ff5-a6e6-72821d71b3c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d171f59-0ddf-44be-901f-c0eb59ea7980",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3dbc7aa2-0edd-419b-a9fa-3127831d8e20"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f51b3b91-d64c-4e8e-83c1-45640b14a78d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03600e1b-35a0-4f7f-824b-ed355b7b87c3"
            }
          }
        ]
      },
      {
        "id": "c48f52b3-00f5-49c9-bda0-13bbaaa6b8b9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "21ebb618-3a23-4e78-9b39-1d2a6fc32ca2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "007cb0d8-ad94-4411-8e40-79d5e870a249",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "320d3735-b1e6-41d6-b540-0d23b6dd739f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7643e82c-337a-402a-84e7-a41f0c509870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4324eb07-6b17-47e1-b3dc-b4095c558edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166d3b45-b91f-4117-9722-69c7987cfbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "54c4286d-12d5-4dd4-9807-6ebb2daa5872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ff6322-2eeb-4d51-92c4-d7554151c35e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881c894c-9d10-49ee-a3b0-274ee4b5b400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c337cc-1ae4-4c60-9ade-2f99f51a1f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e0e348-71b9-4b0d-beeb-deac983d3baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff848fd-effd-4c3d-9f6f-19c7f4590c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc9bd42-242b-438d-95de-c7f192fa9438",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4513a478-512b-46ee-a0b8-3d2b7b2d6617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "976ed42c-7bb2-44fb-bf73-2f28bbbb32a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea967ad-f7c8-447c-a101-7733c4235b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd654800-690a-430f-8434-fdd25dc27b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd831d0-5e80-40f6-8e98-d906173ce66e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b0af4d-665f-47fb-a056-a580c0c40c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d244c2d-6d22-46ae-a239-22a46d0a47b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbff60be-d64d-4a97-96bd-fff0671fd363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88d6fd9-cec7-492e-87c2-9aaad1f8419e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477b4cac-e4a6-447f-956c-a7dd840a2b4c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9e356e-2ceb-471d-b23f-8950b070abf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3839aab0-f6f3-45f7-a1fd-ed57345710d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe7056d-fc27-45df-8c1a-8b6235d17d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "887f5bda-add1-47e0-bcc0-2f33c8d1171e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0abbd1f-138b-4987-96d8-c14757dfa2e2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefd4ca6-13bd-40a1-8b45-608e0e71641b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e004b4ed-538e-4416-8905-ddfbe0fff767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ae905f-2ade-402f-9213-cdb8c046efa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "baa4950b-ff0e-40b3-971d-96197a43b5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff46d016-dfe8-4fa3-b7b0-174b2acfded8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad569aa-4d5d-4f29-922d-13abe7185176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c44e0d-103d-41b0-a2ea-341d95f88219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358197f9-1e70-4595-8413-5270cb2213cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3cec02-5b1a-49c9-a57f-5bd71c98467e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a807d7f8-c5e1-4506-9ed6-da801281a457",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbde43c9-fa9c-479c-a312-77a5d60c9f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093cfef5-7de8-4b11-bcd3-5843da5e044b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f8fd6e-e8cd-46c2-b6b0-d51110bd5bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e37de82e-e3bb-426e-815a-69146871668d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce6c03c-225a-4258-ae9e-beb52a450c9a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0790c7-574f-41e2-aa87-fd4fea7b42c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454dff2c-1f52-4d0b-9f36-1c4689d7ee04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b787dcb-3cef-4802-9b8c-e22cfc69f85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b0b3be-a3e4-42cd-95fa-ffe1158951f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553ecc9e-f15f-470d-9309-88bfd3b7d83d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5aea59-54a6-4e5c-8189-c7d9d3586613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63596b4d-9c2e-46e1-ba5d-19b41a02ff17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ef4c6d-7691-4e3e-9e39-7839cec296cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "632eb053-e0de-4aa8-9dba-6e6e4d6db467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01931bf1-f5d8-42d6-b4a8-a2bdc1512160",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e7f5ee-bcdb-434a-83a9-fa2473e385f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e317b0-145a-4c55-b185-27f2a6d730b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234eef71-aad1-438d-b564-0988bb488f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb9af2c-ed8d-45eb-83b4-6f183163adc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ea984a-609d-4184-adcc-48b77e1937b2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d86f012-4fc4-4fa5-8736-27e144e5170f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d885f97-6e68-401d-af10-0a43506f744c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a46091-d74c-449f-bd62-f62f937b42cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac2c504-4311-4d5f-a702-413fcdf77f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03a542e-da34-45e1-b8a2-29129a3b68b7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fe0f62-35a2-4430-b45e-799d75bce77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72fe6bb-765c-4fea-99ec-34e409966a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a801c8-d4f0-4a60-ac23-8b39617bb9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12f408f2-43fb-4259-84fb-96cd69956a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b7d9ca-4f06-44c3-88ab-dd3b9eb38a0e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd95b6f-a871-4288-b1c9-70aaae3a23dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d366f1-a7cb-4780-a9a6-a1de4de79ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb4ffa2-89b9-487e-89bc-5d04c2ccc0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e38c7788-4f01-47df-97ae-5be30dff85b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35f76f4-1286-4448-af55-ac5cd6e14709",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca84f48-84b5-443e-9c65-bf7587e7659e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e863165-5747-4344-9898-f0afac93b150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb03ceea-4b66-4681-b1e9-d30fd4b3b43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0805cb63-51cc-4757-8336-ed1ba1b45e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acb3b01-b3d1-4a3e-9238-7e9cacc7acbb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38479494-82c4-4d10-913b-95f29e35725e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ffc619-9108-4055-a4c2-32ec96afa186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def54c3f-82df-4580-81cc-5084b4d7e572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "930303d7-a8d3-4b97-8f44-66e8895908d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6c2ca1-4ecd-4418-985c-06e0d35193a1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5417ce32-70ab-443f-b80f-d1db7872bc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35bca3c-f7f7-4297-ba6f-abadb38dcac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22930e1b-86d2-400a-ab96-6643709573c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c53f0bcf-d1bd-40aa-8055-923eecab9a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af201df-3103-45dc-8ca3-4c4b5b068628",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b4b2bc-2bcc-4b86-9849-e4b830f22327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ad0769-33fe-43fb-9292-b779b655c10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a067c2e8-fd79-4e2b-8df1-d971c02919f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "41b00f6e-9e49-48f7-9126-022fa5370373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d5ec9c-6442-4a0b-a760-222152782f5d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22031429-4e7b-4437-9be3-ff51d364f183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08bb3cf-4777-486a-bf78-aa4c27fd4a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0bb799-a9a4-4355-9a63-0572c75fac75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ace9b8b-2252-45ac-8c75-b27a0a661636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57563e2-a328-4fab-b26b-79a2753b42fc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772a1491-450e-4621-8fcf-455e586ebfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b45eca8-c8a8-4149-9491-38b2004760fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1617cb17-2cb5-4be2-967f-0e769b2fb57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f4e85d-6c2c-4190-a0b2-4ea93a84d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7446b134-1773-4068-b341-9bb62980bc5e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405d4756-98da-4fa1-a004-b705e244633a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee838782-9e52-479d-9759-73cbaef28486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3617714c-c1cb-4425-b1a5-4a5cba5ce7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eef48ca9-2851-44d5-9453-3f55e58627b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9ca738-5d84-43e5-b53a-999f86efb551",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7f2b3f-29aa-4de2-8371-b42d847ed57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff37c136-cf54-42c2-a1d4-2e07c76f8a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a40e0e7-4e3d-47a1-9f58-b803b9ea9f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36b607d5-47f5-4cf8-953d-54226a5e966c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324bdadf-635a-4e8d-b7e2-0a1312c39924",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664e71b9-b9b0-467b-8296-25e4c547ac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f4fe92-480b-4687-b5b4-912f66977a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6afd4d-818a-4871-a342-22baa80f2f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "662a8278-4747-4484-8f02-b402ab9d6da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0bf94f-ca18-4cce-99d4-3556bea66872",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c11d3c-935f-4c2f-a5cc-08898149f520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83cc4cca-d7a8-47ab-8498-6589f51456a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c7c378-792e-46b1-8fd3-6af63bb35fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47545e79-9b4e-4fff-a159-93f10a0897fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeb1147-6a87-4f08-864b-d181fb923d12",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de19b59-12b6-4cc9-ab24-01ff4860f41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2f8557-89b1-4e18-8832-30b7adff2d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d106fc33-e5ed-4f9d-8024-274b514f59de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8c7d13-c0c0-4c35-b1ba-e8639aef2457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb6e220-b61a-45a6-8f9b-90f0b1aa2934",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035f7465-995e-4cea-9be5-c4e0aec0bcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b2ca69-24d4-4792-a341-6951b7acd8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e5c3fe-cf97-45c9-a966-86a2e9d6f9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f9afa7-2133-4c48-ab41-78c781e30c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec59f2a8-4fb6-47db-be32-0791004ad5ea",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d1cd19-b7c3-4843-928f-91887dee3d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1863102a-a128-4039-8abc-6411c85ec247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82300c56-4fc8-43f3-8c64-e31533df0194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a33c7a7-efc8-4b03-8a6d-74ef80aec885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0b61a1-d5e7-4cbc-b0b6-d48bc881d7b9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e77bd0-27b7-48f4-92ca-cc9d0aca486f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e8c4b6-b4f2-40d1-8b29-9898475d7932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d97b54-4a7e-4159-a1ab-ab45285f2ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "525bea6f-3839-4937-879f-db35965b340e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d24f316-1333-4574-90b2-9c1e9dd7a434",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb4cdb8-d361-4848-939c-74f4a03422e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563d5e91-2243-488f-b226-f725b4782d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1252cb-3be9-4fc7-97c2-290973cc8506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51330b7f-985b-4662-866a-ff461cf31fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d894d2d4-eae7-43d4-9992-f84396331fa6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3d0d86-7b67-48a6-bb33-edfdb9b9155c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a171228-58d6-461c-bab7-c96afacf44b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c860dda-3d3a-414a-a930-54134b05572c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5027d4b8-2a9a-466e-9de9-38cbe4c1f1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf680b7-32c4-4479-8264-c4bfcb5e746d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10cccb5-a36e-4ddd-8d23-4d97d341eab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10451097-a652-4d75-ae54-17236e47133b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b780a1-e5b7-4976-a9d0-866b5d286e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1234123-30ba-41e8-9854-52b75bc6e321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af5ff0d-af45-4ff3-b070-acca3a2466b3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae794d0-81f2-44fd-9344-4a0f9b3781ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa26c39-ed02-4dac-b24a-97790bc673d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d94a6f-0365-487c-8943-2253ea79026f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2ed142-3a8f-49c3-9932-c751ae4b0131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89691e2c-1352-4dca-96fc-7ff42fb9e762",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618f3f51-abd1-440f-9c0f-a85357b55d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47485e6e-5f0b-465c-935c-10ab0c64e406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc088e6a-df14-496b-a5ba-e440c9b9e561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79f6a3e8-5db0-45bd-afdc-805ee371f7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51805d83-f59f-4032-8703-5055d3f1eaa6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdfc55e-e979-4062-b97b-a218d9c670f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b918f523-35dc-4b90-a542-ffe615c373f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d08ded-fc45-4b41-b203-a6b30ec68485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eead4259-e1fd-4d7b-a48d-8e915369f8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6a0d96-d5d3-492d-8856-6ae745153f5d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995e182f-ffa0-41ad-865f-3c07ad1e8dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d22348-817f-4d04-b7ea-da9f0a18903f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7959695-8083-4aab-830b-5c3636006a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e20dfc-ebba-4aa3-9561-11a6f3cafe56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80297a2-897f-4821-976a-180b04fae76b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45be77ee-8fc0-49b1-b8d9-33b31abda9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003e5765-6f46-4536-ac88-3b186629965a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc73c845-fe42-43ce-9302-df8778c725c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da034e14-23e9-4169-bb50-a17b30036301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3309f1ae-5a0b-4602-8282-e7f97f6b883f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be7faee-46b8-4f9a-899f-204fd997ea42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee503cf0-d84b-49a5-8e31-710dcc4dc0a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deeab812-8c13-4411-93e4-e54d1e04693f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0fbd2b1-b05f-4829-95ac-b1deda7ee751"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d191f50a-9fc5-410f-9d87-e9a519a714e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca2cc2cf-efbd-440d-ba3f-38d022cba5a3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661a7e28-66aa-41b7-9fdb-f444fa0d35c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2affeb-ca54-4066-a393-d2d7cd68b212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fcaaa7-2d53-42e0-a8b3-db748c8c0c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38101c08-c6f0-4fd1-9fdd-b0e2a6aa873e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f39530f-71ed-4d3b-9e73-fc99cc302fd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f23b49b0-b3b7-4bcc-82d2-1dec9d55c7ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "462b7114-688b-4ba1-a85f-2605867eb672",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdd794a0-b21a-4f3b-909c-3be0e31db7f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e9ba8f6-1d07-42ad-8867-43fc83a2dd61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "92f78e71-d845-48e5-bd12-5cf2083f437f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91783dab-4f7c-47b4-8d99-a6e01f7a84cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f540f60-8900-4c43-812f-06989e178b5d"
            }
          }
        ]
      },
      {
        "id": "fccdb721-26aa-4bb9-8576-3a00035d8855",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cfc692fd-0d5e-4f6d-bcc0-13e578d2b673",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11c6c1e3-e96d-472e-ac8a-c14711afbb39",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "599dda52-a355-4b8f-a40e-3d1501289c28",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc2b734-0172-4b22-bd45-1522e204a597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b920531-c573-4a1a-9e5d-59833275a3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb18dff0-1513-44d9-8d6e-c45533b6b217",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e94059-8098-4aaf-9f84-eb3d58ad14f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2c5d9a-7b35-423a-a649-df28a7eff804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370d8783-f9f2-4182-9778-5f3cc7ca6220",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58786d94-216f-42c1-9578-10ec2f26c861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec0d09b-ccca-4beb-ba11-bd6225f3f51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b29f0d0-caad-45a0-bf6c-8d0ad8d4079d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b80fd2-deef-45e0-8b22-6db404a0a101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3fd339-008b-453d-9833-6f15b81ae002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf5031f-f3ba-4ef7-bcfc-ba437219d53d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8e99cd-8f12-4f3d-bd91-26f49acd4b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91401987-93e8-46af-821d-2915ddf12bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15f20e3-6658-4f2e-8ffa-f70c51b8c7f5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b7f0c9-96c3-446f-85ef-7913d21faa65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db05b570-68dc-4c29-8295-a84c6e3fdfd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61c11b9-9d01-4f60-a754-92ac004e7a36",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4eca3c-cd4e-4d8a-9ed6-a4ac68527ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84dfd3e9-a45b-468f-8b40-803615c482fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89e9150-7136-4043-bcf7-7992e8067e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78b0ba9-c2b4-4a9d-91ec-576cb784b8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f54e689-54ac-4820-a468-384daeb28088",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d124b40-e7a9-4bc1-94e5-68f90349024c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8633fb95-aac1-4517-9061-290dc8f03183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f54ab10-df58-4ff7-983c-b87af86321ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2619b4-135a-482b-bbf2-4accc8dac915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe51e12b-7f8c-4650-a576-7579991a736e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25ba879-adbe-42f9-83d0-66d8473f4b31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb5bf89-e12c-403c-9849-2fa8bcd6035d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195e3f02-0b43-4c80-bb77-758062804391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae8c385-c845-42cb-a5cc-2dc860b4f470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6256f90-0200-4fc0-8ff4-000c747def0c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2739d9-b01b-40ee-a954-98b0f5b34353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba071bd-52a6-4858-adb6-700e01d941c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3690e93-9ab0-4b83-88b1-3961505d3a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b836f0f9-245b-4d5b-a0b6-101929da9126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48272700-502b-40ae-b8e2-a904f1067248",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8f809e-a74f-49fb-8e14-ed824cd4d19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356beec3-796d-4d80-be76-8789487f15ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe0868c-09df-4a08-b6ce-3ca75a8ae916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8182256a-6b7a-421b-b310-4876dc0c516d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81bfd4f-372a-4f5b-a449-237152733265",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223c1319-8809-44ff-b3c1-0e5f6e79cbb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f173157-ebe1-4246-a701-9fbe63c62766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d35143d-c5af-480f-9ccc-7b2ade10308c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6879c739-4ad3-44a1-b7d9-57521304110c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fb9c3b-76ff-4f35-9230-fb1c1ad939b0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f88b1a7-bc40-4524-8f63-c283c24d1efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ab9807c-45bf-40d4-b8eb-e5351a515100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405e2206-b5be-44f0-b62b-a07a2fd7feec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1e9496-63f8-4264-8915-c7aee7f77db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4d5660-ec78-4e97-989c-e58bcb7ca4b9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7463c908-1cba-4826-9a27-886338ffad65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0870778d-51af-4a60-8412-aaf41f8793af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e72015-da38-42e6-bc93-d5c881b7359a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd2bb26-0085-4054-a01b-e2d079bd1a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cfb0f8-77e5-49af-9919-4888500f5171",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bf6603-0be4-4479-ba67-263cec692ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce39e9bc-9a46-48ed-95d2-677403460927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62271ee-a781-4318-ac5a-904863db82b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e78304-9603-4ff0-8d05-0d1409c67f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee10c66-a23e-4b26-b0b1-6b3dc32658fd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cbb6f2-ed51-4c3a-a8b7-9d2d7a20d5eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fadaa6db-d9b7-4a75-b1a6-7b42ba4f5a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a70ec5-8958-4349-9885-a440fce4e464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bced3e44-1b06-4906-972d-b76bb05ebd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae64cf8-21d2-4581-ae21-e270a34d878c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7760fa-2f3d-40a7-89c5-a5a35109d1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae91be2-3ab6-4420-902b-297a799c46a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "640eaf7e-d94b-46e4-985a-88113307bb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af025958-e85d-43e8-b112-abed6f66cc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1357be0-35dc-4017-a604-b165f06ae210",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811da859-4754-4087-b1f1-2916bb6feb10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c259218c-e9f9-4f8e-b6dc-7cbf1fddaf04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3db327-dfcf-44be-aa74-93939f88f94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb2b843-6dea-4bb2-a3c2-b8667fac0b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4319feb7-46df-4bf1-8c8f-81712f629117",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2922a5-7719-497b-866d-497ff16c1655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c001eba-5c97-4d19-b88d-c0056bb27b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3a3886-9e09-410a-bcd0-eea9a1eaef91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f33b82-7024-4e5b-b3e2-431e2627dea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53163487-e92a-4e8d-95ad-6a22ac7ac38f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5a6c09-4d7d-441f-b262-1d7cffc7cdaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e408209-89ef-4115-8331-ded39b8f90a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed57ce7-83fe-4f5e-863e-3c1334688063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb33262-b48e-4244-a955-5845ae2b0e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92630216-9f42-4f2c-a889-49dca1a39d19",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05570749-a688-4c1d-a72d-c7126590e95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca4e72b-680e-4136-bccd-305a0d28285e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b3f7ff-dfd5-4952-9b8e-e01fd60f503c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737b8121-92b8-4c2c-9c08-fad70deb96dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8195d9-2781-4ef8-a11f-bff7d86de3a7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b0db84-e3a0-4e31-b1f2-6f22ab7c07ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b014cd-ec9c-4c20-b985-78940f83fb0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34e45a4-4006-45aa-9449-f58e50a1828e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e71d4e-07ed-4310-922f-9aae1bbd1da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b826723e-38d5-4a84-9f77-6baa8b6e534d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d383137f-4854-40d1-a223-124a1206cb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384608b4-7ed8-4459-8ed9-fbc2deda8247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49bb687-85c2-47a5-bc07-4194dbc50b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8859b01-8aab-4c38-bb86-e032ea7cc34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e38963-a4c7-4df0-86fa-1a2f38727e24",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59e6f77-8fa9-4fbf-bded-68b9831ca8ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bf00831-eef2-4553-bc38-fe373e637935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a5ef42-ff82-4bbb-ba25-5a73063cbcac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b96c66-8621-4404-bbce-b3efec854df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7cfea2-bee8-4423-a165-9eb4be95d8da",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a80f41-dbe0-4acc-a1a0-a52e663facf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87c7ccac-2676-4641-83b9-e40fcd50e07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00140dc-5865-4b7d-85a8-792c304aaf03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d419121-dd99-46a1-a267-c3786afc0474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bee0e4-d2c5-4acc-85cd-266fc85a7c4d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6be4eb-2dc4-4a7e-99d7-b58c645ffca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76df01dd-57d9-4e06-add1-1e185bca86c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805216fb-a57e-4eb0-b280-00a6573ac67d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a49b39f-f850-4f15-9fdb-873cc0db1896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc819b4a-e27b-4a51-b5c9-d0cc574c9ec4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7420c321-77df-4315-b027-7bccd3c91bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26ababb2-32cf-4540-831a-c01106a3cf3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e68c22-648f-4a82-905f-1f7222c95b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e7b2ad-a28c-4902-ae6f-5ac398b612c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1007d56-7382-4864-ad8a-61fbd4a45f23",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f95d3a4-71c8-43ae-8ba0-b59d18c74a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64455bd6-3360-4df8-956a-b803ab63c320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ec8fab-3a9e-46fb-b244-37753edacb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5be9e1d-1985-4364-986d-f4efc80ef5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31981be2-53f0-4d54-8f33-43de2c67e47c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3b5f4b-6ae2-476b-b3c9-130af413ca00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3380f8-96d0-4035-be00-5e23640d82ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc40af1e-4872-4002-9f82-d386946c2196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d379e4f-4021-4b98-8e69-5070cc2ebf91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3552a16-3ff2-459f-a8ea-f7da6feda4eb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8389d13a-573d-43ff-8f8c-cab173f65b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78662a22-d7a7-44f3-ba3c-e36b4a2c2398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5dc374-7cad-470e-acd2-9f8e0dea152f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22459d36-6ca0-4158-a2e6-a0dbb6c830c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b710e851-5973-4246-ad12-3eafdc496a11",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed657275-b3a5-4646-b2f1-2e01b0c30650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57e76922-3dc2-4ce2-a6f2-5eb0610aa32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe07236-cb21-4a81-aa7e-551832312212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450d065a-9299-46b5-807e-e96a4dd91b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e00e9a-4134-498f-b41e-92d1355ea169",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6402db0b-da31-4aa0-b85b-a3ef11d7782e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6df9ddf6-c290-4ea6-a32f-d6d36d643065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2291a57b-6c5e-4d60-a577-c5a4f69c4e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82a25f6-4805-42a0-804e-89e6371d416e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7960b041-5c78-43dc-9630-062e4ea8efb6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9f3c38-180d-484b-8dc6-d85b2d7f09a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a3727a8-80d1-4256-8bfa-e30cd912342e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c7fddb-ec4f-4a31-9bdc-b106d1324d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ba7d58-6e07-4bbc-bbde-b66de3d76e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec50c21-e68f-4006-ada6-27853a18b4db",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8443e87-3624-4903-81d3-83fff8cc412b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "555f2b0b-a4cd-4048-925e-8d9dd2595b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93d9d50-4334-440c-ba58-3ebae8826900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583dc53f-8740-4797-a504-82264961a240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a0b373-77d2-417d-ba15-d0e69fdfaae6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732ea6a0-f0b4-4883-8a32-b33eac003bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91d0779-2313-4816-b2cb-084b1a48c6fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d8f96b-169a-43aa-a867-b3fbc7433039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8704c33-f0c1-4936-afaf-c29ef1f8c8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20480627-60da-4399-9a1b-d0174c4e91d7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262ede43-f8d3-4c9a-8e41-2cdd8400bc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfa967d-a44b-4a86-8e5a-15143f6b4d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342e04d2-956d-428e-b859-e3aaf2068284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3d34e1-330a-4982-aa4a-cdb1a639ee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c798cb4b-857e-4cda-8b67-360c0bac65b5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa60df8-8f9a-454f-b16e-060b5002c7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31053611-dddf-4a03-9e6c-41c538aa6a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3832acd-7fd9-4c23-a97e-c9dc8a5aa3cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d3a59d-c096-4b26-a392-ad1a1aa5cf4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a3e4e8-f114-4213-abd2-ac176cbe568b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5004149a-9c5b-41b6-a7a1-5f1bb55f877f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7795ac3a-26fa-4623-810e-ca08147cbcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc636993-9033-4c5f-8574-374245d15f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04297a97-5ef7-479c-9c1d-40cc1b3940d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4cd086-86a5-448e-851b-65ac0cc528c5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2321f26d-51d0-4d0a-9424-4a4622f821c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f397aaef-a77c-45ea-8065-069733408911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000e1ebe-1211-449a-8968-36e3bac62991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acee6938-5ab1-461c-97fd-06cf5ae9f94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc71302-7701-4c33-9e5b-194bd35f639c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee842ae-c6e5-4121-afe8-891399e6a920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c4625d-b57e-447a-9049-008eb5905ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3bbe2e-077f-4695-ab6a-1ddd692a8c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ccdf8d-d38a-40eb-9305-54fdb69b517d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd11b7aa-221f-4993-9946-c1dccd3a9bc2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6b23a5-9d99-41d8-bc31-2f7fcb1e3fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dff242b-7d95-4aad-820b-0d67e2e31842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99730ba5-f06c-4212-acd9-9b0bab82541d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46463c8c-ce1d-4d79-9e30-d1ffd5f6abb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819697c9-3ead-4872-9c3c-9f429e3f996c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf219a9-aac1-4321-ab92-bfa5cf35b893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4c0738-208f-4791-8cbb-9adf29b7cac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b587376-81c7-44f3-8a8b-45ddcbfa9e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae11cb8-cf4e-407d-93f2-70d5000ca63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cfe851-4c03-4589-9c1a-5d2b03906a8a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04d056d-905f-4289-82d2-bf5a5153cdb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44048c7-0ce4-4fa4-82df-1fd334a91092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedc7bee-7b8d-489c-966c-890c835bf9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c95f00e-a68d-44b6-9d50-6c74c8713a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1dcd24-da38-433a-879a-d9442336aa4a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245159ed-a0b1-4370-ba5d-1e7f8825cb3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19e2fb3-387f-4efd-b680-1168b976c9a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edd0016-35f7-43c6-8357-2eaafede4cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e430f2-d80d-4ffc-9f44-7cdd71035cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd4c097-c5fd-4cff-81c4-91b0d17cf1e5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3826e54c-4f7a-41a3-9deb-4cd5dca74b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e482b0e4-3f10-4bed-bdb1-4f7b16cb98ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3cca36-066c-4d10-955a-7d0dd4eb8c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bfa227c-5ebc-46b8-bb03-ad5e61356eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480a585a-dd14-432e-8b13-a2e18fc0307a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7a54b4-035a-4b09-b5b1-0deeb3b16ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa200449-51f8-491e-9466-3d0f3970c84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97accd1d-0a19-436f-9a22-f65a51dfc4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c411f61-4a77-4f4f-95eb-bd6edbe8e8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cad73b-d0fa-4a44-a936-82c27ffed098",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1c9926-0189-430c-9b46-b2f8eabef62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100c691d-1a3c-444b-b705-1e823da82d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9dccb0-7f5f-4ac6-97b0-da34dccde8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba0923d-6381-475b-a755-4b594b071acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77140c92-ef18-4e6a-a7a9-0e2f24cf811b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd22374f-f3f5-4cbf-8b89-bf81e32b1d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba910c0-71a5-48aa-aa45-8b04f350a225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b6b5c5-2026-4e45-9bba-487ead749e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dba78e-052a-4fe4-a68b-75831bf532c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d616c3-1a15-47b6-adb9-dc479325c103",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddfd898-5a04-4b82-a34a-23f3f91c8c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3b8363-db03-444a-9ee4-593fdd27dc53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86df50b2-46a4-4554-8264-1452945aefd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23943b27-e1a2-4839-96d7-313f682b7017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98f3f1d-01bd-4cc1-9064-f9bfcdbb6ff0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846680fa-dff5-4457-8e6c-d2ee8e752c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9106232-4d92-49c7-9046-16b5fffe086c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e55558b-2278-4cb3-9949-93a6bc5cb7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c4c66a-1805-46df-ae67-99adee03ac0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54350070-9319-479b-8615-5fed6de83878",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b50145-eed6-4914-bb77-8a4d249ad223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9963c792-fad8-48ac-94fd-e21d74c82225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9c396e-c134-4ae4-bfe1-3165ed84c99b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d80a1b9-1f3e-40be-b7cc-8ccb9f73db8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0929854-10fa-44be-a926-f75ff258431e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393b56d3-74f6-4455-bcc3-290eeaaa5354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e560655a-8351-471a-a3f4-725f1d3572c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31ca53c-1e2c-4e4a-a301-b042557283e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f990d973-2e92-447c-8b3a-9e108294fe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69617fa0-bcc8-4b39-a46b-69581cc45945",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9940040-49da-4246-bf01-0aec1f7f1cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45b8766-621b-4cf6-8bcd-391025c98b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6df8bc-814c-470f-9f5a-80011265a43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fb7598-e575-40d8-901d-fb742817befb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8b0613-2a96-4f0a-8cdf-9736634a80ce",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3597122-45a3-4e10-b9a6-cf2a0173d52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9450976-dbfd-45b8-a211-a28dab8d7a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840d9cbe-d7a6-4983-8f7f-7290e6acae45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6b870e-557f-4675-b5b3-a696bc8d7b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cd5f72-e8d3-4311-b1e8-4a5e04757f80",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9420f23c-c430-446a-811d-5bd759ec4319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a9857d-20fb-40f5-aab2-9d2a4b4944c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63554e96-40f8-4f42-a96e-08afa1cab0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e625222-0d7e-47b5-9c16-ece72bee50d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff8a993-f142-43e0-9c4b-9d571aa7a9cd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9405a3a1-dcd9-479a-a5a2-819c00f2ce7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c4e9d7-3af6-4ed2-98ea-95713c156b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b55a55-340f-419b-b4a7-2b3ef8d357ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952dbd3d-908c-440a-92b5-f8a82f2098ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404a47b0-9764-42cd-ac8b-f3cc711883f8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0b5b1e-4a95-4e42-814a-24c4cb9bd30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8178e2-0ca2-490a-b7b4-4a5ffc151243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0ca182-2cd2-4ec4-b95a-7f152cc16d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6353b0-b772-48af-9600-402485faf99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096d098f-a84d-441e-a8da-e918021397b4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0a419c-4589-4286-a80d-615fdfb2ecbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e0b995-b7a4-421d-9914-ad986594acd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ec8389-53e1-4d92-8810-544594a14f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a86a817-8f7a-4c84-8bf0-c813213e24f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ca237d-dc4b-4a1a-b01c-583b87798c82",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1228187d-8453-4e69-95bf-951287b6f810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775be3f2-fd6a-45ed-a2f6-8c96592db365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a337a412-f1f7-48de-aeee-302fed88c9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f16935-ff07-4dcd-aceb-bd5027c23bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c498f14d-e403-416a-bd0c-e2a742dc3570",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432dee76-196a-44e2-96af-ef1cea0ba89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a336a8b-ed86-4b7d-b9dc-013a0b7c16bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f99aab-6b5f-4255-861b-6f194d82aa6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae012fc9-6abd-4a35-877a-6ac26215c58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d848ed-c5d5-4e5d-a229-d360c6befe99",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d15e27c-06ac-4779-be39-3e99465d0c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ff7ab7-f5ea-4bb6-a1cf-20069f4d8fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c238afb-5254-4cd1-b37a-172a94d831d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2a1d6d-da1a-4465-8427-a109801714f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b40d409-8895-404a-a081-58d604e05025",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd7efb8-b21a-4d0f-88ef-523363397f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c784a052-c3f8-40e8-9281-cb425aef16bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef5229b-df30-4708-9977-efda4a29c371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726ea061-51c9-4a8c-ae61-6444c12028bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e683f2f3-0ba5-4ebd-b6e6-7ebacced6bbe",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9662c52b-0a2c-4583-89d9-4d54b2f7fdcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec13e80f-78c3-4f9b-b310-81b67b339151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3008f7-5b8d-49b6-bd98-460818398b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd8fd40-e945-4d89-a52e-686188a5c2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd64875d-9e7a-4f7e-ac15-7d5ae5385434",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad56538e-0ed1-47aa-bf26-66a3c12f86a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf8827cb-3e50-4b60-8693-0490e8da06bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474cfdff-1a02-49bd-898a-5939ee09461d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9712c859-3c8f-497e-a70c-16bbbf6426b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a083dd1-3535-4f05-a103-4c62d544d12a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302fae29-bd98-4a8b-866e-e861d0aece31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8de6c13f-42dc-45c7-9b11-7a3828d354a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "807cd510-d624-4e53-a210-c125f1b48dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6262d2-6eba-47b2-8cb4-d0818dc0ff83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf38796-46c3-4752-a48d-9f2b9b156e63",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8345bbc9-afec-43b6-8067-03dcccb5ac1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36981ef8-e259-45b1-9202-21269bb8a448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8855f582-c081-40bd-8bb8-838ce012afe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7a0302-e51a-449c-9222-7b03c84dc671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad047e89-41c6-495d-9b81-676f685fdbee",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4a3731-2a5b-4f07-84b1-9e6e3405c7a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1dbe9ed-4453-47c2-a190-32ec07c475a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5cebfe-7491-49c9-a0df-e02592294b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e23b1f-71e4-4190-a48c-74308a8d30ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1c5ec1-5001-431b-8b66-67c3fbe41979",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a88c4e8-a15e-4675-afd5-f973badf9473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a25d6172-f8d7-4136-8851-e7dc0a488c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e929ba-cc9c-4d08-946b-d0772ad20536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f129d68a-c0ea-46ec-8e3c-c2b0aa553190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c72ec2-904e-4562-9482-d39a14b8cf9b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a28488-6295-40d2-b75a-58e1598454bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0141fdda-60a3-4ba4-87a4-cfe4de8bc676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03872130-d636-4cce-9e26-c7f9da5fd760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c068da-4726-4507-82e1-e4b5871dd7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12e499b-76af-455a-82cb-777f78460211",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a1077d-0352-4a87-9536-29bbe83dc213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66908029-6311-4a80-8cda-14003f864a39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d2c80e-cd43-492e-81ba-a668fe6a64de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29eaac2-f124-439c-97df-578f3fc16ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6711a0f9-61d0-43f8-a2b0-d1255959e7c7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffee6592-f11d-4a85-b6f0-dc23ac7faf38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79999769-96c8-4b83-9e0b-484fd31fbc50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7b9939-2f9a-484b-ac91-a26e4242ec4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2c44f1-8733-4ba7-9c85-799aee05b96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214f9145-fe15-4b75-848a-7386c57c1d8a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7855277-c132-4d74-bf42-76d14dda93cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67d9c316-8788-4e7e-b425-b150f8d0ceae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe5ced7-2671-4407-bf7d-852fb44955c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d202fce-bcbe-406e-82e5-7e97da3022a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5048a1f0-69f7-4517-828d-6a2f2532e592",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5323b5-fc78-4436-b210-9e56c367e50c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c31e950-961f-4590-8ef0-93f824c2e3a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8074627-525d-4313-8abb-8877631b3cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553e9f8e-7680-4022-99f8-30f043fd88b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f26a57-33d9-4dab-93f9-18f26b42520d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaec188f-89cd-4784-aacb-d0eeea589841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc519d7b-5479-4da7-9002-921650724d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c27c8f2-7af6-498d-b72c-edac67f9f1bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa5c12c-b6d8-4752-818f-8446ba924624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0140d2-5659-4bee-af55-8987d99fc612",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7d9d81-60f0-4b6b-afc0-87d12a9be70a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed1046f2-3086-428b-9fc9-32c93eb6ff16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bac795-f5e5-4c07-88ee-79238c600152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43274f78-6940-4b4e-bb24-3b7ab0bcbfd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fe78f2-9ae6-4c33-8bb0-5102717d94ae",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7745db13-e282-4da1-ba8b-9068edfe7e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c30c132c-9f65-4004-912d-87915906ae1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6581ef-2482-49d1-b239-23d2b690cfe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458a0464-de2e-4163-ae5e-d7072b144391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85257da-e7df-4e40-a328-f22e68342476",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb87eb34-5a55-45c0-873a-83ee2bea554f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77623678-a48c-4865-bc21-26c81072403d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65822774-68fc-412b-9c78-1aebb5f707ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc42c8ba-a13f-4686-9ad8-8abe122d80e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f249dab9-cf65-469d-8e1a-6babff7d7378",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559f7b49-26fb-4a84-8a2e-5b14d2c0fa6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1d9aedb-5e8d-474f-a96e-1d9216d5ed87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d9aa2f-b74b-4dcb-952f-7e242c1bc40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80360b4c-7b78-4542-90fa-19bfa9369176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a631d4-03a3-431f-a5ea-7ad2822b069e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6425522-42a4-4280-a3b6-db40dd293969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc786add-cd95-4edd-92e8-52c3d781a1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06d2aa1-22c7-40e3-b479-c57f090a9cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e7a025-1770-4d30-9908-e02fc5bd553f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573948e8-fe6a-434a-a776-1553908ac6bf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a08ffd-1bf5-4c14-a728-db3cbd534923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930becdb-b91d-4090-a7aa-52ab1dfd7d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a79eb1b-8304-49cd-9d45-f4cde5a45362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2e2b0b-6229-4053-886c-c130ff40a475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b1cf8b-1631-4a80-8144-e184dfccd2fc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ae94cb-f3be-4193-8339-28cc63f1b26f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22c363bf-a604-48fc-ac6e-2f14afe47a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132cb334-dee2-4af2-8368-5b4d63b1ed67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b0b8ef-5ea2-4e25-92a0-ec82dc1a6fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c032ef6f-80fc-4899-ab0e-360372d1d36b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d3220b-7668-495c-8a0c-6b4e14144a4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942baaff-6c0c-4cfc-a863-df8d53353757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c86750c-87b9-4159-87f8-f66c2e28e1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0691643-dffc-406d-b525-abcbdcdfbd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a09869c-610d-45c5-b7c7-df72056527ee",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a2e282-4dae-4e2a-b5ec-8c56f4646110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac136cc4-a46a-481d-abc9-1f596c9b6538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf4d43f-e179-4d01-86d1-7d93a3b61a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b6e0ec-fcf1-48b5-8152-a4ea6ca1775f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e315ec92-3732-4f3f-b638-d0f98566da04",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290a4d0a-1c6a-4a75-a7df-e9b0c3d98e95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451b8808-85f4-48fb-bb6a-af02fd32f73e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1d0f5e-e7da-4076-8f6c-004694e803ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e94cf32-48ed-42a9-9128-b8db872b9a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c294d0c-9774-4e0d-beb1-15541e2a8094",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d90402-783e-43db-a06c-f020cafd8ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ef6bb3c-c70e-4b7f-9f77-37264eb07274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9602ce87-65c5-4f47-b8c0-c4d8ee8575bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3407ace-2b05-4d4f-92eb-298eee718c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ef7180-620e-4c8e-9847-1760f0db01d8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25b0418-8455-48fd-bedf-7a98678951bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f31152db-a913-4ff8-9914-ee3990c2cdae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6070b138-bcfb-4537-9280-069173aba0ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c823312-4384-4640-9459-c8ef289599ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df09313e-686b-4fd6-88fc-860b3b08b0ec",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7358b16-3d11-42b4-a0d8-64ec0b0032c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8111928-ce1c-4651-bb74-27b2927ba901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae46bfe-ebcc-4fd6-ac7e-c31be792ffd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681da9b8-2edc-466e-80d3-76e95f5d4c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa4ceae-6a52-4fa6-94e4-20c33f71ba69",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd62ba9-fa47-485d-8306-8ae52ff2e8e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "927f3c84-8730-4f58-880e-49c5c169b0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd995344-736c-4139-82a1-9cde35ddc95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c49ed7-9dff-465e-ade7-8a31c70ed09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2478ed3-0a5c-4381-8562-9ddfebae4fd9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9650ef31-4acb-480e-ab53-f84ca64430a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "978f9cdf-d71a-45e8-acd8-b1442770f453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d00bb18-a991-44db-9fdc-6b36b8c4dafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454a0171-e857-4d9d-9d3f-a4fec9d4adc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba2f2ef-3afe-4f02-9b08-afb50900b3fe",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a74cabf-dd11-42cb-9346-a119130138ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "162ed66e-4ebb-4bd6-a49d-362f9ac58904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303716ef-07b6-462b-94fc-d96390729ab7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad915fd9-da64-4eca-93c5-c16adc349505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f7bbac-154d-41be-9746-1b1fdb9c3bbf",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9365d62c-878b-4fe0-99a4-4261e1eb9f90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82186f13-51cd-4b1f-8c03-ec6294b8611f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0746da-bb7a-401d-a2f6-ed7e9223c171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bdb9d5-b0e8-42c5-af72-19037c714a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062dde26-d3b3-4da2-bd4f-5ed9ab992c8c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86370754-17f5-4c4b-990d-cdc0e5299fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "894fec29-b74b-4de1-b07c-d677cdcd2bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdf1015-7d40-4f81-b9d8-32e0b05402e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613b0ff4-0e9b-47e2-a6d9-d37b5cfc04b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507b3580-8676-44a4-89fa-611b1fcb68d2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fced8b-5e78-4600-919a-07bb388b793b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d28279a-3568-42de-8c74-66ec8709f221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30157062-a319-435b-a2fe-a1c19b1a88ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d5e8f8-c7eb-4ef7-b2c8-e6c57381598f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75195237-a3c8-48a4-92c3-b9032ac5bd6a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4d6a8e-2b64-48f1-b60a-62744bbef2dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c39c4f1-e266-4380-8fba-47bbbd5cabc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcb0190-9ebe-4964-aa82-c9ba7fbdb900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be438cb-3ed6-407d-ab13-da70bc9dcc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59702054-6814-4e3e-b440-76344845f92c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c497b38-5ab0-4cdd-8db5-c24da3b23434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba5bc54-baa7-4ed8-878e-bc2e291c6c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c220ef5-78b1-402c-8514-4a3eb20b821d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c166d75c-0e42-459f-9158-892d23f95e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e0f453-3b55-4336-b7cd-0a1c757912ba",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b209af0-ec1f-454f-a7f6-b1c83f34855f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e661af4-391e-41d0-af65-3d76e762500e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673c092f-9cb4-4ff1-bf79-b783f5a56313",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53abcc37-02e6-43ac-8a27-b56615120429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51c5d62-d11f-4867-96bb-6a10640b40b7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73541ce-d860-4c79-b653-dc08d864d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc5ca25-931d-475c-bbab-6d06f3408621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700f2219-db1d-485d-a5c7-294491370f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6272acd9-a001-4a67-a7f1-2c61a190ec28"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d00c37b-1a3f-4450-9fc9-5dc4aa460d9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da2436e4-62be-4db0-a0d3-728b4f459a2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77ef415f-1ec1-4844-a4a2-35fefa195480",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34e8e643-306f-475d-a1aa-7f1716fb0261"
                    }
                  }
                ]
              },
              {
                "id": "29b868f8-4968-4fb1-9cde-4db01d839474",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93f8765b-ff43-4ada-8c94-0c748b07f29d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93b85ac-8c53-4f59-97d4-d7bbcf26aaf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "91f86c26-ca7e-4fef-8ebb-4d3f66349ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaf9ad0-0c2a-4ce0-9ea6-7079ea9fab5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67758b4d-ea50-4149-bc07-4f6e63610bb2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79f5766e-3646-4246-b13d-420947564b30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c6b8dbf-fd3d-4de1-9d07-c41b94da1abb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec802345-3220-43d4-93ac-78529321fbe7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d68343b2-2ee1-4715-a944-cb79bacb330d"
                    }
                  }
                ]
              },
              {
                "id": "e017d4fe-6e01-4f8d-b6da-1e9f731aa9ef",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "252ff5af-eee7-481d-949d-36ab4e0a947d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232aebc6-abd5-4c29-b1f5-2cecf820f97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b59d70d2-5a8e-46bf-a311-e04525ba4f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96697b4-fee5-456d-87cb-3f7e160420bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3d4d29-772a-4d13-9c7c-2ef373b423f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "04e26850-5d9e-4b6c-9c6e-e4b847db33ca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "422961d7-9e27-467e-8bca-d1efcc319321",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e568e341-d0ad-42ec-bba0-58fe76f24664",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d10fe98e-f3eb-4152-9ca1-d4b21d3705d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0de08da-a125-4d10-aff5-8132145e413c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cb1407a-1016-4830-8ad7-8bfb1834555d"
                    }
                  }
                ]
              },
              {
                "id": "9f9dacec-bbbe-468f-b6f5-2c23399afff8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d293afe8-c220-42af-bb56-085b87a99643",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "33c902c1-8def-419c-91a8-91bad334153d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcc2bbdc-f864-4fd8-b921-3f45492881d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a109d114-b6c7-4df5-885d-8c507fcb6f07"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b5521bd-1352-40a4-81da-d9698a177a48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "94ce55d2-cfb2-4b44-b27d-90402d7eb869"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49805b8c-66af-4c03-bd1d-b6a932976b9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1911ed40-9eca-4e6c-953f-37f3fe62285d"
            }
          }
        ]
      },
      {
        "id": "808f39bd-4812-4819-91c2-d8dd2bfd973c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cec8c12d-e2ac-4600-9592-d62dd33fb41e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46b64d21-014a-4a0e-a427-aaab865e978d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c86607b-d960-41cc-9e66-e9920a8ec73e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526c6bcf-9a5a-45ab-ab81-9b925203f4cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "07f1b432-75c8-46cb-8910-c0ce43438002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b838b459-27e3-4883-9322-5bd825c3fe59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd1bcec8-f9f2-46e6-8613-617c5ae363d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7deb821-394d-4512-b1bd-a132ed490440",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ef3a6df-9d0b-483c-ae08-becbac7400fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5be621c-d721-4f51-92b7-e7ddbf89ba05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8125ed21-bfa7-470d-8ef3-96118c425769"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14615c2e-3105-4513-9635-e0c80bfffa8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9699ce14-e664-459e-9c3e-444d577c6662"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44fe6453-a806-4ca9-a100-a676540c86d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7f90a5b-9a04-4f38-822f-ab11241500a1"
            }
          }
        ]
      },
      {
        "id": "935b68dd-5975-4ccd-a83b-7018cb5a16bc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "012f3b77-46bf-4a0c-b8c8-e053461667cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c20f5a0-4550-4dff-8cab-3d441027f1fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18bfde90-2604-4884-ace1-e15099986a98",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62e5b53-f29e-4aa1-a6f6-98417260f822",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a137da15-a5ee-4566-a976-3fec9c8d83ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c637d649-dac0-45f0-8a84-3da7a11affc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05e9b44d-53d5-4464-aa1c-82efd9c3282e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60ca9563-7f0e-4c34-a84b-02f0b691b735",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6870d98e-7b7b-4d64-98bd-fb897b8eb733"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af3bd282-dee1-47c2-9eb3-037cb3ea22d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e74ac007-06d3-4b29-8695-cf0812e78594"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97287dd1-fefe-4c99-9bb5-cf2045454833",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3681a085-0ead-40cd-9860-5141f26dc9de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e5a273d-2614-4de3-8352-636106e8fe6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55e4b583-19a4-4a4e-b0e5-bf3895c59c09"
            }
          }
        ]
      },
      {
        "id": "ff958466-e26d-48a7-8f1e-a5cef0d96984",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "22588ec9-a2a8-4242-ad51-db23319028c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd2e072b-258f-4cf2-b8af-939acd610cbc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7d5e5b8-9098-484b-a0a0-e7eb14e41e58",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77aa43f2-d25e-4527-b805-6b8a9b972cc4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a610082-41ef-4fb8-bd40-799242bce7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d752f77-1cf5-4bf8-8a3c-75f114a10eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57e6a657-8ebb-4526-90e8-49c6a8cb2b82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f240edf7-602b-4cd9-9fe0-196e22e0be3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e25e6bf-b7d0-4cbd-a8e8-6dde0f4debdf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4e7b11c-29d3-4149-ad1b-43a97ed2ed56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b28739ac-497d-4cd2-abba-81b4721b5b9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d39903b0-7d86-4160-afe4-f9819663bf7e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5e270ceb-d9d1-4071-adaf-da1aa36d4851"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b2550f2-825d-46fa-a8b8-b4081710647f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d19787a-8e5c-455d-8d0e-54cb9a6aca20"
            }
          }
        ]
      },
      {
        "id": "1447a719-6de2-4df2-af48-483103702ecf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4516fe2a-0560-445f-8c75-86cb602c39cc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fb80904-3fa3-443c-a765-a0f109f45157",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "513f5229-7d04-46e8-90c4-8488607f4ce0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "370a449c-9dad-4472-b4b9-66f1ce4283d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cbfc5fa-70ba-47f8-b61c-8941fcf007d9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 122.0771929824562,
      "responseMin": 5,
      "responseMax": 705,
      "responseSd": 73.60802544332044,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700354304279,
      "completed": 1700354348708
    },
    "executions": [
      {
        "id": "93e077be-775f-4bfa-96de-41822aaad57f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2384607d-f0f5-4e62-9f11-2066f72f1cd4",
          "httpRequestId": "e3699e00-088c-4d6f-a63a-df4fb7eeb9ad"
        },
        "item": {
          "id": "93e077be-775f-4bfa-96de-41822aaad57f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9ba19437-13e1-4c46-8bc2-5e73d46fff16",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "cc9561ce-73ab-4957-aad0-747a1885424d",
        "cursor": {
          "ref": "122549bf-c9c5-4001-b2e3-7001db573945",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "52426b30-d868-45f2-a397-4f2fc5bdeed3"
        },
        "item": {
          "id": "cc9561ce-73ab-4957-aad0-747a1885424d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5290de89-e877-4aee-9b14-8d971d4ee987",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "b9f2e2a5-b8c5-4052-b3be-9dc86d7b4bf5",
        "cursor": {
          "ref": "955d9d55-e25f-4991-89df-6434caa695b3",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "77002bfc-5b95-4bf3-ba95-c60201a4d5da"
        },
        "item": {
          "id": "b9f2e2a5-b8c5-4052-b3be-9dc86d7b4bf5",
          "name": "did_json"
        },
        "response": {
          "id": "dacc66f7-5249-4c95-b9c0-e67e8546d8fe",
          "status": "OK",
          "code": 200,
          "responseTime": 334,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8fd10c-34ab-4da3-b51f-a6cb0bdb24fc",
        "cursor": {
          "ref": "c50a5964-4440-49ab-8b04-91cf8438c687",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "435154bc-0929-4e15-822e-a35c183e2de9"
        },
        "item": {
          "id": "9c8fd10c-34ab-4da3-b51f-a6cb0bdb24fc",
          "name": "did:invalid"
        },
        "response": {
          "id": "bac4370e-b70a-4670-8697-665e7092519b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8fd10c-34ab-4da3-b51f-a6cb0bdb24fc",
        "cursor": {
          "ref": "c50a5964-4440-49ab-8b04-91cf8438c687",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "435154bc-0929-4e15-822e-a35c183e2de9"
        },
        "item": {
          "id": "9c8fd10c-34ab-4da3-b51f-a6cb0bdb24fc",
          "name": "did:invalid"
        },
        "response": {
          "id": "bac4370e-b70a-4670-8697-665e7092519b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43599706-3a69-49ce-ac07-5084712af1f1",
        "cursor": {
          "ref": "bee508d6-3aea-44cd-93d4-ed6da577d0ea",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1f2b6e0e-ec49-44dc-9480-f0e935d20ce2"
        },
        "item": {
          "id": "43599706-3a69-49ce-ac07-5084712af1f1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "13b35ee1-653e-491f-b70d-3aa81d09989d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 147,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d55dfa0-38cf-4a9d-b07d-d7bc4bedff52",
        "cursor": {
          "ref": "c6c2b267-a7d3-4933-842c-71101c44b8b0",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c89ec4e1-458f-4270-bd8b-03f0babb5e1e"
        },
        "item": {
          "id": "5d55dfa0-38cf-4a9d-b07d-d7bc4bedff52",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7feb448c-993a-461d-b334-8e55e5b2efe5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 101,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cccd639-0680-41e3-9b0a-7633fa6ba004",
        "cursor": {
          "ref": "370b6fd8-d062-4126-bf9e-899dfdc69b37",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "da1af68c-36d3-480f-bf8a-c263562b6815"
        },
        "item": {
          "id": "8cccd639-0680-41e3-9b0a-7633fa6ba004",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "74a12faa-18cd-4d71-b0ca-e76723234aa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d833ebc-f945-413c-9753-5a2bddd56f4f",
        "cursor": {
          "ref": "41299514-3e0c-43a5-be9a-6432cb53bc05",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a11632fd-0092-4d13-be75-c8a8a8ed62b7"
        },
        "item": {
          "id": "3d833ebc-f945-413c-9753-5a2bddd56f4f",
          "name": "identifiers"
        },
        "response": {
          "id": "bcea2147-ba46-45d2-bbe5-38878ba9fbe5",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae88081-26dc-4e06-908a-21ed32cebb0d",
        "cursor": {
          "ref": "45bb1aef-e21b-4fa6-960d-0f7b1c41beed",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "49bd0152-ae6c-4f42-a927-5ad205dcbf49"
        },
        "item": {
          "id": "5ae88081-26dc-4e06-908a-21ed32cebb0d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fd8dca60-69b8-427b-9a60-d7934ad03199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd0f071-6abb-4108-97b5-6a44bef1f5a6",
        "cursor": {
          "ref": "86cf27f9-b426-4fc2-b060-bb9701c12c1a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "49d5283a-6ad6-4b87-8d55-b433fe62f238"
        },
        "item": {
          "id": "cbd0f071-6abb-4108-97b5-6a44bef1f5a6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "72fb9e1e-e98f-49ab-a6fa-f87d9962412c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d9cecc-7518-4a8c-a6c9-7782bb06ceb9",
        "cursor": {
          "ref": "54df7f33-f032-46a0-8702-7300abb60053",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5a12969b-7f5e-42f2-9cc9-cfdd21c24ccc"
        },
        "item": {
          "id": "24d9cecc-7518-4a8c-a6c9-7782bb06ceb9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eeed9a72-7fda-4960-a0fa-b09f48537b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c679bf67-b415-439b-b2ae-6ad17ace3f7e",
        "cursor": {
          "ref": "3396e833-8815-4789-96b7-eb55bf0bc3c4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e89565e5-e597-45ef-9af9-79042bf1fc4b"
        },
        "item": {
          "id": "c679bf67-b415-439b-b2ae-6ad17ace3f7e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "df10d94c-6e5d-44b4-be8f-bafe6c049aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0a40de-eadc-4c15-ba12-0282697b86f4",
        "cursor": {
          "ref": "2b17f4f4-6593-46bd-8985-15a1e8090601",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7f9173c8-15dc-4c6f-ad95-90b5cdd8270d"
        },
        "item": {
          "id": "3e0a40de-eadc-4c15-ba12-0282697b86f4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "324901ed-b1f2-48eb-b109-5f9360084d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061e0d87-33f2-4852-8645-1fbb1a11a357",
        "cursor": {
          "ref": "52ccd0d3-dce4-4523-a379-313063280e21",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "60a37db3-444d-47ae-af97-3edbcaeb0128"
        },
        "item": {
          "id": "061e0d87-33f2-4852-8645-1fbb1a11a357",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8d72e366-280a-448f-bc79-3a6dbdf394ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0309f29-359a-4a85-b1fc-b51b12f01b0e",
        "cursor": {
          "ref": "4b7cc84f-9d8f-4a81-bafa-809ae17af8e6",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d7989b0e-a482-41fe-8ba7-f516cc5de7dc"
        },
        "item": {
          "id": "c0309f29-359a-4a85-b1fc-b51b12f01b0e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "789661bd-5b7d-4f73-86da-538ef3da1e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784b203d-525a-47c6-bc8d-813948533fd6",
        "cursor": {
          "ref": "336b65ff-4a44-421e-8ccb-d9db282d7ca8",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a73bfe38-a64d-496f-bc55-94b9471626b1"
        },
        "item": {
          "id": "784b203d-525a-47c6-bc8d-813948533fd6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3e328634-683d-4db6-b8e4-eef6e063af68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac55a92e-c28d-4b3c-9339-dedb749b17a2",
        "cursor": {
          "ref": "18a54e46-fc5f-47dc-8bbd-85d04eccc16d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6448d292-3370-4fbf-82a1-6c7bd2cec28d"
        },
        "item": {
          "id": "ac55a92e-c28d-4b3c-9339-dedb749b17a2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "77940190-ef31-413d-bc55-f79c68084333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056ff011-20f0-4100-8c89-301174a32efb",
        "cursor": {
          "ref": "630b9285-534e-4a5c-9f4d-8c0bbaf3beb1",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f4049bb6-4bba-4ef7-a1fa-89e744794962"
        },
        "item": {
          "id": "056ff011-20f0-4100-8c89-301174a32efb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7c8db07d-69a3-4dbb-884f-8570336503d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a2998f-19ba-4da3-b2db-0ab6a98312da",
        "cursor": {
          "ref": "26a8bf2d-8ff0-4059-af04-864176a6e4ca",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b3506080-e6f3-4918-b1f6-d2d9a6af16d6"
        },
        "item": {
          "id": "a0a2998f-19ba-4da3-b2db-0ab6a98312da",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "96ffa658-e54e-4499-b5fe-c0e340dc9a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7390baf-f325-409f-913e-0f8589fc223e",
        "cursor": {
          "ref": "df2a616a-5306-456b-8e00-018a737eca91",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6a8157a2-451c-4f9b-8d27-82888b791800"
        },
        "item": {
          "id": "e7390baf-f325-409f-913e-0f8589fc223e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ccddc807-d4b9-486d-8572-e2d9bacaa9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b7bc0d-74b8-4d8b-8865-7fa3078dc2ba",
        "cursor": {
          "ref": "a575d3bc-8b50-45f7-979d-d4b1942f8ecf",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b6f102f0-6449-4d81-a642-cf1a507d7f6e"
        },
        "item": {
          "id": "89b7bc0d-74b8-4d8b-8865-7fa3078dc2ba",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "75d830ea-f9ce-4967-bc69-948fef07aec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2e746a-dc57-4947-952e-8f38919e7d94",
        "cursor": {
          "ref": "8645617d-b7c5-4dda-970e-1f53831c05fc",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a488de28-537a-4e19-868d-853687c0c8dc"
        },
        "item": {
          "id": "bd2e746a-dc57-4947-952e-8f38919e7d94",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "07d58136-e990-4396-84c1-2cce0173f9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d694b6-55f9-4ba9-81f8-3dd8a8ee5839",
        "cursor": {
          "ref": "dad73edd-54fa-421b-a75f-4087dd8edd03",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2c6d68f3-e893-43c2-9fb1-c9a83aa9c8d2"
        },
        "item": {
          "id": "c9d694b6-55f9-4ba9-81f8-3dd8a8ee5839",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "479031e1-33e0-412e-9d5f-c7c52d89b3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d32b266-863f-4bdb-a571-5fab8faacf44",
        "cursor": {
          "ref": "aed9d441-8bfa-4a0f-83ad-9016a21b3353",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "123c371a-b42f-4f83-a1e1-66cfbee47504"
        },
        "item": {
          "id": "5d32b266-863f-4bdb-a571-5fab8faacf44",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5cee14fd-0082-4ecf-ba26-eae45800cafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17086a65-204d-4512-83d9-20e082f56217",
        "cursor": {
          "ref": "71aaefcb-df7a-4191-b225-49d69e7b79a0",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "126ad818-88b6-465e-a244-543bb06ec10b"
        },
        "item": {
          "id": "17086a65-204d-4512-83d9-20e082f56217",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "de9b7df0-2e2c-4971-b3de-456efd141783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e058f7-936a-4747-b6ec-d6814286963d",
        "cursor": {
          "ref": "88c0d295-4e88-422a-82af-da099b9daebb",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "240193bf-6d93-4302-adcf-658a181dc4ef"
        },
        "item": {
          "id": "22e058f7-936a-4747-b6ec-d6814286963d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "52525d3b-f3f1-41a6-90ff-da3bfc5847a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc37ebd-1c32-4ce4-9a7e-7ab689a4e401",
        "cursor": {
          "ref": "611cfed8-5ed3-48c0-95ca-eaaa5ce2e99a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8a74c012-ec04-48c6-874e-14fb9c4095c2"
        },
        "item": {
          "id": "3dc37ebd-1c32-4ce4-9a7e-7ab689a4e401",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "57e24c29-c1c9-4e3e-a925-bdf06edcf529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336d0e63-d80c-4d48-82de-c01b0ed6957f",
        "cursor": {
          "ref": "36c1a51e-b4cd-41c8-9953-2eda345741bb",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7dfee5d8-2189-458b-926f-e90090160391"
        },
        "item": {
          "id": "336d0e63-d80c-4d48-82de-c01b0ed6957f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d609ec76-b19b-4da2-b975-0c969a5d524a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e07100-bb40-46fe-8b4f-fd648c2ab4a5",
        "cursor": {
          "ref": "53d51e87-0d14-44fc-abbd-edfae2f8351b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "43d1debe-278b-4f66-8fd7-af1b8592869d"
        },
        "item": {
          "id": "d3e07100-bb40-46fe-8b4f-fd648c2ab4a5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ae239fa9-1901-4530-9672-e4a063545456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4d51ee-1f0a-4a88-ad36-a169cfb47630",
        "cursor": {
          "ref": "4e2b05a6-ad8f-4401-a172-4461eb48f657",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c7340b13-d182-4208-9b86-e49c6c5b2672"
        },
        "item": {
          "id": "6a4d51ee-1f0a-4a88-ad36-a169cfb47630",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "561f704e-3c6c-45a6-8097-9c0e0afb6475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59530673-8841-41b3-a9a3-735eb8e4a641",
        "cursor": {
          "ref": "76535279-8f88-435f-9a7b-730431bc390e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0cddbb90-cfe1-477c-b555-40b74e82a4bb"
        },
        "item": {
          "id": "59530673-8841-41b3-a9a3-735eb8e4a641",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fa5bbaa1-804d-41d7-8fde-1f085d5970ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f1d01d-7273-4478-9065-92bd287078ac",
        "cursor": {
          "ref": "e30a574b-d92d-4b60-a782-4b2ff4afae5e",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c6466853-f220-414a-83ca-b9e489395827"
        },
        "item": {
          "id": "f5f1d01d-7273-4478-9065-92bd287078ac",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "68ced7b3-a3a4-44df-a776-a30dde5a8806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b1662b-03ff-494d-aaa4-0585e3b4cf13",
        "cursor": {
          "ref": "6082ff06-8a65-4946-8ff0-c67d77d79a72",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "05a364fc-d148-4498-94da-8adfbc55a084"
        },
        "item": {
          "id": "66b1662b-03ff-494d-aaa4-0585e3b4cf13",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0ac7cc9c-d74e-4656-a2f3-3a7398192221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1959baff-92c3-4d94-a633-fabd04a10863",
        "cursor": {
          "ref": "da9cb143-124c-48c1-b78e-c0ca92efffc8",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "665b6cbf-d66b-4d7f-a0b7-345076ddc372"
        },
        "item": {
          "id": "1959baff-92c3-4d94-a633-fabd04a10863",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5a0932ac-c341-4971-b0e0-d7f3958a4d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7012ecd6-6113-4079-acfd-ee5aa2f4f91b",
        "cursor": {
          "ref": "c8d13146-70b0-40b4-8461-aae65e5150d2",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aa46d138-ffff-436a-9fef-ee14eea15ea1"
        },
        "item": {
          "id": "7012ecd6-6113-4079-acfd-ee5aa2f4f91b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "266a9d94-b552-4c4d-be0e-4ccce4069ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69e0def-1a9b-4d85-ac79-a116dfa4541f",
        "cursor": {
          "ref": "06c4b01c-c9b8-42ae-be3e-52bebf063b54",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a28e19ca-1cef-4a58-98a6-b99af70bf5f6"
        },
        "item": {
          "id": "e69e0def-1a9b-4d85-ac79-a116dfa4541f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dbcfa839-65e9-4b65-a2e0-ec748a0c729d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842f7561-3f02-483d-972a-da5de7b188c3",
        "cursor": {
          "ref": "91d1cf0e-3f85-469a-8396-623e7532e41f",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9efeaa41-af90-41d3-9af5-daaa2a39c94f"
        },
        "item": {
          "id": "842f7561-3f02-483d-972a-da5de7b188c3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9ad54126-b89a-4120-b6c2-6c69eeca0248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfaa601-e138-47f1-a510-aeb692a16d6b",
        "cursor": {
          "ref": "df11449c-723f-49bd-8931-c2f38d02b035",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "16b33a9b-cb35-487b-9578-5beee101da48"
        },
        "item": {
          "id": "0cfaa601-e138-47f1-a510-aeb692a16d6b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "27ab43ce-db51-413e-84ca-e77100ce3c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b8bdc7-4503-43b6-811c-516fa856bdc0",
        "cursor": {
          "ref": "8e21cc77-05fc-467c-99e7-e4e0dbd2f664",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b22d6192-0e80-474e-8b42-484fc81f8cfe"
        },
        "item": {
          "id": "c4b8bdc7-4503-43b6-811c-516fa856bdc0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "13fa5e97-3052-47c0-a303-41f6f8cb8195",
          "status": "Created",
          "code": 201,
          "responseTime": 705,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b1a27422-1f9b-4965-adcb-b75eabac9b11",
        "cursor": {
          "ref": "276fb8b9-5e2e-40be-841b-c7aaf8945a32",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5a447938-5d71-4969-b33b-1c3c093d3a43"
        },
        "item": {
          "id": "b1a27422-1f9b-4965-adcb-b75eabac9b11",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "939301e3-8c49-419a-8806-353129a66139",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2d528f0e-ef7f-4758-87e5-065446e4d70f",
        "cursor": {
          "ref": "c1318269-c27d-4150-8c41-72c9e3968fe1",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7b32cf37-8485-4521-b9e1-0a9e26f738af"
        },
        "item": {
          "id": "2d528f0e-ef7f-4758-87e5-065446e4d70f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "06132840-7b3c-4fd9-bcc6-7238afcef407",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c8bcaf6d-a168-41ed-86fc-b7a6e6e710ba",
        "cursor": {
          "ref": "997afd2a-a307-4758-b207-9e2e177a313d",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "04473115-c568-4e6d-aa7f-a11b0b8dc566"
        },
        "item": {
          "id": "c8bcaf6d-a168-41ed-86fc-b7a6e6e710ba",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "512e95f7-bd9b-4376-a23c-d95e577c1c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6e3945-f513-434a-b1cb-bf6e798a5db7",
        "cursor": {
          "ref": "a4937c14-c9ed-4123-95f8-a60d7ab9fbfa",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d5d454fa-b553-45db-a18a-0451c0d025e6"
        },
        "item": {
          "id": "0c6e3945-f513-434a-b1cb-bf6e798a5db7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e0f3973d-d889-4310-aeb0-5d2f2981e5b7",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c3807833-6ff6-4dcd-aeb0-a6a910820faa",
        "cursor": {
          "ref": "5be264c3-741b-407a-95f7-ce8393ee9ec3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "802d7e1e-e2f5-4180-b035-5588b1903b20"
        },
        "item": {
          "id": "c3807833-6ff6-4dcd-aeb0-a6a910820faa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "53d35133-1fbb-491b-a172-f13bc41058a2",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "afb984b2-b923-4ea5-8c8e-b1e09f88e46f",
        "cursor": {
          "ref": "7805083b-fa0d-4d3b-a75a-a82fdd699f65",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "95bb6844-4453-4e28-9313-4a227332aedd"
        },
        "item": {
          "id": "afb984b2-b923-4ea5-8c8e-b1e09f88e46f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4b795d8f-fc20-4759-a600-0159d06860fd",
          "status": "Created",
          "code": 201,
          "responseTime": 506,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "518c1cf7-fd7d-4df4-b4aa-b7d6d4ec539b",
        "cursor": {
          "ref": "c4f8d4d3-be9e-40d5-8cd1-4ab0f585bae4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f5aa6a45-d1f1-4d08-886b-8bcbe1904776"
        },
        "item": {
          "id": "518c1cf7-fd7d-4df4-b4aa-b7d6d4ec539b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "34882118-c822-42ad-b5c0-d379bff5d715",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "83745125-61ad-401a-8494-3b4d94c912be",
        "cursor": {
          "ref": "97c3a868-8355-43f5-bb03-a06af9a0f252",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a4fdbca6-b58a-44a2-a0b0-a2e560d65089"
        },
        "item": {
          "id": "83745125-61ad-401a-8494-3b4d94c912be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fb6eecad-6681-44e3-b89f-f960af25f86c",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "29c909c6-4316-4388-8e7c-09f028fa6eb2",
        "cursor": {
          "ref": "fff57172-c521-4114-ba22-68e209388ace",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8a3cac8f-2c1c-47c9-abc3-db012ab82d20"
        },
        "item": {
          "id": "29c909c6-4316-4388-8e7c-09f028fa6eb2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "aa96f3d0-fbe9-41a8-ad7d-4609a94c05bd",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "aefa94b6-a8db-4ce7-ab63-cb4db45c7a15",
        "cursor": {
          "ref": "7ee34a3d-dcc0-454a-8f9c-4fa9b179bf3f",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "35f02061-e1e6-4d69-9a02-cea4b9c395ee"
        },
        "item": {
          "id": "aefa94b6-a8db-4ce7-ab63-cb4db45c7a15",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6982c464-f729-4288-916a-c021fdb6b26d",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a512d6b4-cf09-4641-b7de-04711e3c0245",
        "cursor": {
          "ref": "bc8d33b0-94e6-4735-a54f-56027f6b12d9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cc478415-1ec5-4bda-9152-80d4d17b081e"
        },
        "item": {
          "id": "a512d6b4-cf09-4641-b7de-04711e3c0245",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "83f9bf1b-061f-4fc8-842e-53b3c05173f6",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "55d8f9e6-5c58-4164-b143-3bc315616448",
        "cursor": {
          "ref": "d055d8f8-d621-41ab-9645-f8f0271c6415",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ed38e74c-9f1a-4829-9111-a0b222418441"
        },
        "item": {
          "id": "55d8f9e6-5c58-4164-b143-3bc315616448",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "437e0d78-e11a-42bb-b524-4d22c1fedcff",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1c1e1028-4e46-4f64-8576-1e0fa2328fb5",
        "cursor": {
          "ref": "7b3a5fce-5c06-41bb-a00a-8c8e2cfe6b32",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b7578519-d2b7-4867-98ac-f43341226aff"
        },
        "item": {
          "id": "1c1e1028-4e46-4f64-8576-1e0fa2328fb5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "96d78a3e-5ac6-4e37-a575-0bb6dec98acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5135001c-e687-4474-875d-02176ac6fbad",
        "cursor": {
          "ref": "b76537fc-93b1-4ca4-a85e-a07f7927c2f1",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "421f2b64-7448-4476-a562-a17725d0b446"
        },
        "item": {
          "id": "5135001c-e687-4474-875d-02176ac6fbad",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "64fbab53-c5f7-4b5b-acb0-609368eb6437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a3d2cf-0e6b-480c-85b6-d409ccec7bb9",
        "cursor": {
          "ref": "355a82a0-3c5a-48fb-b2a5-18f55ae20251",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "437c267a-c23b-4a31-b5de-dff0d6e68394"
        },
        "item": {
          "id": "31a3d2cf-0e6b-480c-85b6-d409ccec7bb9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b2685f12-fff9-482c-accb-0b3ef6dfa9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd07f53-72ca-4734-a301-70f06f37c12c",
        "cursor": {
          "ref": "0299156b-4f95-49fc-ad03-8eec0c258f23",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d3124ecc-3110-4832-966a-05343a97dba2"
        },
        "item": {
          "id": "bbd07f53-72ca-4734-a301-70f06f37c12c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f5fff7ed-a334-4b8b-aa33-7f9efae8e88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d96a231-afe6-456c-af6b-0b6c91cfc852",
        "cursor": {
          "ref": "ff0ad1db-a57d-4bfa-b7ea-24b01dca6c63",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f5fd576d-ab2b-4448-a348-c140923942c3"
        },
        "item": {
          "id": "2d96a231-afe6-456c-af6b-0b6c91cfc852",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "aaed3e13-9d90-4894-9ea7-edc9ef78fdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2427dc15-aaa4-40f0-b24f-e132f2663c94",
        "cursor": {
          "ref": "e0a85b41-c75a-4d3d-b262-b5b208ebcbf5",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cb025592-08fa-459f-8727-1258b4a5958f"
        },
        "item": {
          "id": "2427dc15-aaa4-40f0-b24f-e132f2663c94",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "da936689-e90b-4527-8df9-08620c3687bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6547c7a5-8f29-4a9a-85b6-15dee38ca265",
        "cursor": {
          "ref": "39c88695-e7ed-498f-ae6e-b17634bfb633",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "eed633aa-06e3-41b8-b087-ea4236445b57"
        },
        "item": {
          "id": "6547c7a5-8f29-4a9a-85b6-15dee38ca265",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2ff57fc4-3714-4714-a4a3-e574a6c5582b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9e2f0e-b596-460f-a7d3-5a99d7ce7c4d",
        "cursor": {
          "ref": "ab92cd4e-080e-4544-b0ff-ac7c1459aaea",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b4d4ae3c-dda9-4e45-989a-079e394228af"
        },
        "item": {
          "id": "ab9e2f0e-b596-460f-a7d3-5a99d7ce7c4d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b74350b3-e5d2-45d8-aaeb-914abca504af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064288f3-6387-4311-8e4e-228b37439f97",
        "cursor": {
          "ref": "4885fb66-b709-47d4-8d12-6ad3e90b3fba",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a1180091-65ca-48c5-8c54-39b4aa4374b3"
        },
        "item": {
          "id": "064288f3-6387-4311-8e4e-228b37439f97",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "80dee033-d494-4feb-adde-69712de65739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc80c525-feee-4ba3-809d-3bc7a12c38e4",
        "cursor": {
          "ref": "daa58733-8e15-4c3b-8f07-5a9c59fd6a55",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e34529d5-10c5-4953-98a5-5e741d9e2f96"
        },
        "item": {
          "id": "dc80c525-feee-4ba3-809d-3bc7a12c38e4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4eb3c6d2-af6c-42da-9b63-4019a0810f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4813944-c1f8-4ea2-97b9-e918389eff68",
        "cursor": {
          "ref": "1425c0a0-8250-45b9-b0f4-9ab2d4850697",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "04029b31-7037-4018-a618-1e1876b5ecaf"
        },
        "item": {
          "id": "a4813944-c1f8-4ea2-97b9-e918389eff68",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d9a5ea8e-4af8-4928-baae-891b2fba3fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767c0f97-1ce7-4008-b633-d5ec689f290b",
        "cursor": {
          "ref": "1f3a7780-6e9e-4cb2-8249-5a4ccb0ffbcf",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cd3eaab5-0d1b-4abe-b675-80a4cc93c586"
        },
        "item": {
          "id": "767c0f97-1ce7-4008-b633-d5ec689f290b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c139feda-0c2e-4415-bc26-c24fda6b05fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8246a310-5c79-40df-950f-ac5b7563cd1c",
        "cursor": {
          "ref": "50d7198b-eb26-41b1-8abb-baa28ee33a08",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "551a83d5-2cac-473e-8ae0-25cd7452f2eb"
        },
        "item": {
          "id": "8246a310-5c79-40df-950f-ac5b7563cd1c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "361deb25-04a7-45cd-ac4d-99786ef9eeb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a11cdd5-c5d7-4213-a59a-4b61ae3f6e72",
        "cursor": {
          "ref": "ae7f5acf-900f-4b59-bd87-31387ccb394b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4b2e6d32-abaf-44e7-b3dd-d3f4b925dd47"
        },
        "item": {
          "id": "7a11cdd5-c5d7-4213-a59a-4b61ae3f6e72",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0a5b0045-078f-45f8-b149-2d2d8fcf26c8",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e34c7cc3-f103-4c50-af39-5e268dd2a9bb",
        "cursor": {
          "ref": "3a13b5ef-49eb-4757-b4a1-2d44f30b0a46",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "61a735b4-2227-4bc5-b6bc-a71bac447b4e"
        },
        "item": {
          "id": "e34c7cc3-f103-4c50-af39-5e268dd2a9bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2d7eaddf-d9e5-41de-84fb-01d2a1f2b104",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4062de14-e2b3-4e9e-a84b-57d10ce82180",
        "cursor": {
          "ref": "e3877fbe-2e14-4a7e-9be6-130585b35e07",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ed1fa3a3-9b53-4237-bea7-d8682f454ee9"
        },
        "item": {
          "id": "4062de14-e2b3-4e9e-a84b-57d10ce82180",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "07b07f3a-3eb6-4839-ac31-4b4ab118af2b",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b3db8baf-e2c8-4071-acb0-48da6b2188bf",
        "cursor": {
          "ref": "695231e8-24fa-460a-a8c1-60869bdfbf0f",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "13b6a4bf-4ae7-4984-883b-7aa3a42eaed2"
        },
        "item": {
          "id": "b3db8baf-e2c8-4071-acb0-48da6b2188bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f75c3ee1-45c1-46ad-8a4e-e2b1502e342a",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "68daaf41-08af-4a87-9e63-519affcd4b43",
        "cursor": {
          "ref": "372fbb59-4791-4c9b-bc9f-356e550ca5e2",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "64d0b5e2-0052-4656-8eb6-10b139a7c92e"
        },
        "item": {
          "id": "68daaf41-08af-4a87-9e63-519affcd4b43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "969151f7-0a7a-482c-8260-28611b2af961",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5f238ac3-bb10-474b-ac63-a2cdfbb0d011",
        "cursor": {
          "ref": "896f194c-6f87-4740-bbfe-5f7d62323cc5",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d529ae79-acc5-4e59-9d14-6e848bf6ce55"
        },
        "item": {
          "id": "5f238ac3-bb10-474b-ac63-a2cdfbb0d011",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "449a35fa-9a08-4bc1-9907-f5a5a6b69bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a46e11-e67c-40be-9c84-6e54cb1ea976",
        "cursor": {
          "ref": "b2b0261c-8f90-490f-b89d-1a7dbf24f99c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "648eff37-777d-47c4-9239-c3cce6d03c92"
        },
        "item": {
          "id": "13a46e11-e67c-40be-9c84-6e54cb1ea976",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "896dbea0-65e3-4675-acf8-918b625bec0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ebb667-3db6-43b6-840c-9b777f3b2e02",
        "cursor": {
          "ref": "ece1569a-95b4-49fc-a47f-5a0be3be2641",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7869c68-30a1-4742-a846-e79c3bbb7398"
        },
        "item": {
          "id": "01ebb667-3db6-43b6-840c-9b777f3b2e02",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "488f5ee8-9c8a-44f3-b59f-0124f339cad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95152fd-1050-4114-bf50-33a4585c69f8",
        "cursor": {
          "ref": "c7aa44ad-5af5-4761-b14b-4e9cfd62fbbc",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dde4951c-5432-440a-b832-ecc488076776"
        },
        "item": {
          "id": "a95152fd-1050-4114-bf50-33a4585c69f8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1acc483d-bdeb-4ab1-b702-34ff7bb3c8cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214e5cca-9de8-4dfe-b2e0-e9b021d9a605",
        "cursor": {
          "ref": "cab14c49-8638-4830-b8c6-912d6ed08842",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ed024e9c-7f04-4b31-a6c2-a13b9c9fdf35"
        },
        "item": {
          "id": "214e5cca-9de8-4dfe-b2e0-e9b021d9a605",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c600d0d7-a049-44ce-a6dc-c69a9931a90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3793aa45-0bf8-4961-883d-7919aaf4dd06",
        "cursor": {
          "ref": "8aee6823-1108-44a8-9e1f-ca14d5ffc9e8",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fd7e7f4e-d35c-40d7-b7fb-08c38fc1221c"
        },
        "item": {
          "id": "3793aa45-0bf8-4961-883d-7919aaf4dd06",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e8c97200-0a75-4fca-aba2-493e1ff34005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58030517-ba73-4f3d-8856-c6352870262b",
        "cursor": {
          "ref": "c20a038c-db8a-4b2e-bf03-763c5ce021d5",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "49ad50af-c2e5-4d7b-ad08-d1197a33b297"
        },
        "item": {
          "id": "58030517-ba73-4f3d-8856-c6352870262b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2618bd79-7039-4c3f-8f9f-8e13171ab0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510802ed-b845-46f7-ac0b-049fd3d2ca67",
        "cursor": {
          "ref": "01005e47-d02c-421c-aebd-263654850668",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "41099361-2908-4bde-b19f-e7fdf23562f7"
        },
        "item": {
          "id": "510802ed-b845-46f7-ac0b-049fd3d2ca67",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6b66117e-d2c6-4a08-b65c-d50bcfaed9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a111b41-24a2-44a5-80f6-5e508bc4434a",
        "cursor": {
          "ref": "ea514127-190f-4639-b122-1b5aee2e2bd3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8f47859b-4b10-429f-b915-729db734f4a8"
        },
        "item": {
          "id": "7a111b41-24a2-44a5-80f6-5e508bc4434a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "577c4060-4bda-43bd-a458-5edd07ec0d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2506fb8b-9d1a-437d-b8db-f55f29b5b9df",
        "cursor": {
          "ref": "c9ab9784-f55a-4b70-8826-9a1a5e52fd77",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "44636727-76ed-47d8-bdc8-4af73e7079fe"
        },
        "item": {
          "id": "2506fb8b-9d1a-437d-b8db-f55f29b5b9df",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "434528d3-e2c6-4546-ad25-7d2a2f0311ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4581e99-e68c-4142-b5f3-025e520ef91f",
        "cursor": {
          "ref": "e21a3846-9d91-41b5-a088-7c7e69e51b23",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a8c80a34-d9ed-4983-b398-5c4583e86f82"
        },
        "item": {
          "id": "e4581e99-e68c-4142-b5f3-025e520ef91f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ca53aaed-0f1c-4db9-9d63-62256765c722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521a9bc1-c370-442d-99cb-382db90fcd8b",
        "cursor": {
          "ref": "c20c7531-dd3b-49c3-8bf4-0097d94609c2",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "666e0523-051e-4349-a8ba-95ccf5b655c3"
        },
        "item": {
          "id": "521a9bc1-c370-442d-99cb-382db90fcd8b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3bfd3c02-aa71-435d-86cd-e1eb01898d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d961b614-043c-4560-a0b4-63aa4f6c109e",
        "cursor": {
          "ref": "5237f042-e9b3-4623-aad6-f7bb580553a4",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "01063b8f-afb2-4652-85b0-d576147a31ea"
        },
        "item": {
          "id": "d961b614-043c-4560-a0b4-63aa4f6c109e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f82b497e-a7d5-4cdc-b492-8d99798e7db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39158ae-bfc3-45be-aad6-e2f09fe0a87d",
        "cursor": {
          "ref": "69860201-a65e-4ff8-a317-8a28980729cd",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "72c017a5-be03-40a2-991b-ae6c09ca0dcf"
        },
        "item": {
          "id": "d39158ae-bfc3-45be-aad6-e2f09fe0a87d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2435a5e9-5886-49d6-8691-c0019964e89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee06b81e-d15e-4ad7-a9e8-19ca321708bd",
        "cursor": {
          "ref": "9d6cb9b2-d722-4ab2-a333-c58c65869804",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "96006045-22cb-452a-b93d-57687cb3b5ac"
        },
        "item": {
          "id": "ee06b81e-d15e-4ad7-a9e8-19ca321708bd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a2cde718-f02c-4216-b961-e435f3b3156a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7170388d-c0d6-40c4-883d-25ad65a59905",
        "cursor": {
          "ref": "de766fdd-9a67-4afb-ab92-c0bb8aeb854b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3509d242-85ce-4679-aab1-4639facf79d0"
        },
        "item": {
          "id": "7170388d-c0d6-40c4-883d-25ad65a59905",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ecff6ef9-748f-420a-8c05-b6a64f46569c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be13722e-2f1b-4b78-916a-f9d5b5289698",
        "cursor": {
          "ref": "c45024b0-774b-4b6c-b12f-e0cb322c10b9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ce4df0ed-81aa-47bf-9220-e76ef0c01263"
        },
        "item": {
          "id": "be13722e-2f1b-4b78-916a-f9d5b5289698",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a107d3c0-b594-4a34-af4f-e84b2928c5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897a4a72-bdbc-40a6-85eb-ab51efabbe73",
        "cursor": {
          "ref": "d264871a-35f8-4871-b066-0c4b0c6403f3",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6c7b507b-d4fe-4ad9-905f-3b60bfc19742"
        },
        "item": {
          "id": "897a4a72-bdbc-40a6-85eb-ab51efabbe73",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "89046898-c1ce-46f3-86d6-341dbbbb7630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164170bc-6f97-4a8b-9f58-dafcc821f1c2",
        "cursor": {
          "ref": "b42df1b8-780f-434d-87e6-dd01d1c5b352",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1fd98893-5be5-43c1-a7e4-925910f8623c"
        },
        "item": {
          "id": "164170bc-6f97-4a8b-9f58-dafcc821f1c2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "18e9a29b-a4ff-4ab4-8d47-e450a9ec4e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a154de36-5a50-4db0-b37b-c6fbdb3f0db4",
        "cursor": {
          "ref": "84265d32-b1e8-43a6-9f9d-07e537b4d4e9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "646d9dcf-2b2b-4949-bffc-74dc3864e4d2"
        },
        "item": {
          "id": "a154de36-5a50-4db0-b37b-c6fbdb3f0db4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1a6f9acd-984e-4e5d-b8f2-fd0e9660ec72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a436d788-a7d7-4744-ab08-30360857f573",
        "cursor": {
          "ref": "dc9aa44c-7c21-4991-a603-e775888ab36b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e1192a36-671c-4219-9d11-ad12adaa2105"
        },
        "item": {
          "id": "a436d788-a7d7-4744-ab08-30360857f573",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "26646ebe-ec5a-4af3-96ac-1d5ca1bc385a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4929ff22-8a48-4bb9-aed4-0c6ba704af96",
        "cursor": {
          "ref": "68d5c14e-4892-49d9-864f-a21f897dddb4",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "31ce9719-8670-4d05-9534-abc9e0f733b0"
        },
        "item": {
          "id": "4929ff22-8a48-4bb9-aed4-0c6ba704af96",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cfae3efd-4085-449a-a9bd-a6532b56d326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4c9a09-bd39-4621-8f60-5bf652bdf113",
        "cursor": {
          "ref": "41660a92-bab3-4b5b-a436-bb39c610510e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f9a8ed17-6946-46d7-ba8e-4f44a63605c0"
        },
        "item": {
          "id": "0d4c9a09-bd39-4621-8f60-5bf652bdf113",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "78ac847f-348b-4ecb-be41-f1b91a7aad2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb07c691-459c-4b64-81f8-c3de2a209409",
        "cursor": {
          "ref": "a2551ffd-878f-4fe2-96af-453a29563f46",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "33087d52-98c2-40f0-9212-466b0a9cc178"
        },
        "item": {
          "id": "fb07c691-459c-4b64-81f8-c3de2a209409",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "62890e12-900d-4b96-9a74-96754e4eb520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003e37b1-9ed2-4d7e-8050-9c8f563c1a26",
        "cursor": {
          "ref": "e945586a-5943-4fb5-acbb-d1d666ba32b8",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e8f834a0-71f1-4b3f-9b9e-0d212ee5a798"
        },
        "item": {
          "id": "003e37b1-9ed2-4d7e-8050-9c8f563c1a26",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3e9f2fdb-3d9c-4018-b791-63a59281eb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45176084-5cd9-46b8-b78e-ec419a0a251c",
        "cursor": {
          "ref": "0577de53-35d5-4dac-836e-e1843dc3b5e1",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "885d130b-2a44-4aa9-b92d-7e01210b4ad6"
        },
        "item": {
          "id": "45176084-5cd9-46b8-b78e-ec419a0a251c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3ae3679d-255b-40ab-b5a6-7e8428111dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839b9e47-8549-42c6-bd66-52bfa4e854b0",
        "cursor": {
          "ref": "7a8df671-a9a3-4126-b98d-3532a6f00ff6",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "37839869-9f4f-45ee-961a-eaf22946da24"
        },
        "item": {
          "id": "839b9e47-8549-42c6-bd66-52bfa4e854b0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e755acec-4605-4155-aed8-9c5e468839e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef46520d-b3d4-4088-8ff2-b036bc78e7f3",
        "cursor": {
          "ref": "28b759f9-1809-4bf7-9fd9-0307a0f97833",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "94fef421-8317-4f69-9b0f-9e6960101b84"
        },
        "item": {
          "id": "ef46520d-b3d4-4088-8ff2-b036bc78e7f3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "db43cfc0-868a-4a09-855a-557598e0102b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a280e8df-c347-486b-9289-7b1c1ae89106",
        "cursor": {
          "ref": "5c599c8a-2978-43ca-9009-e6ae674314d9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "97834ad9-5b76-4a0b-bc85-d70c7cd82e9e"
        },
        "item": {
          "id": "a280e8df-c347-486b-9289-7b1c1ae89106",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b4f82e57-0fc8-4baf-8093-6519e4a232fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bc4051-447e-4585-bdbe-84595c7a9e42",
        "cursor": {
          "ref": "d820b917-e234-4823-8e3c-5cf990cb3a4d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a892e126-081d-40e6-87a8-9081a71a295e"
        },
        "item": {
          "id": "a3bc4051-447e-4585-bdbe-84595c7a9e42",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d3f06273-4980-4b43-b8e2-769931acefc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71305143-066b-46ac-a702-d7e34ae34d61",
        "cursor": {
          "ref": "f592aa86-7801-4674-967c-d2508ba44777",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e3188872-e209-481d-9de5-9a3c7aef9264"
        },
        "item": {
          "id": "71305143-066b-46ac-a702-d7e34ae34d61",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "82e609fa-fe77-4b26-82dc-e436ab36a60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69749ac6-b30a-4e92-864f-8e024bafd17c",
        "cursor": {
          "ref": "89f578c6-0f37-4e03-bc3a-23605a550c34",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b5db6a99-37d5-48aa-ada9-282bfdd9769d"
        },
        "item": {
          "id": "69749ac6-b30a-4e92-864f-8e024bafd17c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "68f6488f-abdf-45e0-ae08-f7fe3606818e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de000b05-46f7-44f0-8c3c-fad8d0a278a4",
        "cursor": {
          "ref": "b846f090-902a-40dc-b7c9-593b411470f2",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6382b95c-f3c8-4b3c-817e-808a70c14bf6"
        },
        "item": {
          "id": "de000b05-46f7-44f0-8c3c-fad8d0a278a4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7b79dc63-953e-418f-b04c-3122cc93ecbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e1a60f2f-184f-455e-90c4-bf0b86f9b992",
        "cursor": {
          "ref": "e5a5eca3-c6cf-4dab-9d14-ec7f74ccf9de",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bf5e78aa-cd7a-47ec-9143-134be110d92a"
        },
        "item": {
          "id": "e1a60f2f-184f-455e-90c4-bf0b86f9b992",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7b0e19cc-8684-4c01-9e5d-d0dbffa8515c",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f7b71c-fb42-4991-8a16-886670843a82",
        "cursor": {
          "ref": "62e5b0e9-a2e3-466b-8607-112d4c7973f8",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9ea5e172-ef06-4889-bc98-9c8e2fa5d124"
        },
        "item": {
          "id": "67f7b71c-fb42-4991-8a16-886670843a82",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a216f670-b394-4aa6-b2c4-97456ff01646",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb81be72-e07d-4c30-8658-37fdb9a1b27c",
        "cursor": {
          "ref": "21658f4b-c63f-4d6a-ab1a-8cab4f1d011a",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fe7b3c2d-88bd-465c-9dc2-8f575afd6fc5"
        },
        "item": {
          "id": "fb81be72-e07d-4c30-8658-37fdb9a1b27c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "be1e3c7f-9abc-4de6-9a85-14073bd00abe",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a193bde-2588-4d0b-9cd7-0515beb4dc75",
        "cursor": {
          "ref": "acd5b8ae-ebd5-46b8-9244-8c9f0ceea934",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4aa13826-8c9b-4d8f-83ea-bc4a2ce71024"
        },
        "item": {
          "id": "9a193bde-2588-4d0b-9cd7-0515beb4dc75",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4d8b4d17-6dca-457b-b749-a7624df91946",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4eb15b-e6a6-43a2-ab36-6ba641e0fcc7",
        "cursor": {
          "ref": "709f4492-a783-4a34-afbd-d6cf84ded390",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7b859f85-590a-48c0-bfa6-1d7269643298"
        },
        "item": {
          "id": "fc4eb15b-e6a6-43a2-ab36-6ba641e0fcc7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c88f54a4-89a1-4af1-94ed-ba80556e87d1",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-19T00:38:44.428Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-19T00:38:44.428Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "33a801fc-f324-42a9-934e-abe4770ace41",
        "cursor": {
          "ref": "1df51386-a958-433e-9b56-2f72a23e7926",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8dcf5b28-3578-4a12-9969-b47d03732415"
        },
        "item": {
          "id": "33a801fc-f324-42a9-934e-abe4770ace41",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7d1e16b4-92fa-4bc4-b5c5-446cc597fbd9",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507e9e88-a1e5-4b9b-b2eb-abf271b48d84",
        "cursor": {
          "ref": "0d6ce2ce-e756-4595-a7c9-c2d1707f1cd8",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c50c87f9-059e-4837-b257-18821ba5df0f"
        },
        "item": {
          "id": "507e9e88-a1e5-4b9b-b2eb-abf271b48d84",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "048d1490-733c-476b-80fc-2267390b55b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42cb8099-9aa4-4bf6-a6ca-c28e39d88078",
        "cursor": {
          "ref": "e47290b6-dfb1-4447-a9c9-4c8da957a1e6",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f9125090-9a51-47fc-a38f-0c1fa0b10967"
        },
        "item": {
          "id": "42cb8099-9aa4-4bf6-a6ca-c28e39d88078",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6fffff3c-cbe2-427a-aac8-3f64412a446b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fe8645-7652-4d4b-9927-9091afb6d41f",
        "cursor": {
          "ref": "e4ddf5bc-485f-48ff-b7b8-ff50e869a890",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b27ceaee-9a8c-4f2f-9915-873f526bf1e2"
        },
        "item": {
          "id": "23fe8645-7652-4d4b-9927-9091afb6d41f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a6408df3-616f-49e5-86fa-aef43ae0902d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea7bcb0-94a0-4489-ad02-e6f455bc4ef7",
        "cursor": {
          "ref": "57ded1b5-18c5-479b-8143-71cb079c555f",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "aefd1ad1-25ed-4c09-b3db-cd1ec9fd0603"
        },
        "item": {
          "id": "2ea7bcb0-94a0-4489-ad02-e6f455bc4ef7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ce313c3b-69c2-4735-80ce-d12eb6020c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047724e2-1f10-45eb-a278-86cc2208f93e",
        "cursor": {
          "ref": "083e0750-8e74-454b-a03e-8ba1be87f701",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2df68f35-3a71-4098-b338-5524d1232f20"
        },
        "item": {
          "id": "047724e2-1f10-45eb-a278-86cc2208f93e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6c90efe8-813c-4673-939a-76c112347ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68501659-140c-49fc-8b5b-0b13f9cca033",
        "cursor": {
          "ref": "346eb98e-f619-4c12-86d9-c50c14c899e6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0a987c9e-6582-4cae-95a6-9bc115f05796"
        },
        "item": {
          "id": "68501659-140c-49fc-8b5b-0b13f9cca033",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "02f0c5b5-db89-4407-835f-cdb3b88cdd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1cdf5c-8f88-4c12-965e-bccb9169184d",
        "cursor": {
          "ref": "66695ded-7559-4066-8207-bf8ab9e0972c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b48b285e-644e-494b-bfba-2be908ecd933"
        },
        "item": {
          "id": "7b1cdf5c-8f88-4c12-965e-bccb9169184d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1022039e-f29d-490c-b2ed-88a7168a34a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868efc6b-9a86-47af-9608-42ec5ee52d59",
        "cursor": {
          "ref": "4ec69dc6-f793-47a6-8f21-5ca1f2b5b774",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "81b6ed3a-bc81-4be7-b7d7-61fa78e308d0"
        },
        "item": {
          "id": "868efc6b-9a86-47af-9608-42ec5ee52d59",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "711b8d26-4adf-4e78-8e5d-265473c4ce03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52e2c6c-bdfa-470d-90e0-7b69d13c7c2a",
        "cursor": {
          "ref": "6088d5f1-b6d0-4ae1-945a-a1129d1adaf5",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "96e12001-511e-4d45-aaac-0c1cf85076ab"
        },
        "item": {
          "id": "f52e2c6c-bdfa-470d-90e0-7b69d13c7c2a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e83e236a-b905-4101-9d9c-8331f7ff17ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dfba65-dc5f-4c45-aa29-12823289a738",
        "cursor": {
          "ref": "86db3ece-8a49-4e6f-9e53-36f4133e2ee9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bc5c8a90-aaea-4acc-a868-07d644033f7e"
        },
        "item": {
          "id": "b5dfba65-dc5f-4c45-aa29-12823289a738",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "82e246c5-800f-49d2-ab8b-853a29cbcc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abfacf4-e8b7-4080-a6b0-7368ca4bd418",
        "cursor": {
          "ref": "6e9adbc3-a850-4067-a10b-3c4328e75b8a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6613ba0e-36c6-4901-9343-d792066a1259"
        },
        "item": {
          "id": "1abfacf4-e8b7-4080-a6b0-7368ca4bd418",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0d76034b-fb9c-4166-ad5b-15115ed96f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee5aaf4-85cc-423c-8c51-1c4d601ab641",
        "cursor": {
          "ref": "f263b3d5-fd93-43ff-b103-41a5c3659c5b",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e21f7955-83da-4eae-95d2-b955f16c074c"
        },
        "item": {
          "id": "bee5aaf4-85cc-423c-8c51-1c4d601ab641",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7bb6961d-0efc-4b40-b3e2-5b6c968b0632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0275e00f-fda5-416b-9e46-c71224ff293f",
        "cursor": {
          "ref": "47a68da8-f8a5-4372-8869-04e7571dc9e1",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "74be2154-a368-4a24-9866-615aedbd2c2a"
        },
        "item": {
          "id": "0275e00f-fda5-416b-9e46-c71224ff293f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2ba7ef45-0621-4763-be97-86e2cbf186c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10084ff1-9885-4088-bc14-80dcf7f68ddf",
        "cursor": {
          "ref": "8afdd1b8-f9bb-489c-bf22-b95a3415c015",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a7e28a7e-311b-4d5e-a158-cd80694d3853"
        },
        "item": {
          "id": "10084ff1-9885-4088-bc14-80dcf7f68ddf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ac666c75-bde6-4af0-9417-798a72a3b74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb8be72-9016-414a-bfe2-1d357a531b9b",
        "cursor": {
          "ref": "6f08a726-23f6-4076-a42d-635ac8216d68",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9fdf3283-974a-4c32-9a1e-bb8e60af36b4"
        },
        "item": {
          "id": "fcb8be72-9016-414a-bfe2-1d357a531b9b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d885229-c2ec-46cb-8f5e-e6721d37a3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea45879-0416-4b04-9997-088a3da88827",
        "cursor": {
          "ref": "9e1d8716-01ee-4ab9-aa97-fecb61c999b8",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5c26b5cc-929b-4995-a45f-4d2819878ef0"
        },
        "item": {
          "id": "1ea45879-0416-4b04-9997-088a3da88827",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2f03c1f1-bd66-4365-8cd1-f4ec6eacbf90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784e85b6-2b17-430b-abf3-cdc1ae7756b0",
        "cursor": {
          "ref": "f3e34d27-7f4f-49cd-b1e1-e2369ede2639",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8b81e22d-da28-49f9-9f7c-ce27de69b1bc"
        },
        "item": {
          "id": "784e85b6-2b17-430b-abf3-cdc1ae7756b0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cee31564-81df-4133-be99-790fbc6a5a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bbe38e-2570-40f9-bd41-9215593557d3",
        "cursor": {
          "ref": "1d12fde5-0531-453d-b32d-ed547d6ecd6a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d1d3ae92-3ce4-476c-a038-e4aa1ad2ba9c"
        },
        "item": {
          "id": "80bbe38e-2570-40f9-bd41-9215593557d3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c428ac70-f1e2-4318-95c0-248c5cce078e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688f1940-e653-4627-8079-ce6e145dbc63",
        "cursor": {
          "ref": "dfadecbe-3006-454e-99d7-31961ee13357",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a468c9d7-2d55-4599-b09a-58fbb7e06297"
        },
        "item": {
          "id": "688f1940-e653-4627-8079-ce6e145dbc63",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "edf353f9-a6cb-4710-9e68-9e93a813794c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c99fd11-6bed-41e9-8afe-df6482c10ef2",
        "cursor": {
          "ref": "a537b3dc-e783-4191-9353-c69a0bb99fa3",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "211744e2-2009-468c-8e2c-cada2c70a878"
        },
        "item": {
          "id": "9c99fd11-6bed-41e9-8afe-df6482c10ef2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0b0eb49e-c0c3-4734-8702-4276abeae130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b62be0b-f007-471e-b2f8-d2ddb98ee6a9",
        "cursor": {
          "ref": "09607f20-ef08-4323-9c09-defecebb5970",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2c75982e-8242-47f2-98c9-28803dc93c79"
        },
        "item": {
          "id": "0b62be0b-f007-471e-b2f8-d2ddb98ee6a9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "66329914-599e-45a5-906f-d916b79324b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06b97f1-2a02-46fd-ad48-1b20f95026db",
        "cursor": {
          "ref": "cc2c3c69-a52e-4c76-ad96-c95fb9d066ae",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5a53d702-005d-4119-8e78-24e8426428b3"
        },
        "item": {
          "id": "f06b97f1-2a02-46fd-ad48-1b20f95026db",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9fd6d079-0f51-4e28-8a21-231eb669aefb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d866087e-06b2-424e-9841-bbb66d7d622a",
        "cursor": {
          "ref": "b7cbbaa7-5f05-4cd8-8424-a18db46c8b60",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e90749c5-ef62-494a-a4f3-a78dd4b435d0"
        },
        "item": {
          "id": "d866087e-06b2-424e-9841-bbb66d7d622a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e76ac37b-e2dc-4531-aed0-1bcec830c332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1ea5a4-0f41-44cc-9c0e-c3746054b082",
        "cursor": {
          "ref": "bf3741ff-c575-4f6a-832a-3c6680232c21",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b3759798-54f8-4eab-b23d-92762796e456"
        },
        "item": {
          "id": "3c1ea5a4-0f41-44cc-9c0e-c3746054b082",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "66805112-a551-4d9d-8c1d-9b8955e653c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ec42f3-0e41-42a2-b921-d75fdf4909ae",
        "cursor": {
          "ref": "d19d4350-131f-4d1a-896e-889a6973b274",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ad1f2eff-ad88-4ba8-bfa2-6a24bd600bb0"
        },
        "item": {
          "id": "e1ec42f3-0e41-42a2-b921-d75fdf4909ae",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "08edba5e-3ad1-4e8a-86c7-840f2dc8fdb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2f598c-dd6f-4a49-84e9-cbbc46bf8b71",
        "cursor": {
          "ref": "3a9b8235-e20b-4967-8a98-3679d2648da8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "19569fce-6487-47f4-9b38-36b98991355a"
        },
        "item": {
          "id": "ed2f598c-dd6f-4a49-84e9-cbbc46bf8b71",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "43d0808e-744e-4d6e-b076-d60fb61f993e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e369ef3-f136-4261-8c23-704b0a377405",
        "cursor": {
          "ref": "c7712063-6c18-40a8-a4f5-8f7581495f39",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0e748d41-6b73-44e2-87bf-97147bf38242"
        },
        "item": {
          "id": "2e369ef3-f136-4261-8c23-704b0a377405",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7164ca1e-b33b-4cc9-8764-31a380f12d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1747231e-9d22-458c-a65a-ca0b42020714",
        "cursor": {
          "ref": "327e8aba-ebc6-4f59-9243-db777199fc95",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "08d8f3a8-b86b-4313-a583-80a76292c582"
        },
        "item": {
          "id": "1747231e-9d22-458c-a65a-ca0b42020714",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "80870297-eca2-4a06-8b45-1d61a74edeb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534c09cb-129e-4157-ac95-f22cbaae2896",
        "cursor": {
          "ref": "7f26ed32-d0e2-4904-a1b8-87dbb0d2bd98",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b4603a4c-b18b-46c0-b0e6-7e61de51a82c"
        },
        "item": {
          "id": "534c09cb-129e-4157-ac95-f22cbaae2896",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "07515394-465e-4b26-83ed-e0ebf0fb6f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1822127-ea4d-4df9-b772-4bcc98ca4b7b",
        "cursor": {
          "ref": "380a7545-1d1d-40f3-9d5e-0f539d475e57",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "07698fef-25dc-4442-b5df-d3d4f3cbc9e8"
        },
        "item": {
          "id": "e1822127-ea4d-4df9-b772-4bcc98ca4b7b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bf936e16-48fb-4db8-9d47-16ee3414f3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2594be-fcc2-4da2-bd9e-0f221d14ad7c",
        "cursor": {
          "ref": "e3a440d8-937e-443e-a254-579b8370eaab",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "86034786-0186-4d53-9a64-fa10ae40501a"
        },
        "item": {
          "id": "ec2594be-fcc2-4da2-bd9e-0f221d14ad7c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0e4b472a-5f93-47dd-b67a-6008ecaeb0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cd091b-a315-489c-b0a3-ebfbe8c4d98f",
        "cursor": {
          "ref": "7f027c6e-a439-442b-a9a9-5ff1351bb9ea",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e46a3d11-cfe6-4ed2-905b-cd4d0c05e644"
        },
        "item": {
          "id": "00cd091b-a315-489c-b0a3-ebfbe8c4d98f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d44a3158-bf4c-42ab-8fc8-8dfcf044c22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef5149d-b217-4604-abed-e751892e2041",
        "cursor": {
          "ref": "6a95cc45-3dff-4a3c-acc9-52c45df9b459",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b140f784-b748-4ca9-82b0-b4ef5982c9ac"
        },
        "item": {
          "id": "cef5149d-b217-4604-abed-e751892e2041",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "28b3768f-1526-4f86-917c-06590da662d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320d3735-b1e6-41d6-b540-0d23b6dd739f",
        "cursor": {
          "ref": "7bd93a52-84c3-4ec0-8fd0-dd9ff8d81090",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "46d247d0-c52f-4638-a7e3-25c0b609ff13"
        },
        "item": {
          "id": "320d3735-b1e6-41d6-b540-0d23b6dd739f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b4698fed-db78-4751-8080-366fc9428c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ff6322-2eeb-4d51-92c4-d7554151c35e",
        "cursor": {
          "ref": "74b51e97-14f1-4b0d-9a32-6d70bf68eaea",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "edfd793a-faa7-41bb-a85b-5111e0e38142"
        },
        "item": {
          "id": "41ff6322-2eeb-4d51-92c4-d7554151c35e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6ee119aa-2566-4395-96b4-87ddba7a621e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc9bd42-242b-438d-95de-c7f192fa9438",
        "cursor": {
          "ref": "2163589a-ca90-4ac1-a019-d3e06c88a9e3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "012fbb5a-6caa-4d0e-9fd6-416e5419ce08"
        },
        "item": {
          "id": "cbc9bd42-242b-438d-95de-c7f192fa9438",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2ec59ec5-9edb-4420-90ff-f79e486fc779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd831d0-5e80-40f6-8e98-d906173ce66e",
        "cursor": {
          "ref": "83e76e6d-860e-4e7f-a4c8-a66aa307c4c2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1afb4348-ffe2-4724-bfc5-20a108fcbb59"
        },
        "item": {
          "id": "9bd831d0-5e80-40f6-8e98-d906173ce66e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "141a6d98-960b-4af7-baf8-144066ca113e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477b4cac-e4a6-447f-956c-a7dd840a2b4c",
        "cursor": {
          "ref": "cd9e18a8-55d4-40fc-8d1d-3555299e4a45",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2576afd5-ff1f-4c25-9a7c-b5d9e0cdf60f"
        },
        "item": {
          "id": "477b4cac-e4a6-447f-956c-a7dd840a2b4c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fa917b1f-21ea-4676-9a45-08ed43aaa763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0abbd1f-138b-4987-96d8-c14757dfa2e2",
        "cursor": {
          "ref": "54cbcafc-6950-4561-80e4-44487b3593c9",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "72255141-d8cd-4cad-a0ac-4ce3e2a207ec"
        },
        "item": {
          "id": "d0abbd1f-138b-4987-96d8-c14757dfa2e2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d43cc010-2090-41c5-98f2-f4316222b5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff46d016-dfe8-4fa3-b7b0-174b2acfded8",
        "cursor": {
          "ref": "465b2eea-ce1c-485a-95ab-95b09924169e",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f027df9a-a52a-456f-9061-197eb787952a"
        },
        "item": {
          "id": "ff46d016-dfe8-4fa3-b7b0-174b2acfded8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "803d3c07-f7f8-435d-9ebe-ef0cb7184366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a807d7f8-c5e1-4506-9ed6-da801281a457",
        "cursor": {
          "ref": "8bc66af2-f20d-4504-8e08-b736fc63ed61",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4be0e7e4-fce7-4320-a6eb-9ddd96697572"
        },
        "item": {
          "id": "a807d7f8-c5e1-4506-9ed6-da801281a457",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "353db706-9594-42f4-abce-c8770a3813f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce6c03c-225a-4258-ae9e-beb52a450c9a",
        "cursor": {
          "ref": "010a310a-143a-43dd-9aad-be0bb0ff022e",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6a246a36-4d1c-47d8-a1c4-5106eec0845a"
        },
        "item": {
          "id": "7ce6c03c-225a-4258-ae9e-beb52a450c9a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "309768f4-9bb8-4488-9928-00f83a0cc1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553ecc9e-f15f-470d-9309-88bfd3b7d83d",
        "cursor": {
          "ref": "866f0bcb-630e-4e36-bb00-9cd570e3a55d",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "90a4c4eb-0c24-4ee6-8ddb-ff9fcd73e327"
        },
        "item": {
          "id": "553ecc9e-f15f-470d-9309-88bfd3b7d83d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3ddbf05e-7175-4a0e-b726-724796e63f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01931bf1-f5d8-42d6-b4a8-a2bdc1512160",
        "cursor": {
          "ref": "547e5210-bbd7-4ba2-a957-2fabcea774b4",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "37ad1677-9880-422c-afc1-498f614c4af9"
        },
        "item": {
          "id": "01931bf1-f5d8-42d6-b4a8-a2bdc1512160",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "65b85782-c797-4714-9f1f-bbf29b1406e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ea984a-609d-4184-adcc-48b77e1937b2",
        "cursor": {
          "ref": "79dda38c-e7a8-457d-8968-da4cb962422a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a7327dd3-233c-4ea3-b219-20ea1ea056a9"
        },
        "item": {
          "id": "34ea984a-609d-4184-adcc-48b77e1937b2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "09b9ca3e-fe1f-4156-bd3e-30d839a7ce1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03a542e-da34-45e1-b8a2-29129a3b68b7",
        "cursor": {
          "ref": "ca85dd9d-2986-475e-b941-6e7da3e0ddea",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e56900f3-1a13-4df5-a56b-cd1d628ca71c"
        },
        "item": {
          "id": "e03a542e-da34-45e1-b8a2-29129a3b68b7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e62d381e-8189-4b3c-b9d6-041811ad27ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b7d9ca-4f06-44c3-88ab-dd3b9eb38a0e",
        "cursor": {
          "ref": "bbee8ced-8903-42ad-aff2-ea2d014d5750",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0cef1175-dfcf-428a-af9a-04276f499a12"
        },
        "item": {
          "id": "98b7d9ca-4f06-44c3-88ab-dd3b9eb38a0e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "58d08e28-da29-4c01-b81d-5e2563cf3a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35f76f4-1286-4448-af55-ac5cd6e14709",
        "cursor": {
          "ref": "978517cc-d4dc-4138-9d89-264ec8f1b15b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "359e36ad-6eb7-447e-8933-1aa27306b43b"
        },
        "item": {
          "id": "e35f76f4-1286-4448-af55-ac5cd6e14709",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a42fc8f0-40a8-4996-9300-32b188893e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acb3b01-b3d1-4a3e-9238-7e9cacc7acbb",
        "cursor": {
          "ref": "63cf0508-b307-4fc4-b55e-89b166a368be",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c9071d86-1014-4765-985f-3999c975d568"
        },
        "item": {
          "id": "8acb3b01-b3d1-4a3e-9238-7e9cacc7acbb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5c79d642-3bb9-4163-a8fc-a183b955f9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6c2ca1-4ecd-4418-985c-06e0d35193a1",
        "cursor": {
          "ref": "4c75e38f-b6cf-47d2-b607-da1ea07aae63",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4bfc580b-3ccf-45cc-9c50-7c15aa61d528"
        },
        "item": {
          "id": "da6c2ca1-4ecd-4418-985c-06e0d35193a1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0e0140bd-97de-4d11-a055-9e6c4199f021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af201df-3103-45dc-8ca3-4c4b5b068628",
        "cursor": {
          "ref": "cd74a7a9-15dd-4e53-8cb3-34c7da462a9d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7b914e13-7490-442b-a5c7-b6c2db52068d"
        },
        "item": {
          "id": "6af201df-3103-45dc-8ca3-4c4b5b068628",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3c6d2015-0a39-4aa3-832a-a30d9fc21e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d5ec9c-6442-4a0b-a760-222152782f5d",
        "cursor": {
          "ref": "5b6e0788-aaec-4af7-ad25-a9ea9a050446",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "61e10d2b-5901-416e-a874-63444a0d706c"
        },
        "item": {
          "id": "d0d5ec9c-6442-4a0b-a760-222152782f5d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5368d318-8e3f-485a-a5a8-fd9d521bedd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57563e2-a328-4fab-b26b-79a2753b42fc",
        "cursor": {
          "ref": "1ebd7939-5851-4363-80ec-5f175cc9d80c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f5ab25c7-b74c-40cb-b294-77e142ac41cc"
        },
        "item": {
          "id": "f57563e2-a328-4fab-b26b-79a2753b42fc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "74ecd94f-90e5-4c6c-8214-0fbab4c79f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7446b134-1773-4068-b341-9bb62980bc5e",
        "cursor": {
          "ref": "998436c4-5ecb-4282-bacc-14114c0783d1",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4c5e2ce9-513f-4a8c-a526-df06e30bf04f"
        },
        "item": {
          "id": "7446b134-1773-4068-b341-9bb62980bc5e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "375f9090-9a10-4d32-be1b-584d8c476d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9ca738-5d84-43e5-b53a-999f86efb551",
        "cursor": {
          "ref": "211ea3c6-3060-4a54-aa82-20187cdbbd3c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2a65f93f-f5f7-49c8-a286-2723c793f24e"
        },
        "item": {
          "id": "bb9ca738-5d84-43e5-b53a-999f86efb551",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3a7c69e8-b0bb-4f3f-9d11-456dd54302b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324bdadf-635a-4e8d-b7e2-0a1312c39924",
        "cursor": {
          "ref": "f8850fa0-7b87-49c6-ab84-0aa6363d60c1",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ae195223-cab9-4702-9445-4607a3554e2d"
        },
        "item": {
          "id": "324bdadf-635a-4e8d-b7e2-0a1312c39924",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b37b960e-f51f-4cc5-a863-371d599751d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0bf94f-ca18-4cce-99d4-3556bea66872",
        "cursor": {
          "ref": "2986fff3-6ae4-4f07-accb-ad7052e96bf6",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8cf91b46-3dc1-4451-85c4-8935c4986746"
        },
        "item": {
          "id": "7d0bf94f-ca18-4cce-99d4-3556bea66872",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "55ee670c-733c-4394-97a9-d7926aeaa879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeb1147-6a87-4f08-864b-d181fb923d12",
        "cursor": {
          "ref": "ce3882a8-2f20-40db-886e-0451c618ab3b",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "26abfb42-a2c2-4eef-b96f-d1b914ba262a"
        },
        "item": {
          "id": "2aeb1147-6a87-4f08-864b-d181fb923d12",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "53dfe000-9445-4596-a6d7-895ebf8dae79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb6e220-b61a-45a6-8f9b-90f0b1aa2934",
        "cursor": {
          "ref": "b58c4580-5a86-4689-9849-3b90ee1291af",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "83ee0dc0-e481-4cf1-9b1a-6ba27ca6f4fa"
        },
        "item": {
          "id": "6eb6e220-b61a-45a6-8f9b-90f0b1aa2934",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "10ad0ea3-86b2-458f-abac-a2fcd7123778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec59f2a8-4fb6-47db-be32-0791004ad5ea",
        "cursor": {
          "ref": "b01cfada-6eb5-48f4-93ae-95820d9f9606",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "10d78e8a-ad8d-4681-8c7e-d9fa26584f90"
        },
        "item": {
          "id": "ec59f2a8-4fb6-47db-be32-0791004ad5ea",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "040e8269-a1f3-425d-9e6c-35fb08071f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0b61a1-d5e7-4cbc-b0b6-d48bc881d7b9",
        "cursor": {
          "ref": "bdb7ce88-c965-42a7-bfd0-959207ab259b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "28bc6261-e1b3-4176-a470-98fa301d257d"
        },
        "item": {
          "id": "6c0b61a1-d5e7-4cbc-b0b6-d48bc881d7b9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "49aec739-975e-4c6e-903b-6822d334ebf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d24f316-1333-4574-90b2-9c1e9dd7a434",
        "cursor": {
          "ref": "b78ccdb7-a458-464c-b80b-2fe6daddc090",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "03ea9ec3-f00d-43fe-b284-5a676b6469d2"
        },
        "item": {
          "id": "8d24f316-1333-4574-90b2-9c1e9dd7a434",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9062f275-8f95-4914-89c1-65fc34313c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d894d2d4-eae7-43d4-9992-f84396331fa6",
        "cursor": {
          "ref": "3c95a855-e912-442a-bbf5-ec0b00c63fb4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "537e0542-d3d9-4840-b084-4964850f5e25"
        },
        "item": {
          "id": "d894d2d4-eae7-43d4-9992-f84396331fa6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "aca1fb6f-1b40-4f35-9f99-105e4658ba68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf680b7-32c4-4479-8264-c4bfcb5e746d",
        "cursor": {
          "ref": "f3e12456-871a-4d5a-ac60-899e22af8833",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9b619a97-47df-44bd-a156-6d6c8a4c9f58"
        },
        "item": {
          "id": "9bf680b7-32c4-4479-8264-c4bfcb5e746d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "90a79285-c7b5-4bba-bd8d-099877f2af26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af5ff0d-af45-4ff3-b070-acca3a2466b3",
        "cursor": {
          "ref": "83cf2fa3-520c-458c-b0ac-027a65c203dc",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ee780bb4-1992-43f1-893c-75d6db92786e"
        },
        "item": {
          "id": "0af5ff0d-af45-4ff3-b070-acca3a2466b3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a7dc8e2d-d0da-4072-8ece-1c0abeab92e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89691e2c-1352-4dca-96fc-7ff42fb9e762",
        "cursor": {
          "ref": "5e054766-b09c-4369-954f-5dde817215d0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e830e71b-bc24-471c-a148-64063341ee99"
        },
        "item": {
          "id": "89691e2c-1352-4dca-96fc-7ff42fb9e762",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7b20af1f-a02b-4fce-bac5-93c2da5be3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51805d83-f59f-4032-8703-5055d3f1eaa6",
        "cursor": {
          "ref": "7af8cdab-2560-40b8-b3e4-ef63e5a9bc2f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5464fa4f-fbf9-4f0f-bedb-68b4e5b80664"
        },
        "item": {
          "id": "51805d83-f59f-4032-8703-5055d3f1eaa6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8e3fbcda-624d-4ff9-b0ef-0bc746465907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6a0d96-d5d3-492d-8856-6ae745153f5d",
        "cursor": {
          "ref": "0a238618-c022-4dc5-b124-d27ee6225988",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8dc92a09-6181-49ac-b77d-aa7c4eafc8b4"
        },
        "item": {
          "id": "aa6a0d96-d5d3-492d-8856-6ae745153f5d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e2f358e4-196e-4d7b-be21-de6208179a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80297a2-897f-4821-976a-180b04fae76b",
        "cursor": {
          "ref": "4ac64a57-6dcf-4bc1-87a7-863743c54527",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "455445dc-cf26-4fb0-a3b7-914da629b61d"
        },
        "item": {
          "id": "a80297a2-897f-4821-976a-180b04fae76b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d46fb59b-43aa-434c-85e7-17d2cfef3433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3309f1ae-5a0b-4602-8282-e7f97f6b883f",
        "cursor": {
          "ref": "24eb4963-b12b-42c3-9a62-26e793e5c3a5",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7768c180-036f-4e64-8170-ea73231ffa8a"
        },
        "item": {
          "id": "3309f1ae-5a0b-4602-8282-e7f97f6b883f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d14a3538-efc1-4ed1-874e-15be41673d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2cc2cf-efbd-440d-ba3f-38d022cba5a3",
        "cursor": {
          "ref": "87f74cb1-83e2-4fe2-bf5f-b2e1bed92b2f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6ee9d7f3-19fb-41bd-97c7-5d83b39d5583"
        },
        "item": {
          "id": "ca2cc2cf-efbd-440d-ba3f-38d022cba5a3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1a4dc050-ea08-4995-aa06-49b432fbe3cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599dda52-a355-4b8f-a40e-3d1501289c28",
        "cursor": {
          "ref": "c1459a9a-4326-44e2-a420-738e1774ded8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "42b31517-e4c5-4401-be9f-8c79da705f26"
        },
        "item": {
          "id": "599dda52-a355-4b8f-a40e-3d1501289c28",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8bdcad2d-1c1d-4485-8a32-3d3ec8a502ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb18dff0-1513-44d9-8d6e-c45533b6b217",
        "cursor": {
          "ref": "48bfb2e8-f3d7-460b-95a8-876566db0229",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d49dd748-286a-4655-90d3-33a9f7ccb173"
        },
        "item": {
          "id": "cb18dff0-1513-44d9-8d6e-c45533b6b217",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2d2588e3-1125-4252-947f-b642255471f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370d8783-f9f2-4182-9778-5f3cc7ca6220",
        "cursor": {
          "ref": "db53037c-6c05-48b2-9c43-ba7182145c7f",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ddab1e83-c3ca-4122-a236-3ab0c99c65b9"
        },
        "item": {
          "id": "370d8783-f9f2-4182-9778-5f3cc7ca6220",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "934fa4d7-4564-43a6-9752-bfab62e428b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b29f0d0-caad-45a0-bf6c-8d0ad8d4079d",
        "cursor": {
          "ref": "cc148cb5-3894-498d-9e56-bb684143faf2",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "afc9dda7-08a8-4106-8658-249974996b9d"
        },
        "item": {
          "id": "8b29f0d0-caad-45a0-bf6c-8d0ad8d4079d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e66065e2-62fa-44ec-93b6-091b023aeaa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf5031f-f3ba-4ef7-bcfc-ba437219d53d",
        "cursor": {
          "ref": "cf227409-c5eb-4281-90b7-a7a27243f9c1",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "93d3cd2a-04bb-4eb6-b3d9-f247c93c0854"
        },
        "item": {
          "id": "1bf5031f-f3ba-4ef7-bcfc-ba437219d53d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7deff9e5-78b7-4c3a-9b6b-c30246c54a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15f20e3-6658-4f2e-8ffa-f70c51b8c7f5",
        "cursor": {
          "ref": "ff684386-245e-4a35-ad1a-c5c5a94979a2",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "211648b3-f665-43e7-b3ee-d76802df5fbe"
        },
        "item": {
          "id": "b15f20e3-6658-4f2e-8ffa-f70c51b8c7f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fb2cebc0-6f9e-47db-ab64-d2275ef3f7fd",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b61c11b9-9d01-4f60-a754-92ac004e7a36",
        "cursor": {
          "ref": "276cc02a-2e32-45b1-8d5d-c8b7e410fe26",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d5bd0293-e880-467f-bdd5-cc44d6c26cad"
        },
        "item": {
          "id": "b61c11b9-9d01-4f60-a754-92ac004e7a36",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "faf90fa6-1e3f-4ef8-8b8e-bbcd703e6f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f54e689-54ac-4820-a468-384daeb28088",
        "cursor": {
          "ref": "a82373e0-454b-47ff-be80-72998f3d0a56",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8d150b37-4312-499a-b42e-e27a21487bde"
        },
        "item": {
          "id": "7f54e689-54ac-4820-a468-384daeb28088",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "adb27eff-c4ce-4a69-a683-3640c0b84609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe51e12b-7f8c-4650-a576-7579991a736e",
        "cursor": {
          "ref": "6f977cd0-657b-4659-aeb4-327f1e6504a8",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf9582a1-2b56-44cc-b267-01413202e8b2"
        },
        "item": {
          "id": "fe51e12b-7f8c-4650-a576-7579991a736e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b13df05f-ad0d-4eb1-b876-4c8e26b20039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6256f90-0200-4fc0-8ff4-000c747def0c",
        "cursor": {
          "ref": "134cc7b2-cc55-4146-b081-870815d4af16",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "794bda78-22e0-4633-89d6-2594607eb857"
        },
        "item": {
          "id": "b6256f90-0200-4fc0-8ff4-000c747def0c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "39b69867-68a4-4bc5-8d13-59255dc2e7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48272700-502b-40ae-b8e2-a904f1067248",
        "cursor": {
          "ref": "03840b91-ee47-4b7f-bf86-e388721a4146",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "912bade6-1ac3-4728-9a7d-5e05125b1359"
        },
        "item": {
          "id": "48272700-502b-40ae-b8e2-a904f1067248",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "51f9e431-d361-495d-9e37-dffff0c5c419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81bfd4f-372a-4f5b-a449-237152733265",
        "cursor": {
          "ref": "ccf44c54-504e-4c7b-9918-d9229afa7d31",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3c9647ee-cfc4-4f6c-9fbd-ae350cd910f1"
        },
        "item": {
          "id": "e81bfd4f-372a-4f5b-a449-237152733265",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "50b8e64a-3d66-4565-8d9b-62076eb2b7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fb9c3b-76ff-4f35-9230-fb1c1ad939b0",
        "cursor": {
          "ref": "d90c44db-fc01-4b5b-ae6d-5e6e0abebff1",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0ef3713b-5401-49e5-a04c-86d84b231d5b"
        },
        "item": {
          "id": "52fb9c3b-76ff-4f35-9230-fb1c1ad939b0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cbcc8d4c-39ef-4e37-93c1-392f2ecc52bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4d5660-ec78-4e97-989c-e58bcb7ca4b9",
        "cursor": {
          "ref": "f122aa8a-152b-4fc1-bf29-fbce0ce1b3b6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "24ac63e9-76fb-46d1-aa1f-c7f809c16395"
        },
        "item": {
          "id": "1d4d5660-ec78-4e97-989c-e58bcb7ca4b9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e3ae5dd6-dce7-47cc-a498-c22d6fb2b9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cfb0f8-77e5-49af-9919-4888500f5171",
        "cursor": {
          "ref": "7d899031-d8e9-49e1-9a6c-b5bbdf75e563",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "00115e06-ccd2-4629-ac08-7c690bc2f9c4"
        },
        "item": {
          "id": "77cfb0f8-77e5-49af-9919-4888500f5171",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f173066d-810e-449a-bec2-da8ef957b944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee10c66-a23e-4b26-b0b1-6b3dc32658fd",
        "cursor": {
          "ref": "54708d47-6093-47fd-b239-f6f57ecc842b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "95243861-81b5-4d0d-b88b-eb0720ce7076"
        },
        "item": {
          "id": "fee10c66-a23e-4b26-b0b1-6b3dc32658fd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "396a1f9b-10b9-45eb-b525-e53e44382f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae64cf8-21d2-4581-ae21-e270a34d878c",
        "cursor": {
          "ref": "2a7a3d96-661b-4d17-8bf5-18041aa13cdf",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d6f1a3d9-a8d0-4d4e-acda-0b113351ddf2"
        },
        "item": {
          "id": "2ae64cf8-21d2-4581-ae21-e270a34d878c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0334c1c1-5473-475c-9913-e02fb582fd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1357be0-35dc-4017-a604-b165f06ae210",
        "cursor": {
          "ref": "3c58adf2-f2ed-4476-870b-57d522a5d127",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "25a63bb4-5b4c-43fa-b97e-0edc2c6350cb"
        },
        "item": {
          "id": "a1357be0-35dc-4017-a604-b165f06ae210",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "813ecc40-37a8-4f3a-b3f6-442c39c3773b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4319feb7-46df-4bf1-8c8f-81712f629117",
        "cursor": {
          "ref": "29c4b1a7-3853-4123-8810-8790e26a6eb9",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "194fd908-caaf-49d3-b9c3-5abe7b0c7cd6"
        },
        "item": {
          "id": "4319feb7-46df-4bf1-8c8f-81712f629117",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e6cafd50-15a4-42d3-a7a7-99ed121c0c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53163487-e92a-4e8d-95ad-6a22ac7ac38f",
        "cursor": {
          "ref": "a439f59c-be26-4056-af61-6cf9222e9a80",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "be8a9d78-b43b-493c-997b-a2068cc9eed2"
        },
        "item": {
          "id": "53163487-e92a-4e8d-95ad-6a22ac7ac38f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "aadfbdf0-9fca-4237-b8bf-d7ea6b58f273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92630216-9f42-4f2c-a889-49dca1a39d19",
        "cursor": {
          "ref": "db4182ab-dca9-41ba-8e41-8534fcf7bca7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1fc5bc6e-5913-445f-93a8-526f96211af4"
        },
        "item": {
          "id": "92630216-9f42-4f2c-a889-49dca1a39d19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d12e1197-b173-49e6-89a3-5added4ca51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8195d9-2781-4ef8-a11f-bff7d86de3a7",
        "cursor": {
          "ref": "6aac7d3d-de83-4cee-9b89-57a2a46e5c83",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9a43fc51-d74c-4d1c-ac36-a422d6c2c7e5"
        },
        "item": {
          "id": "0e8195d9-2781-4ef8-a11f-bff7d86de3a7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "edc29a15-a5c1-43f9-bbb7-d530e2c12afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b826723e-38d5-4a84-9f77-6baa8b6e534d",
        "cursor": {
          "ref": "91af6731-6832-422b-aa9b-f0ac8a97e0b9",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ef445bff-0512-4654-ab18-d0b706bdb02d"
        },
        "item": {
          "id": "b826723e-38d5-4a84-9f77-6baa8b6e534d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "12e4d165-fd37-432b-9098-122066139513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e38963-a4c7-4df0-86fa-1a2f38727e24",
        "cursor": {
          "ref": "8e25c257-442f-4b58-89f4-322fccece2ff",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "22a5ad03-ac6a-4cb4-8234-126e7762dfe2"
        },
        "item": {
          "id": "32e38963-a4c7-4df0-86fa-1a2f38727e24",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4336ee34-20f7-46a4-ab8e-9b4e69b25321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7cfea2-bee8-4423-a165-9eb4be95d8da",
        "cursor": {
          "ref": "5838322f-509c-4efd-96ce-ec54ca8a9342",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "85deb432-8961-4f1b-987c-e8f443d8d3da"
        },
        "item": {
          "id": "ad7cfea2-bee8-4423-a165-9eb4be95d8da",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bf353a4d-3c97-493e-b381-75f743d1ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bee0e4-d2c5-4acc-85cd-266fc85a7c4d",
        "cursor": {
          "ref": "55a733d2-2831-4578-9df9-c1489c06d264",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6f4aa87c-fff8-4ed7-87be-bae7e123bcff"
        },
        "item": {
          "id": "f5bee0e4-d2c5-4acc-85cd-266fc85a7c4d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "313ad08b-b837-466e-ba0b-4a20a5c1491a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc819b4a-e27b-4a51-b5c9-d0cc574c9ec4",
        "cursor": {
          "ref": "96822fef-ea1f-4ae2-8d6c-d7700ebe1e4a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c29063c7-e59a-4abd-b68f-096d2990ac19"
        },
        "item": {
          "id": "dc819b4a-e27b-4a51-b5c9-d0cc574c9ec4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5ee3739b-6404-417d-8e12-8a8871ea1cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1007d56-7382-4864-ad8a-61fbd4a45f23",
        "cursor": {
          "ref": "91315094-d2cc-49bd-b2ee-6eb814b1663b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6a6fb2a1-2c4d-4655-8be8-33d9f34384af"
        },
        "item": {
          "id": "f1007d56-7382-4864-ad8a-61fbd4a45f23",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1279fac4-91c4-418e-908f-75f895253788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31981be2-53f0-4d54-8f33-43de2c67e47c",
        "cursor": {
          "ref": "53ce7037-455f-4190-a1a2-69cf3c840f90",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "99bed1f9-9e9f-47f4-80d2-25c7bef8a418"
        },
        "item": {
          "id": "31981be2-53f0-4d54-8f33-43de2c67e47c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "81cdab07-c989-4d33-be37-c4a79734b60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3552a16-3ff2-459f-a8ea-f7da6feda4eb",
        "cursor": {
          "ref": "7dfc8e0f-5854-4fa5-8d77-fc0f40cbd4ad",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d082178d-5856-47d4-a8cd-c40fdeaad024"
        },
        "item": {
          "id": "a3552a16-3ff2-459f-a8ea-f7da6feda4eb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "30fb4c84-0868-48d1-8a79-f75db1d86cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b710e851-5973-4246-ad12-3eafdc496a11",
        "cursor": {
          "ref": "ffbeadd4-494c-406e-b69c-e2948986f42c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f51e5465-21ca-43ae-9b52-9b0c8e649d01"
        },
        "item": {
          "id": "b710e851-5973-4246-ad12-3eafdc496a11",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "363a850b-61b8-4387-925f-c1fd360d9e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e00e9a-4134-498f-b41e-92d1355ea169",
        "cursor": {
          "ref": "d71ce661-fd0e-436f-9a2a-de4a83fd6886",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a613f73b-0fb4-4a66-83fd-b42584d18868"
        },
        "item": {
          "id": "53e00e9a-4134-498f-b41e-92d1355ea169",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "171515d6-f112-4cf4-87ae-d5a9efa62431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7960b041-5c78-43dc-9630-062e4ea8efb6",
        "cursor": {
          "ref": "0fae4789-fcd6-42cb-9d8c-205391775292",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fdd1d891-7a94-434c-90fd-32710df8fe5f"
        },
        "item": {
          "id": "7960b041-5c78-43dc-9630-062e4ea8efb6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ba4b8abf-62a1-4026-abde-d15998316468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec50c21-e68f-4006-ada6-27853a18b4db",
        "cursor": {
          "ref": "a365b23d-3665-478b-81cc-91e13ae45afa",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fcab8bd0-eef2-4696-81a6-c5e27ea47d8d"
        },
        "item": {
          "id": "fec50c21-e68f-4006-ada6-27853a18b4db",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9a044af9-7890-4533-81cd-3d7c6c7f5ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a0b373-77d2-417d-ba15-d0e69fdfaae6",
        "cursor": {
          "ref": "e3415de9-bb36-4393-b8cd-b9513e8df2b4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "236dedd1-32a9-437e-ac4a-d0c10718c43c"
        },
        "item": {
          "id": "e4a0b373-77d2-417d-ba15-d0e69fdfaae6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5fb84047-da0d-4496-ad6a-7ec835b274e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20480627-60da-4399-9a1b-d0174c4e91d7",
        "cursor": {
          "ref": "47a46d1f-be38-4c27-b88a-f2eb2fd85f78",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "03e769ea-0da8-40d5-a3b1-a9e885b1fe3c"
        },
        "item": {
          "id": "20480627-60da-4399-9a1b-d0174c4e91d7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "767ae8b0-24c0-45f3-b280-7bd11d0621fe",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c798cb4b-857e-4cda-8b67-360c0bac65b5",
        "cursor": {
          "ref": "b358214e-9b87-4968-8e5f-b38d8b8bd44f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5e853fb5-65bf-4127-9e18-dbd33b03d039"
        },
        "item": {
          "id": "c798cb4b-857e-4cda-8b67-360c0bac65b5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b33689dc-ec0d-49af-8d19-ff919343edf3",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "16a3e4e8-f114-4213-abd2-ac176cbe568b",
        "cursor": {
          "ref": "41d1d7aa-3c56-4613-91cd-587cec0dbed8",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "22d84f10-35b3-47f0-8eb6-572f9ca2c827"
        },
        "item": {
          "id": "16a3e4e8-f114-4213-abd2-ac176cbe568b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5e548faa-2c22-4ec1-aa7d-0ac66294b22e",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ec4cd086-86a5-448e-851b-65ac0cc528c5",
        "cursor": {
          "ref": "b2ef4618-376f-46cd-bccb-25bae8493b77",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "796936df-39ee-406e-94a4-03ccadb43e41"
        },
        "item": {
          "id": "ec4cd086-86a5-448e-851b-65ac0cc528c5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dc2b667d-193a-4817-836a-f41641b1a73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc71302-7701-4c33-9e5b-194bd35f639c",
        "cursor": {
          "ref": "546d3bdd-c951-44e1-9a4a-08c3baa9eba2",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "612bfd3b-d9c3-4914-8044-85f1cefb2747"
        },
        "item": {
          "id": "cbc71302-7701-4c33-9e5b-194bd35f639c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e645c8ac-4242-45d9-b4e0-5a4197513f15",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cd11b7aa-221f-4993-9946-c1dccd3a9bc2",
        "cursor": {
          "ref": "5002d410-7870-4ca8-bebe-58f736ba7ef4",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7e56ccfd-36e2-4ac2-945e-bd31f2c06a18"
        },
        "item": {
          "id": "cd11b7aa-221f-4993-9946-c1dccd3a9bc2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ab3abc65-2065-494f-b692-5c4d6486bb94",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "819697c9-3ead-4872-9c3c-9f429e3f996c",
        "cursor": {
          "ref": "d2997efd-8623-4f4b-b8fc-ce1fb946f71a",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3c49e3d4-c6e0-4d40-8c45-9584e561585d"
        },
        "item": {
          "id": "819697c9-3ead-4872-9c3c-9f429e3f996c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ab68ee7e-ed14-4e3c-89e9-a0209ee0b8ba",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "99cfe851-4c03-4589-9c1a-5d2b03906a8a",
        "cursor": {
          "ref": "c64f209c-2753-4da4-b809-87ab51ccf605",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4b7ece47-50c9-41fe-bc69-6284cf022017"
        },
        "item": {
          "id": "99cfe851-4c03-4589-9c1a-5d2b03906a8a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "279feb05-3668-432b-be8f-901470fa9a9e",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4e1dcd24-da38-433a-879a-d9442336aa4a",
        "cursor": {
          "ref": "707b7634-9cdc-4f13-8729-80829a334c42",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4806e3f0-f7b3-4a10-9a3a-6c19693b611c"
        },
        "item": {
          "id": "4e1dcd24-da38-433a-879a-d9442336aa4a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c582a060-bf10-4e83-852f-ed19a928de78",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1bd4c097-c5fd-4cff-81c4-91b0d17cf1e5",
        "cursor": {
          "ref": "3c35a335-c523-4342-975d-a4048e21b463",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "35078340-e09b-42de-90ab-48b6a25193f7"
        },
        "item": {
          "id": "1bd4c097-c5fd-4cff-81c4-91b0d17cf1e5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "538d0c58-532a-4653-8cca-0a748e228ffc",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "480a585a-dd14-432e-8b13-a2e18fc0307a",
        "cursor": {
          "ref": "7211797a-23d1-4c54-a990-b549961986ea",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ff2e45b1-b5ec-4a66-893d-5ea8a0c51748"
        },
        "item": {
          "id": "480a585a-dd14-432e-8b13-a2e18fc0307a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8a95a259-7d6d-4aaf-b217-006835d03473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cad73b-d0fa-4a44-a936-82c27ffed098",
        "cursor": {
          "ref": "2e1567d4-ebb4-4357-a306-376a7a8557d2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2daa9d43-b78e-47ce-a4b4-6546a46cf624"
        },
        "item": {
          "id": "f4cad73b-d0fa-4a44-a936-82c27ffed098",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9c62ca7a-8ec2-4d4d-a123-fb791f9c5c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77140c92-ef18-4e6a-a7a9-0e2f24cf811b",
        "cursor": {
          "ref": "fa8302d5-dfb4-4bd5-bb34-c846db308d11",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ba0d34f9-083e-4c8d-b7ea-43d3f89628c7"
        },
        "item": {
          "id": "77140c92-ef18-4e6a-a7a9-0e2f24cf811b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e57366b9-b2e9-4335-a150-b3f26f0d420b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d616c3-1a15-47b6-adb9-dc479325c103",
        "cursor": {
          "ref": "f5d9aea8-3206-4a49-9de3-70f9fd8e551e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e3836c31-40fd-400c-98db-a670dbddf2bb"
        },
        "item": {
          "id": "56d616c3-1a15-47b6-adb9-dc479325c103",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "06ece795-852a-475c-a902-84fb7714c7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98f3f1d-01bd-4cc1-9064-f9bfcdbb6ff0",
        "cursor": {
          "ref": "1ef7a934-c34a-4fd1-9463-d0ffe987355e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f886a7e2-7aab-475c-a7e5-cd08089d3a97"
        },
        "item": {
          "id": "e98f3f1d-01bd-4cc1-9064-f9bfcdbb6ff0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7e7865a5-65da-4de3-bfc5-5276c266dd30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54350070-9319-479b-8615-5fed6de83878",
        "cursor": {
          "ref": "14f71dae-64c5-4682-a9aa-574a76f81e02",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "db73d126-f53a-464a-9ab0-a7a25c805480"
        },
        "item": {
          "id": "54350070-9319-479b-8615-5fed6de83878",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3841b679-6efe-4844-93d8-c1ed8d5f8395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0929854-10fa-44be-a926-f75ff258431e",
        "cursor": {
          "ref": "46a28812-46a8-46d8-a882-42ecd2580bc0",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "31dc3898-eef7-4166-8c31-80f34e194cee"
        },
        "item": {
          "id": "e0929854-10fa-44be-a926-f75ff258431e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7e393a87-1c83-4b6b-8929-c09b47481306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69617fa0-bcc8-4b39-a46b-69581cc45945",
        "cursor": {
          "ref": "de546d4c-b252-4e89-8789-b7d9f24be92b",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7b4a1e62-c9a2-451e-80d2-4c695a6558b5"
        },
        "item": {
          "id": "69617fa0-bcc8-4b39-a46b-69581cc45945",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c16a1ac7-1040-4e79-884e-6631bbf9fa1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8b0613-2a96-4f0a-8cdf-9736634a80ce",
        "cursor": {
          "ref": "c6f12670-e18e-4267-92e1-350439eb58b2",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6f8af010-2006-4775-8713-477e0f411764"
        },
        "item": {
          "id": "8b8b0613-2a96-4f0a-8cdf-9736634a80ce",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "212b2035-ebb5-48d8-8285-b584f7029401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cd5f72-e8d3-4311-b1e8-4a5e04757f80",
        "cursor": {
          "ref": "f902ce0b-d33a-4a4d-abfd-f8ec7165f323",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f5d0863b-315b-4ce9-8bab-0154c4d39fa7"
        },
        "item": {
          "id": "90cd5f72-e8d3-4311-b1e8-4a5e04757f80",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ee7e6287-5930-48a1-a7df-8523ca1378cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff8a993-f142-43e0-9c4b-9d571aa7a9cd",
        "cursor": {
          "ref": "8d9e4d97-64d2-4419-9f3b-761a936ed2b3",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "80eef668-8cd3-43c8-bbe2-90ee957a228f"
        },
        "item": {
          "id": "aff8a993-f142-43e0-9c4b-9d571aa7a9cd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7b42f6fc-4d1a-439a-8aca-49d51f395005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404a47b0-9764-42cd-ac8b-f3cc711883f8",
        "cursor": {
          "ref": "bba65b70-0de9-460d-8796-11388e447b6b",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a97b3ec1-8b5f-449e-8e92-1f536c423ba4"
        },
        "item": {
          "id": "404a47b0-9764-42cd-ac8b-f3cc711883f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "610fb124-1dd2-4950-9f76-68c3a75c5489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096d098f-a84d-441e-a8da-e918021397b4",
        "cursor": {
          "ref": "96311a61-355b-4af4-a5eb-43a8b3818130",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "29416929-4c34-4716-8772-a0dc9733a5d4"
        },
        "item": {
          "id": "096d098f-a84d-441e-a8da-e918021397b4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "407f13f0-91fe-4360-bafa-8a3fb4ee20ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ca237d-dc4b-4a1a-b01c-583b87798c82",
        "cursor": {
          "ref": "40d55dbd-c315-4f41-ba40-fbb9d48c6fa3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f4ed3b92-637c-43aa-be49-c13c4a93ab59"
        },
        "item": {
          "id": "d3ca237d-dc4b-4a1a-b01c-583b87798c82",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c5938f63-b92a-4d9c-9b53-a2c09fb3193c",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c498f14d-e403-416a-bd0c-e2a742dc3570",
        "cursor": {
          "ref": "0cef745a-2043-4d2d-96f8-79a1531307a4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dfa9d79a-5e3d-4f33-9871-13c16a0f3ce0"
        },
        "item": {
          "id": "c498f14d-e403-416a-bd0c-e2a742dc3570",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0ab53817-db8f-435c-b7cf-62792ab4b154",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "67d848ed-c5d5-4e5d-a229-d360c6befe99",
        "cursor": {
          "ref": "de344262-a689-4599-a8c3-b9d0ddd2cb96",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "57d94c2f-db74-4bdf-8ac4-9849465b71b0"
        },
        "item": {
          "id": "67d848ed-c5d5-4e5d-a229-d360c6befe99",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5e7fcb4c-553e-43db-a8f8-cf2e1adb1427",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3b40d409-8895-404a-a081-58d604e05025",
        "cursor": {
          "ref": "750cb00f-7a4e-4c8c-9b3d-66d453238bc7",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "27ae4f42-3f99-412b-9554-50bfcf9939ce"
        },
        "item": {
          "id": "3b40d409-8895-404a-a081-58d604e05025",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7eb6deae-6e02-4a8f-817b-9a8223dd281f",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e683f2f3-0ba5-4ebd-b6e6-7ebacced6bbe",
        "cursor": {
          "ref": "567183cb-675f-47c7-8316-f475fe6e341e",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0a89faca-6f35-4afb-a749-f1ab463e61cc"
        },
        "item": {
          "id": "e683f2f3-0ba5-4ebd-b6e6-7ebacced6bbe",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "07c6a8ec-edb0-473a-bef8-fa099a5afedb",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "dd64875d-9e7a-4f7e-ac15-7d5ae5385434",
        "cursor": {
          "ref": "46551aed-0303-4bb7-91a3-afbf15007af6",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fb50a0e3-8358-47c3-92f7-ce73418bb921"
        },
        "item": {
          "id": "dd64875d-9e7a-4f7e-ac15-7d5ae5385434",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "071a5c6e-e485-4f64-ad68-dda1c52d410c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a083dd1-3535-4f05-a103-4c62d544d12a",
        "cursor": {
          "ref": "9a02d43e-3140-4468-90d4-6a7db87c4eee",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cf7540cf-869c-4896-ad5c-19c1d073cbc8"
        },
        "item": {
          "id": "2a083dd1-3535-4f05-a103-4c62d544d12a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e4429e45-b061-4892-9635-c704202a4e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf38796-46c3-4752-a48d-9f2b9b156e63",
        "cursor": {
          "ref": "0b8528ea-1d2e-4220-9e96-f525cbcd75aa",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ee9e98c0-99e6-4e3a-b65e-5506be07bf16"
        },
        "item": {
          "id": "adf38796-46c3-4752-a48d-9f2b9b156e63",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "42cab4f1-e996-416a-a34d-2c2edf091417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad047e89-41c6-495d-9b81-676f685fdbee",
        "cursor": {
          "ref": "2c0a7fbf-4156-4aa2-b7b3-b10ff7d9a531",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c19a25df-84ab-44cd-92d4-b7dcf7f45590"
        },
        "item": {
          "id": "ad047e89-41c6-495d-9b81-676f685fdbee",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e4e11928-f647-4b8c-97b2-ddadf020b8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1c5ec1-5001-431b-8b66-67c3fbe41979",
        "cursor": {
          "ref": "01ca10a8-d470-4b7f-8510-6222c742adda",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a8a19f12-05c4-42c1-8f5b-4a503d8f15bf"
        },
        "item": {
          "id": "8c1c5ec1-5001-431b-8b66-67c3fbe41979",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7866a0d7-7f46-4b70-88a8-e38b44555b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c72ec2-904e-4562-9482-d39a14b8cf9b",
        "cursor": {
          "ref": "8006e5d8-4b11-44c3-8dcb-327c74c79cce",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "75dfacb1-1c1c-43d8-a7f9-0f3d3af8cc49"
        },
        "item": {
          "id": "e1c72ec2-904e-4562-9482-d39a14b8cf9b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c75d923f-2d7d-4e06-90be-d5383d42a61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12e499b-76af-455a-82cb-777f78460211",
        "cursor": {
          "ref": "6ffbe0b5-b816-4cd8-9bd2-bc20f223a788",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b2bb988b-2f34-411c-b620-f3e46fba984f"
        },
        "item": {
          "id": "b12e499b-76af-455a-82cb-777f78460211",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9cb2a128-56f7-4b9a-9470-ef12659e2028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6711a0f9-61d0-43f8-a2b0-d1255959e7c7",
        "cursor": {
          "ref": "ce32e40d-7326-4454-b466-0b55876a6490",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "454f5a94-e5e0-4235-928b-1a5c970ae5ce"
        },
        "item": {
          "id": "6711a0f9-61d0-43f8-a2b0-d1255959e7c7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6a15e944-1d59-49ca-a84f-2e836dbbdf81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214f9145-fe15-4b75-848a-7386c57c1d8a",
        "cursor": {
          "ref": "043b9790-dee9-4ae6-9dd3-c2a871ad6d90",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5ca6e0b2-c445-451c-8f61-1d3607351bff"
        },
        "item": {
          "id": "214f9145-fe15-4b75-848a-7386c57c1d8a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5285d943-673c-429f-8076-ba7019466a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5048a1f0-69f7-4517-828d-6a2f2532e592",
        "cursor": {
          "ref": "4bf694aa-7b73-4c0c-b857-2aa6d0a7f62d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "745d1079-c83b-43c0-8663-94b8e77d51ba"
        },
        "item": {
          "id": "5048a1f0-69f7-4517-828d-6a2f2532e592",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ee4a1d92-bbf6-4734-8aa6-9063be4a8695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f26a57-33d9-4dab-93f9-18f26b42520d",
        "cursor": {
          "ref": "0c4977c2-5a3f-4fc6-a45d-6e9cbdf37826",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c2854178-3021-4277-97ec-b0bb94fcb5a4"
        },
        "item": {
          "id": "b5f26a57-33d9-4dab-93f9-18f26b42520d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "603f80c5-46ad-4d7a-a6da-b6440a026ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0140d2-5659-4bee-af55-8987d99fc612",
        "cursor": {
          "ref": "102f3ac1-a230-4223-95c5-0419961b7088",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f4a9789f-b5ec-4aa1-a2b4-a6608f14035c"
        },
        "item": {
          "id": "5b0140d2-5659-4bee-af55-8987d99fc612",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "42741caf-9f70-403b-aadb-1efb9f38d837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fe78f2-9ae6-4c33-8bb0-5102717d94ae",
        "cursor": {
          "ref": "75b55e61-44f2-49f7-abd0-b1d0e7943df5",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3d517f09-bf19-4cec-b9ab-20d9f02c25bf"
        },
        "item": {
          "id": "c6fe78f2-9ae6-4c33-8bb0-5102717d94ae",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e63a7a32-1b80-4240-978c-b459e0174e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85257da-e7df-4e40-a328-f22e68342476",
        "cursor": {
          "ref": "274e4ef4-4b60-4916-9efe-b2bc08b409d5",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0a33b090-d4fc-437c-b9c0-977c1e020afa"
        },
        "item": {
          "id": "d85257da-e7df-4e40-a328-f22e68342476",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "720050cb-723c-4be0-8293-b615a7b42d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f249dab9-cf65-469d-8e1a-6babff7d7378",
        "cursor": {
          "ref": "3de3484d-66da-4ccc-a97f-4507d8574fb2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "42b38039-c413-4e3a-af33-b281e05e73e8"
        },
        "item": {
          "id": "f249dab9-cf65-469d-8e1a-6babff7d7378",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d3e06206-7981-4501-9343-9db6eba8e172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a631d4-03a3-431f-a5ea-7ad2822b069e",
        "cursor": {
          "ref": "5d5f8b92-7cd9-4943-8dbd-f948dea36878",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3d7f6439-3d23-45b8-8ce7-9f469d8b6164"
        },
        "item": {
          "id": "f6a631d4-03a3-431f-a5ea-7ad2822b069e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ae60b75d-2f6a-4f02-afc3-ff51801ad69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573948e8-fe6a-434a-a776-1553908ac6bf",
        "cursor": {
          "ref": "f8656c11-4e6e-44ec-a917-9046845ec3fc",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ceac8db5-3b06-4556-b2df-d0207fb73b61"
        },
        "item": {
          "id": "573948e8-fe6a-434a-a776-1553908ac6bf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d54681da-e04f-4535-8569-74498d1ebc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b1cf8b-1631-4a80-8144-e184dfccd2fc",
        "cursor": {
          "ref": "0bb0ca2c-6208-4f84-8160-5851ac5be76e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "554b11bc-b983-431e-ba0f-b80c30d9c0cd"
        },
        "item": {
          "id": "00b1cf8b-1631-4a80-8144-e184dfccd2fc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "14c9d9a4-31f4-4b1e-9435-fd9f29275ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c032ef6f-80fc-4899-ab0e-360372d1d36b",
        "cursor": {
          "ref": "269ee4fa-ab33-4b03-8362-1ec5a52b5595",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c3e62123-1b85-46c0-be64-d20e60d92189"
        },
        "item": {
          "id": "c032ef6f-80fc-4899-ab0e-360372d1d36b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ba393c0c-6ef6-4bea-91b7-eddbd838389d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a09869c-610d-45c5-b7c7-df72056527ee",
        "cursor": {
          "ref": "1898644e-26da-426c-95c4-3d6b515e5bef",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c18a5e0e-1de8-4f75-ab13-67176b1205de"
        },
        "item": {
          "id": "5a09869c-610d-45c5-b7c7-df72056527ee",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c3eec200-5871-45e6-afce-e07bb4abb4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e315ec92-3732-4f3f-b638-d0f98566da04",
        "cursor": {
          "ref": "10a81c45-0b73-4ea6-8428-0f7e95acf71b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a79a3453-b7dd-48c3-8bdd-3506eb2f9c24"
        },
        "item": {
          "id": "e315ec92-3732-4f3f-b638-d0f98566da04",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ec7c0533-5961-4428-bdf9-40ae5f34f23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c294d0c-9774-4e0d-beb1-15541e2a8094",
        "cursor": {
          "ref": "b9d76274-b4b2-46ff-9a0a-f30166064e50",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1505360c-8db6-41bb-bf6c-1a1657545511"
        },
        "item": {
          "id": "5c294d0c-9774-4e0d-beb1-15541e2a8094",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5493357f-98bd-4c40-8959-270eb0bc2527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ef7180-620e-4c8e-9847-1760f0db01d8",
        "cursor": {
          "ref": "e17cbe5f-f98a-499d-823e-4e826bbc6a99",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7388ba10-d4d6-4978-b378-8ca05ec3fac6"
        },
        "item": {
          "id": "d2ef7180-620e-4c8e-9847-1760f0db01d8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "66ad4456-5a73-4013-a295-f47fe6ed3323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df09313e-686b-4fd6-88fc-860b3b08b0ec",
        "cursor": {
          "ref": "2fc5cd59-0f2a-4322-a5b7-c72c7a7985a1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1159da5a-45ab-4ad2-8e3f-ad5755dce158"
        },
        "item": {
          "id": "df09313e-686b-4fd6-88fc-860b3b08b0ec",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fc066de8-66a6-46cc-acd0-755b639aeb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa4ceae-6a52-4fa6-94e4-20c33f71ba69",
        "cursor": {
          "ref": "331af397-e2dc-4b4f-b124-90121f26792c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e95d8030-9ade-4c2a-9d56-2d1781c5c781"
        },
        "item": {
          "id": "5aa4ceae-6a52-4fa6-94e4-20c33f71ba69",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9d005e7e-26f4-48ce-a87c-9167ebd060f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2478ed3-0a5c-4381-8562-9ddfebae4fd9",
        "cursor": {
          "ref": "bba6a6b6-7431-4d5e-920f-eda5170c1ed3",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "686d8bfa-20d5-4d84-b358-367ebc399586"
        },
        "item": {
          "id": "a2478ed3-0a5c-4381-8562-9ddfebae4fd9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0766c208-39d3-491d-a1c8-aa3590720d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba2f2ef-3afe-4f02-9b08-afb50900b3fe",
        "cursor": {
          "ref": "63a05c89-29a2-47f1-9134-23241891f527",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0d631304-64e5-4f55-8395-4610cd8b1669"
        },
        "item": {
          "id": "8ba2f2ef-3afe-4f02-9b08-afb50900b3fe",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5fca3b34-fee5-4667-bbb0-ed0bd00650fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7bbac-154d-41be-9746-1b1fdb9c3bbf",
        "cursor": {
          "ref": "d4099bca-4bf8-4c6d-a0c0-e598064845c7",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "02e8e22d-eeb0-4942-9013-63a18cdf9c55"
        },
        "item": {
          "id": "01f7bbac-154d-41be-9746-1b1fdb9c3bbf",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d8846e86-fbbe-46d7-8466-7dbb7c9c830d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062dde26-d3b3-4da2-bd4f-5ed9ab992c8c",
        "cursor": {
          "ref": "4cc6b11f-a599-4009-b4e7-7b301aad5247",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0d8daf6f-ca58-458f-beb1-24d39e9704f3"
        },
        "item": {
          "id": "062dde26-d3b3-4da2-bd4f-5ed9ab992c8c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "90c44907-ad3b-464c-9ea3-2f2acde7e459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507b3580-8676-44a4-89fa-611b1fcb68d2",
        "cursor": {
          "ref": "9a3bf3f0-0ac6-466f-8bbe-f509cc9d8ede",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2d2f4ab7-cd9f-4f48-8029-67f81b750994"
        },
        "item": {
          "id": "507b3580-8676-44a4-89fa-611b1fcb68d2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "28e790b3-92f1-434c-aa2b-c8918e7e866e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75195237-a3c8-48a4-92c3-b9032ac5bd6a",
        "cursor": {
          "ref": "6e00cbec-a3c5-4ca4-ae71-6cd6dce80b1c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d7162621-5f1b-44ce-b2f6-ff327333f520"
        },
        "item": {
          "id": "75195237-a3c8-48a4-92c3-b9032ac5bd6a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9d7fd4d7-f577-46b7-ba88-18a057f9f4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59702054-6814-4e3e-b440-76344845f92c",
        "cursor": {
          "ref": "36bf4a97-2522-46e4-beed-eb5e35b63fa7",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c679fbf1-49ac-4db6-8abb-a8384880dcae"
        },
        "item": {
          "id": "59702054-6814-4e3e-b440-76344845f92c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "33431f38-32e4-4af7-a6be-5ed5071ffb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e0f453-3b55-4336-b7cd-0a1c757912ba",
        "cursor": {
          "ref": "298832f5-c3c9-4532-8d33-6686f82fcfd4",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cf731ffe-4539-483c-afd5-4019c1cfb4cf"
        },
        "item": {
          "id": "38e0f453-3b55-4336-b7cd-0a1c757912ba",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "986fd10e-e8b7-40f9-83ab-e138599e4188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51c5d62-d11f-4867-96bb-6a10640b40b7",
        "cursor": {
          "ref": "c97388f5-9a69-4ae7-bb90-80d947765f8e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "328633ce-fd65-4945-8578-5d8d922f179e"
        },
        "item": {
          "id": "e51c5d62-d11f-4867-96bb-6a10640b40b7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b801675-ec8d-42a8-950f-5a741834b91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f8765b-ff43-4ada-8c94-0c748b07f29d",
        "cursor": {
          "ref": "d414a723-6397-47b2-91f4-6bc5e438dc3c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "32c69a55-09bf-44d9-93b9-626d45989890"
        },
        "item": {
          "id": "93f8765b-ff43-4ada-8c94-0c748b07f29d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5ac66324-d836-455f-9b3e-46e2dd05162a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252ff5af-eee7-481d-949d-36ab4e0a947d",
        "cursor": {
          "ref": "7d253a87-230e-4051-a0cb-fcdfb225d073",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f2c184a9-8cf1-4b5f-b318-c2b9cd616225"
        },
        "item": {
          "id": "252ff5af-eee7-481d-949d-36ab4e0a947d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d95d6ce1-1092-4736-8a10-f9acf082ba9b",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "422961d7-9e27-467e-8bca-d1efcc319321",
        "cursor": {
          "ref": "69d1b566-8182-4bf1-9dd9-c5d5f0fb3656",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f5b91373-1a2d-481f-92ff-f9ce2360ef04"
        },
        "item": {
          "id": "422961d7-9e27-467e-8bca-d1efcc319321",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b5ae6eaf-67cb-4e05-abc2-0f27ba364838",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9dacec-bbbe-468f-b6f5-2c23399afff8",
        "cursor": {
          "ref": "67621292-0eb2-4dbf-aa14-d92e3f6a2c7a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c221e322-8834-4603-91bf-6aa8b0f40c9e"
        },
        "item": {
          "id": "9f9dacec-bbbe-468f-b6f5-2c23399afff8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0444617b-8444-4ea0-9262-831bea375508",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c86607b-d960-41cc-9e66-e9920a8ec73e",
        "cursor": {
          "ref": "f1ef2b26-dbe3-4457-8834-fb848f5d5099",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b1d3603a-8242-493b-9115-891af7aef490"
        },
        "item": {
          "id": "2c86607b-d960-41cc-9e66-e9920a8ec73e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b943019-a4cd-42d1-adb8-a337ddade86e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c86607b-d960-41cc-9e66-e9920a8ec73e",
        "cursor": {
          "ref": "f1ef2b26-dbe3-4457-8834-fb848f5d5099",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b1d3603a-8242-493b-9115-891af7aef490"
        },
        "item": {
          "id": "2c86607b-d960-41cc-9e66-e9920a8ec73e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b943019-a4cd-42d1-adb8-a337ddade86e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bfde90-2604-4884-ace1-e15099986a98",
        "cursor": {
          "ref": "7ec92ea0-2dc6-4863-9f53-8421181ee0f9",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "26bda939-80a0-46d9-90d6-746666a20230"
        },
        "item": {
          "id": "18bfde90-2604-4884-ace1-e15099986a98",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0af587fb-d533-4f3e-9ddb-ea7030994863",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d5e5b8-9098-484b-a0a0-e7eb14e41e58",
        "cursor": {
          "ref": "d47252ce-b122-4ad4-9c06-669223adf569",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "27fee0b9-cdad-4334-bdbc-24fc8685d29c"
        },
        "item": {
          "id": "d7d5e5b8-9098-484b-a0a0-e7eb14e41e58",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d2d024fa-4aae-4953-97ae-60f9f50c1c36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}