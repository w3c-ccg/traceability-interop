{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3b2f5cd1-395d-4a59-9a99-469d4a8e6744",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1675d02c-3623-4e22-aaad-b3ca2a51f8b3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c627536d-6b67-49cb-a280-8a7387d4bf6e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0b6aa000-43d3-4fc1-a105-08da8a6fe5d4"
                }
              }
            ]
          },
          {
            "id": "a49ce0ea-9a7b-4dbc-9b30-765276454dd8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92b34c29-4c8d-4d74-8f83-0e9d90364171",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "92dd9050-d8d5-414c-b080-b814933d4084"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f06f1e42-c8fe-4bf5-a69a-1311b13e6014",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e0ef67a0-fd13-44c1-81a0-e49529c72cd2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38c623e0-6a53-4698-a4a6-88e42437f9fd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "204aebaa-5bd8-41db-a61c-dc32430d70d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f6154c6-d8b6-4de9-8877-d7854ff0edbf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6a3a1f8-6437-42e0-99b3-4e5b7494e43b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "944f3b3f-c391-4503-869b-4d6e1bf0731d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a5f1222-5124-498b-89e2-c36d76b758dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa7258eb-2c7e-4daf-b9a8-0844285410cc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a39482b-1824-435e-b70f-d0fa30357137",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a40b1e0c-c305-46b2-9c49-d2940f04d2da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbaa0af3-ddd9-4a56-b140-cef0172c1511",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b330c360-17da-4ccd-b845-df7b8f41c319"
            }
          }
        ]
      },
      {
        "id": "00d56359-6490-4afd-8027-5605966f8bb5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f96a7afc-6164-4c1d-ab29-9c499d4e457f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1a21915-221c-4c7b-8345-360fcbb79a9f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc60baba-2888-45d3-a545-bbbed6d15ab4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c2d90a-b14b-4861-8171-c6b64d2937b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "151d5dd4-e8a2-408c-ac2c-2818a778b001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c418208-7f8b-4a1c-ad59-5d4db4eada22",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebc61f9-ad51-4cf0-b196-2033b91108e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d249f121-87bb-4677-a1ba-4bf99f67b738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8573909-c78c-45aa-b1bb-03c994520f53",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800eb8d1-3dd7-46f8-acee-eaed4e3ed1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "991db493-87a5-444d-ac6a-1c37eb9c8a3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4711bd56-0192-4c06-a4cd-b3152f75a79d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "899a864b-b1bf-44ca-92b3-8c6d9a473147",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78afe9b0-3feb-4fba-958b-40a5b67b5488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad5f2a27-e11e-4726-ba14-ab04510cba4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31be3c0a-596e-4c61-b44b-6542f6153d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34e157a-f39f-4ad6-a5ac-3b6b1dbfaa7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eb6d838e-fc0a-4682-aa98-9fa63823331d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd80a9fa-e87b-4124-b738-a15c8b5b5d76",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "468a6c27-d15f-472e-ace8-451a50a48251",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "650f5f48-3aee-4fd2-8dff-315364f3a5d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d91090c-4210-4cf1-aa61-b5d9f05e8725",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "198aa2cc-1ef7-4999-8f03-9fa7cfcf8adb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d62e9c2-25e1-4427-88a5-3a02e5297a21",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d110e412-2345-4e71-af67-aa9f885a7fba"
            }
          }
        ]
      },
      {
        "id": "f33a8ca3-7743-4703-a0f7-f6d50d35bdf3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e6aa8528-6666-4cc1-a34a-c93588059de3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3cdde55f-5aa1-40d1-9cb8-49ab3399a067",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a4cbded1-a984-4d7e-8ceb-87f4c19ffd3c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e769d36b-2450-426b-ae62-c7fc40ba37a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4922720-295b-463d-b47c-c5b78d1bf2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38117a89-db0f-455f-8877-31a1882ac455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a89cecec-273a-4e56-9047-bc1ae1bcacea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b778529-aa59-4767-a794-125a7a9dc493",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f517558-b491-4149-8870-8a31a709a6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3faeb23e-c55f-4ca6-bd9a-e348bd01842e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03a64eb-13a1-4a3e-a495-2f88f4c315b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8ba0882-a065-4f18-8276-614318a408e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936b2a6c-4bc8-4632-be72-6a5c050bcc4d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca46f80-bb0b-4d7b-b69d-999ed528e490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7113470-d011-494c-9956-e1643b59e55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25673337-f239-46e2-9877-e532e413c0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fb25b34-d8d8-4aba-915e-54d89adde2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91610759-0228-4c21-802f-524c68088089",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb28e03b-aa10-418f-90a7-3ac2e725d264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840fc48a-4dfe-4dbc-8b13-337b1a749791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e07207-90fc-479c-8fb1-1f7f918a4082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6742e757-4393-4993-8436-f501e13c6a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572cb885-964e-455e-9e05-2c2739072eff",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f922ea-8310-43a4-978b-6ed26bc3cad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7a2735-555d-4f7c-80fe-205bbea605dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4af36d8-5c94-45f2-ae1e-f72a3531c1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3605ce76-2b46-4212-ab62-822f5f278d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcc0c36-ce2e-4e13-87ea-1b95000a0a80",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d55c44a-b056-4302-babf-50a885478404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d64773-a7af-4c43-8c72-047f36e32fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0331d3e-61bc-49af-b1d0-605adba35d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b2d0c5d-aa8c-449b-aad1-a4b5453e3dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5608fafb-ffbb-42ac-8306-1bc72395677d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2074b97-6038-477c-a300-a0ee99a0da24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95834ec8-7200-4e07-a411-2bb42bac94d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c02e98-53c2-4302-bfc0-369561543d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb88e9b3-02a4-4442-8185-e4e41b9fce27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf25fcc-6a62-4348-8223-1e1dc49ee315",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79f2585-ecc2-4716-9938-c76849ca261a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18301845-884d-415a-8c30-e1efda3e4c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdc37a3-d49d-4146-b1e5-cc47fca814c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81c196aa-cbc0-4555-aa21-a77fd1a51bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ad3c7b-dcd8-4622-a0c7-6ce0a445093e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6f6f82-9fe5-4d26-b563-c6a56df0b79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba408b78-7d43-4f6b-b4b6-2b45f55b7ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f24e58-2f25-440e-a2c8-422253bd33af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c58b8ba7-04c7-4d8a-8e1c-ddae18a726b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c32b7d-6d68-49c4-9f0c-5e759d765300",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f158ef-fa95-4bcd-9754-731a9f7fc4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb4060d-8b43-456a-8aee-5a2073458ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe1eca5-2e02-4d5b-a685-340862a5507b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df30c768-e733-4b55-ab3e-2977809ca5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ae89f2-81a9-42b5-b9a4-5b522df77a67",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1186d5a-9c9f-4024-b893-f9b430730519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7142f8d7-af7a-4284-a2cd-2835aeb7f74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1649eeb-ead1-464b-a414-6f0d2f586620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12a14984-4fb9-4a6e-bbeb-43c58a37f3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a94ecb-a153-4f8b-9db3-b2ea9f8ee52d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cf4089-f6cf-4569-b7bb-5bec23c6e917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce931866-8a0e-42e9-ac59-64d625def45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37eb64ca-2839-41a1-9bd2-a3c200c24751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3cd2d55-5442-442f-ba6d-5fd8447beba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733e6587-f333-4f74-8553-31ec8d13448a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065ec814-95a2-4b70-8e69-534a2e5e9e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd1a13b-cfb0-4412-bf9e-d3969a0fe346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cf27e6-53dc-45d1-b82e-1101b2013d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f85fe2a-77f7-485b-95e7-166b45cb069a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4765b51a-015c-4fb1-89a7-a364262bcef7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8754a4a4-161e-4f62-9f1c-64552d8315ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25aefff-26d4-47ef-ba54-7b68a422abec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21c4594-682d-4a5d-8ccc-0160a5461cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae19ea62-4bab-4782-b3d7-b0ed4565a9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83202a1d-2aaa-4d04-8f11-a38dec75ac34",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6d905f-6a35-4590-9805-3282c57262c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ab19a3-80ad-47df-aa63-9ec3ccd0498c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1b8b7d-e64c-48a4-8d9e-1fc89ec79df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f0fce75-7e95-450f-b878-2032d9e5f2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de9f3e6-383a-47be-9f62-859016189b99",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b259be2b-5f36-4acf-a110-6d226a01e57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21af0d24-03fd-477e-93ca-c19bfa212455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a8cc7a-9697-40bb-ac45-04bcb25e184e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b89b298-ee50-4850-bdf6-f5c164730de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53d09b0-9849-4705-b785-a89ba045d01a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba4424c-ac74-4950-bbf1-0736fdfc04f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3844b387-12c8-468a-a3f7-065514381082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ac4420-14fd-4956-8fad-47026b6d0e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9be224df-584a-42c2-ab26-40fc6ecea5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1162d6-1796-4b33-945a-ef827dad4048",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a2b840-de23-4976-9f74-379b7d926100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552f706a-ec6c-4721-87f1-cdb56269127b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185cace7-adcb-4023-9c13-0dd03fda1393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "baed68a5-a207-4cd6-8381-92cfb1ef7bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4b849e-2cc8-4d58-b944-9124dc2b1377",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb43186-6d27-4b8b-bda1-db51e58cf7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d8fd31-64fd-4bb0-a8fe-a21eb110e0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d31398-8503-4916-af21-dc5c612f1bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b35a7a04-4c3c-4860-ae1e-2069a194eb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36902160-c7e4-4039-8739-c9d3df5f28f1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cea9938-2d34-4f79-adef-a55292275768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99385a30-7c26-4a36-80d7-124f4380dbfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94e6b52-1a3d-4a0e-af1e-24cfddc9816c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f38e3e1-317e-4514-8898-3bf727c65709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e3246c-de8c-418d-9b1a-7f65f6bac9e2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c6c469-5e8e-422b-a880-6006299b21cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f085a03a-28dd-48f7-9a01-5c827919271d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cac605-f442-4fc2-b00f-f77568534008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3427e6f-25fe-44f2-8377-b3054428c37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8c1d2f-fc0f-4c43-b5a1-6502d8705a7c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc741960-e265-440c-82e6-e1edc4f1114d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8dc53e-6e18-4495-9923-8203e1772f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa9cd2f-4dac-4348-aef9-fabfaf3b90d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce19f9d6-c206-4653-92ae-77ef9609db12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8c264f-b0f7-4c17-a39c-1be4c7e6b4ae",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e947e89-c145-409a-abe6-34307f01a8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6086f997-9af3-4dc2-b91b-e25c53df2760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a39c4c-9664-49d5-8c21-960a5947545f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e763b87-e192-442f-a78e-040e65550ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5d90ea-5d7f-4013-80d0-a44fb99e3326",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b3e8a6-2b83-4df7-9fbe-af007b47b82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "127ef0a1-ff9c-4484-8a63-efa2423a5e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36be4346-6521-47f1-8394-059f97b2266c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cca04235-fd52-4eef-8ee9-773e0431454d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6810ac-e1b0-4e88-861d-59b730e04918",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db8db65-0c33-4f31-9e74-bf005223efae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351ce011-cff4-4ac1-8de1-06154caac871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f2ccd0-7479-480f-8132-ee3f67650f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9c9ed3-6d3c-4b59-833e-291b4e0a3582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84dc16d-6ceb-4a4e-9536-7d63e888ccf3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0fb8bb-612d-4e92-82ec-4f8e82e7d513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e716c319-23f5-497e-851c-0e6b4d707c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f2ffa4-e959-41eb-91ff-f183b66c8d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff383ce-a410-4c84-949a-8c6b555c1e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba95944-d040-4f16-b860-b22d4bbb777d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f916b4df-2194-49f0-83ac-c6d85f32a440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3332b5f-b5ca-4f9c-a0fb-a7e4b27db924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb68c41e-677d-4f9d-aba0-92bda8283496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58fd9523-59d8-4d9b-a22f-0ae0cc7bfbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07890082-9491-4867-8769-852d83ad154f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330dd510-1870-4bd3-b3d0-dce0c20ebfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb06efa2-90da-49cf-8b6b-28c3884ffaa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc683937-f9b4-4961-b985-0784948f23e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15f49f05-8061-4f5d-b9d9-55e08ae7d13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859a8144-a9df-4064-b56e-c4a34bcdb1e2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf99316-2341-49de-987e-e46c74d9188f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4e1207-091e-476f-ab4f-b8d1fa58d7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e47c810-805e-4e7c-82a0-98f762834ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf928a46-543f-493b-b0ec-44e4ebfd82ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2f911c-68c3-4e41-a6c2-596fc221794d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93eba97-a756-4052-8a9c-656636500b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26729323-4f0c-4968-b0f9-b28682b274ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce83598-299c-44fd-a92f-509d9a87abfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6c41a7-84da-4627-a1ae-d58c9869fdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa8f3db-bd87-498b-8775-6823d9a8903a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562592e9-d843-4c73-bda0-fc9ebc921bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5797ca18-ea6f-45de-83f4-2a5df7552dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2af787-0ed4-488b-8e52-0d76a3f28773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "681f2ffa-7108-4c07-8658-9fee4ae4218a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68850292-f2ef-4f52-8d9e-9b3f52345bd2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1b51dd-fdf1-436b-ba60-7ae03b01d35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5450fb-b363-4f90-a794-7519e590fd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc8f700-e745-4779-9d98-4c1b0cd0bd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf9dbe0-533a-4cb0-8c7e-92fe6aeb3a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0db3fcb-3cb1-41d7-b898-32cc378b6fd0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2634e646-478a-4592-bd5a-9091886d47f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad78ede0-cfe4-42d0-89e4-ce9f2ac15aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453aa865-2c27-4145-a946-a52cf0c3ece7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8149e03-5ccc-4b69-b8ea-5464e1a86fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc0bde7-cbb8-41c2-84b4-624f11ac4cee",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a09a51-836a-4669-b894-54d2f156dfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d61f2a3-de8c-4e49-bf00-bb5781b58e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d82574e-8499-4109-9d4b-81d4e1c45251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b08268c-3a8e-4f5f-ab3c-a625c64ac8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe1c743-c592-4a0f-8761-1e1d3e3fb6b6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42ee901-ecea-490f-b08e-57ae6ce573f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c6dc31-bbe6-4373-a401-631878dc7d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed31f216-eb28-4b7f-8992-350884df5305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ec34cfe9-db1e-4ab2-8296-2443e03428c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b517ce-5640-4f1d-ab11-3b03ee8ed524",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ad0552-a0d2-4ec9-bb3a-0603bf7c4151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f055852-ea08-4908-80a7-03650f0a4725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3de1afa-8ff2-424f-bab9-b2e5c6e5c73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "323edc6e-ec1c-4c5e-ae22-684c12dcb1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9315a3c-e056-455d-b3c7-b45cb482df6f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2edd863-3b35-468b-ba87-1d32e8485f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0805b79-2c84-40b0-a05c-b616e6380231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b134ea-cddf-4b67-a5f4-c3e365450e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c556d28e-566c-443d-a2c5-f40be988f3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f0b9e1-6936-442f-a213-5c87497e0339",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96748cbc-58b8-4ad1-870a-dab9b6d9ab47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45dbc2c-6a0f-4520-9b0e-b613b953bb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ab8e36-343d-43fd-8dbd-78c0475ecdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "19c91569-4f81-4709-bc7f-479c9c288203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0269b7-30ed-427c-ab53-718a34591210",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba636d8-e777-42fb-9cde-be9a66f76302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec64ad2-0d06-46d3-9df5-61aa796be492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997d80f6-2a31-4569-a779-3f7efbcce8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9df3d5f7-fa55-46f3-9e0a-2d03be9d95ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95403e8b-f479-4496-ad8b-5c13616945c8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11aedc49-df74-4344-a829-dd491b793771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a696e1-cab4-4d01-b86c-bd34b5e87896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea928a3-d313-43e3-8427-a4080e902f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac51668d-72e5-4511-b692-37c4b3831f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29bc669-066a-46ef-ba99-6deb464874b6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706b651d-abab-49a3-834e-3c4c68424e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf8b48a-0735-4867-a9c9-441f97dfd6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c00032-d053-43cc-b59a-86a2f3621433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f539ea-5033-458c-b4d7-a749eb83ecb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f142c8-000c-4d4d-881b-d6204034e401",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7bfbf5-f344-4a8d-8068-46da636ab4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3683077c-8d8d-4d26-a9f6-fce4a70bcc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc29ff78-a8cd-4db3-aa24-4879a0cba7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "57a6e193-29a1-4a80-a935-a77c88493c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843990cc-bd37-4853-8637-d5e4671e29a4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d519dc26-1282-460e-ae0e-515e7a18f7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b060e1d2-5b43-4208-a7a1-a2ece74914bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b61fd6e-ac28-4c33-b2bd-faeb55df6333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "060379e0-498f-4d19-98e4-18c34138be87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9d9af8-60b0-40e6-9382-9bba7881f001",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a107f2a-9d18-48f8-b96b-94314fe2cff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5563fb3f-0e37-4318-aa82-cb369f5ea376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e30508-4f6b-4b80-913e-4ad690a0b7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad78621-0f0d-4d4e-a48e-39e2e15065b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e45b80-08d1-455b-bcad-e032e5fcd9e0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491a652d-8fdc-448c-9c83-17a6e53eb7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf23564-3c83-44b3-ba5d-b2eab80504ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11836d1b-f736-49e2-a116-34d30f0c165d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f10d4e-8277-4781-a451-df0d0487ba1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6513ad91-c4e5-41fd-90f4-9caf4123bfe1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f73fb3-8fe6-4c7d-a423-81d777e48c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e184a38f-bbb4-4a32-85d1-919584070335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cca484-b166-4991-ad1d-83eb30fd6156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f916509-4b27-48dc-be41-63da35579246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037e544e-7eb8-4488-af15-79c27780e714",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9bc4d4-b16b-4b6d-a611-d3f2b4a11f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9926793-6d62-4d9a-80d2-8f14a03f8cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883c796f-3109-47d4-8450-f8f05909764c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d81bb8f7-dcec-4bff-b0cf-e821eb7fdb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa0630e-3daa-4607-82d3-9862c349d414",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda19a10-0432-46f0-8d8e-4d7cc041df07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509cf08a-8f6d-46a3-88e2-e1889a2e68c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3239b60-7def-4af0-9d2a-427a9d23d5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c370464d-ed67-41fb-a408-2a620060a0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3687de6-d37f-4598-84b1-35f937ba4fa1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5403689-47ed-416f-a165-4f93f5acefd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed487b5c-9526-424a-9170-362f117a5ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16845e42-d3e1-4f59-b5f1-590786b279d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f888e2-e4cf-45fe-b9c9-d5a22d5cc2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b12d38-437f-413d-b08d-705a12022f15",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141c64df-bfb7-4567-b6e5-b9431e7d06b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d7484e-d916-47cf-b15f-9ecfe10fb6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93727a43-87a2-4fa5-a148-83248b0302c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa03a3a9-48fe-4902-8d03-08cdf7296e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb74e6ea-0ec7-4dfa-8f95-f104248a7017",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0f2999-3b09-450b-bda7-60830244ef4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8467de9f-0021-4d83-9cfa-ab0463bd2f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57b6169-cdd6-4f22-bf38-c7394d61f416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b0bfd1-b519-4929-9497-3d2d0d32326b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb07800-d6b4-4ab3-b951-82c998f24446",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f4bb88-f567-444e-9a23-fc1a4b1ffff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e07a2186-ad2d-4342-92d6-e90bc32ac179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaeaf83-a5e8-4429-b2e8-fd8f3093c4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3d90e5-864f-4771-9e63-0cf9af72058d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b524e3-789b-4bc4-9382-b2065e12b6a0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140bac89-dcd5-4a06-a078-2ff6a4911b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a63b9e6-87c2-4333-918b-073a8a984e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5f7987-5be3-4c5b-b9b8-8617752d9aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f177b019-c53f-4892-b85e-5785f317f084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ecf94cd-92bc-40ec-afa9-432d5b66a5bd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51678ff-65f6-4898-98ea-2e9a4dab5b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b21c16-422a-407e-a9ee-6a5a0f93b4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff84f905-a8d3-47aa-ad04-9229e1dc952a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b53f179d-65be-4d60-8447-2c6a5f7b06c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c45982-2c5c-4657-9727-b53eca826dcb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e12888-67cd-4f3e-9737-713992ad7baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95213f9f-c2bc-4ed5-92a9-5804db1f2d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a07b982-49cb-43a5-82b5-8e11ccd2cd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b642a4f-022c-4435-916a-4a6c7867f782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0be34f0-1c5a-4275-8e44-6cadf4824bf3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1335fa43-2a3b-4ddc-bf78-73c74eeb914d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbf3f2b-0a5c-4caa-b053-873cab9946eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c37b7e-04d2-4f2b-89ad-000ae9f0fa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "28debbb1-ae20-4af8-811e-9f60e5732211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7079aada-2083-49d0-afb7-d915633373b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9ca997-109d-440e-a3cd-99bfa9a0083a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9a578c-9fab-4c9b-a906-e40c8e6e36c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8de1ce2-9b7d-4dac-b679-74016db48c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9abfaf-4806-44a9-b322-c62be3cf3c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898d30c0-2384-4b4c-a3bf-e326fd427dc2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0619148-c33e-4984-a7ef-a3aa34309c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6506c1-92fa-4eb5-bbc7-9c4b335e7cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dea937-a230-43ca-9ed5-620f15c1bb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7365dc8b-2286-436c-9fa7-3d22051206e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7874bd23-c740-45ba-9c98-c83491a1a87f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83ab04b-410e-4d03-b349-b2e1b2ecc34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8166a1e1-36f5-4e0c-98da-951a6bae9a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f963c882-b444-4de9-a927-965fd507d2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d229c9c-35d4-487c-b0c1-d09efb4f255e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6360d226-af37-4de6-903f-54058f5120c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c823a2-0781-489e-b871-ee958da22745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1391133-f776-488b-9fc4-2493be893577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f593f39-7aa5-498a-afd1-3281d58fe5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3f610d-7818-47c4-ae59-f0ad28555732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569d18e8-6afd-4d5c-b5b3-1019189b9ae4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3fc968-b235-41f4-b1b1-68e3e6fb7287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688939ef-f539-4759-8bf3-0b5ddf3b61a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34236870-037d-4c3a-838a-3d4afc8ed22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f331d23-2fc1-4b1b-80de-242f5f5cf899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4086f122-42fd-4893-8d31-05af45069193",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd5c712-b056-45d0-bd19-42a96f9b83d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c040aa3-b186-413f-8857-fde1f099fc3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a388e0-9fe6-46c2-b3b2-67badf5ecdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "87b0c3e8-9848-4052-a1d1-27ad60b702c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4361561-2be0-4bb9-814b-bc39b655ba17",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686c5b1b-ca72-4052-8a40-fcf2c7053f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92acfb1b-372e-49b7-8172-50811dfc9bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f9e726-3562-4598-85e7-9f5e43f5326f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "301351ee-c33e-4464-8e60-196de1fe7917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadd4de9-5695-43f1-b1ef-a92bcec2045f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03daa06-2538-4465-a690-313159e54e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f853e6f-495c-4156-afba-d49a2b84adf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccd794b-a2ef-4497-8df4-674b6c99c32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23b829db-271c-418f-a9ec-668617653e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234d2ff6-a245-4a6d-b0bf-e0dbcf879532",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc7a6f6-f55c-4f55-849b-a66488074c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0a6930-8fa8-4c0a-91a0-76cbf4199693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5402d8-44ff-4106-b791-10d24ba23c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d96c4a3f-372f-49ee-a477-d8bea60b7ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7485cb94-4e72-49e2-93e0-ec17d43efc71",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ecb75e-b448-4f09-ae9b-222b47fbcdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d72481-5c34-49ca-91c2-824a945789ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a4e83d-9c84-4026-89eb-b968bcb62d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b97d2aa4-a2fc-4f6a-afe8-fa094a4fc384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fbf6c0-79db-440d-9ace-162525a60ded",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74e3fb5-7590-4b2c-8b9d-62071fc3fbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f12640e9-6697-48c0-abd7-42818851deba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e080fd-5f1a-4130-8f62-db7c720ccbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4207dd05-48f3-49a2-9df8-ce5ed98f2ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab944537-b848-4acc-a811-1e41ca45da7a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c51d793-15eb-47f8-b846-7124c31a5142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132e26ef-7792-471a-9baa-d75dba4ee369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbf60d4-3e24-4ac6-bf27-fcaf09a0c3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b08a1d-7055-4540-86b9-e3109860b052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e827cd-66cc-4f73-8c84-0688c312f26b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99990fa4-29c3-4b7f-ba23-fb9aba237030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2647849c-3ee1-4821-9655-0e54dff942b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f4fa3e-8f07-4203-b005-bab8f2b8a7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bac5b082-019c-4774-98ee-89d54b20972c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47529758-e23f-48d2-a984-9441d9ee4c4d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e35ba6-0351-4c41-adbf-81cd13830c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7cbf01-9bfd-443e-b208-0d5e541b9864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab813585-7dec-4795-9274-97e4280fe5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb03dd5c-df6c-4b37-bc35-d8d7a65c9853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fd849d-3517-41e8-88c4-3e2b3d780d58",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f326d5-8731-49e7-b0d3-e35f9b1d58b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9a8569-3d2a-4ba7-b212-ae546ebcb3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf20a03b-a2a8-4ab5-8b32-a0e3ca4be52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece7590f-3848-4a5f-a50c-39c089c784a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a926d5-a3e3-4917-a1cf-5be5055c62f6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98d1a2f-cf91-488b-8da7-044a965c5d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06190cf1-c442-4ba7-aa90-81364121a4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61891bb0-50b4-40ff-84f1-57a66c8feb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3801564-443e-4ade-9c8a-82c5d2fdf131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b6f006-8e11-4e74-a425-3f5a976a4666",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4096efc2-7ec1-44b4-990a-17829ce83993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e066e5d5-a1ff-4529-b709-8be44266f9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193525b5-d50c-4fae-bb19-0a75fbd09f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3be1af24-6604-4bdf-9516-6b416376bfe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fb68b0-da38-4672-80c4-30f2944a9e5b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6109f3-acff-42b8-b5f7-a1f7f171edad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a42cad-27a0-4167-80aa-19f2d73a0ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b2af4e-efb6-4844-a7ae-4c343727efbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd55a07-36e5-4342-9b51-487dce19a682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93498229-42e9-4f56-9a55-3d5230369743",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdf700c-1f67-4663-aef0-daef5976f12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babf1dfa-950c-46b5-8263-0f0ffa6af739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dbc3e8-5cbd-4aab-9fd4-5bb6f0ad3fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2dc86c0-c4bf-4a63-be0c-d9b6c7856fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab04e14-1e4b-4a38-8464-50c1d8345d66",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e326a92-0d6d-4e97-a5de-f515d4f48db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965ddbea-6f8a-402a-aa25-d08aeaa0187b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76eefa24-fa12-4d89-83e2-c374ad6c5bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25ea60bc-7381-4c24-a990-affcc88a37d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9739f6-6908-493a-9f46-69db6538d9ee",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d194ad78-a2fe-45fd-8468-a86525b941cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24280634-85da-448a-94af-75aa7bc23be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10fecf86-5f9a-48a7-ba6f-41006bc45b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "472320b3-3d8f-4022-9fb8-45f5129b154c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee06c08-2093-4188-9f4b-67665315ba7e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd40d832-6e0b-4c48-83bd-65ca6ef3744b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6c7abd-c9a9-4a24-8703-36e6bd1a6d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0f5a72-7180-497f-a65b-3a2d67a61771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32949ce5-0a67-4b1f-8cc2-5b80aae2aa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880d88da-9ef1-49d1-94f8-9ef8b2de6140",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656a7386-2d8d-4976-8a13-f1eb75b0185d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8635dd47-64c8-4e65-9786-b31001146dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262a490a-6470-4aa0-a7e7-7ced1824a8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "643cdc52-7587-49dc-84e4-9c9e018d1d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ee37a4-a68f-46b8-b70a-253e17f325e1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc768ce-8d04-4ddf-a40a-269934dda810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd56ed0-540d-4146-aa3c-077cf2987b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5981568-f4a4-4d1b-afef-2863a89f10fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18a7d22b-ab34-4deb-ae69-cddfc3d038a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ccea9e-6657-4c5d-a8a9-f721d25b0f51",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa00a849-b9e6-49f8-a537-9e67b455811f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea78f55-9e3f-4b41-b69c-70525f1e6889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97862d68-591c-47d2-a3b4-e1054ff3dc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bde340d7-021c-42fc-b3b6-75e9b1f57da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a0cd9e-e2a1-49bb-b577-652ef5640edf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3824622-b4ba-43d4-8974-f6257a808cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1369657-0331-4920-bc51-85b804b2a6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfaae97b-d6b9-44ce-bd5c-30cca09ba0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb76fbd-5a11-4776-9edc-3b3a3a2b0cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63e0969-510d-4c49-9d00-fb8d694f95c2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d65e8c2-fd20-4a43-b6c5-75d3a1841a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4296fc55-67d9-4ae8-bd54-d618dd968d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e584d57-5167-402a-af67-61f67795eef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e36ac23b-6c77-4a24-9680-e40e329eba4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a9c026-339d-4e91-b8f7-3b74b6256956",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdb32ec-9f35-4103-a623-8a431c4e44b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770a2991-7628-4342-883f-266f6b29c187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439af4ff-4985-46eb-aab8-bd4de12df2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c5c3bf-9d28-4597-afdd-d9f5569abc74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df4c394-ade5-4974-9e01-c3f52c5e86bb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aead2d2-fabc-476d-b755-2e8150d60ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b349e420-87d2-4d76-9a11-1964cd9b7b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51990548-5d69-4f22-a47b-27233f6a0e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2797398b-3e10-42fc-8083-64fa82491c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18631d4-9cd3-483f-8784-576d6c62bf62",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d088d305-d742-4cbd-9fee-990221976e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd4a15a-351d-40cb-beac-cd6cfa7478c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a8f681-5834-45ca-b23a-939c173cb98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e735525-5cd6-44ca-9d2a-5287e7a66151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf7fccd-775f-4c48-9376-045a72d5285f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e976f2-b830-41aa-afc2-db4b08aecb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7387c021-a86b-4447-8fad-c3a4628a6b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8287db35-3d84-422e-a55d-595b6b818b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2a59bd-cbcd-4f75-b285-fe1811140ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68b714a-5aa1-495d-ae6f-f12f948c072a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4da039-0b1e-46f9-960a-3b69ad056a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "828269d9-a584-4afb-b92f-a4b4e53d1db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ce44f4-be29-4d20-a348-054fde70f5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4217816d-89c2-4d02-a107-a80fac0c0917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb608793-af6a-484b-a67d-3e083ad1839a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf60f95-c3fa-4c1e-b63a-bdf28ef22253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d32867f-8331-413b-a146-ab745aed048d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19aec36f-268e-4dcf-91eb-cd5f070521d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "272d6f58-6d3b-496c-8656-4a1f69a9a414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af82f36b-4669-4eea-82c4-f6e6f564c071",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d7a014-7e4c-44e0-bbd8-c0a0de4e2704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90631e8a-7b5e-492f-b981-17827757e873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f88fc6-a9c9-4e91-ba89-c2450ddc2b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f439e7f-fabc-4787-ac59-2a6c23644673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7580a818-6bef-4784-a99c-c00983b3c436",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f388f828-73bf-4bf9-82c7-6e328690522f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f2aa37-2bfa-4376-afcb-16e5499b7f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a53451-fd5b-47d7-be15-12894cdb0012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e012a7c-38cf-4ad4-82ac-f5bd9cba9537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dad599a-ece2-4d25-8087-272ad66060bd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a16d50c-25c7-46eb-8a81-280ebdd9ee8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4aff2de8-b0c0-4f44-938d-2a7f068f1c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebed5fa-ae92-476b-90ee-683ab183949f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c85ffa11-be06-4391-9ea1-493203abd2f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f924df1-5d6a-444b-9c54-a8c2b9e28cee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38b9edf3-c19d-4b1e-8c7f-fad0ed33083c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b63f45-4e76-4829-b2ed-39837607ee6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2875877-3907-4716-9c06-1b9416e38c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace2d879-a7d9-4668-a33f-f425beea3f0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c7e90c5-5269-4e07-aee4-c82a0d5b3d2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c527a83-c3cc-4312-9491-396feeb72e12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59f83dee-5c30-4ce4-98be-32f5b0f43bda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd0f39f2-41f5-45b8-af3c-74522d76b157",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa5d9dc4-3960-4644-bb7f-896f8732e42c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ed847db5-63cd-4d55-bbc3-159ed153ec71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41d0fc77-1dd0-43e0-ba2c-df1d8a3b0640"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34ed3701-7bf9-4418-9224-3b19c591c5cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b705ed89-c718-406a-9436-b4c265cb089d"
                }
              }
            ]
          },
          {
            "id": "326b16b2-8f8f-4923-b9d3-58a2f4a3a836",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa091a97-d9fa-4796-9dfc-dd0aa3dae30c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "447e2a8c-cfb1-4f7c-b7ac-5635bdc8089f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4187213-8adc-4309-9922-12375916a787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "eee17b89-f8b9-49a0-95c8-35e1ebcfbe06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bfa2c4-12b8-4285-8955-093310724be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51188ac9-99aa-48bc-af08-662dd9cdee05"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "24ce92ea-f023-4d2c-8aee-0a48f3d5c1fd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33937839-892d-4237-997c-3d37882589b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33a49f86-85cf-4f66-a585-adf37cb8544c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9611c7b7-dd4b-4ec6-8720-02fd7864731b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a680814-d4f9-4701-852d-2b1d887cde18"
                    }
                  }
                ]
              },
              {
                "id": "c1e60028-69fb-4333-89bb-2c1235c8beea",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "521a4cd2-734a-43d4-bd57-7b9067172f9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75bbc8a6-013f-4e80-9830-50c3d5d82e3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b49dfdef-ac9b-4aec-b6c7-93969baea0dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b60ad539-c68d-429f-a28c-4d1d7459af68"
                    }
                  }
                ]
              },
              {
                "id": "5d9528ec-e5a7-4273-ac9f-5f1154559e9d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef1594a4-3cd9-414c-adae-3faa5558373d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "618e6bbd-25fd-486b-ae4d-8296ae6077b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e97db36-540a-4a43-9a97-b9c9acae6ebf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4be7a36-ca14-4a7c-bacf-79233a82293c"
                    }
                  }
                ]
              },
              {
                "id": "a7560193-bdf2-4d1a-ac27-8fcc1aff69a4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f7f279c-6f6b-45cf-affd-da0f2c2e7d6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a341d8b-6dc7-4ca0-bef7-3b2be3436efa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "555591cb-29a1-43d2-b354-628ec68be948",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ca82f0ff-16d0-49f4-829b-637ab947d2dd"
                    }
                  }
                ]
              },
              {
                "id": "b1367329-1660-4ef4-bdd5-2867d8921b1d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a5f5192-bb08-41b8-b181-c198bd0c28fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c61a0061-7b73-440a-a211-ca5a1f08b523"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e8b0830-7334-4e4c-9405-a7da1fb552a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1885a219-6e58-4f4b-9014-4e760bf775b1"
                    }
                  }
                ]
              },
              {
                "id": "cfc01743-af68-4d34-b707-c54d9f1800b3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "758c4566-fe22-4ce0-94ca-b622f0403262",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0a0cc28-e6a0-4915-9a5f-64c0f0a8924a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e50774e3-2051-4e4e-befe-17b0c8451fc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99164e44-cca7-4852-a695-59710c3db08c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0a43faf1-3708-447f-99e0-49070d564b66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e85ad46b-4718-49ad-9dd1-e926964ab821"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "710cde10-db56-4b13-8f1d-dd93d6c1c98b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d52ada2-87fe-423b-a771-4f0852a431ab"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68ce7ab5-fac1-49da-914d-4716b2c632b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fce2fa7a-0a58-49d1-ac0d-bd8f4b032c17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a8dde14-8c73-46a7-825c-20f9b013d624",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0104451a-af1a-4517-bf66-e2fe15dc9e68"
            }
          }
        ]
      },
      {
        "id": "07b96718-3ae1-4758-b52c-7db4a03e9d94",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "02bef35c-182c-4805-ad47-52546fc53a28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aeaa6773-a38b-4a3e-8bef-988715735ca1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e244533-3435-4b0c-8202-56936605e90b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95faa678-d131-4c56-95d7-a2f4bdd3cef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b914c03d-f2aa-4be7-84cf-be788db5aa6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d974fa-ea29-48c4-b53d-18d26572f67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2797974-3d43-42d6-b2df-6b713f23b175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd10bbd-fb04-4804-aea0-558752acb053",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1920cebd-8f3f-4b65-bf08-50ec24b96c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c4c373-a1c5-4f67-85dd-3cc3b4ee9c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68956b2b-2849-4836-ab70-32afc022065b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66344704-b7bb-4cc0-a047-f28920779006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8efaa0-57d8-4203-8363-c40e0451aee4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25890d99-6ad4-4b01-9c4d-692df62a4095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd86f4f-e63e-4576-84c2-c12eea235e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edf9d21-2a98-46e7-a3b3-a0374aa091cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80e96807-a1ca-4740-a615-33b44c469064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83018942-2a9e-4951-b010-5fdb95b2aaa2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc55261-c00f-48a0-bebd-0cc740ea1466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79dac89-d4b7-42ae-b9a3-fa76f14a1a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c58c22-760f-4505-afd8-99f98da0adcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "750a9726-f837-457c-89df-e6dbbc00d327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133b38e1-ab3d-4d5f-98c0-d4fa8147172a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa80b5e6-c10c-4ed4-8d6a-403d922d44a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b43c522-7b46-4e7d-bec2-d4f3622543ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ec2e17-506a-4058-a8c0-0db1004b9eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1656b166-df5f-40b3-9552-a1c1187d66e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b63aea-49bd-49ac-b3d9-8d47ce6dc2b9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912bf289-8ebb-4593-ae28-c887b99de00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068aaf93-e46c-43d3-924c-898e1d6d5a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd20f70-c273-4ea7-88a7-cf1d52c4bfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc23cd2-2872-435e-9b67-d5917a94424e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75dbbcee-5068-479b-83d5-a284d7c5a647",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192dd917-bb2e-4842-99bb-3d6342fb6abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d4b3b6-f721-4288-b542-b3e30c3b64ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee080bf4-2388-4727-8b33-60c35f68a0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9538686-4dad-4a2c-9696-de87f0123d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55826f9-3750-4f04-9757-fcb1a3a27add",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f470b2e-9d42-48ab-870b-19efdc56dd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371b5e71-4269-4606-9c07-e84a4c1394a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a8a6a8-4173-4a14-95df-59f35593d8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a21ca8d2-f27c-49e1-8b88-a893d875ddd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3e8032-a788-40fc-9a73-0a4b6a760a5f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99132fc7-8ab7-438c-9550-0088263e9f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6635b0f9-8ddf-43ff-ac4c-5dbe9d58c092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fce1f58-af1c-4eb5-878f-d2fc2b20c520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0efb614-82d9-4395-a8e5-6e33f7334d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0103569f-a6ad-4d45-abd2-a81a6478652b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803958e0-fbaf-4204-b37e-b996b85788da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37755a5-47c5-48a3-9be8-941f1a23b50d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2dc8836-df1f-4d5a-bd9f-8ac5a7b9a38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e06c21-51a2-4336-82e5-736819b5f3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff8780a-46ed-4905-a8ef-9fb44c8cdc01",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff33110-d7d9-44de-8eb2-c552ee81ba13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d61320a-d9c1-40f8-ac28-d56e17a6c1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aecf90d-bca4-46d2-b114-71d0a6b0f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2a09343a-37a8-44ea-9f57-ac11c1074a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a7cd90-d625-4a5f-8753-a5b401f30132",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1bf991-ad47-4fd1-84ce-f0d73960dbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205ca383-d2db-4180-91e4-5f622590ad5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674cd9b6-1835-4271-8393-4fda17c0eabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6551d97-d4b4-4f21-8551-7301a7b8ef14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e038558-ce29-47a7-a22b-e4a513340e64",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb2fe7b-8b1f-49f4-b629-1e4ae63daf3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28406e79-5462-418e-9b5f-f197d0aab433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d615dac-039f-492a-9e4a-77aa1b3817f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc559424-5600-4e78-9959-620b3dc142f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d74a89-5751-4ab3-b718-b3cbe8dadfc8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9579ed1c-88d6-4b8e-b01f-7b637c48d93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08aee048-7c0e-4a30-b8d7-e0c5bbf94fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6936e4d2-579f-4df5-9f9c-bb5e5030df88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf3a113-2177-4000-bb8d-7d06f21c715f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f48f51-f013-40c5-bd73-025f61c24e99",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3567e4-c0cf-4e79-8a85-2fd9875861fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b23afd-b5a6-46d1-a618-04dbd828e2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31469df-df14-429d-ae4d-4d4505b28002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9f2d2d-5662-4158-8cb2-3a7a84d17943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fb1552-cffd-4db1-b13a-ed894d7e44f1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a32a77-70f5-41fb-8f52-961837fcd2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893f77fa-6a94-45d8-adb4-26891cf338ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ff5cb5-0a30-43a0-a258-f3dd5613ab81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "25521a26-0d1c-4717-a5f3-7ccc3d45cef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c1aae5-240c-4dc9-9096-4b9bd31919f5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1942185b-a46c-4fd4-b807-9764f1a4e1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216f680a-7862-418d-bc48-6c48bb1845fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74784a36-08be-40ce-8c70-dccf07c3bb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a2b5b1-e272-4ef4-a4cd-4aeee64e9316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03215b2-b7c3-4942-b54f-f7c531d076e9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8121c5-daa4-417f-98f5-6ce05f2075e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19eb4d25-acec-4a7b-824b-eee328b0982a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de53495b-79cd-4d23-9e32-0d5b856be054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fde52fe-af97-4e6c-9ef4-ae1c86f6bae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5ab19d-5947-443b-824a-a4a68c67de5e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aac1c6d-273d-4f07-81bf-1d0ca1945012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b321d6be-9778-4ffc-aa47-72f66c320887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ff01b1-9831-412c-ad82-24ddca875ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18f1ba6f-ae1a-4fab-b624-0a035e79df69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6704ed-fd35-4390-885a-188803c0f8ff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e381855-8ce2-4359-bb19-dc75e1da4fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cb8654-ca4b-49c3-8b25-196cc9db235d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e10b41-325c-42ae-b7b5-d131ba82d755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfdb8d53-54b9-4c20-ada8-859660982788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baca4e31-03cf-407e-8f25-eb9a23e56277",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5158ae-e5bb-42ae-8765-ad6b6bd2cd9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd15c041-9fbe-4eb9-b1f1-743cba9bfa57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a9bf53-1273-49a7-ae08-4efc083fe0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "335964ac-95e4-4a51-a55a-8b4623b7e0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084794af-c833-4c11-803b-5aa0a131b466",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20248a0-8cfa-4b17-8784-c97272e59788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a872e6-473e-44eb-b117-820e78c3ae13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d69fe2a-1a15-4a95-96a0-c11f9a402482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82e027be-6f0e-4bb8-81f3-7c9555ede233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3158b99-f6ad-4530-abd3-c6a5ab0abb25",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6c233c-b7aa-4217-8276-e2fe9b74bd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6654d74-1c18-430a-923e-b7bbe1f01d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145cbb3a-bb5f-4f25-8c7c-c62bc5bfab14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0371b16-a911-4b48-b583-600fa62a6245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dd7ed4-fc34-4815-b082-a820d9308dbe",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f58b634-cb01-44ec-8c8b-52b089b90ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1966d19c-fc5f-4070-9830-708a3c24ceba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ae9d9f-5d8b-4e17-815e-5cdd56e3b72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84573246-f25d-463a-82ac-ace007a0d29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80ff666-c4d5-4fe5-b8a2-965efaf4d8c4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019c9240-f61a-4568-a28e-33a28e8132ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffe59c7-8294-4c71-b4b6-dda53ceaa792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b8afd1-a793-40b4-bc57-c5bebaa7dd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cad093c7-2643-462a-815f-38a517fe54d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d5e858-71ed-4b6f-b480-5a1e0ea1d3bd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f47b5b5-d1e2-415d-8277-7efcced0e33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2747d52-8dd2-46d6-b001-4deacdae4149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35af1dc7-f23f-4cb3-a5e9-1584697fc3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bdb6e0f-42cc-42f0-90f8-20ca78bf4e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055d5286-03eb-4530-9bab-3bcc84f6d243",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ac3019-f0fb-41e0-8981-bd25b7f524a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406c4947-2fea-47ae-8422-4badba9a521e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503b336a-08c2-461e-92e0-317a0ca0572a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be044a19-0b33-4401-a0a0-6ef22463799c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06cf331-0c98-4557-940f-327a60ad9c54",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee9ea0f-51e1-4873-9231-548ab56c5eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a2d3a8-6cd4-42f1-97d2-f03554e54640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6dd112-ddd4-4b5c-91bf-bc3686c19ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5589214-e080-4c25-9adf-4cd3aacf2c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3b938b-3b35-4a1c-bf0f-8214396e6f88",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4b6dfe-9f58-432f-8155-abce675061ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2039bfe-72fa-4b3b-8c71-e478263fab46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81cba94-d01b-4085-a374-d44e36d0f777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1420d6b1-8c5a-49c2-b5a5-9f2521c7007e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c90b30-6fb5-4639-84d4-a701ea41f863",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f948f872-0c88-4d89-9fd0-f8fe70e1f7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ef0357-19c7-49e1-8f90-f4fff588d214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e4115d-b9a0-4d32-9c1e-62243e23d5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03047764-df24-40d1-b904-372ff2a3a4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99acda56-0282-481a-a75b-f6dbb7e27da2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70b3b70-fc9e-4bc3-9640-0cda25f2b8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c826bb82-2e8b-46c7-9518-484ae9d90c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e578d070-35b5-4f8f-b2d1-37cf9fff178e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b892f70-75d8-4732-8236-8728cf3330d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fc0037-1b6d-45d4-a1b8-190e17af92fb",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2571a2-db2a-4b7f-ba50-d6ecd5a71b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f2f46e-d858-448c-9b80-12916c844ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d160782-001e-487c-9b5a-84e68ab636dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfe639c-7e2b-4196-b70e-a246c802fe42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2ce285-4ced-4689-af90-c82521b17582",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c9e6a8-8e62-4362-a82d-d027f591d8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5047d2-2adf-4134-8966-8ebf12291693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f79b0a4-b7b8-403d-8657-c99ceb3a27c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71756e3d-99df-44d6-b919-de9978e5f601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065d1176-095e-4867-95b2-8b4cb5ff6137",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca9c998-f7cc-46c9-9a79-b9f608c53b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86fb876-1e55-4473-ba1e-36d6d359862a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d68839b-6491-4baf-b621-a97395b712ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e72257ef-1a18-488d-8079-cbb0339aeff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85d5897-194c-4121-bfc6-c24175262066",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba62da5e-1de0-4463-b7d0-0a2eb2feb03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef8dc11-fd68-4c10-9bc4-67e2249f9838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54f4001-8f1f-4a85-948b-1eeb24491390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9701d30-3feb-4c91-a34b-fa1b7921a08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d1695c-9831-4de3-9ecf-b4c7b6a23ff1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36bbf1f-5d74-4e1a-8d4d-49b2a3a11a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2d9a24-beff-4917-8535-3fc085352340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7f5eae-812c-4861-88ae-b3144205cc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d31e042b-8005-4579-9a31-3eca2637d941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3511d5-688a-451a-9c4e-a476e740079d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc4abe8-cba5-4a24-b9c7-e537fecb4b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7622bfcc-1cc4-4998-8b8f-e303943a8913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebd6efa-b6fc-4076-acf2-6c51af847653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "694f8e98-0552-4b4a-9163-b378dde44c50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "270b9416-445b-4448-88ea-871c7ccbe560",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98c0e603-71fc-4ab4-ad94-e776d584e403",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cb0cc7-75ab-428a-82eb-1802e998b2ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "83ccd2b6-0108-4066-a8ac-91abc5b689f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "151eb22d-dd00-4b16-8b35-ab6409a59685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb3d0f8e-faa0-4bf6-aa09-b0325e810a44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e444418-4bc6-4d39-8c98-189e73ab3604",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5bd3f8e-1608-433d-90bc-d99cd0a283b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4d0cd93-9b20-4fd1-a4c5-53632756f983",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b09c985-41ca-4a84-83af-4d7a4624ac30"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd6dc159-2668-460a-8739-947f31bd24d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aaffa4fd-05e3-41e3-ae28-4132cd3680e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1340c130-4d51-4488-987e-f65e52600f07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21c648c9-adb1-4826-ae67-56bb071e2aac"
            }
          }
        ]
      },
      {
        "id": "8640ffbe-04ac-43df-9f60-72bdfeac84bb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8e7a6e3c-28b2-4c31-b86d-05d807d8f623",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7f245ba-024c-4173-9810-03cc1bcec0b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c0b1dbc3-7791-4529-8d03-0c6dd9361484",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a445a6-d215-48ca-a058-21b6079b33dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062bef7a-801c-4c52-9f4b-77c6b126716f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78954323-0b8f-4a2d-ad1f-8bca04ed3f5e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7381effa-ba1a-465f-b7a0-24f50cb77df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eef76c4-c405-4b05-8b64-967f37b5c94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be69458e-146d-4ba6-acf5-f537e8b5c228",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48543149-5f55-4e66-94db-c44e09c96749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff643e1-7e71-4347-b055-06268915bb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d76b5d-7ecf-40c9-a869-c91f4ac0ea0d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442485d3-685d-46cd-a384-653774786757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8cbd17-e868-4192-bc92-401d63984480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fe334b-f417-4152-978e-13a73aefb0ae",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ccb240-9567-4ada-806c-c57020f7f312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf88d50-72fc-4650-847d-cd2facbd5688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252df6ef-e046-4f95-a4ef-f01e1c2fcc8e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b13c6c-0b86-48b8-a260-085bc12f598c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e60d454-44c1-4fab-a30c-7ef811735839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32af3525-34bb-4876-9137-17570498d306",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d4fd5c-b690-492f-be6e-525fdd66182d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5130a99-089f-48a3-b6c3-4e07945d95ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1948ae-99a8-4eb4-b00c-46ffa810df4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf80fe5-12a4-4f5c-87d1-5a05db721ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01b06b4-6cdb-4eff-aa35-f11d60b5a691",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7596f3-b90c-4689-ad33-d0faadb44e8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e6397d-2027-4814-b102-d7533e8c9287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e38a283-2ebe-473a-a87d-b912b72b3aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b39410-47bb-4e76-aa88-bf696b8e521f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bc2861-835d-4193-80c0-3807ce5ec9ea",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d17405d-ebec-4afa-a06d-a13eaa4082b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74660567-5769-4d68-9789-1849c3bfd2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3400f9f9-9809-4f11-83f3-557c787d800a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c28cf28-8b48-4348-9615-a408b7c82990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8a279a-1e88-4f37-9790-fbab3dfda696",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4910a92c-5f03-4019-806a-2667b2b7f9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ad1cdb1-e634-4161-b05b-29922c75540f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7fb70b-995a-4642-ba53-79ab789222e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfbf990-1d37-4d13-9dfe-b79496f67245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12781618-f6de-4a83-ab24-4cccd93154f4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b174a8b-2408-4618-9d03-9c62546a22cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dd82be-c657-4bbb-991a-d6a42d7de7b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22da314-b1bc-4007-bc0e-7294acb4c17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be68a0e-9c6f-4c14-a0a8-eea66548194f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64940533-e0ef-4d42-8526-7340f0462ba6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b97eff-7197-47bd-9e44-1cd1217d9924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e9ae63-6f16-4b32-9226-580d109a4cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67285b05-d75a-4c93-b4ad-b007b6acdad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2927e426-3d38-45fe-85fb-e84c9009c5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbd33e8-fa4c-4b95-84aa-101ce3e0169d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c46f86-2023-4d38-ade8-6c1ab1a48781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c79a5fe-6482-459d-8056-48de34f28f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdb54ae-e222-45bc-95fb-2f1f71fa386f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7515b4df-0886-4b06-83ef-11891e7eddcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aff7ff5-e197-4b92-a2d3-42a7788fcc91",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f501dc08-6205-46be-9df6-c06974cf7fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b36c423-5d9d-4dcf-8edf-4029aef11efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8761543a-c9d2-4fcd-86bd-204ce06de6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcc060e-8c98-4ca8-a5d0-46e135432ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27648c5c-b937-444b-8691-e28afd25670f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c465b53-2b03-4359-9a94-13e2761fa93b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2d035bd-5bf6-4a68-abc5-c6cd47fb635a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db39292-3aa6-4b5d-8cfd-f6e62b6423e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8afa23-cdcf-4c48-bee9-fd8520457989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a663203-edad-4009-9365-04eb3a142a59",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1bacce-4b4b-497b-820c-9fba1c6f2b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31aefea3-2edf-4745-9cae-980a6bde9e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cd4ba2-41d1-4d18-a5a5-5bc281f475e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a573ab2-4fb4-4534-9169-abf0d54e440a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3078037-e720-4b7d-92c6-7ed9b9ed4891",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647ad5be-808c-4101-aa61-00cd3137c217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592fb8f0-12fd-4538-b00d-ff43dcac126b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61b7b98-170b-4169-9bfb-69b996dd7f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cedbd13-705d-4d5d-aac9-83649860714e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3094b652-e7a6-4837-b6f7-7814f32c221c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75712237-b90e-4328-a9b2-83c289abf581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db24b4d4-64b5-4b3d-a4a0-8dcd24e25ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05024c73-30e6-4187-8baa-c747a9d239c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a597a900-ca0b-4a97-8c62-f7136e401e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed693a80-b721-4c80-9c92-4266c916a9a6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab41e87c-fdc2-4115-b381-c9222869043d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe9e08c-f0d1-43a4-bf73-f30a7cc0e83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71026a87-a587-4dfa-8f92-e0b6e4037ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c9cd17-10f9-4a95-a750-69aac2119837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ce8db5-ddaf-4b52-9b16-351be062fa8f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daa4c8f-e75b-4210-8aa9-8fb365806129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7578b192-e533-41a4-9e92-9da1b289dd74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2617c41f-8bb8-4e88-a2c9-a15c03b97038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87510f6-0378-4cbb-a4a2-aa8b85b458b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23cc004-d227-43df-bc8f-155a18ac425e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268b91b3-838b-4241-af12-70422e962662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e27909f-e699-42ce-ad6c-d97f5cca8928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea22a7d-9f4c-4d37-bb5d-467fd06ac669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94fb212-a157-4e76-b73a-e379fd6846c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486fdeee-cfea-4853-800a-3d313d10b0ce",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c219e0-a98a-45b1-8b7f-58345f6f66f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6c3e6b-f933-4a92-8a42-6cd171c33233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c06c3a5-ad9c-46cd-935e-fd61cfba1786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95500427-0ccc-4fe3-bcfb-ec8447e6f887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e355efe2-5bd9-41b4-bfcf-3d4a740dd2ee",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c970da60-6818-4b89-bdc7-4ce15993d4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f540d2-fdf5-412b-9f2a-26a7e9d606fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8a975c-c237-4aba-93c0-0afd1ea799b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5967c4dc-e628-42cd-a4fb-2a654439004d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f4c2cf-ad5f-4f27-b178-b432b67a701c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88618284-3d26-49ed-acfd-3d5aea5e6c37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc0cf412-01c8-400c-8eea-0c301a03a78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2ca5d0-c643-44e8-a415-75fd14730f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f09dc77-7361-4abb-974e-08e11eb229fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecf4288-4d0f-4fef-a45f-d25b744c1df6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc51cdd-a63e-4186-94dc-30c336114c2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3db5e385-3369-4193-b321-e743999995db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff044d7f-5da7-4e7f-8042-3b05795f196d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee90a319-e0d9-423f-849a-f54f39b5cd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656f40d4-03d0-4ba4-a76c-3fb0fc43fbdf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0bae75-638e-4dca-b885-19afcb6c45c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da47d48c-7cc8-4edf-9d01-42f4afa317ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18a04fc-4d19-4a63-9206-7f66b9d694ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbf035e-3d6e-4b76-8cef-26f423eefe54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abb2a71-a66c-43dd-a7c2-4eea1f02e7ee",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a993b5-4ff4-4fe0-a9a8-4ae685f86efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6882448a-f100-4899-b996-0778ae0affae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f43f4c-df96-4270-97c7-9a4f56b7975f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd35a38e-28ef-4124-8385-c8d0472b8244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12fa112-9134-4e89-a645-3fb0724a6a7c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89194d1f-68ec-40fe-9144-dbe33cda4494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b310571-f385-406e-baec-c8429c7903c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84f8467-aad0-41b3-9cfa-1a27512e353c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e950f4-6bca-4253-a1cd-8d87830b79e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef56af4-7d17-449a-be3c-e0447e58262e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e56280-7cd5-4123-ada2-e94b2c677b47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06bdc84b-e59c-4193-899e-7ffb32c972f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6804d5-26eb-4101-9fc9-bfa212a328c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5de04a-e510-46a5-98b3-47367fea7ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d1b816-d2f6-4ba7-b131-b032361521a2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca68f5e-7123-424b-8fb7-3078f25daa11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c6d3794-1faf-49e6-a928-3bc927c6a472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202108e6-a4d9-4dbc-93a7-9f0ba625c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6519440c-4f2e-465f-8c35-6cd835ff167b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ba762a-f58b-4bf9-85e7-496aedf72ea7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683d9504-10c2-416f-8b45-525598b4c91a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca2a8d41-2750-454f-86f9-5cafe0d6a779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17e01c5-28ae-4425-a350-1c7871b918c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396878e6-ab40-4650-962d-41833dba222c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29f5246-11e1-455d-a5e0-eaf7c643a7f4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c608425c-bcfd-4298-8e10-2c731826b310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb8d058-7393-4127-838f-5636abf7ca60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6723521e-03ca-44f5-982f-f319c7302b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0605c80e-b63f-448d-9993-a7d49bf8c915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8752c1d3-4359-4975-bb39-4f8e5ccd99aa",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecab1a86-dd82-47ad-8be6-4cc8921ea7ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31deb942-0aa5-4d09-9454-5588cf9101cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b171b900-7d44-4c15-92fe-da05a0e29d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a44777-eb96-4592-ac3a-eb193f02d74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbe7be7-e8dc-410f-ba95-cc37709a45a7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbc125e-2c54-4652-8229-fb21a52f4f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eb379ee-1920-4390-8cd0-da7920997ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a574df-edb1-46b2-a7ae-29a270cb0137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071b5fa3-e79d-475f-90bd-fd472550a50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe62600a-277d-42ab-9cd1-a00582d516e9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d76f3e-a79c-4f39-8495-03e45629bbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a60d17-6177-44fd-a629-d9007b73d40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4c1fea-457c-43b7-b3d0-592e370e7850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e1e268-2ace-46c0-b0ef-1ad7a6aee412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfbf5d3-737f-4c9f-8d2f-be21f7165bc0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a136d5-cc97-4818-8688-f94170692941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ac90ed-449f-47db-ac89-0f754b6fcad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd2ca6f-38fb-40e4-98ac-80781596b575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6372afd-cda7-4979-a9b9-73750243ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554430eb-2cbe-49d0-a48e-3efb99b50889",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9cd783-d1ab-41ee-b2de-7e2cf4c12fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802051f2-7e19-4f1d-b552-9e908d1908d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "622b32a3-6933-4328-840a-9d7f036365c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d01e6c-e73c-469f-aac8-51acee0a7522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3534f5-6928-4732-8c7f-4761cc47d0fc",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f3d1ba-0ec0-4552-a1f5-22b7426363c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6ac4d8-7266-4c38-90b0-7ff76b07a46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ba8560-0e29-4ca3-b806-d3a70766f39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5260df-062d-4382-810e-a36cb4f01da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ac5587-b84e-4064-817c-507098edec8f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41bb846-bc0e-4d36-863c-40f9147c7ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a549c9-d5ea-48ef-8464-d0b9acf61a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9185f23d-b646-49c6-8e67-c8fa449636c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077636da-322a-4eaa-98eb-d8c70836d9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd63993-88ca-40f8-8124-6188896784a1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138f548d-7221-4835-9025-c12113b35acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ecf3ac-edcc-47bb-b81a-28522b898970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240087d0-b184-4f0c-8be0-71e71c7d6783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdf1ae1-167d-468d-83b1-c4eca4e4f047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4005a7c3-7e28-4c52-8b00-40dc9ff39e3d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b1807a-fd92-4337-87d5-382e5de96bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d603f6c3-2aab-4cb9-9bf3-ebdb806704e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2d516e-1aad-4d96-b458-efc4751d75bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900f7d71-3d0c-4dee-8431-ba3d24df84b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f3514d-5503-4e15-b84c-52eeefe2e8bf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b26a776-5864-4ba4-941a-49363584f25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e762890-8632-4409-86a2-7df8b5e94a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635d791c-e5fc-45d2-9733-0d090acd3b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3325dc97-fb50-44a3-9b50-6af50bae51b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae30131-ddd7-4982-a128-1ffeb187ed34",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87dca67-b150-42a3-b643-e3569b3bd05d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c3bdf1-55df-4c17-8868-84b5cb1e7f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50222c7f-06fe-47c5-96c0-c8dddd8af971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8824f13f-5f7d-4c8a-893a-86fccfa42a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d263b48-089e-439b-8d49-28c89250741d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382a15e5-2198-4f05-b03b-b2af7b50bc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c36977-2727-47f8-9fdf-f361417ce429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea5919d-7010-4a4e-a1d8-5d2002fc6b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d34955-25b9-44f4-ab38-0d0442db3269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459788f5-0473-4245-bb83-a0554b924225",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b598e7-dfac-4166-959e-24c4ec86ca03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9555d512-b937-4fa5-bc34-b3a1c5dd0013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f55cb8-7823-46d7-a02f-c7aecf67c542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44e00bd-3f71-43fc-ae45-36b5fc7cb60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73155fab-76b2-42b2-8de6-e68c22aca26b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc17003-86b0-4d6c-9dfd-a23ae6f81c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d9fb49-dce9-4eea-9ca9-ac83521c49eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916d5ab4-c207-49b7-8aaa-d5d36d83c0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acc0e1d-0080-4df2-9c00-f8b8a05113e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b70f4d-5d08-4f0d-8879-49d0838e5f21",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d72cd6-779f-4e24-be32-3bb1866decf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59ed567-af0c-42d8-a80c-f6474f332dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7b05b3-e2fe-453d-bdf5-c49f5ad45831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45da6d27-913f-4460-ad3c-c48abf83fd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae629e5f-1792-43cb-bf07-42dd098aecac",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ff5a2-af49-470e-b5d3-77b88498fa85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20d8fcf-64fb-434d-855a-132d16414740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ab8b0a-67bb-4eb3-926e-717ce286e716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655bdd94-c11f-41d6-96e8-e88b5100d616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a385f7-5531-4035-9a6b-f68c0b056a6f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a252e-5695-47aa-be3f-9e342f8ea938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c474288c-81f4-4c05-b5aa-a537e3f4ebb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7317f3-e116-4a29-8151-8c1f46cc30e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321bcf70-e651-456f-8c97-083b22412154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11130acf-cec4-4dfb-a73e-09a95c418d25",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb5ab8c-6365-4f6c-b598-7ee11106f327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d69189a-0ad3-40e5-89fd-5d264069fa60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26de45e5-18cd-48df-a441-72da05866d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d7912b-db88-4225-8ac2-7a3521ac1584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eb00ef-470c-4ee1-a611-b5e762511db8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320f1bc1-4009-4b18-953d-e13f61602c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa868e9-9be6-4cff-8268-af2742aa14c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678210c9-05fc-4908-8e29-71f294a05c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004f2a83-752f-456c-bc34-3d13740f99fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff5894e-b759-438c-978f-15359b336f36",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c68daa-b498-4abb-a601-0b82d1a2be39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1060af-92b6-4e60-9e60-c7bc8fbdf2ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a8f0dd-9c52-4bf8-8b49-5c02e7173982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bcf1be-bd29-4fa0-9441-8e4dc59b4a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4e2a87-1b3f-4f27-bded-e89d7c1aef9c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb672548-1737-4d19-b2f6-1c4497886137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fbae4c-03d3-4a42-9234-08d874b2f885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0242e2a0-82c7-4b9d-80ab-d869fb59cc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9723e3-0d0e-4c0e-b578-9b75d186449d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a095e07-f445-4ae5-ab3c-9af45d038419",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3ff49a-3f2e-4eb5-804b-7cc0a522ea8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b927d77-c387-4fe5-bb0d-ccd276933f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5d2cd5-2e26-4c17-9009-d839b0a34a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4d04a0-921e-4bba-a74c-2228e9ea510d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414befbb-c244-4474-ad60-37470d5503fa",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11f2184-7462-4b8f-904c-88afe62ffc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0817549e-5c30-4f74-a6db-c0bc267994a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04e04c3-15d4-4222-a8a7-12d401763b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed393f8-9d03-4abe-ae49-34b3be7d4318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5818b8bf-f1f3-48d1-8718-bf28241f8701",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1e9f3d-af5f-49f8-88b0-175f0dd347be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67d0c87-49c9-4c13-8394-6802568196ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731278d1-0a18-437f-a304-ea5be04f1b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d041ed24-69ac-4909-a197-79064457b231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626cb62b-8781-4a4b-8a3d-bc84e9114fd1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5712b2-a47a-4368-9d84-b1adbcf82699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c84a1c6-986f-4c5c-9571-79ef27118d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32102c6-f5c4-4d17-afb0-dc1aa8b48038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4e3bde-c065-4ebd-acf2-45935e4138e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9510f63f-c428-4525-b606-0b3ed2121dbc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd378462-e058-4eb6-8b42-406447cbfc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5085649-8cce-448d-a6cc-fbc815301374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89fc912-df54-4d70-b7fa-774747c0ce3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bfbfd79-df9d-415a-8640-95487371fdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bbeec5-ec41-4f38-8649-91ad3f93c950",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72a3c4c-a02d-42e9-9f7b-43127fe818dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b6c145-3265-4565-94e9-7a985670d5c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62c2878-c63e-4314-9216-eed9c2b276c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94550497-95a1-4a1f-bc85-033db8f70aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65c51d0-75d7-4078-889c-0cba05ac5e26",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d61b15-cba4-4cd7-b4ce-1bbf8fe89e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05ae4e7-6e81-4564-a7f2-bf73d91e4587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73227251-4258-4977-9316-2569bf82b34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061a2cb4-88d1-4cb3-8c6c-88364f4626f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf33d2e8-0920-4e36-b55b-a528389ea921",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc51143f-f567-4b39-be66-a6719d5f1d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e729f7ae-b03f-42bc-87f5-1ac63457d3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348c7be4-834b-4fa1-8604-ec877ce26c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7037000b-c997-477f-bd94-b4f3d98d9b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3c56c5-466e-46de-a3c0-c9c90d4a3d6e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279fd5b3-d187-483e-9247-967a28d9c2b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2ab28f-c6f5-4013-b1df-4e1cf5e07ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a2c90c-a00c-4e2d-b176-88c694339c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04227699-b2fa-4a7b-9eb1-ad49777e817b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d3a904-0299-427c-85b1-fe56188b69b3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f787afa7-b171-461a-8594-14947924b00f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48f90b2-7a08-4a41-8c78-4b16bb6ab592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a26aa14-21d8-4336-b316-6bbd0117b46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66322fd-06a3-43dd-b69c-5ed732d827d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad21258-83c5-44db-81c2-e01bb0f9a199",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73110f4-d160-45aa-b147-1f58d7482094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55d770d6-806d-4fcd-b719-0b5c6805f00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f473de63-21e6-49e7-9ce1-edf10acb4913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8a8071-b1af-476c-b809-75bd5f996345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd277fd5-2766-4817-a15e-89393e492fec",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606fd466-f439-4b00-835c-ac54c11029c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f584bf63-74da-4dd3-aa28-84c75c129842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04aa639e-55fa-4cec-816f-2f7eab1ffdd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae12d4d-75e3-47d8-958d-0d553915ce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff42534-bb70-4714-98bc-0f32cb638909",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30de8c60-61ca-4e38-88a8-d2950731c039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d6c850-d6c5-4735-9736-366ceffa2d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c71555-1dcd-4a94-b519-dfa0df3c62c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2349bd20-7cea-4e3c-8e39-11e4803afd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1731ca-f37c-45a8-93f3-6179028c80ca",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8096a538-e186-45a3-90ee-ddcd965adcc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bca1b28b-16ae-4778-a704-bfba428bb04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbe8c83-8270-4b53-9337-6abf8a90c1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68cc3f14-2bc3-49ea-a0b6-cd8cafce97cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028c87d0-ecc5-455e-8ee7-efe5c7315506",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe05c2d-bf4f-487a-88c3-6eb6f1623f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a2f2326-33fe-408f-aabd-06a63cec0dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2cda8a-2f62-453b-a6eb-7097eb273718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a335a37f-b45a-4ff2-a991-1ada9f69fa4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22426a97-bd7b-4ee1-b879-f70a0bc1b5f7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2464c388-caa2-4e0d-8425-1e874d2ec4de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b489d9e5-33ff-4fce-9031-4e4e0cace75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9e0e49-3670-4b58-81b9-ab4203abaa35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b204bb9-2bd1-4158-b579-2e6fa775ca01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a9dd33-996a-4ba4-9a51-858fdabaab72",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004c7923-52a7-4e47-852b-041422a0339c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660ea742-ddfb-46f4-a618-111c5c3b053c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a37254-072a-4abf-baa2-06bf535b9f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e48c67-46b5-4762-b692-145d66706087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0b0146-58b5-40f0-a7bf-8a52c53e1d9e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038ce112-1e58-4cf3-be8e-b9bbc26b5308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e3deee1-79ef-416e-a2b8-16d2cf17f503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a4ff58-93cd-41f7-8136-56c5af79e93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68522908-345b-4a89-8dd0-1078f13bd732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909de30b-4b81-4c47-8918-7fc0467e2089",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcb6df5-7fd0-412c-9c29-0b2aa42781bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29f79177-d19b-4bc6-9a21-1bf17b4b83ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d259389-411e-4590-a3dd-0733476cb9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4794533-7acb-42d4-b0c6-aa6188deb996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ba1f0e-ff8b-492f-bf64-feb9eec14f7b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10d5e70-885b-42e8-934e-5f7d38a5c2c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10af1db7-25f2-4427-8991-ec12784c1c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78631e64-26e6-4427-a637-466bd9de58dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d60ebfe9-6825-40ad-a979-e4265e4d7c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b556629b-3325-48a1-b5b5-3ea493c61395",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97a3b10-90fa-40a8-8e2a-8335616186c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25c030cf-4d92-406f-a7b4-4f3146a88546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227d697c-423d-47f9-80e0-3227d8834202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444e6bdc-6b0c-46b9-884c-62f0687e53e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec64a082-0360-42d8-bed2-fd66c4ec8da3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c44b4d-7f3e-434d-a691-7e9777c32e21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77aa3230-92aa-478b-87a7-87a6bf34ca2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f32923-5069-40c9-86f7-bb679a0b3aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094031bd-a204-43a5-8c20-8613c9c4fdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ac18e3-7323-49cb-a0ee-addf60eb4c6a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a29536-3b9d-48ee-944b-2b8272a8ffe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce90e38e-4212-4e17-9774-8e3d9b964799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e6b1b8-0c2d-45d4-b785-82a02f87fb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67a4835-68cf-476f-86a0-7e43c1ae5ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6e8064-c49b-4857-a1db-580c95c0a0fc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44064469-0ece-4c75-8c29-9446a0a08b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "447c7a49-8333-4bf0-9997-6a9e1cc84e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36eec4b8-6de3-4fa0-bf92-97ffd0029fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72d6063-b7b3-41b9-8d38-cf7f8c552d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad39724-6bbb-4e38-b540-16626aab22de",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca634e5-34ad-4c86-bd7b-1e3c23c5f488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52136257-0103-49cd-84bd-74ec28881bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de6e48c-c17c-4ef2-8047-ed3ac8ac3d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8883dc0c-771a-4b80-8d0f-efde57b5f20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac07d42c-ca9f-4166-9476-ec9451f54356",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414541ed-3e69-4f8e-b18b-bc73bef218e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a77f368-ff9d-4674-a21b-213d69944777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c188b7cc-f522-4c7b-ab56-d633f343399c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2878d5bd-43f9-4a77-bfd5-a0769e9ac65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c873f6-40c2-41db-b691-158f49672a89",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9423c327-1ec5-473b-8983-7c50d54a6175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "137a996a-0034-49bb-8a4a-a430f748c37d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671e8588-36f2-47ed-b092-6c5bc0bef87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4063bdbd-9bbd-4a48-9d02-84bba1b6f7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595b98a0-e7a2-46db-bda7-65c0033338f9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840cc65a-f079-49fe-be14-21a698a8eb6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cef8999e-d246-4fd5-a7e3-2af5ad30f4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fe8ff8-c15c-44b3-92c6-849d1e84b3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f66ea6-7265-4c2b-a3a3-180499af8840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def0013c-5806-48cc-8aea-ea0e4b9d4f9b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af95d78-c7be-42d1-a3f5-b3c63593e8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0f466f3-4819-474d-8430-0dbc0fed33e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee228a5e-1947-4a69-89d1-55f4e89cbfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc69271a-5231-41a0-a6ae-e930f3f8baf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbeb0ce-0638-47c1-8d8d-b066f1acef82",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006d7127-a234-40b3-8a8e-a7a086ad026e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd54c599-c61f-4f07-893f-e0011f3f8849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf69258c-e887-44c1-bc58-762e48f9b050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea12450-0b35-44ec-b095-6d355908cde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48eaa90f-6a75-400f-b4ee-5463c27beddc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9de5f6c-35bc-4024-a0fa-01dd69942096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a232f85-dadc-42d8-bab1-ff5d4e960b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec65cca-ede5-4c8f-95db-a05292835dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf5ab82-9cd5-4c03-bae8-2f9eeecf8e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c9d075-679b-478c-a59e-9da7d23d9d1a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124699a2-e5a7-49b9-9c94-0099329f688e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92f7f72-aa54-439f-b6d1-5a33b32d3be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb0c393-26db-471a-b3ee-4c7bb8edf927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550656e6-1e71-4040-b6a5-e81484a93eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cde1d18-f03e-4447-aa5d-75ba206e451f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e900ab-290f-4e9d-96c2-430580b9e95d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d12b5e-d6d5-47ca-a4d4-d9ba84f4caf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fd5728-b14e-4f99-b845-c47a697b2679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd24835-6988-4a25-ae5a-3a7f4a2c991a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dc1af9-3be1-4964-8759-a748834a3ed2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc15d64-7f18-45f8-96a0-2150cd01dc9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd973b4-65d8-4c86-874f-f40b4c446d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63531ac2-5f75-4535-9392-c7858f823e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a92bb6-5da4-4af8-be7e-06b69efcf362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c2b0e6-5b63-4ba0-88e7-084d62b90b6d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde34876-5ebb-4ec5-a6d0-0d244d9244ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0aa2088-43fb-4144-a409-3259c193a615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071ff09a-4565-4a0b-8036-3481469e9723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3002c748-bcd0-4608-b67b-0c3ea4a95cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7483f7f0-4aad-41c8-9d29-1c9655cd873d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7a66a6-0897-4706-850e-655fa1af83c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72277b50-1e7b-4534-a2b3-f4942c85e2a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c29e654-7370-473f-9171-dcdb6e6b3dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355269f1-53e1-4769-8c5a-7f9b7fa07f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77daa9ab-4e9d-49ea-82f8-6be877a81b6a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166dd8f2-b1bb-4e08-888d-ce7b644dccd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "397f3046-3d3d-442c-8487-992d4030225d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3efbf3-4bbd-4895-bd4e-8e0762367c4a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2636f7a1-9ad0-4146-b6e7-d2b8e48ba6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6132f03-5300-4325-a544-7df14492beba",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a781276-7714-40eb-b5db-bde5bab6547f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1d6998b-c8e5-4f68-858b-c6f148287203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebca89be-3b64-46af-a3e7-9471eaff9395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1549fbb-4709-4cec-a54c-ce5014b08e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a77ba1-8c15-4a7d-a0cd-544a36e7d526",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8eb079c-f3eb-46ee-87a1-d54ce3c02180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e9d379e-86fc-4025-8991-c6a224f4ffa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab745fa-da45-4b92-8723-0dfc037d1960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551421f8-e264-4782-8441-48a785b8e23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3c2ae0-c12e-4bbb-8da4-8a916378b76d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716170ef-3cd6-4d26-9cea-e1868089deed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6015afb-218d-4e40-8427-4dcd852671bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d94c960-d437-4a33-a1f2-dcbcb98088bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c947ae-7fa0-4081-b44d-d68bad298d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab14256-0ee5-4bc2-b064-63a421e8af03",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0280bc61-c880-49fe-9627-d338b2bd8348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9a4c349-2d62-43a8-be78-2d5dc307c5a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d07130-972d-4bb4-8621-a3c0868befad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0892440c-bda2-4957-b483-2a62b05c4d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcc6da4-1fcf-4793-933f-2e791f3191f2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4763597a-0b2c-49f1-bb64-43c61165ab8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c67ee00-c9a4-4668-a259-ecd1019f3825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e770dc56-6511-4420-a776-d211ab63aeb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140ac981-6960-47b1-af48-7942210a64a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26eeac8c-64bb-4813-93e6-6faa875af98f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6991e6-1924-453f-82f6-c8386c0fc9a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cba113f-d2f2-435f-aefe-2dcdd407f5bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e326872a-086b-4839-984b-ce2b72ad8253",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046a07f6-cad3-49a8-b716-6b4a61cdba38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3c0f21-0333-43c6-b0f2-ea35bef2bbca",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524e6667-c4d3-467a-a52d-5acdc74bb4c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cd38af3-cd8f-45a0-ae45-a6322f33ea80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b038766-7cf5-4661-8dd5-c93269068b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf0f94e-1ccb-47be-a304-0c4c89165444"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e6067fd-4c61-4d9f-88fe-9fca68697c6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d4fd287-9084-4b3a-8547-28b893915232"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3956b8d5-bb0d-4784-b024-00673c6940f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88d7e62f-c48a-4c4b-8b44-35312877b0b2"
                    }
                  }
                ]
              },
              {
                "id": "7e8eb570-4fa4-47c1-9d23-8db7d2a91c9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "384013d6-1089-4691-a390-56987f6a82a2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741fb7a1-adf6-49a1-a374-f02f2ae44e16",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7e10b7c1-2673-4c43-adde-641008516dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe3f8f2-835f-4513-89c7-3a39adb29dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01a68b5a-248d-476a-bb19-4f8bb7cb5baf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94d3a1b4-0586-4007-b5b6-86ba5a63cfc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48a6f5cd-851b-43a5-8b2a-7a60b81a4af2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "557c0b24-06be-4812-b6f2-1e0b2e2419a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fde9fc5b-b10c-41ed-ae2b-c7ccecdcc24b"
                    }
                  }
                ]
              },
              {
                "id": "57fdf117-dfa5-4818-97c6-7de52b8cd398",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ecb9f188-edec-4286-b596-ff8877fc47a0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2e2d1b-c2a3-4c97-8f25-b51498860f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dde5e810-a9b8-4193-b7ab-2054b2eea170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d4b144-09fe-4431-a878-b14a4db6eb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455c5a56-4541-4936-873a-b17f824db3ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "102edabb-eb32-4bcf-8717-fa4b888942a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b08992da-c4e6-4302-b6df-deac0dd38c0f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "231dbfc3-3119-403c-bc01-f6add51a4209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "965f8593-a11d-45b4-b8fb-69ec47c95b79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94e8749c-e80f-412d-887b-439c7799b122",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0669a6f-ebb0-40e1-81c2-ddf9fbd6dc0f"
                    }
                  }
                ]
              },
              {
                "id": "599107c6-09e0-43aa-bef6-f64a7ebab329",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd7396be-cb0a-461e-a141-c864c5f4ccc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d71f67e7-fa06-411e-8ca6-c3efc591be47"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db45b55b-4711-4eb4-97ea-c20ea826b355",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84b96740-2ae4-4eeb-a0f8-c1d07ea71b93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "522ab550-1f88-4f80-8236-461a26813edc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "680e2376-9b0f-4bd8-8bd9-4f5b028dd034"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43321a49-2cd4-4c6c-9d24-b2d50481b530",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97009f47-cfc1-4699-8d61-584c623e53c7"
            }
          }
        ]
      },
      {
        "id": "1f284dee-8517-43b8-890f-0fc84d2ba32f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6c3e20a4-5dd3-4567-9d6d-0afa5aea4523",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d55071f3-4d8d-413e-b93e-f8167745f080",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17520730-ad9b-4013-828c-afe32f30d977",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40c5fb8-833a-4931-b77a-be8cfcd80f51",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eb7386c5-492e-48ae-a324-f40ebafb88f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed458ef3-9d92-411b-a676-508f59619684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0e4747f-3ad7-4a13-a0d4-f4c2707e3f67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55b96d8e-b661-4b53-afe7-bf1d3aea9843",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77df7687-4c52-4059-b7f6-e048e93ffb7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f566408-833e-4eaf-aeb0-8fcd64e74781",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10e00677-c689-4232-a88d-a6c42d9e5d4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b4e8a80-6cef-4d4c-bd6d-5fa628fadff4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e69a3cba-c7bc-4568-8e18-476880c8a537"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0caba62d-797f-4d7a-86dc-f1ab61fc4e70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb03f9cd-9a4f-4772-b44b-d76652b5b1f8"
            }
          }
        ]
      },
      {
        "id": "d70018e5-7057-4b2a-8a1f-a9357257efb6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "75f6b982-50c6-4661-af89-ac9671dbaf34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98b1feb0-bf31-4e23-b3cf-beba40ff4bd3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33b1b26e-c048-4a88-a28e-b66226abf4cc",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4a043e-16fb-4bcb-b9da-6908823324ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41ba61b4-91b8-4550-8f18-4e4e438e9537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc4dbd5-0e38-4fc4-a9a9-7916fe488419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb5b1723-7048-46b6-a9c3-488e68520b88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b1b0746-76ca-47a2-b7d9-6eb6ad65232b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21568110-7bb9-4f6a-86a9-42d2e02f0e00"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6577615-9ed4-47f3-821b-3b0fa285232b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdc8dff5-1df1-4c39-8d9c-b4c1f2d6649c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cb099d4-bc96-43b7-8b19-a38fa4c1e464",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6201ec9c-702c-40bb-805a-16b8a1c8d70a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10b66496-189e-4d6b-bd0e-92040dffd541",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e356b1a3-da10-4695-83c9-89240db8d484"
            }
          }
        ]
      },
      {
        "id": "06a009fa-7034-4cb7-afba-060c85e2df57",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "77adaf5a-3b0c-4556-81f6-230e09120db6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "367bb270-d346-40ac-a8b4-9772f33bee01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b70e932c-9927-45f1-a311-fedc0978d232",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702844cd-e84c-446b-a880-6d300551be9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "157351fc-0675-4b16-9f9b-1a31085e8266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713def12-01a7-47cc-aade-ad60722f7c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c8c96dc-5d09-4630-bebd-3b37789ec1be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90be2cde-e530-4a2e-9af9-ea516367ba0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b165a05-e47b-4ce0-ba82-1c370485633f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "829f4867-9408-4d2a-ae32-fb9b4a729675",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb3408a6-00ee-4a85-9dab-7f4ed911ac63"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "acee19b8-f93a-4071-8361-57e41c167108",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "595ad867-70e7-4466-9860-69128dd57988"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67991840-37e9-42fe-ac10-754b9d10236d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2aa8b5ef-c53c-4e16-acde-5f8b3b3eeeef"
            }
          }
        ]
      },
      {
        "id": "ccab8c3e-f21b-42b2-91f7-f891e8d20064",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3eaf74cb-d5bf-451f-86e9-30e65b9a2d7b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b125d36b-2d5b-437a-85c8-478bb1a1bb5a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d61cb4ee-359a-4c95-b835-b97889ad33ba",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "190157ed-2914-497a-b70b-e4cc0b001367",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1333696-f32f-4af7-9c7d-be060ad8fabe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.091269841269884,
      "responseMin": 7,
      "responseMax": 714,
      "responseSd": 88.92606392064837,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713659890377,
      "completed": 1713659913708
    },
    "executions": [
      {
        "id": "1675d02c-3623-4e22-aaad-b3ca2a51f8b3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "72b02b19-694f-482a-9659-0b6d9949858c",
          "httpRequestId": "c5bb0339-3b96-4449-92b3-c58275daf14c"
        },
        "item": {
          "id": "1675d02c-3623-4e22-aaad-b3ca2a51f8b3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "345e32aa-9eaa-4c04-b716-ce51e3f176d8",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 0
        }
      },
      {
        "id": "a49ce0ea-9a7b-4dbc-9b30-765276454dd8",
        "cursor": {
          "ref": "7f8e22ee-a88b-4278-8259-c9bb17d6b97e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c6ebb6a6-f8a3-4dcd-beda-71d9d3e2984b"
        },
        "item": {
          "id": "a49ce0ea-9a7b-4dbc-9b30-765276454dd8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d0660461-b5ae-4383-a8d6-cf7014ee5e17",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "38c623e0-6a53-4698-a4a6-88e42437f9fd",
        "cursor": {
          "ref": "0c7798f8-7348-476b-8ef6-b2256a4276ae",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "288d58de-4fcf-4bbe-88fe-2d7582040fc8"
        },
        "item": {
          "id": "38c623e0-6a53-4698-a4a6-88e42437f9fd",
          "name": "did_json"
        },
        "response": {
          "id": "aafd17bf-db07-4998-b57e-f15254d8dd77",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc60baba-2888-45d3-a545-bbbed6d15ab4",
        "cursor": {
          "ref": "72170f5f-2a7c-4b38-b391-1a6edb5e04fa",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e364654-ff1b-443c-8b2e-c1d474704993"
        },
        "item": {
          "id": "dc60baba-2888-45d3-a545-bbbed6d15ab4",
          "name": "did:invalid"
        },
        "response": {
          "id": "36a8fd4e-46b4-443b-94fa-4bb5e08235be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc60baba-2888-45d3-a545-bbbed6d15ab4",
        "cursor": {
          "ref": "72170f5f-2a7c-4b38-b391-1a6edb5e04fa",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e364654-ff1b-443c-8b2e-c1d474704993"
        },
        "item": {
          "id": "dc60baba-2888-45d3-a545-bbbed6d15ab4",
          "name": "did:invalid"
        },
        "response": {
          "id": "36a8fd4e-46b4-443b-94fa-4bb5e08235be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c418208-7f8b-4a1c-ad59-5d4db4eada22",
        "cursor": {
          "ref": "fc789511-15a2-44fa-8591-202ceeaa6da6",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1719b17f-1407-4bc1-a5c4-9c3c25180b0f"
        },
        "item": {
          "id": "6c418208-7f8b-4a1c-ad59-5d4db4eada22",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "72fba787-37e9-47ff-88ce-7c6e672321ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 161,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8573909-c78c-45aa-b1bb-03c994520f53",
        "cursor": {
          "ref": "f76314d9-1b74-4acc-b667-5da31ec5db62",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "21e967e0-8c4e-4062-af45-ad80b041a7a6"
        },
        "item": {
          "id": "c8573909-c78c-45aa-b1bb-03c994520f53",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a8ab58fb-1f8e-48e5-8fbd-1195bb4657d6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899a864b-b1bf-44ca-92b3-8c6d9a473147",
        "cursor": {
          "ref": "8b1ae30e-d20e-4330-8e1c-1a25e4a3f573",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5760bbd9-420f-4d4b-93de-07a7743077d6"
        },
        "item": {
          "id": "899a864b-b1bf-44ca-92b3-8c6d9a473147",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "645ea707-ae09-48f5-8809-dc894ec4bdf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd80a9fa-e87b-4124-b738-a15c8b5b5d76",
        "cursor": {
          "ref": "580d0927-2b2b-4594-8a5b-82bc70f2ccbd",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8dcf63ce-ea10-48de-a408-8ac123847278"
        },
        "item": {
          "id": "cd80a9fa-e87b-4124-b738-a15c8b5b5d76",
          "name": "identifiers"
        },
        "response": {
          "id": "d4a12b13-80ae-4f1e-8b7f-98612684c69f",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cbded1-a984-4d7e-8ceb-87f4c19ffd3c",
        "cursor": {
          "ref": "7299c897-042d-4f2f-a65d-10c8d9664bde",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "340bc872-68e0-431c-92dc-56cfce2d1655"
        },
        "item": {
          "id": "a4cbded1-a984-4d7e-8ceb-87f4c19ffd3c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8ba62442-1b42-4a95-9d97-7a4246568e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b778529-aa59-4767-a794-125a7a9dc493",
        "cursor": {
          "ref": "92af5164-888f-4d67-b1ee-bf64ecd52878",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "595b5b36-8ff5-420d-93c1-cbb8ccff1f14"
        },
        "item": {
          "id": "6b778529-aa59-4767-a794-125a7a9dc493",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3e4aebdd-6a5f-4f63-bc79-0aade638a782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936b2a6c-4bc8-4632-be72-6a5c050bcc4d",
        "cursor": {
          "ref": "2ffb1ac9-f85c-473e-8a6f-d33d817d0100",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4abc230a-ef27-44df-a87b-d1d73e80e8e5"
        },
        "item": {
          "id": "936b2a6c-4bc8-4632-be72-6a5c050bcc4d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "81e6f69f-4cce-41ac-a9db-4740e0d273df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91610759-0228-4c21-802f-524c68088089",
        "cursor": {
          "ref": "05ad24b2-9fd5-41ce-94ba-b34708202939",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cfe82ddd-6530-4064-8435-8c6991f8762a"
        },
        "item": {
          "id": "91610759-0228-4c21-802f-524c68088089",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "632ff996-753e-4150-bb22-a588cd341a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572cb885-964e-455e-9e05-2c2739072eff",
        "cursor": {
          "ref": "4ef5da46-20d6-44da-88a0-e1a1ab5ebf54",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1ad6b98a-aae6-4ed7-ab27-1fdc0439e648"
        },
        "item": {
          "id": "572cb885-964e-455e-9e05-2c2739072eff",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fdfaebed-96df-4a35-ac52-41115d7eec96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcc0c36-ce2e-4e13-87ea-1b95000a0a80",
        "cursor": {
          "ref": "29ede3f9-ef3b-4881-870f-4b0aa39378d2",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d3f24f1c-4e76-436e-912a-fd1566134e39"
        },
        "item": {
          "id": "2fcc0c36-ce2e-4e13-87ea-1b95000a0a80",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0bd09cfa-5a83-49b7-9286-62dcec428f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5608fafb-ffbb-42ac-8306-1bc72395677d",
        "cursor": {
          "ref": "a5ff9add-bc5d-4c95-976b-bc0f54f8c403",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b4ea4e37-d3d0-4d53-a33f-832de2a0abc9"
        },
        "item": {
          "id": "5608fafb-ffbb-42ac-8306-1bc72395677d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "932f5cd1-3d6b-4680-9edd-8df0fde0c101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf25fcc-6a62-4348-8223-1e1dc49ee315",
        "cursor": {
          "ref": "b658d9a6-ce1a-4d53-be86-c04d2df9b693",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b1948ed8-e3bb-49d4-8022-188494949181"
        },
        "item": {
          "id": "cdf25fcc-6a62-4348-8223-1e1dc49ee315",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b523125c-7cc0-4f85-b602-c05438973904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ad3c7b-dcd8-4622-a0c7-6ce0a445093e",
        "cursor": {
          "ref": "c0e3e888-4406-419b-80e6-5fc1d7b09f73",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1488a17c-fd0a-4419-a079-fdd1311d63ac"
        },
        "item": {
          "id": "08ad3c7b-dcd8-4622-a0c7-6ce0a445093e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9ffd1013-0273-4bcc-8821-693d0802b865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c32b7d-6d68-49c4-9f0c-5e759d765300",
        "cursor": {
          "ref": "93eaac86-53c1-4fd6-9abd-a65ad8ee7af9",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8365e47d-eaf1-4caa-aba5-1ddc4bbb2f44"
        },
        "item": {
          "id": "71c32b7d-6d68-49c4-9f0c-5e759d765300",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e51df58f-1088-405f-88ce-bcb3108ec647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ae89f2-81a9-42b5-b9a4-5b522df77a67",
        "cursor": {
          "ref": "2ea750c1-2762-4c58-8dbf-2213cbd38990",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fcc4b980-6430-4f29-b1b8-4073887f2bb4"
        },
        "item": {
          "id": "f8ae89f2-81a9-42b5-b9a4-5b522df77a67",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "183b7bf9-77fc-4d50-94f0-39a288d6dbe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a94ecb-a153-4f8b-9db3-b2ea9f8ee52d",
        "cursor": {
          "ref": "d2dc224b-9db6-43c9-9a33-30c788c8d97b",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8250a6db-a81e-4d8c-9a87-9b2fd21a2c73"
        },
        "item": {
          "id": "65a94ecb-a153-4f8b-9db3-b2ea9f8ee52d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "94621a22-9801-42e3-9595-483f0996ce44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733e6587-f333-4f74-8553-31ec8d13448a",
        "cursor": {
          "ref": "ad9d4364-ba26-43aa-837b-c69f1ef6b17b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "53c04763-1066-4344-b910-fae65f3ec62e"
        },
        "item": {
          "id": "733e6587-f333-4f74-8553-31ec8d13448a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9e12f717-df19-4e9f-8539-641e735a8cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4765b51a-015c-4fb1-89a7-a364262bcef7",
        "cursor": {
          "ref": "97ac82c9-7906-4f89-b2d4-f8891c16c5b8",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d70ecd83-e1da-4cca-b8c0-1762805ed4c0"
        },
        "item": {
          "id": "4765b51a-015c-4fb1-89a7-a364262bcef7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "335ce2c1-1bca-4619-810b-665c26f8d681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83202a1d-2aaa-4d04-8f11-a38dec75ac34",
        "cursor": {
          "ref": "f8464b0e-56d3-4bba-9fe5-9ee9cdd2f7a8",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8fc773b7-cf74-4c22-842b-bc533da32932"
        },
        "item": {
          "id": "83202a1d-2aaa-4d04-8f11-a38dec75ac34",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b6f52d5c-84a1-46b4-9588-289bb76622f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de9f3e6-383a-47be-9f62-859016189b99",
        "cursor": {
          "ref": "1abf543c-c1f4-4061-b29c-13e04911956f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dc14f889-4d58-4922-a5ed-89f241535412"
        },
        "item": {
          "id": "6de9f3e6-383a-47be-9f62-859016189b99",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b0406a65-0b00-4303-855f-af4c3decb538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53d09b0-9849-4705-b785-a89ba045d01a",
        "cursor": {
          "ref": "23ed5eea-1ffc-47d3-ad09-98809994bdc7",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7f80c772-ef69-456f-af58-cac002a3f61c"
        },
        "item": {
          "id": "f53d09b0-9849-4705-b785-a89ba045d01a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "26410a32-8e56-4eb2-a0ef-7008a42e3709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1162d6-1796-4b33-945a-ef827dad4048",
        "cursor": {
          "ref": "5554726f-88ba-4c60-90ce-f20b5c47741b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "febeba0f-4837-4720-9ca9-6c707ee3cf0c"
        },
        "item": {
          "id": "0c1162d6-1796-4b33-945a-ef827dad4048",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "07e33a23-f3bc-4b80-b132-08f478465599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4b849e-2cc8-4d58-b944-9124dc2b1377",
        "cursor": {
          "ref": "6a438faa-9c20-4007-87f1-a5c4e11f01f6",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fb02bbfe-3299-4d9b-bc03-0d460e0d4e34"
        },
        "item": {
          "id": "5d4b849e-2cc8-4d58-b944-9124dc2b1377",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dafd13f4-73ce-4c96-acad-6d3362f45078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36902160-c7e4-4039-8739-c9d3df5f28f1",
        "cursor": {
          "ref": "3ee50e86-91c1-41c4-adef-4b3f5f17e3f2",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "94c2a568-4f39-4e67-b5bb-f608de19f94f"
        },
        "item": {
          "id": "36902160-c7e4-4039-8739-c9d3df5f28f1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5267a3f9-fa71-4525-ac06-dfd4c518bf69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e3246c-de8c-418d-9b1a-7f65f6bac9e2",
        "cursor": {
          "ref": "cbc1cab7-3fe6-47dc-be25-9fe9d075bd91",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "48e1dab7-90bb-45ba-a6d0-0c60466339b3"
        },
        "item": {
          "id": "92e3246c-de8c-418d-9b1a-7f65f6bac9e2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0271432a-3824-4a75-b799-67cfab1a8c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8c1d2f-fc0f-4c43-b5a1-6502d8705a7c",
        "cursor": {
          "ref": "1af5c317-1886-40cc-a561-a94ba91809df",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a56adf6c-ceb1-4a5b-9630-d8288ffc4075"
        },
        "item": {
          "id": "4a8c1d2f-fc0f-4c43-b5a1-6502d8705a7c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d5526109-0e00-44c4-aec5-1de04b0d2f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8c264f-b0f7-4c17-a39c-1be4c7e6b4ae",
        "cursor": {
          "ref": "95af6d3c-6478-41b4-93dd-bf12a639dcbc",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "69413180-2482-4eff-9e14-e23076503519"
        },
        "item": {
          "id": "fe8c264f-b0f7-4c17-a39c-1be4c7e6b4ae",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b55ebe23-8429-4ebe-8a13-20f0c55833ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5d90ea-5d7f-4013-80d0-a44fb99e3326",
        "cursor": {
          "ref": "abcd917f-98cc-4b72-a012-3571f5b68c8e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c20b8b52-cba9-4fff-8319-6e17b24a9b22"
        },
        "item": {
          "id": "fe5d90ea-5d7f-4013-80d0-a44fb99e3326",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f97a9126-c183-43b1-b626-82fc30960628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6810ac-e1b0-4e88-861d-59b730e04918",
        "cursor": {
          "ref": "85d52beb-48a9-42d9-bd8e-5cc28b3a23f2",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "590a77f5-e3db-402b-aa20-8d49965fa609"
        },
        "item": {
          "id": "8e6810ac-e1b0-4e88-861d-59b730e04918",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "32302da0-7f4d-42d2-89db-becd22f5a89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84dc16d-6ceb-4a4e-9536-7d63e888ccf3",
        "cursor": {
          "ref": "250968d2-275b-4196-9d26-6d77c33888c9",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d9fef90a-4f9b-4bbf-b462-36a53a7f3df3"
        },
        "item": {
          "id": "f84dc16d-6ceb-4a4e-9536-7d63e888ccf3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d0348396-c032-4670-bedc-6377ff253a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba95944-d040-4f16-b860-b22d4bbb777d",
        "cursor": {
          "ref": "6796f928-d53e-4153-b98a-46b370d34e71",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "66b7c1cd-cfbb-4a2e-8bbe-b47c7465f005"
        },
        "item": {
          "id": "cba95944-d040-4f16-b860-b22d4bbb777d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "22daf95a-acca-4d3a-b094-99b5d4d549a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07890082-9491-4867-8769-852d83ad154f",
        "cursor": {
          "ref": "b136cf70-19fb-4e22-bdc3-35a01bbec57a",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0a6b6f7a-35a0-4a92-af28-eed45066c5e1"
        },
        "item": {
          "id": "07890082-9491-4867-8769-852d83ad154f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b4982393-baf9-4b7d-8ba0-29ad8b46951a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859a8144-a9df-4064-b56e-c4a34bcdb1e2",
        "cursor": {
          "ref": "70be2227-c287-4d0a-aa7f-57e2630f4140",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5f3f0569-37c5-440d-a701-a459b74fe98f"
        },
        "item": {
          "id": "859a8144-a9df-4064-b56e-c4a34bcdb1e2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9c48573a-28c0-44ca-b925-90f9321c9878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2f911c-68c3-4e41-a6c2-596fc221794d",
        "cursor": {
          "ref": "be568fc8-770d-4102-a35c-3bf37c21eb38",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b6914cf5-806c-4c1e-98f8-4956fa4b41c2"
        },
        "item": {
          "id": "6b2f911c-68c3-4e41-a6c2-596fc221794d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c6f4d9de-b4e8-4857-9714-fa9781fb27c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa8f3db-bd87-498b-8775-6823d9a8903a",
        "cursor": {
          "ref": "09658eae-84fe-4d86-a14f-e4a929e1670f",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "55409032-a9a9-48f8-9b65-296df6f4641a"
        },
        "item": {
          "id": "8fa8f3db-bd87-498b-8775-6823d9a8903a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a3e3d63b-8f1d-4ef8-8306-e8748a74aee7",
          "status": "Created",
          "code": 201,
          "responseTime": 714,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "68850292-f2ef-4f52-8d9e-9b3f52345bd2",
        "cursor": {
          "ref": "4fe88bdd-9a1b-4630-8be3-3ecf43616a15",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c8974914-e220-46e7-b962-4a4bd67a9a2d"
        },
        "item": {
          "id": "68850292-f2ef-4f52-8d9e-9b3f52345bd2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ebff724f-e7fe-46cb-9b7e-99bbde4e180a",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d0db3fcb-3cb1-41d7-b898-32cc378b6fd0",
        "cursor": {
          "ref": "2f7eba4e-9776-4f79-b2ac-050bb86441bd",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "30304f7b-e8df-48c6-87c1-782eb63bd38c"
        },
        "item": {
          "id": "d0db3fcb-3cb1-41d7-b898-32cc378b6fd0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5579cd80-9171-4672-9290-adc6cb447f7e",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "cbc0bde7-cbb8-41c2-84b4-624f11ac4cee",
        "cursor": {
          "ref": "dfe379bd-f833-4aed-b6ba-e5ccd6194569",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eadcef4a-ba45-4a1c-9980-22c8e8b774d6"
        },
        "item": {
          "id": "cbc0bde7-cbb8-41c2-84b4-624f11ac4cee",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9ace7d25-69d4-44b9-8b2e-b1d35ba611c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe1c743-c592-4a0f-8761-1e1d3e3fb6b6",
        "cursor": {
          "ref": "fd5b6f6d-0503-4f2e-8695-d858b72a20e0",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a86a5a9f-69f9-4f06-ba09-206b6cb1dd7d"
        },
        "item": {
          "id": "bfe1c743-c592-4a0f-8761-1e1d3e3fb6b6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "788c8299-421a-473b-b721-4a39bcd3894b",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "53b517ce-5640-4f1d-ab11-3b03ee8ed524",
        "cursor": {
          "ref": "8b98eeda-86e3-4bb1-bf3b-dc7ee2406946",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cce07476-b9ca-49a6-93f2-3d2af8708fb6"
        },
        "item": {
          "id": "53b517ce-5640-4f1d-ab11-3b03ee8ed524",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "951d9435-742c-42c5-81b6-c4b314c8c43e",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c9315a3c-e056-455d-b3c7-b45cb482df6f",
        "cursor": {
          "ref": "40b125f4-e643-47ac-9862-1041e54a74e8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "868f54c5-6533-426c-b80d-0a7def8228d4"
        },
        "item": {
          "id": "c9315a3c-e056-455d-b3c7-b45cb482df6f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "71244feb-aea8-4a35-9065-eba80e0a824d",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "97f0b9e1-6936-442f-a213-5c87497e0339",
        "cursor": {
          "ref": "f9300f95-59a8-4a0f-8c66-b0cb6d001052",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "66cb9861-5496-42b9-b25e-6198cfda7a72"
        },
        "item": {
          "id": "97f0b9e1-6936-442f-a213-5c87497e0339",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d71bb60b-38fd-44ba-8ab9-236f38313499",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0b0269b7-30ed-427c-ab53-718a34591210",
        "cursor": {
          "ref": "7de2e1b3-b426-48ec-a271-49f7d68b782e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8a84e34e-60e2-4fb7-8fb4-24745f8ad580"
        },
        "item": {
          "id": "0b0269b7-30ed-427c-ab53-718a34591210",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "54efcc80-09df-46a7-9e8b-9d106ea6fdf3",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "95403e8b-f479-4496-ad8b-5c13616945c8",
        "cursor": {
          "ref": "37688a37-31b5-42b7-8ca4-6924d708e5e3",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f8d267e6-64ed-4622-bd76-6a16db71a248"
        },
        "item": {
          "id": "95403e8b-f479-4496-ad8b-5c13616945c8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fbd51bae-0715-4d16-911d-893d384506e4",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c29bc669-066a-46ef-ba99-6deb464874b6",
        "cursor": {
          "ref": "c98eba32-ece8-4778-bf9d-97621379a47d",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5fa3200a-1633-42f3-89a9-b41a7a25db9e"
        },
        "item": {
          "id": "c29bc669-066a-46ef-ba99-6deb464874b6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ebe01145-c69d-4da3-a564-a3b41fe1d70b",
          "status": "Created",
          "code": 201,
          "responseTime": 433,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a4f142c8-000c-4d4d-881b-d6204034e401",
        "cursor": {
          "ref": "069fd92a-a940-46e0-b43b-911ab00fb222",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2276c4e2-829c-4efb-a26f-8a2ccc57c66b"
        },
        "item": {
          "id": "a4f142c8-000c-4d4d-881b-d6204034e401",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8cf08197-a77c-4af9-9b01-42477b0bc3c8",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "843990cc-bd37-4853-8637-d5e4671e29a4",
        "cursor": {
          "ref": "00cb4eb1-46e3-43bd-8c3e-574dbe705a64",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ea5ca975-f249-4fac-9010-9b278f5a71c7"
        },
        "item": {
          "id": "843990cc-bd37-4853-8637-d5e4671e29a4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "76458fa8-069a-44b0-8497-1ec6c786a1bc",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8a9d9af8-60b0-40e6-9382-9bba7881f001",
        "cursor": {
          "ref": "1c4b7e92-0e2f-423a-9825-dfbf54635eb4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2056d45d-7031-4021-bf8d-ccf1f7e093d3"
        },
        "item": {
          "id": "8a9d9af8-60b0-40e6-9382-9bba7881f001",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6b06ee46-998f-4c56-a5da-9ac0f464d658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e45b80-08d1-455b-bcad-e032e5fcd9e0",
        "cursor": {
          "ref": "783cefb1-9e2b-4087-94c7-9bddc3507f55",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0111e54f-b73d-4cb9-a01f-1b9c9f8ebfa5"
        },
        "item": {
          "id": "f9e45b80-08d1-455b-bcad-e032e5fcd9e0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5669538b-a12c-4bf2-a995-5a1ed12853e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6513ad91-c4e5-41fd-90f4-9caf4123bfe1",
        "cursor": {
          "ref": "66cd0d1c-4ab2-4b8c-8e3b-fd144a637634",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ead7f517-bc50-4900-9deb-fad9bcdf131d"
        },
        "item": {
          "id": "6513ad91-c4e5-41fd-90f4-9caf4123bfe1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "604ab570-24ea-4eed-8edb-6f4bcba88a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037e544e-7eb8-4488-af15-79c27780e714",
        "cursor": {
          "ref": "c5fa6261-382c-499e-9714-79b08659a905",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e6880292-55aa-462f-b6f2-140b764a35e4"
        },
        "item": {
          "id": "037e544e-7eb8-4488-af15-79c27780e714",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f3bfd6db-dd88-4497-91da-ca2dbb4b0b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa0630e-3daa-4607-82d3-9862c349d414",
        "cursor": {
          "ref": "1d3167a7-3705-4c63-b085-96aff3656531",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "78af61fc-21bb-4f95-94f9-878b79a56120"
        },
        "item": {
          "id": "afa0630e-3daa-4607-82d3-9862c349d414",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dc15ce17-b4bc-4e63-b55d-d29e6a0b4ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3687de6-d37f-4598-84b1-35f937ba4fa1",
        "cursor": {
          "ref": "3d89365a-d261-44a2-8ab3-91e5bbb42289",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "464bc0ae-dc4c-4959-9ff3-d9e54fc44b9e"
        },
        "item": {
          "id": "c3687de6-d37f-4598-84b1-35f937ba4fa1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2c74f475-e043-456b-bcf2-aff85e63733d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b12d38-437f-413d-b08d-705a12022f15",
        "cursor": {
          "ref": "7b0cb7c2-514b-4f39-97ee-a65cb45358fc",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "314a81f9-19eb-4a84-bc02-c4a300874e6c"
        },
        "item": {
          "id": "90b12d38-437f-413d-b08d-705a12022f15",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "33954d13-d29b-4be5-9191-2d1c08bd88e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb74e6ea-0ec7-4dfa-8f95-f104248a7017",
        "cursor": {
          "ref": "61fd099d-638d-47f9-8a0d-97b2b3615da3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "91a289fb-05a5-4445-9858-6134ad4015e9"
        },
        "item": {
          "id": "fb74e6ea-0ec7-4dfa-8f95-f104248a7017",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a8896c8c-8b21-42ff-9563-1dbf47b4ba04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb07800-d6b4-4ab3-b951-82c998f24446",
        "cursor": {
          "ref": "745defc3-62f5-4ba9-a2d1-8809d6e13f68",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9220ba52-9569-4d2b-8f78-a0f1970fcf41"
        },
        "item": {
          "id": "2bb07800-d6b4-4ab3-b951-82c998f24446",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d620f860-7003-4676-a9e2-0700c73ab14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b524e3-789b-4bc4-9382-b2065e12b6a0",
        "cursor": {
          "ref": "50789268-9ef5-40ea-828b-745c62c20fae",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "46306c29-c2fd-4056-ae6b-1b1b7502e182"
        },
        "item": {
          "id": "97b524e3-789b-4bc4-9382-b2065e12b6a0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7d5f4ef2-6df2-4543-9278-df4a0d11347f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ecf94cd-92bc-40ec-afa9-432d5b66a5bd",
        "cursor": {
          "ref": "15608de5-85c9-402c-b531-b486b0614ed4",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "08c45b5f-3408-43d2-9159-2ee2c87cd62c"
        },
        "item": {
          "id": "1ecf94cd-92bc-40ec-afa9-432d5b66a5bd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cea23d65-9fe0-430e-8e63-e1221e863771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c45982-2c5c-4657-9727-b53eca826dcb",
        "cursor": {
          "ref": "7b94de27-2216-4e85-ac42-a0e64d49d0f5",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0c43ab82-a8fb-485a-998a-8deef18b498a"
        },
        "item": {
          "id": "02c45982-2c5c-4657-9727-b53eca826dcb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bbf98dd0-8913-486c-9922-bd7f198f810f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0be34f0-1c5a-4275-8e44-6cadf4824bf3",
        "cursor": {
          "ref": "ac255078-4fb4-4be8-9541-4a5b939fa45b",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "acf3dead-2caf-4924-8924-7698b9cc95aa"
        },
        "item": {
          "id": "c0be34f0-1c5a-4275-8e44-6cadf4824bf3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a208af3b-5819-4166-b248-5e9daab0e84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7079aada-2083-49d0-afb7-d915633373b6",
        "cursor": {
          "ref": "d7fe4ef2-caca-4c32-9302-35bd3ec11211",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e8c9f522-e932-4a59-a6b6-db7fe6623767"
        },
        "item": {
          "id": "7079aada-2083-49d0-afb7-d915633373b6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c2706b85-cf35-4e90-a867-37e12f576e4e",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "898d30c0-2384-4b4c-a3bf-e326fd427dc2",
        "cursor": {
          "ref": "78ec4706-a198-44ca-bd9e-7ecd21d5b36f",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e5c8d54a-8eae-4db8-8143-2ca116c3e607"
        },
        "item": {
          "id": "898d30c0-2384-4b4c-a3bf-e326fd427dc2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fe166ca7-6c57-49b6-b269-e0cd039e5bd1",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7874bd23-c740-45ba-9c98-c83491a1a87f",
        "cursor": {
          "ref": "fb5faaa7-e191-411a-8366-e461b6233072",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8a871c58-3bb3-4386-9c86-6546383218bb"
        },
        "item": {
          "id": "7874bd23-c740-45ba-9c98-c83491a1a87f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "144c4c5f-f7ec-4ae7-b423-9466ad035b5d",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6360d226-af37-4de6-903f-54058f5120c3",
        "cursor": {
          "ref": "5a230d16-95ce-491d-9368-a060fef99b5a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5fef9a4f-1e88-4165-a8ce-7b5195856a43"
        },
        "item": {
          "id": "6360d226-af37-4de6-903f-54058f5120c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "18b70d3f-50f2-4f00-a59a-16fdd1925371",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "569d18e8-6afd-4d5c-b5b3-1019189b9ae4",
        "cursor": {
          "ref": "4a1c095d-756d-474f-974b-ea1befa5961f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e6713d26-c58a-4d3b-98da-665ddbfce41a"
        },
        "item": {
          "id": "569d18e8-6afd-4d5c-b5b3-1019189b9ae4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "96386afb-f61f-4a87-b5c7-fbbd29ce1d88",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4086f122-42fd-4893-8d31-05af45069193",
        "cursor": {
          "ref": "af0e1f62-d141-46ca-80f4-96164885f302",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "61848171-4b8c-4881-b879-bb2f59a03138"
        },
        "item": {
          "id": "4086f122-42fd-4893-8d31-05af45069193",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "313230b7-99d7-45cf-a26d-11ea370b7832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4361561-2be0-4bb9-814b-bc39b655ba17",
        "cursor": {
          "ref": "9830cac8-8212-4beb-84b8-04dfab675dc1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e9900d8b-6db5-426e-818c-523bacf5ab41"
        },
        "item": {
          "id": "f4361561-2be0-4bb9-814b-bc39b655ba17",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "dd7b8edc-0fa3-4a23-a603-9a91de836eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadd4de9-5695-43f1-b1ef-a92bcec2045f",
        "cursor": {
          "ref": "46f68c26-2d70-48af-a049-b519d3df8d2a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a69ae716-57c3-4c6d-b842-eb7c61241d16"
        },
        "item": {
          "id": "cadd4de9-5695-43f1-b1ef-a92bcec2045f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4dd4550a-a88d-4bda-bcc1-018f2fbe25b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234d2ff6-a245-4a6d-b0bf-e0dbcf879532",
        "cursor": {
          "ref": "5503499f-ad03-4aa2-9940-37e5e36f42d0",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cda685f6-ef4c-4d54-901a-9b9e6dc25e12"
        },
        "item": {
          "id": "234d2ff6-a245-4a6d-b0bf-e0dbcf879532",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a937d9ca-2654-4f69-ae45-d274037833de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7485cb94-4e72-49e2-93e0-ec17d43efc71",
        "cursor": {
          "ref": "5b48a88f-0e4a-477c-801e-db949078db3e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fcf50df7-fa08-4ff6-bec1-0237dc5c3d14"
        },
        "item": {
          "id": "7485cb94-4e72-49e2-93e0-ec17d43efc71",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "93ecb65d-40fb-416f-a2b6-e478b5aca48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fbf6c0-79db-440d-9ace-162525a60ded",
        "cursor": {
          "ref": "5dbeeb52-4b5d-4cf1-b9b6-6367519b498e",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "aa988561-c354-4bc5-81e8-0fd9544c2a94"
        },
        "item": {
          "id": "50fbf6c0-79db-440d-9ace-162525a60ded",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9e4c21e4-4b20-4925-874a-f982598bfad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab944537-b848-4acc-a811-1e41ca45da7a",
        "cursor": {
          "ref": "585578e5-da1f-4e80-83c4-082507d574e9",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "92c425e0-3dbb-4e70-aa0f-c7be927ce7ae"
        },
        "item": {
          "id": "ab944537-b848-4acc-a811-1e41ca45da7a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9437ec9b-9fbf-4f24-8e68-22e89bf93bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e827cd-66cc-4f73-8c84-0688c312f26b",
        "cursor": {
          "ref": "4bffcaf8-cb39-4010-a0d4-db1a29ac7990",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "be7ea41d-b1a8-4721-95ff-19d2d11cf1aa"
        },
        "item": {
          "id": "50e827cd-66cc-4f73-8c84-0688c312f26b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2f76ea10-818a-429c-a9aa-0bb74d048c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47529758-e23f-48d2-a984-9441d9ee4c4d",
        "cursor": {
          "ref": "9dc5dce5-1bf7-44fe-8ec4-110e42fa5437",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "47756ffd-1bec-46b6-a956-ee216bf7ff27"
        },
        "item": {
          "id": "47529758-e23f-48d2-a984-9441d9ee4c4d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f1e8e7da-060b-4d4d-b0f8-7a24e7d36c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fd849d-3517-41e8-88c4-3e2b3d780d58",
        "cursor": {
          "ref": "833fd55f-e032-4611-92e0-58985a9c5d85",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "746d0d90-708b-4c44-91ec-4816d701bcd8"
        },
        "item": {
          "id": "00fd849d-3517-41e8-88c4-3e2b3d780d58",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "705456ae-e389-451e-8df6-55e1807c9360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a926d5-a3e3-4917-a1cf-5be5055c62f6",
        "cursor": {
          "ref": "3272f5a6-d4b7-4602-9093-d80a54d9bdfd",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a01f8cda-cba7-48a8-841e-1224d88e3063"
        },
        "item": {
          "id": "70a926d5-a3e3-4917-a1cf-5be5055c62f6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c6b39a23-16b0-4e89-bd35-430715175b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b6f006-8e11-4e74-a425-3f5a976a4666",
        "cursor": {
          "ref": "e1341f0a-fe22-4eb5-8ccd-7961189c5d65",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b9e73b9e-1613-4930-af01-604c08e7ddf1"
        },
        "item": {
          "id": "80b6f006-8e11-4e74-a425-3f5a976a4666",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "78ef1a32-360f-472a-bf91-be9e08a7e87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fb68b0-da38-4672-80c4-30f2944a9e5b",
        "cursor": {
          "ref": "4465d0e1-a4b9-4bcd-aff5-6436ee2ba365",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "981cea84-553a-4e85-a676-8c4dea0080fb"
        },
        "item": {
          "id": "11fb68b0-da38-4672-80c4-30f2944a9e5b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c7d5b34f-acbe-4604-8ad9-8fb3a0213764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93498229-42e9-4f56-9a55-3d5230369743",
        "cursor": {
          "ref": "69a5f6a8-36a3-4dd8-a845-10271b64d4e0",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3a20209e-845c-4bd8-a2ed-3d24a5e09bbf"
        },
        "item": {
          "id": "93498229-42e9-4f56-9a55-3d5230369743",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4860a41d-0aa5-45a4-82d6-a2724f0003fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab04e14-1e4b-4a38-8464-50c1d8345d66",
        "cursor": {
          "ref": "b7e0e8bd-1d23-46a3-a683-dc7af4947df3",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e05ab81b-eb5e-4e0f-98d4-5db7fcfcdaea"
        },
        "item": {
          "id": "cab04e14-1e4b-4a38-8464-50c1d8345d66",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f3d0ec60-6896-4a4f-8965-c845313191f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9739f6-6908-493a-9f46-69db6538d9ee",
        "cursor": {
          "ref": "b34888ae-ff68-4454-b8c2-4a7b3ff2ef64",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "58360eea-267f-460c-be59-e677b39dfda8"
        },
        "item": {
          "id": "cc9739f6-6908-493a-9f46-69db6538d9ee",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4dc4c2dc-79d4-4091-82ff-240448339f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee06c08-2093-4188-9f4b-67665315ba7e",
        "cursor": {
          "ref": "04a0c567-2748-41b5-8af8-a1ea978a714e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3e2d172f-e6ed-4ef7-a433-12b77ffcfc3e"
        },
        "item": {
          "id": "eee06c08-2093-4188-9f4b-67665315ba7e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e0fc459d-2857-4521-afc7-9a0213a090d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880d88da-9ef1-49d1-94f8-9ef8b2de6140",
        "cursor": {
          "ref": "8cebdf38-f8b8-4929-860d-ea4a34e469c4",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6f6e528f-fbd4-4e7f-8ffe-be531425eb88"
        },
        "item": {
          "id": "880d88da-9ef1-49d1-94f8-9ef8b2de6140",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "484bb297-f7ca-4f4b-ac6f-f906b7b56d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ee37a4-a68f-46b8-b70a-253e17f325e1",
        "cursor": {
          "ref": "10ec2c6a-c89c-4bd3-9913-6005b8c212f3",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e70e12a4-9d19-4db5-a7b2-8ff9b92f6225"
        },
        "item": {
          "id": "58ee37a4-a68f-46b8-b70a-253e17f325e1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0d8266db-0eee-487a-a3c2-aac36fa4b235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ccea9e-6657-4c5d-a8a9-f721d25b0f51",
        "cursor": {
          "ref": "614ad3f5-ea5a-489c-bca4-b8537fa884e0",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bc54f05c-c1a2-4977-8d8a-a662e618f032"
        },
        "item": {
          "id": "17ccea9e-6657-4c5d-a8a9-f721d25b0f51",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fcd0a274-d25d-4f98-a6d1-a8a86a12ad71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a0cd9e-e2a1-49bb-b577-652ef5640edf",
        "cursor": {
          "ref": "e802b736-4688-4f4e-bb11-8269bee3782c",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0eec3bf0-7b4c-41a6-acba-5a35c3767603"
        },
        "item": {
          "id": "f8a0cd9e-e2a1-49bb-b577-652ef5640edf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e89cb8c3-c898-4032-bd0c-1fe9cc6b4f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63e0969-510d-4c49-9d00-fb8d694f95c2",
        "cursor": {
          "ref": "ff2dbd1d-2fcf-4c8f-b834-9137d54d63e5",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5ed143a7-88fe-418d-bb2b-0be375d16a9c"
        },
        "item": {
          "id": "d63e0969-510d-4c49-9d00-fb8d694f95c2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2fe812d1-857b-4444-9174-59ada240cfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a9c026-339d-4e91-b8f7-3b74b6256956",
        "cursor": {
          "ref": "716a0102-1880-43ef-9709-860bf248ebec",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "39c12484-0309-4437-9c1e-455dc1427efc"
        },
        "item": {
          "id": "25a9c026-339d-4e91-b8f7-3b74b6256956",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2e79365f-6b9b-41bd-92b5-22316811ef8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df4c394-ade5-4974-9e01-c3f52c5e86bb",
        "cursor": {
          "ref": "a52d90dd-9cc5-4cbf-94fc-fcd6681dee63",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "db8f2fc8-624f-4198-b88b-d86209b9b4a7"
        },
        "item": {
          "id": "1df4c394-ade5-4974-9e01-c3f52c5e86bb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5bd01c40-cb87-4e31-af88-5d974537be9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18631d4-9cd3-483f-8784-576d6c62bf62",
        "cursor": {
          "ref": "668a8311-427f-40ee-b11d-ac238d6254ce",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c131597c-f04f-4f3f-bbae-53e4a88bdf4c"
        },
        "item": {
          "id": "a18631d4-9cd3-483f-8784-576d6c62bf62",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "763cb5cf-02dc-4124-86a9-ad0ff07bb7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf7fccd-775f-4c48-9376-045a72d5285f",
        "cursor": {
          "ref": "1274c924-0a80-484c-9f18-7b73e1fb95be",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "115f4f8f-b6c5-4caf-bcd6-b62116b0f63c"
        },
        "item": {
          "id": "dcf7fccd-775f-4c48-9376-045a72d5285f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7daf6b22-0bce-4e93-ad88-775209862360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68b714a-5aa1-495d-ae6f-f12f948c072a",
        "cursor": {
          "ref": "252cccb0-a573-406a-86fc-7c2c62673daf",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1abdb84d-855e-482b-8de1-15b16c71354c"
        },
        "item": {
          "id": "e68b714a-5aa1-495d-ae6f-f12f948c072a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "08ad011b-3693-4d24-86c8-48118733ed75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb608793-af6a-484b-a67d-3e083ad1839a",
        "cursor": {
          "ref": "3cafd53e-8575-43dd-8451-88e46dece0b3",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b9f1c6bd-2201-458f-8d33-375801caa89f"
        },
        "item": {
          "id": "bb608793-af6a-484b-a67d-3e083ad1839a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5d01e37d-a449-4a70-89fe-e39abab45af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af82f36b-4669-4eea-82c4-f6e6f564c071",
        "cursor": {
          "ref": "7f2574dd-3f77-463f-ad33-fe228b789bc6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "412d4a9d-3735-42c1-a4a2-82ba935c89f8"
        },
        "item": {
          "id": "af82f36b-4669-4eea-82c4-f6e6f564c071",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bbf36c88-899e-42d5-9174-198372465f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7580a818-6bef-4784-a99c-c00983b3c436",
        "cursor": {
          "ref": "ff862d58-6c1e-414d-b7ef-19e45a4b0176",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6271a16d-bd4f-4ec2-b9b8-04d770d8e5f6"
        },
        "item": {
          "id": "7580a818-6bef-4784-a99c-c00983b3c436",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "20da0afe-f249-4b71-abcc-4a9684e860fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dad599a-ece2-4d25-8087-272ad66060bd",
        "cursor": {
          "ref": "efa3e603-be4a-4aa7-8f15-e65cd2d38e57",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "99715702-2eb9-4c0c-8195-0212b9243775"
        },
        "item": {
          "id": "2dad599a-ece2-4d25-8087-272ad66060bd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "64e2abb0-66ef-4078-91ad-797751519096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b9edf3-c19d-4b1e-8c7f-fad0ed33083c",
        "cursor": {
          "ref": "b66b7d3d-7e05-4eb1-93da-ba51f2e2637a",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0bb92671-53d0-4d7b-aa05-b83bdc9f30c3"
        },
        "item": {
          "id": "38b9edf3-c19d-4b1e-8c7f-fad0ed33083c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3ea633ae-bb8e-4bfc-bb5c-ac76c17c560d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447e2a8c-cfb1-4f7c-b7ac-5635bdc8089f",
        "cursor": {
          "ref": "cee19179-b35e-4db7-abe7-8f1a2c9d3abe",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9ad7cad6-52b5-41bf-88d4-beac932c44f3"
        },
        "item": {
          "id": "447e2a8c-cfb1-4f7c-b7ac-5635bdc8089f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b2ccc137-80e5-4ecc-ab2b-ee75285487e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "24ce92ea-f023-4d2c-8aee-0a48f3d5c1fd",
        "cursor": {
          "ref": "0b30639a-d252-44aa-8a0b-9f9e4e337316",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "54e6349c-d537-42cd-b4dc-9b61dcf58581"
        },
        "item": {
          "id": "24ce92ea-f023-4d2c-8aee-0a48f3d5c1fd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dddd120b-c5cf-45eb-8079-c810202e6f06",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e60028-69fb-4333-89bb-2c1235c8beea",
        "cursor": {
          "ref": "20c6daa5-a84f-4c49-a2b8-d4137e81cc0c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "aea15df0-3282-43f4-805f-62bb9b72f9ac"
        },
        "item": {
          "id": "c1e60028-69fb-4333-89bb-2c1235c8beea",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7b63df54-b9be-4ab7-a187-3062f5252b2c",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9528ec-e5a7-4273-ac9f-5f1154559e9d",
        "cursor": {
          "ref": "8426f634-51e3-4bdc-a233-77e4e317b9ea",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b5d38104-2287-474b-8fbd-bd0795154ef3"
        },
        "item": {
          "id": "5d9528ec-e5a7-4273-ac9f-5f1154559e9d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9ec06bb7-0b64-47bf-9fce-7e24eec6a62b",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7560193-bdf2-4d1a-ac27-8fcc1aff69a4",
        "cursor": {
          "ref": "045bbb79-8d78-4780-b1d9-32438b2f6222",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c586ced5-44fc-40db-9ce5-bb2d9767a5f1"
        },
        "item": {
          "id": "a7560193-bdf2-4d1a-ac27-8fcc1aff69a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b7afed63-ff6e-4f57-9223-ed01efeb8baa",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1367329-1660-4ef4-bdd5-2867d8921b1d",
        "cursor": {
          "ref": "36f377bf-ca16-4559-8aa1-908298c405b3",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d4a18330-0d47-4e58-9d5e-82075d346c46"
        },
        "item": {
          "id": "b1367329-1660-4ef4-bdd5-2867d8921b1d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b082ca28-2acb-4be3-aebb-25d90667886e",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-21T00:38:24.045Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-21T00:38:24.045Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "cfc01743-af68-4d34-b707-c54d9f1800b3",
        "cursor": {
          "ref": "0fa144c6-4c5c-4bde-ac4b-a7e7bfc1296b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6bbce7ac-09a9-4c90-aacf-5732ffe29370"
        },
        "item": {
          "id": "cfc01743-af68-4d34-b707-c54d9f1800b3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5bf6f61e-1032-4da8-9c56-c1244ee5e6c4",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e244533-3435-4b0c-8202-56936605e90b",
        "cursor": {
          "ref": "2b7a6ac6-8410-4bd1-9ad3-d730088cf192",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "402606f4-4ee3-4419-8fea-215ea5d52812"
        },
        "item": {
          "id": "9e244533-3435-4b0c-8202-56936605e90b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b844b1d9-0e45-4ebc-b414-c36c6d645cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd10bbd-fb04-4804-aea0-558752acb053",
        "cursor": {
          "ref": "cc394f6b-cffb-41f9-a6c1-a7482e5fd265",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6938dd98-281c-434b-b8e4-4cd30c85e62f"
        },
        "item": {
          "id": "7bd10bbd-fb04-4804-aea0-558752acb053",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "71d35a2e-9f63-43ea-bbfb-1fae453b2ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8efaa0-57d8-4203-8363-c40e0451aee4",
        "cursor": {
          "ref": "ecb61892-bb92-45ed-8a57-d8bd69979541",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "589c3a4e-ea3f-424f-9e05-2e3391198fec"
        },
        "item": {
          "id": "fd8efaa0-57d8-4203-8363-c40e0451aee4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bb94c9c0-89b3-4097-81b7-794474e4f303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83018942-2a9e-4951-b010-5fdb95b2aaa2",
        "cursor": {
          "ref": "6ae7987b-47e8-4526-a637-7e9ed31f7dfd",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2f4b85d0-19f2-4b20-825e-b9cb7ecab2a0"
        },
        "item": {
          "id": "83018942-2a9e-4951-b010-5fdb95b2aaa2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "19f27195-e757-4803-8252-c5c851ccd706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133b38e1-ab3d-4d5f-98c0-d4fa8147172a",
        "cursor": {
          "ref": "1328d6c4-e01d-44ef-a14f-6ec819cbf377",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8bec71dc-5752-48db-bdd0-cc14be34f546"
        },
        "item": {
          "id": "133b38e1-ab3d-4d5f-98c0-d4fa8147172a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bb9d90ad-d7fb-4baf-a389-bd29a46d87a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b63aea-49bd-49ac-b3d9-8d47ce6dc2b9",
        "cursor": {
          "ref": "6a3b65d1-a283-46b1-8d0b-3ef8526240ce",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "881cb026-7a13-4d59-bf9d-d4f325683277"
        },
        "item": {
          "id": "e3b63aea-49bd-49ac-b3d9-8d47ce6dc2b9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "27004867-7359-43d6-a434-3220849d4db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75dbbcee-5068-479b-83d5-a284d7c5a647",
        "cursor": {
          "ref": "a12f7fdb-b235-48f7-a19a-553c23d5e9ec",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f6b50012-9cbd-4972-b046-7f0974e4bd33"
        },
        "item": {
          "id": "75dbbcee-5068-479b-83d5-a284d7c5a647",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "585ccf2a-f1c3-4bb7-9275-414a94e6676c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55826f9-3750-4f04-9757-fcb1a3a27add",
        "cursor": {
          "ref": "97faeb43-8733-45b0-892d-0e44eadaa64e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "af37662c-b9fd-4cd1-8d63-20940c3dcc0c"
        },
        "item": {
          "id": "c55826f9-3750-4f04-9757-fcb1a3a27add",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2d1151cb-80fe-40e8-b571-ca78c17a8f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3e8032-a788-40fc-9a73-0a4b6a760a5f",
        "cursor": {
          "ref": "e2eb3a6e-75eb-480e-b974-08270cc55c6d",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0f5b03f1-d338-485a-8606-a183cf9538ab"
        },
        "item": {
          "id": "4f3e8032-a788-40fc-9a73-0a4b6a760a5f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a09e31a0-758d-4806-ade3-0e5a3a7477cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0103569f-a6ad-4d45-abd2-a81a6478652b",
        "cursor": {
          "ref": "2718b3f8-0fd2-43a9-b71d-9c1a2ebefa92",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7bff6c31-0746-40a3-ab29-60e7e1a9e907"
        },
        "item": {
          "id": "0103569f-a6ad-4d45-abd2-a81a6478652b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "99ca5951-2d36-4736-b317-f3cbd69972ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff8780a-46ed-4905-a8ef-9fb44c8cdc01",
        "cursor": {
          "ref": "0febc689-8111-4481-85cc-75995e97846d",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "127319ba-7fe7-4d4f-9a1f-92bdd7fd1506"
        },
        "item": {
          "id": "bff8780a-46ed-4905-a8ef-9fb44c8cdc01",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b6ec27a8-28a5-4570-964a-9c3110ba341e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a7cd90-d625-4a5f-8753-a5b401f30132",
        "cursor": {
          "ref": "d2042c1c-9cf9-40f8-b32f-fbc67459c40a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a8f308ba-fee0-4c67-855c-0a0939e587c1"
        },
        "item": {
          "id": "76a7cd90-d625-4a5f-8753-a5b401f30132",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a69a1118-5753-4560-826d-cb8b26e2fca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e038558-ce29-47a7-a22b-e4a513340e64",
        "cursor": {
          "ref": "11158d6e-a842-4647-b8a7-ed3f13fb3895",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a07ac718-d438-4b0a-98bc-dc27b901b61e"
        },
        "item": {
          "id": "4e038558-ce29-47a7-a22b-e4a513340e64",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6f599ca1-3b8b-4a1c-a467-9afcb56b7123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d74a89-5751-4ab3-b718-b3cbe8dadfc8",
        "cursor": {
          "ref": "f16ec94e-6f5c-4a20-a3e8-48c910dae34d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f71a71a7-d7c2-4375-882b-0c010c77765b"
        },
        "item": {
          "id": "88d74a89-5751-4ab3-b718-b3cbe8dadfc8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "95891532-03b6-4633-9c84-1cf95d6ba909",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "74f48f51-f013-40c5-bd73-025f61c24e99",
        "cursor": {
          "ref": "59932269-03dc-4a28-a9cc-3a65f0a551f8",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "269c06da-3812-4875-95a8-f23123bd8de9"
        },
        "item": {
          "id": "74f48f51-f013-40c5-bd73-025f61c24e99",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "18badfd3-0155-41f4-bd14-641205b9aee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fb1552-cffd-4db1-b13a-ed894d7e44f1",
        "cursor": {
          "ref": "1cc05d7e-d7d2-444d-ba77-b44c4d84b26f",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "08d72ce5-1496-4203-aa2c-1ee6d94d41d8"
        },
        "item": {
          "id": "c5fb1552-cffd-4db1-b13a-ed894d7e44f1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "80f19165-7908-4d0b-be4c-e1e7496cf54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c1aae5-240c-4dc9-9096-4b9bd31919f5",
        "cursor": {
          "ref": "0c08dde9-d646-40ee-85b6-9dff2159e4b6",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3b2362e4-ba4b-411c-b677-e64f3939760a"
        },
        "item": {
          "id": "c2c1aae5-240c-4dc9-9096-4b9bd31919f5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "642aae5d-7d06-47a1-a6d7-bb2e100891fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03215b2-b7c3-4942-b54f-f7c531d076e9",
        "cursor": {
          "ref": "eeadc7a6-9079-47cb-8187-16cad5a65cd5",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4bda531c-f2d2-4d00-970d-e06049b48b8b"
        },
        "item": {
          "id": "b03215b2-b7c3-4942-b54f-f7c531d076e9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "09f21f11-d05e-4b0c-8ba4-7725db27452b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5ab19d-5947-443b-824a-a4a68c67de5e",
        "cursor": {
          "ref": "53a3a512-9d25-41c5-a024-6d66f09437eb",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3a7d92be-f73f-4a29-b692-34acb139cd3a"
        },
        "item": {
          "id": "8b5ab19d-5947-443b-824a-a4a68c67de5e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "81cccbe0-3dc2-4f75-99a5-72100d29f689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6704ed-fd35-4390-885a-188803c0f8ff",
        "cursor": {
          "ref": "e072afe1-eaf5-40bd-bb48-bbf575a22ed7",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8877f535-286c-4dab-a517-be22eac5d254"
        },
        "item": {
          "id": "3a6704ed-fd35-4390-885a-188803c0f8ff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "838458df-78fe-4e08-8f4e-71ec59796d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baca4e31-03cf-407e-8f25-eb9a23e56277",
        "cursor": {
          "ref": "c345e274-a428-4677-8eca-c30166142635",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2fb1f627-672d-4846-b9f2-edf3357fa123"
        },
        "item": {
          "id": "baca4e31-03cf-407e-8f25-eb9a23e56277",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a085f4fa-134c-4d49-95c4-c499493e34a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084794af-c833-4c11-803b-5aa0a131b466",
        "cursor": {
          "ref": "e734a5fa-b14f-43ef-b1da-f6239c6a5453",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "34720e46-36f9-45bb-b705-40e2d48d9cc7"
        },
        "item": {
          "id": "084794af-c833-4c11-803b-5aa0a131b466",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f2aabdc5-52e0-47b5-9ae3-ed54a1669883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3158b99-f6ad-4530-abd3-c6a5ab0abb25",
        "cursor": {
          "ref": "234f9f7b-fd58-4e42-b80f-f738566b3eac",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a1723de8-bb68-468e-a598-8076547f38b8"
        },
        "item": {
          "id": "a3158b99-f6ad-4530-abd3-c6a5ab0abb25",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dd472435-3c95-4000-93f0-317fd11c928e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dd7ed4-fc34-4815-b082-a820d9308dbe",
        "cursor": {
          "ref": "74180310-6cd9-4721-9d8c-762d988f1348",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7ba5ebe0-42ef-4efd-9dae-8e4bc4391e56"
        },
        "item": {
          "id": "31dd7ed4-fc34-4815-b082-a820d9308dbe",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c6336cc2-31eb-451d-a62f-33f096e7685d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80ff666-c4d5-4fe5-b8a2-965efaf4d8c4",
        "cursor": {
          "ref": "7399f940-23f5-49f0-91d1-99b44552414a",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4d864668-95cb-4d69-bc37-a7f073509bb9"
        },
        "item": {
          "id": "d80ff666-c4d5-4fe5-b8a2-965efaf4d8c4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "daa66323-1d5d-493f-ac81-749a695ba65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d5e858-71ed-4b6f-b480-5a1e0ea1d3bd",
        "cursor": {
          "ref": "5b10a4b3-6ff1-4fc5-a093-55fe10ef9786",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "27e1fc2e-75f1-4336-96f0-8ef801179c48"
        },
        "item": {
          "id": "12d5e858-71ed-4b6f-b480-5a1e0ea1d3bd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9d7c9be1-06c1-4a26-bec0-232f771001b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055d5286-03eb-4530-9bab-3bcc84f6d243",
        "cursor": {
          "ref": "fa9c1140-17ca-4a9f-a06e-7df9e74199c2",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "40031604-0cfc-4e98-b67e-a4736274bf6c"
        },
        "item": {
          "id": "055d5286-03eb-4530-9bab-3bcc84f6d243",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "97316f77-226c-49af-bfc7-07f0515bbcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06cf331-0c98-4557-940f-327a60ad9c54",
        "cursor": {
          "ref": "7aa663c0-0418-4378-9cf4-61cedd81a0fb",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "020bfcc9-fca0-42c2-95e8-976caf649c13"
        },
        "item": {
          "id": "d06cf331-0c98-4557-940f-327a60ad9c54",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d5ee8487-e3c4-4ff5-ba5f-d753d5aedb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3b938b-3b35-4a1c-bf0f-8214396e6f88",
        "cursor": {
          "ref": "23c66d4c-18c4-4192-95f8-a793bb67ea4c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8c20b45c-cf2f-4671-bfc0-7dd691d14f70"
        },
        "item": {
          "id": "ba3b938b-3b35-4a1c-bf0f-8214396e6f88",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "24c8f3fa-f8b1-4e80-9b38-b8c9237c7429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c90b30-6fb5-4639-84d4-a701ea41f863",
        "cursor": {
          "ref": "ebdafb56-843b-47ef-b979-be6412fac077",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d9834388-a10c-4950-8d4b-da067d8357eb"
        },
        "item": {
          "id": "43c90b30-6fb5-4639-84d4-a701ea41f863",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "17760ccc-22bd-46dc-8785-973d26948a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99acda56-0282-481a-a75b-f6dbb7e27da2",
        "cursor": {
          "ref": "807529cc-56be-4584-9ff4-a659d94e16a1",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e0ff8369-0e08-4ffb-8208-932b92e04f2f"
        },
        "item": {
          "id": "99acda56-0282-481a-a75b-f6dbb7e27da2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ab21619a-b12f-46c5-b850-e17abd458bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46fc0037-1b6d-45d4-a1b8-190e17af92fb",
        "cursor": {
          "ref": "c0446719-3dea-44b7-822a-6cc5190b94cf",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ee33eec7-727b-4acf-ab92-e54e8ac71367"
        },
        "item": {
          "id": "46fc0037-1b6d-45d4-a1b8-190e17af92fb",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8c6cb61e-0e00-4cf9-9414-5d19ff74d60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2ce285-4ced-4689-af90-c82521b17582",
        "cursor": {
          "ref": "977460b4-d234-4c28-9ff3-056bd545ebab",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "be4f512d-76ea-4cdf-ab5f-65a93ccee1db"
        },
        "item": {
          "id": "5b2ce285-4ced-4689-af90-c82521b17582",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "552f93e6-7e6d-4275-be03-acbd68bc3160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065d1176-095e-4867-95b2-8b4cb5ff6137",
        "cursor": {
          "ref": "28f30011-cd83-4cde-8408-4f92dc6ed18a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1a301322-c32e-4a76-a460-e6b4a55c4596"
        },
        "item": {
          "id": "065d1176-095e-4867-95b2-8b4cb5ff6137",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a9511b9e-5689-44d2-868d-ab4a6a6ccb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85d5897-194c-4121-bfc6-c24175262066",
        "cursor": {
          "ref": "d85bb25c-14c1-4262-a01f-c37dca851d45",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a7e9a5cc-9750-4181-8859-f9567adb2440"
        },
        "item": {
          "id": "e85d5897-194c-4121-bfc6-c24175262066",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "130881a2-dabf-458a-a43b-0646ea89c080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d1695c-9831-4de3-9ecf-b4c7b6a23ff1",
        "cursor": {
          "ref": "4b0e6fcd-982e-410b-8cff-0ff77d17c74e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86ff96a1-b763-42b9-92ba-4865f4477c11"
        },
        "item": {
          "id": "63d1695c-9831-4de3-9ecf-b4c7b6a23ff1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "01ad4a0b-c35d-49c3-b137-f3ac0f847c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3511d5-688a-451a-9c4e-a476e740079d",
        "cursor": {
          "ref": "902c56ca-b56a-4906-b0a9-a3bdb3e9356f",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "fda2f2e2-e3cd-4ae5-a3ff-33296de8aa86"
        },
        "item": {
          "id": "3c3511d5-688a-451a-9c4e-a476e740079d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a54650c7-af3f-403c-829d-d58abb727032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c0e603-71fc-4ab4-ad94-e776d584e403",
        "cursor": {
          "ref": "6946fe29-6266-4b31-96b4-e71dc92bc7de",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8813d5fa-ce82-42b5-a2eb-59806300e482"
        },
        "item": {
          "id": "98c0e603-71fc-4ab4-ad94-e776d584e403",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e9b195de-98c5-4e9f-9da7-65e8bfcc9c56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b1dbc3-7791-4529-8d03-0c6dd9361484",
        "cursor": {
          "ref": "db994fe9-d00d-4a55-83c0-e94b55f338fd",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cb091a0a-e598-4536-9fa6-965192603583"
        },
        "item": {
          "id": "c0b1dbc3-7791-4529-8d03-0c6dd9361484",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8f4cbb62-1ab5-4d20-b562-9594ef968e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78954323-0b8f-4a2d-ad1f-8bca04ed3f5e",
        "cursor": {
          "ref": "b6f59e56-d022-4edd-a2ba-b4222675a220",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0b68efbe-b505-4428-8b8e-33be1a259b5a"
        },
        "item": {
          "id": "78954323-0b8f-4a2d-ad1f-8bca04ed3f5e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ecc61f59-50d4-4fe3-bdbe-4ccd9b619719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be69458e-146d-4ba6-acf5-f537e8b5c228",
        "cursor": {
          "ref": "d0d1d939-fc28-4260-b112-4b6034466141",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "98d50e62-720c-4c7b-afd2-cd6f4f248793"
        },
        "item": {
          "id": "be69458e-146d-4ba6-acf5-f537e8b5c228",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fecbcd40-838f-4f68-ba4a-46e6c59d1e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d76b5d-7ecf-40c9-a869-c91f4ac0ea0d",
        "cursor": {
          "ref": "3863e146-f027-468b-8aa8-7eba32e8f6b2",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "091fdda0-8e4f-47a2-8255-c85ad2a049ff"
        },
        "item": {
          "id": "e4d76b5d-7ecf-40c9-a869-c91f4ac0ea0d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "51c2c7b3-a132-48ee-b2bf-e8e26a0ac596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fe334b-f417-4152-978e-13a73aefb0ae",
        "cursor": {
          "ref": "8300b100-0580-4df9-b6a5-7179751ee08d",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "63fefa6b-6f24-470e-bcb6-b8450cb17ede"
        },
        "item": {
          "id": "c3fe334b-f417-4152-978e-13a73aefb0ae",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3beed4a9-2825-4ad9-b2e4-3010428c6909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252df6ef-e046-4f95-a4ef-f01e1c2fcc8e",
        "cursor": {
          "ref": "a162ea30-21dd-4f9a-b804-fa87d45bd0ac",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fc30e9ae-a05b-48ec-926f-0dd4f9c7a442"
        },
        "item": {
          "id": "252df6ef-e046-4f95-a4ef-f01e1c2fcc8e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c7eb5764-ad17-4294-8dc3-130953d97f2c",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "32af3525-34bb-4876-9137-17570498d306",
        "cursor": {
          "ref": "9c2912ca-77d5-49f0-a21f-8a3c431a4a3f",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a0790734-6993-437f-8334-7f6693f9b643"
        },
        "item": {
          "id": "32af3525-34bb-4876-9137-17570498d306",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6d404e4d-d93b-4471-9b75-fa86bcf51df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01b06b4-6cdb-4eff-aa35-f11d60b5a691",
        "cursor": {
          "ref": "4f68c3b9-23ac-456d-8b5a-57f591471af3",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9b450034-50b4-4ba7-9fbb-257251fdb746"
        },
        "item": {
          "id": "b01b06b4-6cdb-4eff-aa35-f11d60b5a691",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ad4b0051-abfb-441d-90ac-c959953b32a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bc2861-835d-4193-80c0-3807ce5ec9ea",
        "cursor": {
          "ref": "e341bef4-bb41-4a15-886e-fdb7906703b8",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "25e80b5a-70dd-44de-8e64-9daef2708006"
        },
        "item": {
          "id": "a9bc2861-835d-4193-80c0-3807ce5ec9ea",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8ad0a521-2e03-4693-ad5c-fe44eb74fd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8a279a-1e88-4f37-9790-fbab3dfda696",
        "cursor": {
          "ref": "095823e5-d1ef-4b95-a404-5d30b55c0423",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c45d09b5-1f5b-419b-8667-874dc7bd11cf"
        },
        "item": {
          "id": "8d8a279a-1e88-4f37-9790-fbab3dfda696",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5c4ed34d-f2fa-4a72-be76-83967c63fb59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12781618-f6de-4a83-ab24-4cccd93154f4",
        "cursor": {
          "ref": "797c6f18-87c0-4bb5-bf24-ebf42dccd51f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1f69c9ce-15c0-4d25-a6bd-22dd376c1b90"
        },
        "item": {
          "id": "12781618-f6de-4a83-ab24-4cccd93154f4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6c8516be-2f54-47ea-b861-63d11f855ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64940533-e0ef-4d42-8526-7340f0462ba6",
        "cursor": {
          "ref": "d5221c49-a47e-4996-b2c9-3889068e49b4",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d9ebd5a9-0302-4634-a3a5-2fa9c7874dea"
        },
        "item": {
          "id": "64940533-e0ef-4d42-8526-7340f0462ba6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "12c1ddb1-be00-4acd-a89f-8b4c67853171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbd33e8-fa4c-4b95-84aa-101ce3e0169d",
        "cursor": {
          "ref": "c267267c-c587-4ba7-ba4a-77629d707958",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6bb2f14b-4c2a-4e64-ba9e-dd6096b647f9"
        },
        "item": {
          "id": "fbbd33e8-fa4c-4b95-84aa-101ce3e0169d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "11d97cf2-67d4-4039-87c9-974bf00da9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aff7ff5-e197-4b92-a2d3-42a7788fcc91",
        "cursor": {
          "ref": "8531c8b4-3761-48e3-99a7-3565c8e1bf74",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "826521d0-9a9a-4a48-9e4c-79123696611a"
        },
        "item": {
          "id": "2aff7ff5-e197-4b92-a2d3-42a7788fcc91",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b340d5cf-12b4-404b-9aa9-eec121e9dec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27648c5c-b937-444b-8691-e28afd25670f",
        "cursor": {
          "ref": "30143ef4-a80e-40f9-b76a-7894d72c9ea9",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fb39f4a0-5a31-44ab-abf1-6cb8586d0858"
        },
        "item": {
          "id": "27648c5c-b937-444b-8691-e28afd25670f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1b92857c-98a0-4238-924d-a6aa6c0564e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a663203-edad-4009-9365-04eb3a142a59",
        "cursor": {
          "ref": "8c431ead-7063-4495-b60c-97c13a085bce",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "92c8939e-176d-4704-9de7-bba96469f61c"
        },
        "item": {
          "id": "6a663203-edad-4009-9365-04eb3a142a59",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "909d56a6-130e-487c-beaa-d22e845ef4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3078037-e720-4b7d-92c6-7ed9b9ed4891",
        "cursor": {
          "ref": "6762dfdd-0ec8-40c9-ba0f-30f9f12a1012",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a6f77372-f274-4e16-8533-71f1bd5d5611"
        },
        "item": {
          "id": "d3078037-e720-4b7d-92c6-7ed9b9ed4891",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "64f5f8e9-2274-4789-a84d-3e19f439dc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3094b652-e7a6-4837-b6f7-7814f32c221c",
        "cursor": {
          "ref": "6634c001-5ea2-436d-a904-19dfdf2b9075",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cbae3602-de5f-4f6f-9c70-227e63b090d2"
        },
        "item": {
          "id": "3094b652-e7a6-4837-b6f7-7814f32c221c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b42b37c7-96f5-4269-a2d6-46e3a19ed98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed693a80-b721-4c80-9c92-4266c916a9a6",
        "cursor": {
          "ref": "685eff88-8161-439f-8ceb-9c6096f95a03",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "daa376e8-a87c-4064-98b9-8785c0be17e6"
        },
        "item": {
          "id": "ed693a80-b721-4c80-9c92-4266c916a9a6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ef87cb5e-af31-44eb-92c8-c71d2a55a807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ce8db5-ddaf-4b52-9b16-351be062fa8f",
        "cursor": {
          "ref": "1b791fa1-dad6-447d-9493-0ec8e95f0196",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "720a3857-a7ba-4e48-a208-33fc09aae15a"
        },
        "item": {
          "id": "92ce8db5-ddaf-4b52-9b16-351be062fa8f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "28153793-5bf6-4cc0-a82f-46d768b42397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23cc004-d227-43df-bc8f-155a18ac425e",
        "cursor": {
          "ref": "c7ef1420-c3ec-4f93-99a9-410154cdccf1",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f4eff291-0dc8-49bc-a6e7-b8644a1ae85d"
        },
        "item": {
          "id": "f23cc004-d227-43df-bc8f-155a18ac425e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "86756320-eb94-42d8-8e7b-6fadc0f85962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486fdeee-cfea-4853-800a-3d313d10b0ce",
        "cursor": {
          "ref": "cd3a776c-1e3f-47e6-aa9e-3f4ab2dcf4f6",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4fbd61da-42f0-451d-869e-69c55dea2653"
        },
        "item": {
          "id": "486fdeee-cfea-4853-800a-3d313d10b0ce",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "64e44058-a652-490f-a1be-b41e9d12ff1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e355efe2-5bd9-41b4-bfcf-3d4a740dd2ee",
        "cursor": {
          "ref": "d85e1a23-0022-4180-8be5-5d7d7a0108b2",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b7d9a377-316b-4147-b307-50a033a8f471"
        },
        "item": {
          "id": "e355efe2-5bd9-41b4-bfcf-3d4a740dd2ee",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e5c10544-4e4e-4b36-a233-f944a821ebf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f4c2cf-ad5f-4f27-b178-b432b67a701c",
        "cursor": {
          "ref": "9103d52a-c3e6-4cda-a684-6fcb5a621100",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bb283fa2-75c0-46ba-b0af-6faeb5c1a566"
        },
        "item": {
          "id": "00f4c2cf-ad5f-4f27-b178-b432b67a701c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7d2e4b95-0a6d-48e6-87f1-fe6dd7735970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecf4288-4d0f-4fef-a45f-d25b744c1df6",
        "cursor": {
          "ref": "d880720b-ac5c-48a7-a3e7-82b3a7827ee1",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0c1dfe0c-17a6-42ca-85f1-c3f3e47f985d"
        },
        "item": {
          "id": "6ecf4288-4d0f-4fef-a45f-d25b744c1df6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "68f1c53b-f337-4d8f-8329-500b25121484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656f40d4-03d0-4ba4-a76c-3fb0fc43fbdf",
        "cursor": {
          "ref": "294b2b99-18f5-485c-9e14-505e457346ba",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d5375def-d7d9-4e33-99dc-19ad4452e53f"
        },
        "item": {
          "id": "656f40d4-03d0-4ba4-a76c-3fb0fc43fbdf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c77bb68e-39bf-4db7-b04f-c3674d4142fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abb2a71-a66c-43dd-a7c2-4eea1f02e7ee",
        "cursor": {
          "ref": "0ba03e7d-593d-4a6c-950b-280783bcafe6",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1e03296b-d692-40b8-88bf-474e98775de2"
        },
        "item": {
          "id": "4abb2a71-a66c-43dd-a7c2-4eea1f02e7ee",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d3aa614d-b7d6-449f-b717-4ccdf261307a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12fa112-9134-4e89-a645-3fb0724a6a7c",
        "cursor": {
          "ref": "848b2ba3-007c-41b5-b079-aa7a691de9da",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d2415353-9824-456c-8476-dd9a9eaa823f"
        },
        "item": {
          "id": "b12fa112-9134-4e89-a645-3fb0724a6a7c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "76d1746e-83a8-4e16-915e-3e112ede2ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef56af4-7d17-449a-be3c-e0447e58262e",
        "cursor": {
          "ref": "c087a312-47d8-4143-83bf-f8d2e48dce72",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5bcd8f5d-e2d9-4995-ab83-4a12dc7fc248"
        },
        "item": {
          "id": "fef56af4-7d17-449a-be3c-e0447e58262e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8b0284b1-682d-45d0-8b49-78046fa4ff99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d1b816-d2f6-4ba7-b131-b032361521a2",
        "cursor": {
          "ref": "d7e2b8a7-d9ba-4e26-965a-129fbf24a7d1",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a28bed63-753d-4254-941d-f20f88cdd774"
        },
        "item": {
          "id": "67d1b816-d2f6-4ba7-b131-b032361521a2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "41351345-7920-464f-ae8c-6c260a7e63f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ba762a-f58b-4bf9-85e7-496aedf72ea7",
        "cursor": {
          "ref": "7059181e-ffe1-4bba-a677-607a2ff2066c",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9e84d9fb-2056-4b74-a5a7-bf8c362da948"
        },
        "item": {
          "id": "67ba762a-f58b-4bf9-85e7-496aedf72ea7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b2980407-40ae-4e37-821f-25aff9ff2078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29f5246-11e1-455d-a5e0-eaf7c643a7f4",
        "cursor": {
          "ref": "f6165e29-b84c-4ce1-be3b-c763a42d9d5b",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d7a67c40-673f-4219-ad5f-0d649e3d3270"
        },
        "item": {
          "id": "c29f5246-11e1-455d-a5e0-eaf7c643a7f4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e4c2c336-0bf5-4524-9d92-6f3eccc2fad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8752c1d3-4359-4975-bb39-4f8e5ccd99aa",
        "cursor": {
          "ref": "81f99a12-e113-4a88-a8c2-cc2df6de3c65",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dbc26a65-87eb-49f6-8cc2-f24e6f63c83a"
        },
        "item": {
          "id": "8752c1d3-4359-4975-bb39-4f8e5ccd99aa",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "effa2c44-1285-4964-b510-9891a61be740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbe7be7-e8dc-410f-ba95-cc37709a45a7",
        "cursor": {
          "ref": "218d4588-ebf1-4d73-8b93-63f8cd0e14ac",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4c2b71f2-ca7b-45fd-8b2f-6d5fd5f898f2"
        },
        "item": {
          "id": "6cbe7be7-e8dc-410f-ba95-cc37709a45a7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fb7023da-3091-4ee6-b4de-00dd9f79fae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe62600a-277d-42ab-9cd1-a00582d516e9",
        "cursor": {
          "ref": "8f4a5218-e3d9-4d85-ac62-de84dabb9424",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5f2b2fee-27af-42b6-b35d-eda0dfcc2d91"
        },
        "item": {
          "id": "fe62600a-277d-42ab-9cd1-a00582d516e9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e0430959-cc5f-4661-b9fa-5e0d8cde02f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfbf5d3-737f-4c9f-8d2f-be21f7165bc0",
        "cursor": {
          "ref": "a3e896c3-d459-41d3-865a-8228561699ce",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "aead9495-ffac-45d6-b9df-ca958325f2bb"
        },
        "item": {
          "id": "cbfbf5d3-737f-4c9f-8d2f-be21f7165bc0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fcc9c5a8-6591-45c6-a974-01738421cdf5",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "554430eb-2cbe-49d0-a48e-3efb99b50889",
        "cursor": {
          "ref": "ee17230a-5cc0-45e3-b420-d455cfd0e114",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "060699cd-1732-4d99-8f14-48c4280fa9b1"
        },
        "item": {
          "id": "554430eb-2cbe-49d0-a48e-3efb99b50889",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8992c65d-45f8-4bf9-b5d3-b093e1fcc0a6",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ca3534f5-6928-4732-8c7f-4761cc47d0fc",
        "cursor": {
          "ref": "5484b323-6340-4b0c-a9d2-d336bf45a1a0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2fabde29-2781-42de-8098-c487f0491fd2"
        },
        "item": {
          "id": "ca3534f5-6928-4732-8c7f-4761cc47d0fc",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4c6788f4-5581-4e47-95b2-9b31bad00e2f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "24ac5587-b84e-4064-817c-507098edec8f",
        "cursor": {
          "ref": "3b2d5a2f-ba47-4ed8-8af1-6e699ed96d15",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2c69d2d5-b7ac-401e-870e-972c2b86f6fe"
        },
        "item": {
          "id": "24ac5587-b84e-4064-817c-507098edec8f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d31eac9b-b9b0-40e6-8463-6311082a4a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd63993-88ca-40f8-8124-6188896784a1",
        "cursor": {
          "ref": "14a5ca71-2d07-49f2-ab71-5a8058aa41cf",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "11dad8c6-fb29-4bc8-a441-6d4d7463341c"
        },
        "item": {
          "id": "fbd63993-88ca-40f8-8124-6188896784a1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f135ca51-624e-462f-98d6-6e7a79f8d9ad",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4005a7c3-7e28-4c52-8b00-40dc9ff39e3d",
        "cursor": {
          "ref": "9874ea2b-16ba-4d1d-8436-840e50f81e2a",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bad681f5-d106-4a47-83b4-c900aa6d3f57"
        },
        "item": {
          "id": "4005a7c3-7e28-4c52-8b00-40dc9ff39e3d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9ace275f-b95c-41b2-8712-a5093e9f6402",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "63f3514d-5503-4e15-b84c-52eeefe2e8bf",
        "cursor": {
          "ref": "b3185dd2-6efb-4bdf-a0c3-d9acd9c1766e",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "db0f68b4-8195-4609-86e8-49feeb43c9bd"
        },
        "item": {
          "id": "63f3514d-5503-4e15-b84c-52eeefe2e8bf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2672c6e6-933f-4727-a6ef-15b1a9c881d1",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "4ae30131-ddd7-4982-a128-1ffeb187ed34",
        "cursor": {
          "ref": "7239e0e0-40f0-4310-99e7-59c164340944",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "40cb881c-2fa3-4d41-887a-a25bbc666148"
        },
        "item": {
          "id": "4ae30131-ddd7-4982-a128-1ffeb187ed34",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4a212334-0aed-4936-8e56-51743fa3920f",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "9d263b48-089e-439b-8d49-28c89250741d",
        "cursor": {
          "ref": "d437a50d-2d1c-4f34-b93c-76856c3bdbfc",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7ddc38f4-0451-4300-9a54-4126045fc287"
        },
        "item": {
          "id": "9d263b48-089e-439b-8d49-28c89250741d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b400f631-1287-43db-9c9a-fe615dd2b9bf",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "459788f5-0473-4245-bb83-a0554b924225",
        "cursor": {
          "ref": "07e28211-7bc8-42b2-b2b9-918e1e420979",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "71e09e0d-bec3-4cc3-864d-0abf4c9e6394"
        },
        "item": {
          "id": "459788f5-0473-4245-bb83-a0554b924225",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5950e537-b685-4cc5-89bd-f682d0fedf12",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "73155fab-76b2-42b2-8de6-e68c22aca26b",
        "cursor": {
          "ref": "d04faa06-c0ec-4ed2-91e8-1fb1453e0ba5",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "faf81e09-6ef7-454f-baef-408d2263d390"
        },
        "item": {
          "id": "73155fab-76b2-42b2-8de6-e68c22aca26b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "55dadc9c-c9e4-4041-b121-87eb499e6c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b70f4d-5d08-4f0d-8879-49d0838e5f21",
        "cursor": {
          "ref": "a613532d-0150-4516-a44d-f5388afeeba5",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ceffa1f4-a57d-4ed9-8ed8-feae0e3b4ebe"
        },
        "item": {
          "id": "24b70f4d-5d08-4f0d-8879-49d0838e5f21",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b8af5079-d124-4609-82cb-4a97b8cd42fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae629e5f-1792-43cb-bf07-42dd098aecac",
        "cursor": {
          "ref": "5aa47dc5-315f-4374-ac30-398b592c13e4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "06a59882-024e-464e-8e92-098dce6628c2"
        },
        "item": {
          "id": "ae629e5f-1792-43cb-bf07-42dd098aecac",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8afa5d86-4d21-45b9-96d9-8e196d651b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a385f7-5531-4035-9a6b-f68c0b056a6f",
        "cursor": {
          "ref": "895ee52f-bc46-49ac-9545-1d2b760a7153",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "890fdf08-e2c5-49f3-a05b-ee3dfec748d4"
        },
        "item": {
          "id": "96a385f7-5531-4035-9a6b-f68c0b056a6f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2b7c164e-c0ac-46ce-b741-e2c24fc583a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11130acf-cec4-4dfb-a73e-09a95c418d25",
        "cursor": {
          "ref": "bb19f26c-d651-4c35-8c60-6833a5168acf",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "27664106-cb93-4ea1-85e8-a9ffc04d9a5a"
        },
        "item": {
          "id": "11130acf-cec4-4dfb-a73e-09a95c418d25",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ba47c406-e900-45a5-b8ef-45f0d8f3011b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93eb00ef-470c-4ee1-a611-b5e762511db8",
        "cursor": {
          "ref": "6b30ebe6-f2d9-482f-8ed0-14be043d0e8d",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "100ca9bf-5622-4975-8aae-ff8aebb188ea"
        },
        "item": {
          "id": "93eb00ef-470c-4ee1-a611-b5e762511db8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "99faf893-7c79-4f92-b6b1-ceec015dea01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff5894e-b759-438c-978f-15359b336f36",
        "cursor": {
          "ref": "00b4fa82-7894-4b8c-81a1-337291d8cfdf",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e883c7db-9d55-46a4-9e23-c50a9d6b5e79"
        },
        "item": {
          "id": "eff5894e-b759-438c-978f-15359b336f36",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "85880b06-b59c-452f-a6cf-1b3452054490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4e2a87-1b3f-4f27-bded-e89d7c1aef9c",
        "cursor": {
          "ref": "21dab592-e11e-4545-a34e-b727c9270503",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "35c4e0d5-adc5-4ca7-968d-4414fa70ef30"
        },
        "item": {
          "id": "5a4e2a87-1b3f-4f27-bded-e89d7c1aef9c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "eb6328cd-7b1f-4ccb-8c7f-5a3d70cdc344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a095e07-f445-4ae5-ab3c-9af45d038419",
        "cursor": {
          "ref": "6dd645d7-c3dc-4bfa-ad66-198d2220ee9a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c1863903-bf45-4770-9c06-f39c5b5904b9"
        },
        "item": {
          "id": "8a095e07-f445-4ae5-ab3c-9af45d038419",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9a4ef4a6-298a-450c-9c00-95684a2b1811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414befbb-c244-4474-ad60-37470d5503fa",
        "cursor": {
          "ref": "e5859c94-866e-45ff-9f4a-9f5ae5f6f5de",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "936f35ea-3e8c-437c-8d9d-8d02e64f20e7"
        },
        "item": {
          "id": "414befbb-c244-4474-ad60-37470d5503fa",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c42ebd6d-ec6f-4db3-a11b-c43b95136755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5818b8bf-f1f3-48d1-8718-bf28241f8701",
        "cursor": {
          "ref": "69c5e5c9-80ae-45b7-8b60-5c350476a055",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "20a93071-aeeb-4542-8b19-91b4ccd3e229"
        },
        "item": {
          "id": "5818b8bf-f1f3-48d1-8718-bf28241f8701",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4e6678d8-4ff4-4f82-83f0-d2e29acbc9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626cb62b-8781-4a4b-8a3d-bc84e9114fd1",
        "cursor": {
          "ref": "714ef39e-6c4e-44fe-829f-3dc8ab0c3c72",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "152c832b-a84b-4e02-9b4c-1c49ec3134ac"
        },
        "item": {
          "id": "626cb62b-8781-4a4b-8a3d-bc84e9114fd1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2981efe7-2e23-4550-9931-f54a9b693f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9510f63f-c428-4525-b606-0b3ed2121dbc",
        "cursor": {
          "ref": "93cd323d-db6a-44a2-b910-7a6e180b8c13",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "73da7ecf-bd50-49de-b321-b96e828302e6"
        },
        "item": {
          "id": "9510f63f-c428-4525-b606-0b3ed2121dbc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "da32f976-f759-4de8-a27d-6c74ba3050b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bbeec5-ec41-4f38-8649-91ad3f93c950",
        "cursor": {
          "ref": "2713c1a8-c21e-489c-9a30-d8fbb2e21e16",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "94b299bd-fcac-4c5f-87b4-7dec28399297"
        },
        "item": {
          "id": "57bbeec5-ec41-4f38-8649-91ad3f93c950",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e762bc74-9936-46f9-9f01-5caaafad8ad4",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d65c51d0-75d7-4078-889c-0cba05ac5e26",
        "cursor": {
          "ref": "dfe7674b-27db-4baa-b1ac-0b1d9f91ba28",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "72a9ae56-40ef-43df-9b40-7afade2454eb"
        },
        "item": {
          "id": "d65c51d0-75d7-4078-889c-0cba05ac5e26",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d189cd2e-da25-4686-8aa7-457e2d6b060f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "bf33d2e8-0920-4e36-b55b-a528389ea921",
        "cursor": {
          "ref": "770ecc88-59cc-40c7-a37e-4067e03da0c5",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "11471605-b096-4e39-9b8c-da2253efe994"
        },
        "item": {
          "id": "bf33d2e8-0920-4e36-b55b-a528389ea921",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "927bb11f-de72-4ca2-8257-0a0392891b9b",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "bd3c56c5-466e-46de-a3c0-c9c90d4a3d6e",
        "cursor": {
          "ref": "911dc5a1-a8dd-4341-9fa0-16a4c0597fe0",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "269f58f2-30d0-44ee-ae74-1df600178f57"
        },
        "item": {
          "id": "bd3c56c5-466e-46de-a3c0-c9c90d4a3d6e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "249f9faf-a885-4cbf-8f90-0c091c10edfc",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "80d3a904-0299-427c-85b1-fe56188b69b3",
        "cursor": {
          "ref": "95e57ee2-8f05-4e6e-a6ab-cb4346b189a9",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0c0c165d-cfa3-492f-95ab-86a5126c353b"
        },
        "item": {
          "id": "80d3a904-0299-427c-85b1-fe56188b69b3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7416391a-29ee-4e96-b57c-111f8088317d",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "7ad21258-83c5-44db-81c2-e01bb0f9a199",
        "cursor": {
          "ref": "fc99096e-ba2b-4730-a0e2-1bcba6dd1d80",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "aa9181c9-7814-4c43-a82e-88c82cd613dd"
        },
        "item": {
          "id": "7ad21258-83c5-44db-81c2-e01bb0f9a199",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ed675578-f9bf-4892-903f-09afd60fe431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd277fd5-2766-4817-a15e-89393e492fec",
        "cursor": {
          "ref": "51a51558-e7a9-426f-9196-9d4b7d3426c1",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d8cb0612-9491-4836-9914-07bac229a7b5"
        },
        "item": {
          "id": "fd277fd5-2766-4817-a15e-89393e492fec",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6b025121-1db3-4e99-8a4a-e72fb44b50b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff42534-bb70-4714-98bc-0f32cb638909",
        "cursor": {
          "ref": "2057e382-906e-421a-b4de-0d24760b23b4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0cf741e7-256b-4619-afef-6e20af189d0e"
        },
        "item": {
          "id": "8ff42534-bb70-4714-98bc-0f32cb638909",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c613bfdf-8d70-4f83-85f8-cd51562bf954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1731ca-f37c-45a8-93f3-6179028c80ca",
        "cursor": {
          "ref": "306d7444-42e0-425e-af53-69b393f760d4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c67bd31a-773d-42f2-83ab-af0e2a2a98e6"
        },
        "item": {
          "id": "7b1731ca-f37c-45a8-93f3-6179028c80ca",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6a71123c-223b-4c34-9381-7da738b5db03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028c87d0-ecc5-455e-8ee7-efe5c7315506",
        "cursor": {
          "ref": "e24b8a25-234f-4075-85fc-63edd55d59b0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "75181ab0-981c-4955-a775-c0fa430f7e3e"
        },
        "item": {
          "id": "028c87d0-ecc5-455e-8ee7-efe5c7315506",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d4c59690-b48a-44f7-8ed6-bccf8abb3797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22426a97-bd7b-4ee1-b879-f70a0bc1b5f7",
        "cursor": {
          "ref": "c706fc3d-2f4e-4a83-a93f-207ab5938ff1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "064fcf8a-bdbc-4631-8c1b-ed06ece1b59a"
        },
        "item": {
          "id": "22426a97-bd7b-4ee1-b879-f70a0bc1b5f7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "25c87bb0-8231-4d9d-af3f-1c5b90cfbfc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a9dd33-996a-4ba4-9a51-858fdabaab72",
        "cursor": {
          "ref": "d0a4dda2-eebb-4408-9511-a0bf2d680ed6",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e309a61b-f25a-4524-a022-2dc6db61f54f"
        },
        "item": {
          "id": "17a9dd33-996a-4ba4-9a51-858fdabaab72",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b52813e0-937f-4647-af12-fee9f1a27db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0b0146-58b5-40f0-a7bf-8a52c53e1d9e",
        "cursor": {
          "ref": "940ee973-fbec-4ee8-b5a7-02005c4521d1",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1126c433-803f-4169-98bc-d248c9507bea"
        },
        "item": {
          "id": "ba0b0146-58b5-40f0-a7bf-8a52c53e1d9e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8f78458b-619a-44c4-af55-e4c46249fcf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909de30b-4b81-4c47-8918-7fc0467e2089",
        "cursor": {
          "ref": "b4ca6d2f-f23f-4751-8462-12fc692c56f5",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a855930c-0948-4768-87ab-a6e4f582414f"
        },
        "item": {
          "id": "909de30b-4b81-4c47-8918-7fc0467e2089",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4e472376-0615-47b2-a539-e457650d2c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ba1f0e-ff8b-492f-bf64-feb9eec14f7b",
        "cursor": {
          "ref": "af476635-9ae4-41bd-af95-864df757549f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6ff16d7f-6e15-4de9-8863-06e00be870dd"
        },
        "item": {
          "id": "b9ba1f0e-ff8b-492f-bf64-feb9eec14f7b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "57974a37-ad8c-4bca-ab83-9ca935317682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b556629b-3325-48a1-b5b5-3ea493c61395",
        "cursor": {
          "ref": "de269ae6-9a12-40ea-b929-3ecb54742d86",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0fe6e2e7-26d0-4126-8ce7-4fb2078a566f"
        },
        "item": {
          "id": "b556629b-3325-48a1-b5b5-3ea493c61395",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fa173dba-841b-4504-a62c-a755c683dcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec64a082-0360-42d8-bed2-fd66c4ec8da3",
        "cursor": {
          "ref": "6a7ac211-b5f5-4558-b4e1-fa22adb84dd1",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "370a76c6-90cf-429d-bbed-ac4f036feef0"
        },
        "item": {
          "id": "ec64a082-0360-42d8-bed2-fd66c4ec8da3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e814950d-8367-42d0-be01-d1e47a519d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ac18e3-7323-49cb-a0ee-addf60eb4c6a",
        "cursor": {
          "ref": "f926b4a2-ce0f-433e-9cc0-d78533f605a8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f22d123f-4aeb-4eca-bbae-fbf3198c55f0"
        },
        "item": {
          "id": "35ac18e3-7323-49cb-a0ee-addf60eb4c6a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1ca6c9d5-0c65-4320-b3a6-38708bf09b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6e8064-c49b-4857-a1db-580c95c0a0fc",
        "cursor": {
          "ref": "dc23286e-861e-4dcb-8264-4df611b8c22d",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ad791fd9-53c9-4f8e-a449-a41a5dfcd042"
        },
        "item": {
          "id": "6d6e8064-c49b-4857-a1db-580c95c0a0fc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7d75254e-c8bd-4232-b7dd-c94d3c4077a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad39724-6bbb-4e38-b540-16626aab22de",
        "cursor": {
          "ref": "a1438eeb-46e2-4d2a-94ea-1eb5bd121dd1",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "32a3e28f-9101-4182-a4a2-340efdc457f5"
        },
        "item": {
          "id": "2ad39724-6bbb-4e38-b540-16626aab22de",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8fe7dbbb-2e4f-4ba0-8ccd-94bb5c1e2e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac07d42c-ca9f-4166-9476-ec9451f54356",
        "cursor": {
          "ref": "228c0694-ca87-411e-bd30-7bfb7230afff",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "db07a6dc-04e3-4a4a-91bd-289e3eca1004"
        },
        "item": {
          "id": "ac07d42c-ca9f-4166-9476-ec9451f54356",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "71001a40-3b8a-4601-be08-a47c2ba8ee58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c873f6-40c2-41db-b691-158f49672a89",
        "cursor": {
          "ref": "3f1fe2d2-d7c6-471b-b21c-84a0a7bf0c8f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "140c983b-1020-49cf-a3ae-ff7ce892a073"
        },
        "item": {
          "id": "c5c873f6-40c2-41db-b691-158f49672a89",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "36b8973b-81a3-48a8-908a-595c68e67e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595b98a0-e7a2-46db-bda7-65c0033338f9",
        "cursor": {
          "ref": "d46f610a-9cac-443e-95f9-8eebb6508e95",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "482abd87-d2c6-4fce-ac5f-94c009cb057e"
        },
        "item": {
          "id": "595b98a0-e7a2-46db-bda7-65c0033338f9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "252a6aad-ebac-48de-b762-a833cdfeb515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def0013c-5806-48cc-8aea-ea0e4b9d4f9b",
        "cursor": {
          "ref": "86e9cd02-316b-4420-8932-b761a56d6a00",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7bbe85a1-7c77-463c-8a63-32f09d74c7ed"
        },
        "item": {
          "id": "def0013c-5806-48cc-8aea-ea0e4b9d4f9b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2ede8b4c-7cb1-4e45-b64e-d481422d2d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbeb0ce-0638-47c1-8d8d-b066f1acef82",
        "cursor": {
          "ref": "1adf82bf-ee43-4409-8bf4-202a0fb52a6d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a0cfdcce-65be-4a87-8d57-a4809c927d99"
        },
        "item": {
          "id": "fdbeb0ce-0638-47c1-8d8d-b066f1acef82",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8bd2cc52-88f6-4059-b972-a499eb03df68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48eaa90f-6a75-400f-b4ee-5463c27beddc",
        "cursor": {
          "ref": "9bd34d7e-fc8f-4a94-9268-e88e19cb81dc",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "60a2cd25-e5dd-4611-82e9-059e3772422a"
        },
        "item": {
          "id": "48eaa90f-6a75-400f-b4ee-5463c27beddc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8a7fcbb3-dba7-4d77-aa1c-184b201219fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c9d075-679b-478c-a59e-9da7d23d9d1a",
        "cursor": {
          "ref": "4ae74e57-c238-4963-8230-c01d7cc4dfac",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "109d3a59-ed8f-4d6c-a142-39aa339cc5ca"
        },
        "item": {
          "id": "25c9d075-679b-478c-a59e-9da7d23d9d1a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ba2f98fd-7dbb-48bb-88c7-29cbd28fba0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cde1d18-f03e-4447-aa5d-75ba206e451f",
        "cursor": {
          "ref": "7b6c26e6-cb7b-42a8-8a40-e5e622a2464b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "122fd5af-ec40-455d-a82e-93dd0d1b1841"
        },
        "item": {
          "id": "3cde1d18-f03e-4447-aa5d-75ba206e451f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1fd37aee-d24b-4114-ada2-0cb8d4fdae8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dc1af9-3be1-4964-8759-a748834a3ed2",
        "cursor": {
          "ref": "ae669880-e8e7-4fa8-a045-76ee1642302a",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9d5490f2-8462-4c4c-b3e2-3c1b0439dbe0"
        },
        "item": {
          "id": "84dc1af9-3be1-4964-8759-a748834a3ed2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "88ed8d02-f7f3-4639-8c31-72ca6afae9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c2b0e6-5b63-4ba0-88e7-084d62b90b6d",
        "cursor": {
          "ref": "2b1f1e32-786f-49e3-9b2a-76db5bcb603e",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d4d358b9-2547-463e-b700-58d8cc2fcec9"
        },
        "item": {
          "id": "13c2b0e6-5b63-4ba0-88e7-084d62b90b6d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "222b8ad3-1fd8-489e-8f44-de077ead1229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7483f7f0-4aad-41c8-9d29-1c9655cd873d",
        "cursor": {
          "ref": "3478a43a-69e7-45ba-aee0-40943bd82efe",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "77dd6e5c-b00e-4923-bae0-c034db402146"
        },
        "item": {
          "id": "7483f7f0-4aad-41c8-9d29-1c9655cd873d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "04f526e7-20ab-4cd5-9348-1004634325ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77daa9ab-4e9d-49ea-82f8-6be877a81b6a",
        "cursor": {
          "ref": "a237f13d-36f5-4073-a3a0-610fa9fd530a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "168d6a1f-6d50-4f3f-9b89-21f9e9eb8445"
        },
        "item": {
          "id": "77daa9ab-4e9d-49ea-82f8-6be877a81b6a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3041749a-894f-4873-8b2e-a3daa947dac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6132f03-5300-4325-a544-7df14492beba",
        "cursor": {
          "ref": "331e2850-c7d9-4e06-b309-f6d18d51cb08",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "49535908-842a-487b-a4f2-9df77166bec2"
        },
        "item": {
          "id": "d6132f03-5300-4325-a544-7df14492beba",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c74c7fc6-d736-4115-8ebc-9f92e09f7831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a77ba1-8c15-4a7d-a0cd-544a36e7d526",
        "cursor": {
          "ref": "ca53fce2-b48f-43e1-bd4d-7809244d6487",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "da8ea0db-3dd1-41fe-971c-4195dcdc17eb"
        },
        "item": {
          "id": "43a77ba1-8c15-4a7d-a0cd-544a36e7d526",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3d53a3f0-b986-4fff-aa7b-33ed4c93e605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3c2ae0-c12e-4bbb-8da4-8a916378b76d",
        "cursor": {
          "ref": "590c77d9-b5b1-4a2c-9333-66cc9c713788",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "44881aed-0a84-4a65-9a28-5240d0ff320c"
        },
        "item": {
          "id": "aa3c2ae0-c12e-4bbb-8da4-8a916378b76d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "452456df-9396-4d06-b793-5f90b9ecd6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab14256-0ee5-4bc2-b064-63a421e8af03",
        "cursor": {
          "ref": "b6f83e14-4b01-4187-9740-3c3b72c69771",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b37327e7-e46e-4b75-a165-358351e5fea6"
        },
        "item": {
          "id": "8ab14256-0ee5-4bc2-b064-63a421e8af03",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "87c27350-3e6e-43d7-864a-d34c4ced3bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcc6da4-1fcf-4793-933f-2e791f3191f2",
        "cursor": {
          "ref": "353afc1d-5268-41b5-b35f-df110cf76f04",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4b0453a6-c2f4-4ac6-bc77-d650a5abfef4"
        },
        "item": {
          "id": "7bcc6da4-1fcf-4793-933f-2e791f3191f2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9e94137a-62af-49fc-905c-3fd1b946ed93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26eeac8c-64bb-4813-93e6-6faa875af98f",
        "cursor": {
          "ref": "7c658ec8-0cca-4de7-8f19-f3e2cdce044d",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6f77a855-0af4-43ff-bb54-c38574408ec8"
        },
        "item": {
          "id": "26eeac8c-64bb-4813-93e6-6faa875af98f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "170d005e-08bb-43ba-b9be-548f75da9183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3c0f21-0333-43c6-b0f2-ea35bef2bbca",
        "cursor": {
          "ref": "69750883-62ea-441c-b132-5c536d813d5b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "43c854b4-36de-48cc-aa0e-ed4559ccddc7"
        },
        "item": {
          "id": "0e3c0f21-0333-43c6-b0f2-ea35bef2bbca",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5e5b68f9-6ead-4c1d-bc89-29f930daf997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384013d6-1089-4691-a390-56987f6a82a2",
        "cursor": {
          "ref": "41ea4685-ab06-4f9e-8ffe-cf4872eb4ff6",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d367c940-1dea-4fdf-bb24-31efba723cbf"
        },
        "item": {
          "id": "384013d6-1089-4691-a390-56987f6a82a2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c36c9dad-a4b9-487a-b609-b48cb2a01821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb9f188-edec-4286-b596-ff8877fc47a0",
        "cursor": {
          "ref": "bd359ecf-d2cd-449a-8e3f-8307f26944be",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9397f554-65ee-4870-8987-4d6a22945996"
        },
        "item": {
          "id": "ecb9f188-edec-4286-b596-ff8877fc47a0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a0c5a007-22e1-4f41-b5e2-f23136939d35",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b08992da-c4e6-4302-b6df-deac0dd38c0f",
        "cursor": {
          "ref": "f5e5beb4-b2f9-4962-902e-14e9a664caab",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f412d828-df1b-4c5d-85da-10b0bcd6df04"
        },
        "item": {
          "id": "b08992da-c4e6-4302-b6df-deac0dd38c0f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1d053baa-a992-415a-8eac-ac623a302ae0",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "599107c6-09e0-43aa-bef6-f64a7ebab329",
        "cursor": {
          "ref": "32813ac7-c425-45fb-b7f6-5d8b5ee9c7e3",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "53b45070-2552-4d6b-b58b-5ecc3b90ad53"
        },
        "item": {
          "id": "599107c6-09e0-43aa-bef6-f64a7ebab329",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "637a9991-612d-4493-82bb-754a53a957aa",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "17520730-ad9b-4013-828c-afe32f30d977",
        "cursor": {
          "ref": "bc1a5371-5db2-4e9a-83b0-a8871c794e34",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bf231242-cdd9-4aa2-b326-d9567c84b3a3"
        },
        "item": {
          "id": "17520730-ad9b-4013-828c-afe32f30d977",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9a30218f-f7d1-4274-a7c3-f8a7a4e9a2ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17520730-ad9b-4013-828c-afe32f30d977",
        "cursor": {
          "ref": "bc1a5371-5db2-4e9a-83b0-a8871c794e34",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bf231242-cdd9-4aa2-b326-d9567c84b3a3"
        },
        "item": {
          "id": "17520730-ad9b-4013-828c-afe32f30d977",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9a30218f-f7d1-4274-a7c3-f8a7a4e9a2ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b1b26e-c048-4a88-a28e-b66226abf4cc",
        "cursor": {
          "ref": "a6656e5f-b35a-4687-8c8e-650ba3504d10",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3e1bed80-4fc6-4519-b529-e449fc3f61fc"
        },
        "item": {
          "id": "33b1b26e-c048-4a88-a28e-b66226abf4cc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bd3968f5-d3ae-4a45-81fb-3d281368be0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70e932c-9927-45f1-a311-fedc0978d232",
        "cursor": {
          "ref": "20a58b0a-5748-4534-acab-7b8f169025ad",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "265f0a4e-2fad-4e06-90af-3429837c6fc6"
        },
        "item": {
          "id": "b70e932c-9927-45f1-a311-fedc0978d232",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3eb38523-fd2f-4c90-be40-0785ab143d30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}